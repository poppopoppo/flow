# 1 "imp_lexer.mll"
 
    open Imp_parser
    exception Error of string

# 7 "imp_lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\186\255\187\255\007\000\079\000\005\000\021\000\196\255\
    \023\000\052\000\204\255\206\255\207\255\208\255\209\255\216\255\
    \217\255\048\000\219\255\227\255\228\255\089\000\232\255\235\255\
    \001\000\086\000\132\000\129\000\248\255\009\000\089\000\004\000\
    \131\000\255\255\132\000\133\000\136\000\003\000\090\000\104\000\
    \092\000\240\255\226\255\131\000\249\255\065\000\001\000\106\000\
    \250\255\233\255\241\255\005\000\025\000\099\000\006\000\024\000\
    \017\000\000\000\033\000\135\000\221\255\222\255\223\255\224\255\
    \225\255\062\000\247\255\229\255\220\255\244\255\238\255\236\255\
    \237\255\214\255\215\255\212\255\213\255\203\255\210\255\211\255\
    \201\255\122\000\193\255\199\255\200\255\246\255\072\001\243\255\
    \005\000\239\255\248\000\218\255\192\255\191\255\008\000\254\255\
    \255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\067\000\066\000\061\000\060\000\255\255\
    \058\000\057\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\069\000\255\255\255\255\255\255\069\000\255\255\255\255\
    \024\000\050\000\010\000\069\000\255\255\069\000\069\000\001\000\
    \069\000\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \002\000\255\255\255\255\013\000\255\255\003\000\255\255\004\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\065\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\053\000\255\255\255\255\255\255\255\255\010\000\255\255\
    \255\255\255\255\025\000\255\255\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\255\255\000\000\000\000\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\031\000\
    \034\000\000\000\034\000\034\000\034\000\255\255\038\000\038\000\
    \038\000\000\000\000\000\255\255\000\000\255\255\255\255\255\255\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\255\255\000\000\
    \255\255\000\000\255\255\000\000\000\000\000\000\095\000\000\000\
    \000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\003\000\003\000\000\000\000\000\003\000\255\255\000\000\
    \003\000\003\000\096\000\000\000\003\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \003\000\010\000\032\000\000\000\006\000\021\000\013\000\003\000\
    \012\000\011\000\008\000\009\000\005\000\007\000\030\000\017\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\022\000\031\000\006\000\025\000\093\000\023\000\
    \005\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\092\000\028\000\020\000\019\000\091\000\
    \018\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\016\000\024\000\015\000\014\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\087\000\038\000\039\000\040\000\039\000\
    \048\000\067\000\083\000\081\000\080\000\074\000\073\000\072\000\
    \071\000\082\000\070\000\039\000\069\000\033\000\033\000\036\000\
    \047\000\084\000\033\000\085\000\076\000\075\000\000\000\042\000\
    \045\000\050\000\000\000\068\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\041\000\044\000\
    \089\000\000\000\029\000\088\000\043\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\035\000\
    \035\000\035\000\027\000\086\000\035\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\049\000\
    \002\000\053\000\055\000\046\000\255\255\051\000\077\000\066\000\
    \255\255\059\000\058\000\057\000\056\000\060\000\061\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\062\000\063\000\064\000\
    \052\000\000\000\000\000\037\000\079\000\078\000\000\000\000\000\
    \054\000\000\000\000\000\000\000\000\000\000\000\000\000\065\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\085\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\000\000\255\255\255\255\255\255\000\000\000\000\
    \255\255\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\086\000\000\000\000\000\000\000\000\000\086\000\
    \000\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\086\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\000\000\031\000\255\255\
    \003\000\003\000\094\000\255\255\003\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\003\000\
    \000\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\006\000\000\000\008\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\009\000\000\000\000\000\000\000\017\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\025\000\030\000\038\000\039\000\040\000\
    \047\000\065\000\051\000\052\000\052\000\055\000\055\000\056\000\
    \056\000\081\000\057\000\039\000\058\000\032\000\034\000\035\000\
    \046\000\051\000\036\000\026\000\054\000\054\000\255\255\029\000\
    \029\000\043\000\255\255\058\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\037\000\029\000\
    \088\000\255\255\000\000\024\000\029\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\032\000\
    \034\000\035\000\000\000\026\000\036\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\043\000\
    \000\000\027\000\027\000\045\000\031\000\027\000\053\000\059\000\
    \094\000\027\000\027\000\027\000\027\000\059\000\059\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\059\000\059\000\059\000\
    \027\000\255\255\255\255\030\000\053\000\053\000\255\255\255\255\
    \027\000\255\255\255\255\255\255\255\255\255\255\255\255\059\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\038\000\255\255\040\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \039\000\255\255\255\255\255\255\255\255\255\255\255\255\086\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\255\255\032\000\034\000\035\000\255\255\255\255\
    \036\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\086\000\255\255\255\255\255\255\255\255\086\000\
    \255\255\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\086\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 16 "imp_lexer.mll"
                                  lxm
# 223 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) (lexbuf.Lexing.lex_curr_pos + -1) in
# 16 "imp_lexer.mll"
                                            ( STG(lxm) )
# 227 "imp_lexer.ml"

  | 1 ->
# 17 "imp_lexer.mll"
                    ( Util.pnt true "start line comment\n"; token lexbuf )
# 232 "imp_lexer.ml"

  | 2 ->
# 18 "imp_lexer.mll"
                      ( token lexbuf )
# 237 "imp_lexer.ml"

  | 3 ->
# 19 "imp_lexer.mll"
            ( LCE )
# 242 "imp_lexer.ml"

  | 4 ->
# 20 "imp_lexer.mll"
              ( MDL )
# 247 "imp_lexer.ml"

  | 5 ->
# 21 "imp_lexer.mll"
              ( MDL_END )
# 252 "imp_lexer.ml"

  | 6 ->
# 22 "imp_lexer.mll"
           ( DTA )
# 257 "imp_lexer.ml"

  | 7 ->
# 23 "imp_lexer.mll"
            ( SLH )
# 262 "imp_lexer.ml"

  | 8 ->
# 24 "imp_lexer.mll"
            ( FOR_ALL )
# 267 "imp_lexer.ml"

  | 9 ->
let
# 25 "imp_lexer.mll"
               lxm
# 273 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_curr_pos + -1) in
# 25 "imp_lexer.mll"
                         ( VAL(lxm) )
# 277 "imp_lexer.ml"

  | 10 ->
let
# 26 "imp_lexer.mll"
              lxm
# 283 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 26 "imp_lexer.mll"
                  ( NAM(lxm) )
# 287 "imp_lexer.ml"

  | 11 ->
# 27 "imp_lexer.mll"
            ( ISO )
# 292 "imp_lexer.ml"

  | 12 ->
# 28 "imp_lexer.mll"
            ( EQV )
# 297 "imp_lexer.ml"

  | 13 ->
# 29 "imp_lexer.mll"
           ( ARR       )
# 302 "imp_lexer.ml"

  | 14 ->
# 30 "imp_lexer.mll"
             ( ARR_END )
# 307 "imp_lexer.ml"

  | 15 ->
# 31 "imp_lexer.mll"
            ( ARR_STT )
# 312 "imp_lexer.ml"

  | 16 ->
# 32 "imp_lexer.mll"
            ( IO_STT )
# 317 "imp_lexer.ml"

  | 17 ->
# 33 "imp_lexer.mll"
            ( SRC )
# 322 "imp_lexer.ml"

  | 18 ->
# 34 "imp_lexer.mll"
            ( EMT )
# 327 "imp_lexer.ml"

  | 19 ->
# 35 "imp_lexer.mll"
            ( CNT )
# 332 "imp_lexer.ml"

  | 20 ->
# 36 "imp_lexer.mll"
          ( ARG )
# 337 "imp_lexer.ml"

  | 21 ->
# 37 "imp_lexer.mll"
             ( IN )
# 342 "imp_lexer.ml"

  | 22 ->
# 38 "imp_lexer.mll"
             ( OUT )
# 347 "imp_lexer.ml"

  | 23 ->
# 39 "imp_lexer.mll"
          ( CLN )
# 352 "imp_lexer.ml"

  | 24 ->
# 40 "imp_lexer.mll"
          ( SPL )
# 357 "imp_lexer.ml"

  | 25 ->
let
# 41 "imp_lexer.mll"
                     lxm
# 363 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) lexbuf.Lexing.lex_curr_pos in
# 41 "imp_lexer.mll"
                          ( MCR(lxm) )
# 367 "imp_lexer.ml"

  | 26 ->
# 42 "imp_lexer.mll"
                 ( AGL )
# 372 "imp_lexer.ml"

  | 27 ->
# 43 "imp_lexer.mll"
          ( AGL_END )
# 377 "imp_lexer.ml"

  | 28 ->
# 44 "imp_lexer.mll"
          ( SEQ )
# 382 "imp_lexer.ml"

  | 29 ->
# 45 "imp_lexer.mll"
            ( M_HLZ )
# 387 "imp_lexer.ml"

  | 30 ->
# 46 "imp_lexer.mll"
              ( COPRD )
# 392 "imp_lexer.ml"

  | 31 ->
# 47 "imp_lexer.mll"
              ( PRD )
# 397 "imp_lexer.ml"

  | 32 ->
# 48 "imp_lexer.mll"
            ( EOP )
# 402 "imp_lexer.ml"

  | 33 ->
# 49 "imp_lexer.mll"
            ( COPRD_END )
# 407 "imp_lexer.ml"

  | 34 ->
# 50 "imp_lexer.mll"
            ( PRD_END )
# 412 "imp_lexer.ml"

  | 35 ->
# 51 "imp_lexer.mll"
            ( DEF )
# 417 "imp_lexer.ml"

  | 36 ->
# 52 "imp_lexer.mll"
          ( ACT )
# 422 "imp_lexer.ml"

  | 37 ->
# 53 "imp_lexer.mll"
            ( CST )
# 427 "imp_lexer.ml"

  | 38 ->
# 54 "imp_lexer.mll"
          ( L_RCD )
# 432 "imp_lexer.ml"

  | 39 ->
# 55 "imp_lexer.mll"
          ( R_RCD )
# 437 "imp_lexer.ml"

  | 40 ->
# 56 "imp_lexer.mll"
            ( L_HLZ )
# 442 "imp_lexer.ml"

  | 41 ->
# 57 "imp_lexer.mll"
            ( R_HLZ  )
# 447 "imp_lexer.ml"

  | 42 ->
# 58 "imp_lexer.mll"
            ( L_LST )
# 452 "imp_lexer.ml"

  | 43 ->
# 59 "imp_lexer.mll"
            ( R_LST )
# 457 "imp_lexer.ml"

  | 44 ->
# 60 "imp_lexer.mll"
            ( L_OPN )
# 462 "imp_lexer.ml"

  | 45 ->
# 61 "imp_lexer.mll"
            ( R_OPN )
# 467 "imp_lexer.ml"

  | 46 ->
# 62 "imp_lexer.mll"
          ( CNN )
# 472 "imp_lexer.ml"

  | 47 ->
# 63 "imp_lexer.mll"
          ( SGN )
# 477 "imp_lexer.ml"

  | 48 ->
# 64 "imp_lexer.mll"
          ( L_PRN )
# 482 "imp_lexer.ml"

  | 49 ->
# 65 "imp_lexer.mll"
          ( R_PRN )
# 487 "imp_lexer.ml"

  | 50 ->
# 66 "imp_lexer.mll"
          ( EQ )
# 492 "imp_lexer.ml"

  | 51 ->
# 67 "imp_lexer.mll"
          ( EXP )
# 497 "imp_lexer.ml"

  | 52 ->
# 68 "imp_lexer.mll"
            ( R_APP )
# 502 "imp_lexer.ml"

  | 53 ->
# 69 "imp_lexer.mll"
            ( APP )
# 507 "imp_lexer.ml"

  | 54 ->
# 70 "imp_lexer.mll"
            ( PRJ )
# 512 "imp_lexer.ml"

  | 55 ->
# 71 "imp_lexer.mll"
            ( Z )
# 517 "imp_lexer.ml"

  | 56 ->
# 72 "imp_lexer.mll"
            ( N )
# 522 "imp_lexer.ml"

  | 57 ->
# 73 "imp_lexer.mll"
          ( PLS )
# 527 "imp_lexer.ml"

  | 58 ->
# 74 "imp_lexer.mll"
          ( MLT )
# 532 "imp_lexer.ml"

  | 59 ->
# 75 "imp_lexer.mll"
          ( MNS )
# 537 "imp_lexer.ml"

  | 60 ->
let
# 76 "imp_lexer.mll"
                      lxm
# 543 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) lexbuf.Lexing.lex_curr_pos in
# 76 "imp_lexer.mll"
                           ( ROT (String.length lxm) )
# 547 "imp_lexer.ml"

  | 61 ->
let
# 77 "imp_lexer.mll"
                      lxm
# 553 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) lexbuf.Lexing.lex_curr_pos in
# 77 "imp_lexer.mll"
                           ( SLF (String.length lxm) )
# 557 "imp_lexer.ml"

  | 62 ->
# 78 "imp_lexer.mll"
              ( APP_EVL )
# 562 "imp_lexer.ml"

  | 63 ->
# 79 "imp_lexer.mll"
            ( PLS_EVL )
# 567 "imp_lexer.ml"

  | 64 ->
# 80 "imp_lexer.mll"
            ( MLT_EVL )
# 572 "imp_lexer.ml"

  | 65 ->
# 81 "imp_lexer.mll"
             ( AGL )
# 577 "imp_lexer.ml"

  | 66 ->
let
# 82 "imp_lexer.mll"
                lxm
# 583 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 82 "imp_lexer.mll"
                     ( INT (int_of_string lxm) )
# 587 "imp_lexer.ml"

  | 67 ->
# 83 "imp_lexer.mll"
                    ( token lexbuf                         )
# 592 "imp_lexer.ml"

  | 68 ->
# 84 "imp_lexer.mll"
                    ( EOF               )
# 597 "imp_lexer.ml"

  | 69 ->
# 85 "imp_lexer.mll"
                    ( raise (Error (Printf.sprintf
                      "At offset %d: unexpected character.\n"
                      (Lexing.lexeme_start lexbuf))) )
# 604 "imp_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and line_comment lexbuf =
   __ocaml_lex_line_comment_rec lexbuf 94
and __ocaml_lex_line_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 89 "imp_lexer.mll"
          ( Util.pnt true "end line comment\n"; token lexbuf )
# 616 "imp_lexer.ml"

  | 1 ->
# 90 "imp_lexer.mll"
      ( line_comment lexbuf )
# 621 "imp_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_line_comment_rec lexbuf __ocaml_lex_state

;;

