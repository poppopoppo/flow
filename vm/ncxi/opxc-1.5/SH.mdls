§ setge { x y } 
	∐ y'=<x' .
		∎ { x y %[ 1r ] }
	∐. . 
		∎ { x y %[ 0r ] }
§ set_q { v i a } 
	_exc_q { v i a } ⊢ { v i _ } 
	∎ { v i }
§ set_o { v i a } 
	_some a ⊢ o 
	set_q { v i o } ⊢ { v i } 
	∎ { v i }
§ get_q = _lod_q 
§ exc_q = _exc_q
§ mk_arr = _mk_arr
§ arr_of_lst = _arr_of_lst 
§ arr_of_lst_len l 
  arr_of_lst l ⊢ a 
  _arr_len a ⊢ { a n } 
  ∎ { a n }

§ exc_tv { tv i v0 } 
  _some v0 ⊢ v0 
  _exc_q { tv i v0 } ⊢ { tv i v0 } 
  ∐ v0 ⊢ _some◂v0 . 
    ∎ { tv i v0 } 
  ∐. . 
    _emt %[ "exc_tv 0" ] ⊢ _ 
    ∎| 
§ lod_tv { tv i } 
  _lod_q { tv i } ⊢ { tv i v } 
  ∐ v ⊢ _some◂v . 
    ∎ { tv i v } 
  ∐. . 
    _emt %[ "lod_tv 0" ] ⊢ _ 
    _emt i ⊢ _ 
    ∎| 
§ set_tv { tv i v } 
  _some v ⊢ v 
  _exc_q { tv i v } ⊢ { tv i v } 
  ∐ v ⊢ _none◂{} . 
    ∎ { tv i }
  ∐. . 
    _emt %[ "set_tv 0" ] ⊢ _ 
    ∎|
§ ini_tv {} 
  » 162800r _ ⊢ max_t 
	_none {} ⊢ o 
  mk_arr { max_t o } ⊢ { _ _ tv }
  ∎ tv 
§ ini_tv_n n 
  _none {} ⊢ o 
  mk_arr { n o } ⊢ { n _ tv } 
  ∎ { n tv }
§ rep_movsb { c0 s0 o0 s1 o1 } 
  _rep_movsb { c0 s0 o0 s1 o1 } ⊢ { c0 s0 o0 s1 o1 } 
  _add { o0 c0 } ⊢ { o0 c0 } 
  _add { o1 c0 } ⊢ { o1 c0 }
  ∎ { c0 s0 o0 s1 o1 }
¶ sum2 a0',a1' 
	∐ in0 : a0' 
	∐ in1 : a1' 
§ op_x◂◂F k 
	$ k ⊢ k,k0 
	F k0 ⊢ a 
	∎ { k a } 
§ op_x_v◂◂F { v k } 
	$ k ⊢ k,k0 
	F { v k0 } ⊢ { v a } 
	∎ { v k a }
§§+s8 @.eof
	∐ _byt !| ⊢ { _ } 
		∎ _none◂{}
	∐. ⊢ { } 
		∎ _some◂{} 
§§+s8 @.nl_eof 
	∐# "\n" ⊢ { {} } 
		∎ _some◂{} 
	∐.# eof ⊢ { {} } 
		∎ _some◂{}
§ @.for◂◂F { v n i }
	∐ n'=i' . 
		∎ { v n } 
	∐. . 
		$ i ⊢ i,i0 
		F { v i0 } ⊢ v 
		_inc i ⊢ i 
		for◂◂F { v n i } ⊢| 
§ for_0◂◂F { v n } 
	for◂◂F { v n %[ 0r ] } ⊢|
§§ bl 
	¶ t 
		∐ t : {} 
		∐ f : {}
	§ and { b0 b1 } 
		∐ b0 ⊢ t◂{}; b1 ⊢ t◂{} . 
			∎ t◂{}
		∐. . 
			∎ f◂{}
	§ or { b0 b1 } 
		∐ b0 ⊢ f◂{}; b1 ⊢ f◂{} . 
			∎ f◂{}
		∐. . 
			∎ t◂{}
	§ sub { b0 b1 } 
		∐ b1 ⊢ f◂{} . 
			∎ b0 
		∐. . 
			∎ f◂{}
	§ not b 
		∐ b ⊢ f◂{} . 
			∎ t◂{} 
		∐. . 
			∎ f◂{}
	∎∎
§ t = bl.t 
§ f = bl.f
§ err s 
	_emt s ⊢ _ 
	∎| 

§ mk_none_arr n 
	mk_arr { n _none◂{} } ⊢ { n _ v } 
	∎ { n v }

§ mk_nil_arr n 
	mk_arr { n _nil◂{} } ⊢ { n _ v } 
	∎ { n v }

\[
unsigned long
    hash(unsigned char *str)
    {
        unsigned long hash = 5381;
        int c;

        while (c = *str++)
            hash = ((hash << 5) + hash) + c; /* hash * 33 + c */

        return hash;
    }
\]
§§ s8 
	§ @.itr_i◂◂F { v s l i } 
		∐ l'=i' . 
			∎ { v s } 
		∐. . 
			_lds { s i } ⊢ { s i b } 
			$ i ⊢ i,i0 
			F { v i0 b } ⊢ v 
			_inc i ⊢ i 
			itr_i◂◂F { v s l i } ⊢| 
	§ itr◂◂F { v s } 
		_s8_len s ⊢ { s l } 
		itr_i◂◂F { v s l %[ 0r ] } ⊢| 
	§§ hsh 
		§ f_i { h i b } 
			$ h ⊢ h,h0 
			_shl { h %[ 5r ] } ⊢ { h _ } 
			_add { h h0 } ⊢ { h _ } 
			_add { h b } ⊢ { h _ } 
			∎ h 
		§ f s 
			_s8_len s ⊢ { s l } 
			itr◂◂f_i { %[ 5381r ] s } ⊢| 
		∎∎
	§§ hsh_tbl 
		¶ bgt a' = _lst◂{ _s8 a' }
		¶ t◂a' = _arr◂(bgt◂a')
		§ N = 0xffr 
		§ ini {} 
			mk_nil_arr %[ N ] ⊢ { _ v } 
			∎ v 
		
		∎∎
	∎∎
§§ rp8 
	¶ @.t 
		∐ nd : { t _r64 t } 
		∐ lf : _s8 
		∐ e : {} 
		∐ chr : _r64 
	
	§ of_s8 s 
		∎ lf◂s
	§ len r 
		$ r ⊢ 
		∐ nd◂{ r0 l r1 } .
			$ l ⊢ l,l0 
			∎ { nd◂{ r0 l0 r1 } l }
		∐ chr◂c .
			∎ { chr◂c %[ 1r ] }  
    ∐ e◂{} . 
			∎ { e◂{} %[ 0r ] } 
		∐. lf◂s . 
			_s8_len s ⊢ { s l } 
			∎ { lf◂s l }
	§ add_s8 { e s } 
		_s8_len s ⊢ { s l } 
		len e ⊢ { e le } 
		_add { l le } ⊢ { l le } 
		∎ nd◂{ %e %l lf◂%s }  
	§ pfx_s8 { s e } 
		_s8_len s ⊢ { s l } 
		len e ⊢ { e le } 
		_add { l le } ⊢ { l le } 
		∎ nd◂{ lf◂%s %l %e }
	§ add_chr { e c } 
		len e ⊢ { e le } 
		_inc le ⊢ le 
		∎ nd◂{ %e %le chr◂%c } 
	§ pfx_chr { c e } 
		len e ⊢ { e le } 
		_inc le ⊢ le 
		∎ nd◂{ chr◂%c le e } 
	§ cct { r0 r1 }
		len r0 ⊢ { r0 l0 } 
		len r1 ⊢ { r1 l1 } 
		_add { l0 l1 } ⊢ { l0 l1 } 
		∎ nd◂{ r0 l0 r1 }
	§ @.mk_s8_i { r s i }
		$ r ⊢ 
		∐ nd◂{ r0 l r1 } .
			mk_s8_i { r0 s i } ⊢ { r0 s i } 
			mk_s8_i { r1 s i } ⊢ { r1 s i }
			∎ { nd◂{ r0 l r1 } s i }
		∐ e◂{} . 
			∎ { e◂{} s i } 
		∐ chr◂c . 
			_sts { s i c } ⊢ { s i c }
			_inc i ⊢ i
			∎ { chr◂%c s i }
		∐. lf◂s0 . 
			_s8_len s0 ⊢ { s0 l0 } 
			rep_movsb { l0 s0 %[ 0r ] s i } ⊢ { l0 s0 i0 s i }
			∎ { lf◂%s0 s i } 
	§ mk_s8 r 
		len r ⊢ { r l }
		_mlc_s8 l ⊢ { l s }
		» 0r _ ⊢ i 
		mk_s8_i { r s i } ⊢ { r s i }
		∎ { r s }
	§ @.to_s8_i { r s i }
		$ r ⊢ 
		∐ nd◂{ r0 lm r1 } .
			$ lm ⊢ _ 
			to_s8_i { r0 s i } ⊢ { s i } 
			to_s8_i { r1 s i } ⊢ { s i }
			∎ { s i }
		∐ e◂{} . 
			∎ { s i } 
		∐ chr◂c . 
			_sts { s i c } ⊢ { s i _ }
			_inc i ⊢ i
			∎ { s i }
		∐. lf◂s0 . 
			_s8_len s0 ⊢ { s0 l0 } 
			» 0r _ ⊢ i0 
			rep_movsb { l0 s0 i0 s i } ⊢ { _ _ _ s i }
			∎ { s i } 
	§ to_s8 r 
		len r ⊢ { r l }
		_mlc_s8 l ⊢ { l s }
		» 0r _ ⊢ i 
		to_s8_i { r s i } ⊢ { s _ }
		∎ s
	∎∎
§ incq n 
	» 8r _ ⊢ i 
	_add { n i } ⊢ { n _ } 
	∎ n 

§ decq n 
	» 8r _ ⊢ i 
	_sub { n i } ⊢ { n _ } 
	∎ n 
		
§ smt o 
	∐ o ⊢ _some◂a .
		∎ a 
	∐. . 
		» "smt 0" _ ⊢ ee0 
		_emt ee0 ⊢ _ 
		∎| 
§ smt_err { o e } 
	∐ o ⊢ _some◂a .
		∎ a 
	∐. . 
		» "smt 0" _ ⊢ ee0 
		_emt ee0 ⊢ _ 
		_emt e ⊢ _ 
		∎| 
§ nnt o 
	∐ o ⊢ _none◂{} .
		∎ {} 
	∐. . 
		» "nnt 0" _ ⊢ ee0 
		_emt ee0 ⊢ _ 
		∎| 
§ nnt_emt { o x } 
	∐ o ⊢ _none◂{} .
		∎ x
	∐. . 
		» "nnt_emt 0" _ ⊢ ee0 
		_emt ee0 ⊢ _ 
		_emt x ⊢ _ 
		∎| 
§ nnt_err { o e }  
	∐ o ⊢ _none◂{} .
		∎ {} 
	∐. . 
		» "nnt 0" _ ⊢ ee0 
		_emt ee0 ⊢ _ 
		_emt e ⊢ _ 
		∎| 
§ lod_o { v i } 
	_lod_q { v i } ⊢ { v i o } 
	» "lod_o" _ ⊢ e 
	smt_err { o e } ⊢ a 
	∎ { v i a } 
§ set_o { v i a } 
	_some a ⊢ o 
	set_q { v i o } ⊢ { v i } 
	∎ { v i }
¶ iso a' 
	∐ iso : a' 
§ inv a 
	$ a ⊢ 
	∐. iso◂a . 
		∎ a

§ KB = 1024r 
§ inc_x x 
	$ x ⊢ x,x0 
	_inc x0 ⊢ x0 
	∎ { x x0 } 
§ max { x y } 
	∐ x'=<y' . 
		$ y ⊢ y,y0 
		∎ { x y y0 } 
	∐. . 
		$ x ⊢ x,x0 
		∎ { x y x0 }
§ cns1◂a = _cns◂{ a _nil◂{} } 
§ cns2◂{ a0 a1 } = _cns◂{ a0 _cns◂{ a1 _nil◂{} } }
§ cns3◂{ a0 a1 a2 } = _cns◂{ a0 _cns◂{ a1 _cns◂{ a2 _nil◂{} } } }
§ cns4◂{ a0 a1 a2 a3 } = _cns◂{ a0 _cns◂{ a1 _cns◂{ a2 _cns◂{ a3 _nil◂{} } } } }
§ cns5◂{ a0 a1 a2 a3 a4 } = _cns◂{ a0 _cns◂{ a1 _cns◂{ a2 _cns◂{ a3 _cns◂{ a4 _nil◂{} } } } } }
§§ arr 
	§ @.mlt_i◂◂M { v0 v1 l i } 
		∐ l'=i' . 
			∎ { v0 v1 } 
		∐. . 
			_lod_q { v0 i } ⊢ { v0 i b0 } 
			_lod_q { v1 i } ⊢ { v1 i b1 }
			M { b0 b1 } ⊢ b2 
			exc_q { v0 i b2 } ⊢ { v0 i _ } 
			_inc i ⊢ i 
			mlt_i◂◂M { v0 v1 l i } ⊢|  
	§ mlt◂◂M { v0 v1 } 
		_arr_len v0 ⊢ { v0 l0 } 
		_arr_len v1 ⊢ { v1 l1 } 
		∐ l0'=l1' . 
			mlt_i◂◂M { v0 v1 l0 %[ 0r ] } ⊢| 
		∐. . 
			_emt %[ "op2 0" ] ⊢ _ 
			∎| 
	§ @.fnd_lft_i◂◂T { a l i } 
		∐ l'=i' . 
			_none {} ⊢ o
			∎ { a o } 
		∐. . 
			_lod_q { a i } ⊢ { a i v } 
			T v ⊢ { v b } 
			∐ b ⊢ bl.t◂{} . 
				_some { i v } ⊢ o 
				∎ { a o }
			∐. . 
				_inc i ⊢ i 
				fnd_lft_i◂◂T { a l i } ⊢| 
	§ fnd_lft◂◂T a 
		_arr_len a ⊢ { a l } 
		fnd_lft_i◂◂T { a l %[ 0r ] } ⊢|
	§ @.itr_lft_i◂◂F { a s l i } 
		∐ l'=i' . 
			∎ { a s } 
		∐. . 
			_lod_q { a i } ⊢ { a i v } 
			$ i ⊢ i,i0 
			F { s i0 v } ⊢ s 
			_inc i ⊢ i 
			itr_lft_i◂◂F { a s l i } ⊢| 
	§ itr_lft◂◂F { a s }
		_arr_len a ⊢ { a l } 
		itr_lft_i◂◂F { a s l %[ 0r ] } ⊢| 

	∎∎

¶ @.p_lst ◂ a'
 	∐ p_cns : { a' p_lst◂a' }
	∐ p_end : a'

§ @.rev_i { l0 l1 }
	∐ l1 ⊢ _nil◂{} .
		∎ l0
	∐. l1 ⊢ _cns◂{ hd tl } .
		_cns { hd l0 } ⊢ l0
		rev_i { l0 tl } ⊢ l0
		∎ l0
§ rev l
	$ _nil◂{} ⊢ l0
	rev_i { l0 l } ⊢ l0
	∎ l0
§ @.apnd { l0 l1 }
	$ l0 ⊢ 
	∐ _cns◂{ hd l0 } . 
		apnd { l0 l1 } ⊢ l 
		_cns { hd l } ⊢ l 
		∎ l 
	∐. _nil◂{} . 
		∎ l1 
§ @.rev_apnd { l0 l1 }
	$ l0 ⊢ 
	∐ _cns◂{ hd l0 } . 
		_cns { hd l1 } ⊢ l1 
		rev_apnd { l0 l1 } ⊢|
	∐. _nil◂{} . 
		∎ l1 
§ @.pop_n { n l }
	∐ n'=0r . 
		$ _nil◂{} ⊢ r 
		∎ { r l } 
	∐. .
		_dec n ⊢ n 
		$ l ⊢ 
		∐ _cns◂{ a l } . 
			pop_n { n l } ⊢ { r l } 
			_cns { a r } ⊢ r 
			∎ { r l } 
		∐. _nil◂{} . 
			∎ { _nil◂{} _nil◂{} }

§ @.s8_of_s8_lst_i { l sl }
	$ sl ⊢ 
	∐ _cns◂{ s sl } . 
		_s8_len s ⊢ { s b }
		_add { l b } ⊢ { l b } 
		s8_of_s8_lst_i { l sl } ⊢ { sr n } 
		» 0r _ ⊢ o0 
		$ b ⊢ b,b0 
		rep_movsb { b s o0 sr n } ⊢ { b s o0 sr n } 
		∎ { sr n } 
	∐. _nil◂{} . 
		_mlc_s8 l ⊢ { l sr } 
		» 0r _ ⊢ o 
		∎ { sr o }
§ s8_of_s8_lst l 
	» 0r _ ⊢ i 
	s8_of_s8_lst_i { i l } ⊢ { s n } 
	∎ s 

§ @.assoc { l k }
	∐ l ⊢ _cns◂{ { k0 o0 } l } .
		∐ k'=k0' .
			∐ o0 ⊢ _some◂v0 .
				$ v0 ⊢ v0,v1
				_some v0 ⊢ o0
				_cns { { k0 o0 } l } ⊢ l
				_some v1 ⊢ r1
				∎ { l k r1 }
			∐. .
				_cns { { k0 o0 } l } ⊢ l
				_none {} ⊢ r1
				∎ { l k r1 }
		∐. .
			assoc { l k } ⊢ { l k r0 }
			_cns { { k0 o0 } l } ⊢ l
			∎ { l k r0 }
	∐. .
		_none {} ⊢ r1
		∎ { l k r1 }	

§§ opn 
	§ eq_T◂◂E { a b } 
		∐ a ⊢ _some◂a; b ⊢ _some◂b . 
			E { a b } ⊢ { a b t } 
			_some a ⊢ a 
			_some b ⊢ b 
			∎ { a b t } 
		∐ a ⊢ _none◂{}; b ⊢ _none◂{} . 
			_none {} ⊢ a 
			_none {} ⊢ b 
			bl.t {} ⊢ t 
			∎ { a b t } 
		∐. . 
			bl.f {} ⊢ t 
			∎ { a b t }
	§ pnt◂◂P { v o } 
		$ o ⊢ 
		∐ _some◂a . 
			P { v a } ⊢ { v s } 
			^ s ⊢ _,s 
				"_some◂" 0' // 
			∎ { v s } 
		∐. _none◂{} . 
			∎ { v %[ "_none◂{}" ] }
	§ eq_st_T◂◂E { e a b }
		∐ a ⊢ _some◂a; b ⊢ _some◂b . 
			E { e a b } ⊢ { e a b t } 
			_some a ⊢ a 
			_some b ⊢ b 
			∎ { e a b t } 
		∐ a ⊢ _none◂{}; b ⊢ _none◂{} . 
			_none {} ⊢ a 
			_none {} ⊢ b 
			bl.t {} ⊢ t 
			∎ { e a b t } 
		∐. . 
			bl.f {} ⊢ t 
			∎ { e a b t } 
	∎∎
§§ lst
	¶ t a' = _lst◂a' 
	§ assoc = assoc 
	§ rev = rev 
	§ apnd = apnd 
	
	§§+s8 
		@.stx_line◂+◂G 
			∐# G stx_line◂+◂G ⊢ { a l } 
				∎ _some◂_cns◂{ a l } 
			∐.# ⊢ { } 
				∎ _some◂_nil◂{}
	§§+s8 
		@.stx_synt◂+◂G 
			∐* G stx_line◂+◂G ⊢ { a l } 
				∎ _some◂_cns◂{ a l } 
			∐.* ⊢ { } 
				∎ _some◂_nil◂{}
		§§+s8
		@.stx_cmm_tl◂+◂G 
			∐# "," !| G stx_cmm_tl◂+◂G ⊢ { {} a l } 
				∎ _some◂_cns◂{ a l } 
			∐.# ⊢ { } 
				∎ _some◂_nil◂{} 
	
	§§+s8 
		@.stx_cmm◂+◂H
			∐# H stx_cmm_tl◂+◂H ⊢ { a l } 
				∎ _some◂_cns◂{ a l } 
			∐.# ⊢ { } 
				∎ _some◂_nil◂{} 
		
		§ @.eq_v◂◂{ E D } { v l0 l1 } 
		∐ l0 ⊢ _cns◂{ p0 l0 }; l1 ⊢ _cns◂{ p1 l1 } .
			E { v p0 p1 } ⊢ { v p0 p1 b0 } 
			eq_v◂◂{ E D } { v l0 l1 } ⊢ { v l0 l1 b1 } 
			bl.and { b0 b1 } ⊢ b 
			∎ { v _cns◂{ p0 l0 } _cns◂{ p1 l1 } b }
		∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
			∎ { v _nil◂{} _nil◂{} bl.t◂{} }
		∐. . 
			D { v l0 l1 } ⊢|
	§ eq_v_exn { v l0 l1 } 
		_emt %[ "eq_v 0" ] ⊢ _ 
		∎| 
	§ eq_v_f { v l0 l1 } 
		∎ { v l0 l1 bl.f◂{} }
	§ eq_v_err◂◂E { v l0 l1 } 
		eq_v◂◂{ E eq_v_exn } { v l0 l1 } ⊢|  
	§ eq_v_f◂◂E { v l0 l1 } 
	 	eq_v◂◂{ E eq_v_f } { v l0 l1 } ⊢| 

	§ e_u◂◂E { {} x y } 
		E { x y } ⊢ { x y b }
		∎ { {} x y b }
	§ eq◂◂E { l0 l1 } 
		eq_v_f◂◂(e_u◂◂E) { {} l0 l1 } ⊢ { {} l0 l1 b } 
		∎ { l0 l1 b }

	§ @.fld_lr◂◂{ F0 F1 F2 } { v l } 
		$ l ⊢ 
		∐ _cns◂{ a l } .
			F0 { v a } ⊢ { v b } 
			fld_lr◂◂{ F0 F1 F2 } { v l } ⊢ w 
			F1 { w b } ⊢ w 
			∎ w 
		∐. _nil◂{} . 
			F2 v ⊢ w 
			∎ w 
	§ @.fld_l◂◂F { v l }
		$ l ⊢ 
		∐ _cns◂{ a l } .
			F { v a } ⊢ v 
			fld_l◂◂F { v l } ⊢| 
		∐. _nil◂{} . 
			∎ v
	§ @.fld_r◂◂F { v l } 
		$ l ⊢ 
		∐ _cns◂{ a l } . 
			fld_r◂◂F { v l } ⊢ v 
			F { a v } ⊢ v 
			∎ v 
		∐. _nil◂{} . 
			∎ v 
	§ @.pp_l◂◂{ F S } { e v l } 
		$ l ⊢ 
		∐ _cns◂{ a l } . 
			F { v a } ⊢ { v s }
			rp8.add_s8 { e s } ⊢ e 
			∐ l ⊢ _cns◂{ a l } . 
				rp8.add_s8 { e %[ S ] } ⊢ e 
				F { v a } ⊢ { v s }
				rp8.add_s8 { e s } ⊢ e 
				pp_l◂◂{ F S } { e v l } ⊢|
			∐. . 
				∎ { e v }
		∐. _nil◂{} . 
			∎ { e v } 
	§ @.pnt_l◂◂{ F S } { v l } 
		rp8.e {} ⊢ e 
		pp_l◂◂{ F S } { e v l } ⊢ { e v } 
		rp8.to_s8 e ⊢ s 
		∎ { v s } 
	§ @.pnt◂◂{ F S } l 
		$ l ⊢ 
		∐ _cns◂{ a l } .
			F a ⊢ s 
			∐ l ⊢ _nil◂{} . 
				∎ s
			∐. . 
				pnt◂◂{ F S } l ⊢ s1  
				^ s,s1 ⊢ _,_,sr 
					0' S 1' // 
				∎ sr  
		∐. _nil◂{} . 
			∎ %[ "" ] 
	§ @.map_l◂◂F { v l } 
		$ l ⊢ 
		∐ _cns◂{ a l } . 
			F { v a } ⊢ { v b } 
			map_l◂◂F { v l } ⊢ { v l } 
			_cns { b l } ⊢ l 
			∎ { v l } 
		∐. _nil◂{} .
			$ _nil◂{} ⊢ l 
			∎ { v l } 
	§ @.map_l_x◂◂F { v l } 
		$ l ⊢ 
		∐ _cns◂{ a l } .
			F { v a } ⊢ { v b c } 
			map_l_x◂◂F { v l } ⊢ { v l lx } 
			∎ { v _cns◂{ %b l } _cns◂{ %c lx } }
		∐. _nil◂{} . 
			∎ { v _nil◂{} _nil◂{} }
	§ @.map_r◂◂F { v l } 
		$ l ⊢ 
		∐ _cns◂{ a l } . 
			map_r◂◂F { v l } ⊢ { v l } 
			F { v a } ⊢ { v b } 
			_cns { b l } ⊢ l 
			∎ { v l } 
		∐. _nil◂{} .
			$ _nil◂{} ⊢ l 
			∎ { v l }

	§ @.len l 
		$ l ⊢ 
		∐ _cns◂{ a l } . 
			len l ⊢ { l n } 
			_cns { a l } ⊢ l 
			_inc n ⊢ n 
			∎ { l n } 
		∐. _nil◂{} . 
			» 0r _ ⊢ n 
			$ _nil◂{} ⊢ l 
			∎ { l n }
	§ @.csm { l a } 
		$ l ⊢ 
		∐ _cns◂{ x l } . 	
			∐ x'=a' . 
				csm { l a } ⊢| 
			∐. . 
				csm { l a } ⊢ { l a } 
				_cns { x l } ⊢ l 
				∎ { l a }
		∐. _nil◂{} . 
			$ _nil◂{} ⊢ l 
			∎ { l a }
	§ @.nth { l i } 
		$ l ⊢ 
		∐ _cns◂{ a l } . 
			∐ i'=0r . 
				∎ { a l } 
			∐. . 
				_dec i ⊢ i 
				nth { l i } ⊢ { b l } 
				_cns { a l } ⊢ l 
				∎ { b l } 
		∐. _nil◂{} . 
			» "nth 0" _ ⊢ se 
			_emt se ⊢ se 
			∎| 
	§ @.add { l a } 
		$ l ⊢ 
		∐ _cns◂{ b l } . 
			∐ a'=b' . 
				_cns { b l } ⊢ l 
				∎ l 
			∐. . 
				add { l a } ⊢ l 
				_cns { b l } ⊢ l 
				∎ l 
		∐. _nil◂{} . 
			$ _nil◂{} ⊢ l 
			_cns { a l } ⊢ l 
			∎ l 
	∎∎
§ subst { sl r0 } 
	assoc { sl r0 } ⊢ { sl r0 o } 
	$ o ⊢ 
	∐ _some◂r1 . 
		∎ { sl r1 } 
	∐. _none◂{} . 
		∎ { sl r0 } 
§ @.subst_lst = lst.map_l◂◂subst 
§§ p_lst 
	§ @.map_l◂◂F { v l } 
		$ l ⊢ 
		∐ p_cns◂{ a l } . 
			F { v a } ⊢ { v b } 
			map_l◂◂F { v l } ⊢ { v l } 
			p_cns { b l } ⊢ l 
			∎ { v l } 
		∐. p_end◂a .
			F { v a } ⊢ { v b } 
			p_end b ⊢ l 
			∎ { v l } 
	§ @.fld_l◂◂F { v l }
		$ l ⊢ 
		∐ p_cns◂{ a l } . 
			F { v a } ⊢ v 
			fld_l◂◂F { v l } ⊢| 
		∐. p_end◂a .
			F { v a } ⊢|
	∎∎
§§+s8 
	@.esc_s8 
		∐ "\n" esc_s8 ⊢ { {} e0 }
			rp8.pfx_s8 { %[ "\\n" ] e0 } ⊢ e0 
			∎ _some◂e0 
		∐ "\t" esc_s8 ⊢ { {} e0 }
			rp8.pfx_s8 { %[ "\\t" ] e0 } ⊢ e0 
			∎ _some◂e0 		
		∐ "\\" esc_s8 ⊢ { {} e0 }
			rp8.pfx_s8 { %[ "\\\\" ] e0 } ⊢ e0 
			∎ _some◂e0
		∐ "\"" esc_s8 ⊢ { {} e0 }
			rp8.pfx_s8 { %[ "\\\"" ] e0 } ⊢ e0 
			∎ _some◂e0
		
		∐ _byt esc_s8 ⊢ { b e0 }
			∐ b'=0r . 
				rp8.pfx_s8 { %[ "\\0" ] e0 } ⊢ e0 
				∎ _some◂e0
			∐. . 
				rp8.pfx_chr { b e0 } ⊢ e0 
				∎ _some◂e0
		∐. ⊢ { } 
			∎ _some◂rp8.e◂{}
§ mk_esc_s8 s 
	_prs◂◂esc_s8 { s %[ 0r ] } ⊢ { s x0 es } 
	\\esc_s8.prs { s %[ 0r ] } ⊢ { s x0 es } 
	∐ es ⊢ _some◂es . 
		rp8.to_s8 es ⊢ ss 
		∎ { s ss }
	∐. . 
		» "esc_stg_ltr" _ ⊢ ee 
		_emt ee ⊢ ee 
		∎| 
§§+s8
	@.stg_ltr
	∐. "\"" stg_ltr_seq ⊢ { {} cl }
		rp8.to_s8 cl ⊢ s
		_some s ⊢ a
		∎ a
	@.stg_ltr_seq
	∐ "\n" !| ⊢ { xx } 
		_none {} ⊢ a 
		∎ a 
	∐ "\\" stg_ltr_sp stg_ltr_seq ⊢ { {} c0 cl }
		rp8.pfx_chr { c0 cl } ⊢ cl 
		_some cl ⊢ a
		∎ a
	∐ "\"" ⊢ { {} }
		∎ _some◂rp8.e◂{}
	∐. _byt stg_ltr_seq ⊢ { c0 cl }
		rp8.pfx_chr { c0 cl } ⊢ cl 
		_some cl ⊢ a
		∎ a
	@.stg_ltr_sp
	∐ "\\" ⊢ { {} }
		∎ _some◂%[ 92r ]
	∐ "\"" ⊢ { {} }
		∎ _some◂%[ 34r ]
	∐ "n" ⊢ { {} }
		∎ _some◂%[ 10r ]
	∐ "t" ⊢ { {} }
		∎ _some◂%[ 9r ]
	∐. "0" ⊢ { {} }
		∎ _some◂%[ 0r ]

§§+s8
	@.dgt
	∐. _byt ⊢ { c }
		∐ c'=<57r; 48r=<c' . 
			∎ _some◂c
		∐. .
			∎ _none◂{}
§§+s8
	@.ch_l
	∐. _byt ⊢ { c }
		∐ c'=<122r; 97r=<c' . 
			∎ _some◂c
		∐. .
			∎ _none◂{}

§§+s8
	@.ch_u
	∐. _byt ⊢ { c }
		∐ c'=<90r; 65r=<c' . 
			_some c ⊢ a
			∎ a
		∐. .
			_none {} ⊢ a
			∎ a

§§+s8
	@.ch_a
	∐ ch_u ⊢ { c }
		_some c ⊢ a
		∎ a 
	∐. ch_l ⊢ { c }
		_some c ⊢ a
		∎ a

§§+s8
	@.word
	∐. ch_a word_tl ⊢ { c0 cl }
		rp8.pfx_chr { c0 cl } ⊢ cl 
		rp8.to_s8 cl ⊢ s 
		_some s ⊢ a
		∎ a
	@.word_tl
	∐ word_hd word_tl ⊢ { c tl }
		rp8.pfx_chr { c tl } ⊢ l 
		_some l ⊢ a
		∎ a
	∐. ⊢ { }
		rp8.e {} ⊢ l 
		_some l ⊢ a 
		∎ a
	@.word_hd
	∐ ch_a ⊢ { c }
		_some c ⊢ a
		∎ a
	∐ dgt ⊢ { c }
		_some c ⊢ a
		∎ a
	∐. "_" ⊢ { {} }
		» 95r _ ⊢ c
		_some c ⊢ a
		∎ a

§§+s8
	@.prm_word
	∐ "_" word ⊢ { {} s }
		» _^ s ⊢ s,sr 
			"_" 0' // 
		_some sr ⊢ a 
		∎ a
	∐. word ⊢ { s }
		_some s ⊢ a
		∎ a
§§+s8 
	@.reg_word 
		∐ "%" !| prm_word ⊢ { {} w }
			_some w ⊢ a 
			∎ a 
		∐. prm_word ⊢ { w } 
			_some w ⊢ a 
			∎ a 
§§+s8 
	@.tpl_word 
		∐ "%" !| word ⊢ { {} w } 
			∎ _some◂w 
		∐. word ⊢ { w } 
			∎ _some◂w 
§§ OpADL
	§§ reg_ptn
		¶ @.t ◂ a'
			∐ rcd : _lst◂(t◂a')
			∐ atm : a'
		
		§§+s8 
			@.stx◂+◂G
				∐# "{" lst.stx_line◂+◂stx◂+◂G "}" ⊢ { {} l {} }
					∎ _some◂rcd◂l 
				∐.# G ⊢ { a } 
					∎ _some◂atm◂a 

		§ @.eq_v◂◂E { v c0 c1 } 
			∐ c0 ⊢ atm◂a0; c1 ⊢ atm◂a1 . 
				E { v a0 a1 } ⊢ { v a0 a1 b } 
				∎ { v atm◂a0 atm◂a1 b }
			∐ c0 ⊢ rcd◂l0; c1 ⊢ rcd◂l1 . 
				lst.eq_v_err◂◂(eq_v◂◂E) { v l0 l1 } ⊢ { v l0 l1 b } 
				rcd l0 ⊢ c0 
				rcd l1 ⊢ c1 
				∎ { v c0 c1 b } 
			∐. . 
				bl.f {} ⊢ b 
				∎ { v c0 c1 b } 
		§ 
			@.map_l◂◂F { v p } 
				$ p ⊢ 
				∐ rcd◂l . 
					map_l_lst◂◂F { v l } ⊢ { v l } 
					rcd l ⊢ p 
					∎ { v p } 
				∐. atm◂a . 
					F { v a } ⊢ { v b } 
					atm b ⊢ p 
					∎ { v p } 
			@.map_l_lst◂◂F { v l } 
				$ l ⊢ 
				∐ _cns◂{ p l } . 
					map_l◂◂F { v p } ⊢ { v p } 
					map_l_lst◂◂F { v l } ⊢ { v l } 
					_cns { p l } ⊢ l 
					∎ { v l } 
				∐. _nil◂{} . 
					$ _nil◂{} ⊢ l 
					∎ { v l }
		§ 
			@.map_l_x◂◂F { v p } 
				$ p ⊢ 
				∐ rcd◂l . 
					map_l_x_lst◂◂F { v l } ⊢ { v l lx }
					∎ { v rcd◂%l rcd◂%lx } 
				∐. atm◂a . 
					F { v a } ⊢ { v a ax } 
					∎ { v atm◂a ax } 
			@.map_l_x_lst◂◂F { v l } 
				$ l ⊢ 
				∐ _cns◂{ p l } . 
					map_l_x◂◂F { v p } ⊢ { v p px } 
					map_l_x_lst◂◂F { v l } ⊢ { v l lx } 
					∎ { v _cns◂{ p l } _cns◂{ px lx } }
				∐. _nil◂{} . 
					∎ { v _nil◂{} _nil◂{} } 

		§ 
			@.map_l_atm◂◂F { v p }  
				$ p ⊢ 
				∐ rcd◂l . 
					map_l_atm_lst◂◂F { v l } ⊢ { v l } 
					rcd l ⊢ p 
					∎ { v p } 
				∐. atm◂a . 
					F { v a } ⊢ { v p } 
					∎ { v p } 
			@.map_l_atm_lst◂◂F { v l } 
				$ l ⊢ 
				∐ _cns◂{ p l } . 
					map_l_atm◂◂F { v p } ⊢ { v p } 
					map_l_atm_lst◂◂F { v l } ⊢ { v l } 
					_cns { p l } ⊢ l 
					∎ { v l } 
				∐. _nil◂{} . 
					$ _nil◂{} ⊢ l 
					∎ { v l }
		§ 
			@.fld_l◂◂F { v p } 
				$ p ⊢ 
				∐ rcd◂l . 
					fld_l_lst◂◂F { v l } ⊢| 
				∐. atm◂a . 
					F { v a } ⊢| 
			@.fld_l_lst◂◂F { v l } 
				$ l ⊢ 
				∐ _cns◂{ p l } . 
					fld_l◂◂F { v p } ⊢ v 
					fld_l_lst◂◂F { v l } ⊢| 
				∐. _nil◂{} . 
					∎ v 
			
		§ 
			@.pp_l◂◂P { e v p } 
				$ p ⊢ 
				∐ rcd◂l . 
					rp8.add_s8 { e %[ "{ " ] } ⊢ e 
					pp_l_lst◂◂P { e v l } ⊢ { e v } 
					rp8.add_s8 { e %[ "}" ] } ⊢ e  
					∎ { e v } 
				∐. atm◂a . 
					P { v a } ⊢ { v s } 
					rp8.add_s8 { e s } ⊢ e 
					∎ { e v } 
			@.pp_l_lst◂◂P { e v l } 
				$ l ⊢ 
				∐ _cns◂{ p l } . 
					pp_l◂◂P { e v p } ⊢ { e v } 
					rp8.add_s8 { e %[ " " ] } ⊢ e 
					pp_l_lst◂◂P { e v l } ⊢| 
				∐. _nil◂{} . 
					∎ { e v }
		§ pnt_l◂◂P { v p } 
			rp8.e {} ⊢ e 
			pp_l◂◂P { e v p } ⊢ { e v } 
			rp8.to_s8 e ⊢ s 
			∎ { v s } 
		§ pnt_l_lst◂◂P { v l } 
			rp8.e {} ⊢ e 
			pp_l_lst◂◂P { e v l } ⊢ { e v } 
			rp8.to_s8 e ⊢ s 
			∎ { v s } 
		§ unt◂{} = rcd◂_nil◂{} 
		§ cns1◂a = rcd◂cns1◂a 
		§ cns2◂{ a0 a1 } = rcd◂cns2◂{ a0 a1 }
		§ cns3◂{ a0 a1 a2 } = rcd◂cns3◂{ a0 a1 a2 }
		§ cns4◂{ a0 a1 a2 a3 } = rcd◂cns4◂{ a0 a1 a2 a3 } 
		§ cns5◂{ a0 a1 a2 a3 a4 } = rcd◂cns5◂{ a0 a1 a2 a3 a4 }
		∎∎
	§§ RP = reg_ptn
	
	§§ rset
		¶ t = _arr◂bl.t 
		§ N = 128r 
		§ ini {} 
			mk_arr { %[ N ] bl.f◂{} } ⊢ { _ _ v } 
			∎ v 
		§ max_t_i { m i b } 
			∐ b ⊢ bl.t◂{} . 
				∎ i 
			∐. . 
				∎ m 
		§ max_t v 
			arr.itr_lft◂◂max_t_i { v %[ 0r ] } ⊢ { v m } 
			∎ { v m }

		§§ pnt 
			§ lp_i { s j b }
				∐ b ⊢ bl.t◂{} . 
					_sts { s j %[ 49r ] } ⊢ { s _ _ } 
					∎ s
				∐. . 
					_sts { s j %[ 48r ] } ⊢ { s _ _ } 
					∎ s 					 
			§ @.lp { v i s j }
				∐ i'=j' . 
					» 49r _ ⊢ c 
					_sts { s j c } ⊢ { s j c } 
					∎ { v s } 
				∐. . 
					_lod_q { v j } ⊢ { v j b } 
					∐ b ⊢ bl.t◂{} . 
						» 49r _ ⊢ c 
						_sts { s j c } ⊢ { s j c } 
						_inc j ⊢ j 
						lp { v i s j } ⊢| 
					∐. . 
						» 48r _ ⊢ c 
						_sts { s j c } ⊢ { s j c } 
						_inc j ⊢ j 
						lp { v i s j } ⊢|   
			§ f v 
				max_t v ⊢ { v i } 
				_inc i ⊢ i 
				_mlc_s8 i ⊢ { i s } 
				_dec i ⊢ i 
				» 0r _ ⊢ j
				lp { v i s j } ⊢ { v s } 
				∎ { v s }
			∎∎
		§ set_t { v0 i } 
			bl.t {} ⊢ b 
			exc_q { v0 i b } ⊢ { v0 i b } 
			∎ { v0 i }
		§ set_f { v0 i } 
			bl.f {} ⊢ b 
			exc_q { v0 i b } ⊢ { v0 i b } 
			∎ { v0 i }
		§ and = arr.mlt◂◂bl.and 
		§ or = arr.mlt◂◂bl.or
		§ sub = arr.mlt◂◂bl.sub 
		§ min_f_i b 
			$ b ⊢ b,b0 
			bl.not b0 ⊢ b0 
			∎ { b b0 } 
		§ min_f v 
			arr.fnd_lft◂◂min_f_i v ⊢ { v o } 
			smt o ⊢ { i _ } 
			∎ { v i }
		§ min_t_i b 
			$ b ⊢ b,b0 
			∎ { b b0 } 
		§ min_t v 
			arr.fnd_lft◂◂min_t_i v ⊢ { v o } 
			smt o ⊢ { i _ } 
			∎ { v i }
		§ is_zero_i b 
			$ b ⊢ b,b0 
			∎ { b b0 } 
		§ is_zero v 
			arr.fnd_lft◂◂is_zero_i v ⊢ { v o } 
			∐ o ⊢ _none◂{} . 
				∎ { v bl.t◂{} }
			∐. . 
				∎ { v bl.f◂{} }
		∎∎
		§§ reg_vs 
			§ @.lp { vs i }  
				∐ i'=8r . 
					∎ vs 
				∐. . 
					rset.set_t { vs i } ⊢ { vs i } 
					_inc i ⊢ i 
					lp { vs i } ⊢| 
			§ f {}
				» 0r _ ⊢ i0 
				rset.ini {} ⊢ vs0 
				lp { vs0 i0 } ⊢|  
			∎∎
		§ alc_vs vs 
			rset.min_f vs ⊢ { vs i0 } 
			rset.set_t { vs i0 } ⊢ { vs i0 }
			∎ { vs i0 }
		§§ type 
			¶
			@.id = _r64 
			@.t_atm v'
				∐ dta : { id _lst◂(t◂v') }
				∐ imp : { t◂v' t◂v' }
				∐ ct_imp : { t◂v' t◂v' }
				∐ abs : { v' t◂v' }
				∐ var : v'
			@.t v' = RP.t◂(t_atm◂v')
			@.aux v' = { _lst◂v' _lst◂(t◂v') } 
			@.aux_vct v' = _arr◂(aux◂v')
			@.exp v'
				∐ type_k : t◂v'  
				∐ app : { exp◂v' exp◂v' }
			@.var v'
				∐ var_l : _r64
				∐ var_q : _r64 
				∐ var_ln : t◂v'
				##∐ var_app : { t◂v' t◂v' }
				∐ var_i : {}  
			§ 
				@.fld_atm◂◂{ F ABS VAR } { v k } 
					$ k ⊢ 
					∐ dta◂{ ax0 ql0 } . 
						RP.fld_l_lst◂◂(fld_atm◂◂{ F ABS VAR }) { v ql0 } ⊢| 
					∐ imp◂{ k0 k1 } . 
						RP.fld_l◂◂(fld_atm◂◂{ F ABS VAR }) { v k0 } ⊢ v 
						RP.fld_l◂◂(fld_atm◂◂{ F ABS VAR }) { v k1 } ⊢| 
					∐ imp◂{ k0 k1 } . 
						RP.fld_l◂◂(fld_atm◂◂{ F ABS VAR }) { v k0 } ⊢ v 
						RP.fld_l◂◂(fld_atm◂◂{ F ABS VAR }) { v k1 } ⊢| 
					∐ abs◂{ vv0 k0 } .
						ABS { v { vv0 k0 } } ⊢| 
					∐. var◂i0 . 
						VAR { v i0 } ⊢| 
			§ newvar_i { tv_n tv } 
			var_i {} ⊢ v
			set_tv { tv tv_n v } ⊢ { tv tv_n } 
			$ tv_n ⊢ tv_n,tv_n0 
			_inc tv_n ⊢ tv_n 
			∎ { tv_n tv tv_n0 }
		§ newvar_l { tv_n tv lv } 
			$ lv ⊢ lv,lv0 
			var_l lv0 ⊢ v
			set_tv { tv tv_n v } ⊢ { tv tv_n } 
			$ tv_n ⊢ tv_n,tv_n0 
			_inc tv_n ⊢ tv_n 
			var tv_n0 ⊢ y 
			RP.atm y ⊢ y 
			∎ { tv_n tv lv y }
		§ newvar_q { tv_n tv lv } 
			$ lv ⊢ lv,lv0 
			var_q lv0 ⊢ v
			set_tv { tv tv_n v } ⊢ { tv tv_n } 
			$ tv_n ⊢ tv_n,tv_n0 
			_inc tv_n ⊢ tv_n 
			var tv_n0 ⊢ y  
			RP.atm y ⊢ y 
			∎ { tv_n tv lv y }
		§ newvar_ln { tv_n tv y } 
			var_ln y ⊢ v 
			set_tv { tv tv_n v } ⊢ { tv tv_n }
			$ tv_n ⊢ tv_n,tv_n0 
			_inc tv_n ⊢ tv_n 
			∎ { tv_n tv tv_n0 }
			§§ t_axm 
			§ N0 = 14r 
  		§§ id 
				§ r64 = 0r 
  			§ s8 = 1r 
  			§ lst = 2r 
  			§ opn = 3r 
				§ arr = 4r  
				§ clr = 5r 
				§ pt = 6r 
				§ r32 = 7r 
				§ r16 = 8r 
				§ r8 = 9r 
  			§ r4 = 10r 
				§ r2 = 11r 

				§ ext = 12r 
				§ grm = 13r 
				∎∎
			
			§ t_imp◂i = RP.atm◂imp◂i 
			§ t_dta◂d = RP.atm◂dta◂d
			§ unt◂{} = RP.rcd◂_nil◂{} 
			\\§ r64 = RP.atm◂◂◂dta◂◂◂{ id.r64 _nil◂◂◂{} }
			§ r64◂{} = t_dta◂{ %[ id.r64 ] _nil◂{} } 
			\\§ s8 = RP.atm◂◂◂dta◂◂◂{ id.s8 _nil◂◂◂{} }
			§ s8◂{} = t_dta◂{ %[ id.s8 ] _nil◂{} }
			§ r64_p2◂{} = RP.cns2◂{ r64◂{} r64◂{} } 
			§ r64_op2◂{} = t_imp◂{ r64_p2◂{} r64_p2◂{} } 
			§ r64_op1◂{} = t_imp◂{ r64◂{} r64◂{} } 
			§ lst◂y = t_dta◂{ %[ id.lst ] _cns◂{ %y _nil◂{} } } 
			§ opn◂y = t_dta◂{ %[ id.opn ] _cns◂{ %y _nil◂{} } }
			§ grm◂y = t_dta◂{ %[ id.grm ] _cns◂{ %y _nil◂{} } } 
			§ arr y 
				∎ t_dta◂{ %[ id.arr ] _cns◂{ %y _nil◂{} } } 
			§ clr y 
				∎ t_dta◂{ %[ id.clr ] _cns◂{ %y _nil◂{} } }
			§ pt y 
				∎ t_dta◂{ %[ id.pt ] _cns◂{ %y _nil◂{} } }
			§ ext {} 
				∎ t_dta◂{ %[ id.ext ] _nil◂{} } 
			§ prs◂y = t_imp◂{ RP.cns2◂{ s8◂{} r64◂{} } RP.cns3◂{ s8◂{} r64◂{} y } }
			§ prs_opn◂y = t_imp◂{ RP.cns2◂{ s8◂{} r64◂{} } RP.cns3◂{ s8◂{} r64◂{} opn◂y } }
			∎∎
		§§ X = t_axm
			§ pnt_dta_i a  
				∐ a'=0r . 
					∎ %[ "_r64" ] 
				∐ a'=1r . 
					» "_s8" _ ⊢ s 
					∎ s 
				∐ a'=2r . 
					» "_lst" _ ⊢ s 
					∎ s 
				∐ a'=3r . 
					» "_opn" _ ⊢ s 
					∎ s 
				∐ a'=4r . 
					» "_arr" _ ⊢ s 
					∎ s 
				∐. . 
					» _^ a ⊢ a,s 
						"_t" 0d' // 
					∎ s 
			§ @.pnt_type_k { tv k } 
			$ k ⊢ 
			∐ RP.rcd◂l .
				pnt_type_k_lst { tv l } ⊢ { tv s } 
				» _^ s ⊢ s,sr 
					"{ " 0' "}" // 
				∎ { tv sr } 
			∐. RP.atm◂ak . 
				$ ak ⊢ 
				∐ dta◂{ a l } . 
					pnt_dta { tv l } ⊢ { tv s }
					pnt_dta_i a ⊢ sa  
					» _^ sa,s ⊢ sa,s,sr 
						0' "◂" 1' // 
					∎ { tv sr } 
				∐ imp◂{ k0 k1 } . 
					pnt_type_k { tv k0 } ⊢ { tv s0 }  
					pnt_type_k { tv k1 } ⊢ { tv s1 } 
					» _^ s0,s1 ⊢ s0,s1,sr 
						"(" 0' "→" 1' ")" // 
					∎ { tv sr } 
				∐ ct_imp◂{ k0 k1 } . 
					pnt_type_k { tv k0 } ⊢ { tv s0 }  
					pnt_type_k { tv k1 } ⊢ { tv s1 } 
					» _^ s0,s1 ⊢ s0,s1,sr 
						"(" 0' "→→" 1' ")" // 
					∎ { tv sr } 
				∐ abs◂{ a k0 } . 
					pnt_type_k { tv k0 } ⊢ { tv s0 } 
					» _^ a,s0 ⊢ a,s0,sr 
							"\\" 0d' "' . " 1' //
					∎ { tv sr }  
				∐. var◂i . 
					lod_tv { tv i } ⊢ { tv i v } 
					$ v ⊢ 
					∐ var_l◂lv . 
						» _^ i,lv ⊢ i,lv,sr 
							0d' "''" "(" 1d' ")" // 
						∎ { tv sr } 
					∐ var_q◂lv .
						» _^ i,lv ⊢ i,lv,sr 
							0d' "'" "(" 1d' ")" // 
						∎ { tv sr }
					∐ var_i◂{} . 
						» _^ i ⊢ i,sr 
							"?" 0d' // 
						∎ { tv sr }
					∐. var_ln◂kx . 
						pnt_type_k { tv kx } ⊢ { tv sx } 
						» _^ i,sx ⊢ i,sx,sr 
							0d' "'" "(=" 1' ")" // 
						∎ { tv sr }
			@.pnt_type_k_lst = lst.pnt_l◂◂{ pnt_type_k " " }
			@.pnt_dta { tv l } 
				rev l ⊢ l 
				lst.pnt_l◂◂{ pnt_type_k "◂" } { tv l } ⊢| 
			§§ eq_t 
			§ 
				@.f { tv y0 y1 }
					∐ y0 ⊢ RP.atm◂ak; ak ⊢ var◂i0 . 
						lod_tv { tv i0 } ⊢ { tv i0 v0 } 
						∐ v0 ⊢ var_ln◂y2 . 
							f { tv y2 y1 } ⊢|
						∐ v0 ⊢ var_q◂lv0 . 
							l0 { tv i0 y1 } ⊢| 
						∐. .  
							bl.f {} ⊢ b 
							∎ { tv b }
					∐ y1 ⊢ RP.atm◂ak; ak ⊢ var◂i1 . 
						lod_tv { tv i1 } ⊢ { tv i1 v0 } 
						∐ v0 ⊢ var_ln◂y2 . 
							f { tv y0 y2 } ⊢|
						∐ v0 ⊢ var_q◂lv . 
							l0 { tv i1 y0 } ⊢|
						∐. .  
							bl.f {} ⊢ b 
							∎ { tv b }
					∐ y0 ⊢ RP.rcd◂r0 ; y1 ⊢ RP.rcd◂r1 . 
						f_lst { tv r0 r1 } ⊢| 
					∐ y0 ⊢ RP.atm◂ak0; ak0 ⊢ dta◂{ a0 l0 }; y1 ⊢ RP.atm◂ak1; ak1 ⊢ dta◂{ a1 l1 } . 
						∐ a0'=a1' . 
							f_lst { tv l0 l1 } ⊢|
						∐. . 
							bl.f {} ⊢ b 
							∎ { tv b }
					∐ y0 ⊢ RP.atm◂ak0; ak0 ⊢ imp◂{ y0_0 y0_1 }; y1 ⊢ RP.atm◂ak1; ak1 ⊢ imp◂{ y1_0 y1_1 } . 
						f { tv y0_0 y1_0 } ⊢ { tv b }   
						∐ b ⊢ bl.t◂{} . 
							f { tv y0_1 y1_1 } ⊢|
						∐. . 
							∎ { tv b }
					∐ y0 ⊢ RP.atm◂ak0; ak0 ⊢ ct_imp◂{ y0_0 y0_1 }; y1 ⊢ RP.atm◂ak1; ak1 ⊢ ct_imp◂{ y1_0 y1_1 } . 
						f { tv y0_0 y1_0 } ⊢ { tv b }   
						∐ b ⊢ bl.t◂{} . 
							f { tv y0_1 y1_1 } ⊢|
						∐. . 
							∎ { tv b }
					∐. . 
						bl.f {} ⊢ b 
						∎ { tv b }
			@.l0 { tv i0 y1 } 
				∐ y1 ⊢ RP.atm◂a1; a1 ⊢ var◂i1 . 
					lod_tv { tv i1 } ⊢ { tv i1 v0 } 
					∐ v0 ⊢ var_ln◂y2 . 
						l0 { tv i0 y2 } ⊢|
					∐ v0 ⊢ var_q◂lv0 . 
						∐ i0'=i1' . 
							∎ { tv bl.t◂{} }
						∐. . 
							∎ { tv bl.f◂{} }
					∐. .  
						∎ { tv bl.f◂{} }
				∐. . 
					∎ { tv bl.f◂{} }
			@.f_lst { tv l0 l1 }
				∐ l0 ⊢ _cns◂{ y0 l0 }; l1 ⊢ _cns◂{ y1 l1 } . 
					f { tv y0 y1 } ⊢ { tv b }
					∐ b ⊢ bl.t◂{} .  
						f_lst { tv l0 l1 } ⊢| 
					∐. .
						∎ { tv b }
				∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
					∎ { tv bl.t◂{} }  
				∐. . 
					∎ { tv bl.f◂{} } 		
			∎∎
		§§ cmp_t
			§ 
				@.f { tv y0 y1 cl }
					∐ y1 ⊢ RP.atm◂ak; ak ⊢ var◂i1 . 
						lod_tv { tv i1 } ⊢ { tv i1 v0 } 
						∐ v0 ⊢ var_ln◂y2 . 
							f { tv y0 y2 cl } ⊢|
						∐ v0 ⊢ var_q◂lv . 
							assoc { cl i1 } ⊢ { cl i1 o } 
							∐ o ⊢ _some◂yt . 
								eq_t.f { tv yt y0 } ⊢ { tv bt }  
								∎ { tv bt cl }
							∐. . 
								∎ { tv bl.t◂{} _cns◂{ { %i1 _some◂y0 } cl } } 
						∐. .  
							∎ { tv bl.f◂{} cl }
					∐ y0 ⊢ RP.atm◂ak; ak ⊢ var◂i0 . 
						lod_tv { tv i0 } ⊢ { tv i0 v0 } 
						∐ v0 ⊢ var_ln◂y2 . 
							f { tv y2 y1 cl } ⊢|
						∐ v0 ⊢ var_q◂v2 . 
							##» "cmp_t 1" _ ⊢ ee0 
							##_emt ee0 ⊢ _ 
							##∎|
							∎ { tv bl.f◂{} cl }
						∐. .  
							##bl.f {} ⊢ b 
							##∎ { tv b cl }
							» "cmp_t 0" _ ⊢ ee0 
							_emt ee0 ⊢ _ 
							∎| 
					∐ y0 ⊢ RP.rcd◂r0 ; y1 ⊢ RP.rcd◂r1 . 
						f_lst { tv r0 r1 cl } ⊢| 
					∐ y0 ⊢ RP.atm◂ak0; ak0 ⊢ dta◂{ a0 l0 }; y1 ⊢ RP.atm◂ak1; ak1 ⊢ dta◂{ a1 l1 } . 
						∐ a0'=a1' . 
							f_lst { tv l0 l1 cl } ⊢|
						∐. . 
							bl.f {} ⊢ b 
							∎ { tv b cl }
					∐ y0 ⊢ RP.atm◂ak0; ak0 ⊢ imp◂{ y0_0 y0_1 }; y1 ⊢ RP.atm◂ak1; ak1 ⊢ imp◂{ y1_0 y1_1 } . 
						f { tv y0_0 y1_0 cl } ⊢ { tv b cl }   
						∐ b ⊢ bl.t◂{} . 
							f { tv y0_1 y1_1 cl } ⊢|
						∐. . 
							∎ { tv b cl }
					∐ y0 ⊢ RP.atm◂ak0; ak0 ⊢ ct_imp◂{ y0_0 y0_1 }; y1 ⊢ RP.atm◂ak1; ak1 ⊢ ct_imp◂{ y1_0 y1_1 } . 
						f { tv y0_0 y1_0 cl } ⊢ { tv b cl }   
						∐ b ⊢ bl.t◂{} . 
							f { tv y0_1 y1_1 cl } ⊢|
						∐. . 
							∎ { tv b cl }
					∐. . 
						bl.f {} ⊢ b 
						∎ { tv b cl }
			@.f_lst { tv l0 l1 cl }
				∐ l0 ⊢ _cns◂{ y0 l0 }; l1 ⊢ _cns◂{ y1 l1 } . 
					f { tv y0 y1 cl } ⊢ { tv b cl }
					∐ b ⊢ bl.t◂{} .  
						f_lst { tv l0 l1 cl } ⊢| 
					∐. .
						∎ { tv b cl }
				∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
					bl.t {} ⊢ b 
					∎ { tv b cl }  
				∐. . 
					bl.f {} ⊢ b 
					∎ { tv b cl } 				
			§ eqv { tv y0 y1 } 
				$ _nil◂{} ⊢ cl 
				$ y0 ⊢ y0,y0_0
				$ y1 ⊢ y1,y1_0 
				f { tv y0_0 y1_0 cl } ⊢ { tv bl _ }
				$ _nil◂{} ⊢ cl 
				$ y0 ⊢ y0,y0_0
				$ y1 ⊢ y1,y1_0 
				f { tv y1_0 y0_0 cl } ⊢ { tv br _ }
				bl.and { bl br } ⊢ b 
				∎ { tv y0 y1 b }
			∎∎
		
		§ @.occurs { { tv i0 lv0 } y1 } 
			∐ y1 ⊢ RP.rcd◂l1 . 
				occurs_lst { { tv i0 lv0 } l1 } ⊢| 
			∐ y1 ⊢ RP.atm◂ak; ak ⊢ dta◂{ a1 l1 } . 
				occurs_lst { { tv i0 lv0 } l1 } ⊢| 
			∐ y1 ⊢ RP.atm◂ak; ak ⊢ imp◂{ y1_0 y1_1 } . 
				occurs { { tv i0 lv0 } y1_0 } ⊢ { tv i0 lv0 } 
				occurs { { tv i0 lv0 } y1_1 } ⊢ { tv i0 lv0 } 
				∎ { tv i0 lv0 } 
			∐ y1 ⊢ RP.atm◂ak; ak ⊢ ct_imp◂{ y1_0 y1_1 } . 
				occurs { { tv i0 lv0 } y1_0 } ⊢ { tv i0 lv0 } 
				occurs { { tv i0 lv0 } y1_1 } ⊢ { tv i0 lv0 } 
				∎ { tv i0 lv0 } 
			∐ y1 ⊢ RP.atm◂ak; ak ⊢ var◂i1 . 
				∐ i0'=i1' . 
					_emt { i0 lv0 } ⊢ { i0 lv0 } 
					∎| 
				∐. . 
					lod_tv { tv i1 } ⊢ { tv i1 v1 } 
					$ v1 ⊢ 
					∐ var_ln◂y2 . 
						occurs { { tv i0 lv0 } y2 } ⊢| 
					∐ var_l◂lv1 . 
						∐ lv1'=<lv0' . 
							∎ { tv i0 lv0 }
						∐. . 
							$ lv0 ⊢ lv0,lv0_0 
							exc_tv { tv i1 var_l◂lv0_0 } ⊢ { tv i1 _ }
							∎ { tv i0 lv0 } 
					∐ var_i◂{} .
						∎ { tv i0 lv0 } 
				
					∐. var_q◂lv1 .
						_emt { i1 lv1 } ⊢ a 
						_emt %[ "occurs 0" ] ⊢ _ 
						∎| 
			∐. . 
				_emt { i0 lv0 } ⊢ { i0 lv0 } 
				_emt %[ "occurs 1" ] ⊢ _ 
				∎|
			@.occurs_lst = lst.fld_l◂◂occurs 
		§§ unify 
		§ 
			@.f { tv y0 y1 }
				∐ y0 ⊢ RP.atm◂ak; ak ⊢ var◂i0 . 
					f_l0 { tv i0 y1 } ⊢| 
				∐ y1 ⊢ RP.atm◂ak; ak ⊢ var◂i1 . 
					f_l0 { tv i1 y0 } ⊢| 
				∐ y0 ⊢ RP.rcd◂r0 ; y1 ⊢ RP.rcd◂r1 . 
					f_lst { tv r0 r1 } ⊢| 
				∐ y0 ⊢ RP.atm◂ak0; ak0 ⊢ dta◂{ a0 l0 }; y1 ⊢ RP.atm◂ak1; ak1 ⊢ dta◂{ a1 l1 } . 
					∐ a0'=a1' . 
						f_lst { tv l0 l1 } ⊢|
					∐. . 
						» "unify 0" _ ⊢ se 
						pnt_type_k_lst { tv l0 } ⊢ { tv l0s } 
						pnt_type_k_lst { tv l1 } ⊢ { tv l1s } 
						pnt_dta_i a0 ⊢ a0s 
						pnt_dta_i a1 ⊢ a1s 
						_emt { a0s l0s a1s l1s } ⊢ a
						_emt se ⊢ se 
						∎| 
				∐ y0 ⊢ RP.atm◂ak0; ak0 ⊢ imp◂{ y0_0 y0_1 }; y1 ⊢ RP.atm◂ak1; ak1 ⊢ imp◂{ y1_0 y1_1 } . 
					f { tv y0_0 y1_0 } ⊢ tv  
					f { tv y0_1 y1_1 } ⊢|
				∐ y0 ⊢ RP.atm◂ak0; ak0 ⊢ ct_imp◂{ y0_0 y0_1 }; y1 ⊢ RP.atm◂ak1; ak1 ⊢ ct_imp◂{ y1_0 y1_1 } . 
					f { tv y0_0 y1_0 } ⊢ tv  
					f { tv y0_1 y1_1 } ⊢|
				∐. . 
					pnt_type_k { tv y0 } ⊢ { tv y0s } 
					pnt_type_k { tv y1 } ⊢ { tv y1s } 
					_emt { y0s y1s } ⊢ { y0s y1s } 
					» "unify 1" _ ⊢ se 
					_emt se ⊢ se 
					∎|
			@.f_lst { tv l0 l1 }
				∐ l0 ⊢ _cns◂{ y0 l0 }; l1 ⊢ _cns◂{ y1 l1 } . 
					f { tv y0 y1 } ⊢ tv 
					f_lst { tv l0 l1 } ⊢| 
				∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
					∎ tv 
				∐. . 
					» "unify.f_lst 2" _ ⊢ se 
					_emt se ⊢ se 
					_emt { l0 l1 } ⊢ { l0 l1 }
					∎|  
				
			@.f_l0 { tv i0 y1 }   
				lod_tv { tv i0 } ⊢ { tv i0 v0 } 
				∐ v0 ⊢ var_ln◂y2 . 
					f { tv y2 y1 } ⊢|
				∐ v0 ⊢ var_l◂lv .  
					f_l1 { tv i0 lv y1 } ⊢|
				∐. . 
					» "unify 3" _ ⊢ se 
					_emt se ⊢ se 
					∎|  
			@.f_l1 { tv i0 lv y1 } 
				∐ y1 ⊢ RP.atm◂ak1; ak1 ⊢ var◂i1 . 
					∐ i0'=i1' . 
						∎ tv 
					∐. .
						lod_tv { tv i1 } ⊢ { tv i1 v1 }
						∐ v1 ⊢ var_ln◂y2 . 
							f_l1 { tv i0 lv y2 } ⊢|  
						∐ v1 ⊢ var_l◂lv1 . 
							setge { lv lv1 } ⊢ { lv lv1 b }
							∐ b'=0r .  
								var i0 ⊢ yv 
								RP.atm yv ⊢ yv 
								var_ln yv ⊢ v2 
								exc_tv { tv i1 v2 } ⊢ { tv i1 _ } 
								∎ tv 
							∐. . 
								var i1 ⊢ yv 
								RP.atm yv ⊢ yv 
								var_ln yv ⊢ v2 
								exc_tv { tv i0 v2 } ⊢ { tv i0 _ } 
								∎ tv
						∐. . 
							_emt %[ "unify 4" ] ⊢ se 
							∎|  
				∐. .  
					$ y1 ⊢ y1,y1_0 
					occurs { { tv i0 lv } y1 } ⊢ { tv i0 lv }
					exc_tv { tv i0 var_ln◂y1_0 } ⊢ { tv i0 _ } 
					∎ tv 
			§ f_emt { tv y0 y1 } 
				_emt %[ "unify.f_emt" ] ⊢ _ 
				$ y0 ⊢ y0,y00
				$ y1 ⊢ y1,y10
				pnt_type_k { tv y00 } ⊢ { tv y0s } 
				pnt_type_k { tv y10 } ⊢ { tv y1s } 
				_emt { y0s y1s } ⊢ _ 
				f { tv y0 y1 } ⊢| 
			∎∎ 
		§ @.unifys { tv y0 ys } 
			$ ys ⊢ 
			∐ _cns◂{ %y1 %ys } . 
				$ y0 ⊢ y0,y00 
				unify.f { tv y0 y1 } ⊢ tv 
				unifys { tv y00 ys } ⊢|
			∐. _nil◂{} . 
				∎ { tv y0 } 	
		§ 
			@.map_k◂◂{ DTA ABS VAR } { v p }  
				$ p ⊢ 
				∐ RP.rcd◂l . 
					map_k_lst◂◂{ DTA ABS VAR } { v l } ⊢ { v l } 
					∎ { v RP.rcd◂l } 
				∐. RP.atm◂a . 
					map_k_atm◂◂{ DTA ABS VAR } { v a } ⊢|
			@.map_k_lst◂◂{ DTA ABS VAR } { v l } 
				$ l ⊢ 
				∐ _cns◂{ p l } . 
					map_k◂◂{ DTA ABS VAR } { v p } ⊢ { v p } 
					map_k_lst◂◂{ DTA ABS VAR } { v l } ⊢ { v l } 
					∎ { v _cns◂{ %p %l } } 
				∐. _nil◂{} . 
					∎ { v _nil◂{} }
			@.map_k_atm◂◂{ DTA ABS VAR } { v a } 
				$ a ⊢ 
				∐ dta◂{ ax lx } . 
					DTA { v { ax lx } } ⊢| 
				∐ imp◂{ k0 k1 } . 
					map_k◂◂{ DTA ABS VAR } { v k0 } ⊢ { v k0 } 
					map_k◂◂{ DTA ABS VAR } { v k1 } ⊢ { v k1 } 
					∎ { v RP.atm◂imp◂{ k0 k1 } }
				∐ ct_imp◂{ k0 k1 } .
					map_k◂◂{ DTA ABS VAR } { v k0 } ⊢ { v k0 } 
					map_k◂◂{ DTA ABS VAR } { v k1 } ⊢ { v k1 } 
					∎ { v RP.atm◂ct_imp◂{ k0 k1 } }
				∐ abs◂{ a0 y0 } . 
					ABS { v { a0 y0 } } ⊢| 
				∐. var◂i0 . 
					VAR { v i0 } ⊢| 
		§§ inst 
			§ 
				@.al_dta { v { a l } } 
					lst { v l } ⊢ { v l }
					∎ { v RP.atm◂dta◂{ %a %l } } 
				@.al_abs { { tv_n tv lv al } { a0 y0 } }
					assoc { al a0 } ⊢ { al a0 o } 
					nnt o ⊢ {} 
					newvar_i { tv_n tv } ⊢ { tv_n tv ia }
					$ ia ⊢ ia,ia0 
					$ a0 ⊢ a0,a0_0 
					al { { tv_n tv lv _cns◂{ { a0 _some◂%ia } al } } y0 } ⊢ { { tv_n tv lv al } y0 } 
					_cns { { a0_0 _none◂{} } al } ⊢ al  
					∎ { { tv_n tv lv al } RP.atm◂abs◂{ %ia0 %y0 } }
				@.al_var { { tv_n tv lv al } i0 } 
					assoc { al i0 } ⊢ { al i0 o } 
					$ o ⊢ 
					∐ _some◂i1 . 
						∎ { { tv_n tv lv al } RP.atm◂var◂%i1 } 
					∐. _none◂{} . 
						lod_tv { tv i0 } ⊢ { tv i0 v0 } 
						∐ v0 ⊢ var_ln◂y0 . 
							al { { tv_n tv lv al } y0 } ⊢|
						∐ v0 ⊢ var_q◂lvq .
							$ tv_n ⊢ tv_n,tv_n_0
							newvar_l { tv_n tv lv } ⊢ { tv_n tv lv y0 } 
							∎ { { tv_n tv lv _cns◂{ { %i0 _some◂%tv_n_0 } %al } } y0 }  
						∐ v0 ⊢ var_i◂{} . 
							_emt %[ "inst 4" ] ⊢ se 
							∎| 
						∐. . 
							∎ { { tv_n tv lv al } RP.atm◂var◂%i0 } 
				@.atm = map_k_atm◂◂{ al_dta al_abs al_var }
				@.al = map_k◂◂{ al_dta al_abs al_var } 
				@.lst = map_k_lst◂◂{ al_dta al_abs al_var }
			∎∎
		§ inst { tv_n tv lv y } 
			$ _nil◂{} ⊢ al 
			inst.al { { tv_n tv lv al } y } ⊢ { { tv_n tv lv al } y } 
			∎ { tv_n tv lv y }   
		§ inst_lst { tv_n tv lv l al } 
			inst.lst { { tv_n tv lv al } l } ⊢ { { tv_n tv lv al } l } 
			∎ { tv_n tv lv l al }
		§§ gen 
			§ 
				@.gen_dta { v { a l } } 
					gen_lst { v l } ⊢ { v l }
					∎ { v RP.atm◂dta◂{ %a %l } }
				@.gen_abs { v { a y0 } } 
					gen { v y0 } ⊢ { v y0 } 
					∎ { v RP.atm◂abs◂{ %a %y0 } }
				@.gen_var { { tv_n tv lv } i }
					lod_tv { tv i } ⊢ { tv i v } 
					$ v ⊢ 
					∐ var_ln◂y1 . 
						gen { { tv_n tv lv } y1 } ⊢|
					∐ var_l◂lv1 .
						∐ lv1'=<lv' . 
							∎ { { tv_n tv lv } RP.atm◂var◂%i }
						∐. .
							$ lv ⊢ lv,lv_0 
							exc_tv { tv i var_q◂%lv_0 } ⊢ { tv i _ } 
							∎ { { tv_n tv lv } RP.atm◂var◂%i }
					∐ var_q◂_ . 
						∎ { { tv_n tv lv } RP.atm◂var◂%i } 
					∐. var_i◂{} . 
						∎ { { tv_n tv lv } RP.atm◂var◂%i } 
				@.gen = map_k◂◂{ gen_dta gen_abs gen_var }
				@.gen_lst = map_k_lst◂◂{ gen_dta gen_abs gen_var }
			∎∎
		§ @.gen { tv_n tv lv y } 
				gen.gen { { tv_n tv lv } y } ⊢ { { tv_n tv lv } y } 
				∎ { tv_n tv lv y } 
			@.gen_lst { tv_n tv lv l } 
				gen.gen_lst { { tv_n tv lv } l } ⊢ { { tv_n tv lv } l } 
				∎ { tv_n tv lv l } 
				
		§ iug { tv_n tv lv y0 y1 } 
			_inc lv ⊢ lv 
			inst { tv_n tv lv y0 } ⊢ { tv_n tv lv y0 } 
			inst { tv_n tv lv y1 } ⊢ { tv_n tv lv y1 } 
			$ y0 ⊢ y0,y00 
			$ y1 ⊢ y1,y10
			unify.f_emt { tv y00 y10 } ⊢ tv
			_dec lv ⊢ lv 
			gen { tv_n tv lv y0 } ⊢ { tv_n tv lv y0 }
			∎ { tv_n tv lv y0 y1 }  
		§ iug_imp { tv_n tv lv ys yd y1 } 
			_inc lv ⊢ lv 
			inst { tv_n tv lv ys } ⊢ { tv_n tv lv ys }
			inst { tv_n tv lv yd } ⊢ { tv_n tv lv yd } 
			inst { tv_n tv lv y1 } ⊢ { tv_n tv lv y1 }
			$ ys ⊢ ys,ys0
			$ yd ⊢ yd,yd0 
			imp { ys0 yd0 } ⊢ yi 
			RP.atm yi  ⊢ yi 
			$ y1 ⊢ y1,y10
			unify.f_emt { tv yi y10 } ⊢ tv
			_dec lv ⊢ lv 
			gen { tv_n tv lv y1 } ⊢ { tv_n tv lv y1 }
			∎ { tv_n tv lv ys yd y1 }  
		§ iug_imp_d { tv_n tv lv ys y1 } 
			_inc lv ⊢ lv 
			inst { tv_n tv lv ys } ⊢ { tv_n tv lv ys }
			newvar_l { tv_n tv lv } ⊢ { tv_n tv lv yd } 
			inst { tv_n tv lv y1 } ⊢ { tv_n tv lv y1 }
			$ ys ⊢ ys,ys0
			$ yd ⊢ yd,yd0 
			$ y1 ⊢ y1,y10
			unify.f_emt { tv RP.atm◂imp◂{ %ys0 %yd0 } y10 } ⊢ tv
			_dec lv ⊢ lv 
			gen { tv_n tv lv y1 } ⊢ { tv_n tv lv y1 }
			∎ { tv_n tv lv ys yd y1 }  
		§ iug_ct_imp_d { tv_n tv lv ys y1 } 
			_inc lv ⊢ lv 
			inst { tv_n tv lv ys } ⊢ { tv_n tv lv ys }
			newvar_l { tv_n tv lv } ⊢ { tv_n tv lv yd } 
			inst { tv_n tv lv y1 } ⊢ { tv_n tv lv y1 }
			$ ys ⊢ ys,ys0
			$ yd ⊢ yd,yd0 
			$ y1 ⊢ y1,y10
			unify.f_emt { tv RP.atm◂ct_imp◂{ %ys0 %yd0 } y10 } ⊢ tv
			_dec lv ⊢ lv 
			gen { tv_n tv lv y1 } ⊢ { tv_n tv lv y1 }
			∎ { tv_n tv lv ys yd y1 }  
		§§ inst_cl 
			§ 
				@.cl_dta { v { a l } } 
					lst { v l } ⊢ { v l }
					∎ { v RP.atm◂dta◂{ %a %l } } 
				@.cl_abs { { tv_n tv cl } { a0 y0 } }
					_emt %[ "inst_cl.cl_abs 0" ] ⊢ _ 
					∎| 
				@.cl_var { { tv_n tv cl } i0 } 
					lod_tv { tv i0 } ⊢ { tv i0 v0 } 
					∐ v0 ⊢ var_ln◂y0 . 
						cl { { tv_n tv cl } y0 } ⊢|
					∐ v0 ⊢ var_q◂lvq .
						assoc { cl i0 } ⊢ { cl i0 o } 
						$ o ⊢ 
						∐ _some◂i1 . 
							∎ { { tv_n tv cl } RP.atm◂var◂%i1 } 
						∐. _none◂{} . 
							∎ { { tv_n tv cl } RP.atm◂var◂%i0 }  
						∐ v0 ⊢ var_i◂{} . 
							_emt %[ "inst_cl 5" ] ⊢ _ 
							∎|
						∐. . 
							_emt %[ "inst_cl 4" ] ⊢ _ 
							∎| 
				@.atm = map_k_atm◂◂{ cl_dta cl_abs cl_var }
				@.cl = map_k◂◂{ cl_dta cl_abs cl_var } 
				@.lst = map_k_lst◂◂{ cl_dta cl_abs cl_var }
			∎∎
		§ 
			@.inst_cl { tv_n tv y cl } 
				inst_cl.cl { { tv_n tv cl } y } ⊢ { { tv_n tv cl } y } 
				∎ { tv_n tv y cl } 
				
			@.inst_cl_lst { tv_n tv l cl } 
				inst_cl.lst { { tv_n tv cl } l } ⊢ { { tv_n tv cl } l } 
				∎ { tv_n tv l cl }
		§§ mk_t_aux 
			§ @.f { tv_n tv tav a l } 
					lod_tv { tav a } ⊢ { tav a { s o } } 
					$ o ⊢ 
					∐ _some◂{ as r pl hl } .
						$ _nil◂{} ⊢ al 
						f0 { tv_n tv l as al } ⊢ { tv_n tv al }  
						» 1r _ ⊢ lv 
						inst_lst { tv_n tv lv r al } ⊢ { tv_n tv lv r al }
						_dec lv ⊢ lv 
						gen_lst { tv_n tv lv r } ⊢ { tv_n tv lv r }
						_some r ⊢ o 
						∎ { tv_n tv tav { s o } }
					∐. _none◂{} . 
						_none {} ⊢ o 
						∎ { tv_n tv tav { s o } }
				@.f0 { tv_n tv l r al } 
					∐ l ⊢ _cns◂{ hl l }; r ⊢ _cns◂{ hr r } . 	
						newvar_ln { tv_n tv hl } ⊢ { tv_n tv t0 } 
						_some t0 ⊢ o 
						_cns { { hr o } al } ⊢ al 
						f0 { tv_n tv l r al } ⊢|
					∐ l ⊢ _nil◂{}; r ⊢ _nil◂{} . 
						∎ { tv_n tv al }
					∐. . 
						» "inst_t_aux 0" _ ⊢ se 
						_emt se ⊢ se 
						∎|  
			∎∎
		§ add_t { tv_n tv ns e y } 
			newvar_ln { tv_n tv y } ⊢ { tv_n tv i0 } 
			_some i0 ⊢ o 
			_cns { { e o } ns } ⊢ ns 
			∎ { tv_n tv ns } 
		
		§ inst_imp { tv_n tv lv y } 
			inst { tv_n tv lv y } ⊢ { tv_n tv lv y }
			newvar_l { tv_n tv lv } ⊢ { tv_n tv lv y0 }
			newvar_l { tv_n tv lv } ⊢ { tv_n tv lv y1 } 
			$ y0 ⊢ y0,y0_0 
			$ y1 ⊢ y1,y1_0 
			imp { y0_0 y1_0 } ⊢ y2 
			RP.atm y2 ⊢ y2 
			unify.f_emt { tv y y2 } ⊢ tv 
			∎ { tv_n tv lv y0 y1 }
		§ ini_reg { lv w rv_n rv re tv_n tv }
			$ rv_n ⊢ rv_n,n0
			_some n0 ⊢ o
			_cns { { w o } re } ⊢ re
			$ tv_n ⊢ tv_n,tv_n_0
			set_tv { rv rv_n tv_n_0 } ⊢ { rv rv_n } 
			_inc rv_n ⊢ rv_n 
			
			newvar_l { tv_n tv lv } ⊢ { tv_n tv lv y }
			
			∎ { lv rv_n rv re tv_n tv y }
		§ mk_reg { w rv_n rv re tv_n tv y } 
			$ rv_n ⊢ rv_n,n0
			_some n0 ⊢ o
			_cns { { w o } re } ⊢ re
			$ tv_n ⊢ tv_n,tv_n_0
			set_tv { rv rv_n tv_n_0 } ⊢ { rv rv_n }  
			var_ln y ⊢ v0 
			set_tv { tv tv_n v0 } ⊢ { tv tv_n }
			$ tv_n ⊢ tv_n,tv_n_0 
			var tv_n_0 ⊢ y 
			RP.atm y ⊢ y 
			$ rv_n ⊢ rv_n,n0
			_inc tv_n ⊢ tv_n 
			_inc rv_n ⊢ rv_n 
			∎ { rv_n rv re tv_n tv y n0 }
		§ add_e { tv_n tv evv ev ev_n ns e k y } 
			newvar_ln { tv_n tv y } ⊢ { tv_n tv i0 } 
			set_tv { ev ev_n i0 } ⊢ { ev ev_n }
			set_tv { evv ev_n k } ⊢ { evv ev_n } 
			$ ev_n ⊢ ev_n,n0 
			_inc ev_n ⊢ ev_n 
			_some n0 ⊢ o 
			_cns { { e o } ns } ⊢ ns 
			∎ { tv_n tv evv ev ev_n ns }
		∎∎ 
		§§ T = type
		
		§§ ast
			¶ @.name
				∐ mdl_n : { _s8 name }
				∐ fst_n : _s8
			§ @.pnt_name n
				∐ n ⊢ mdl_n◂{ w n } .
					pnt_name n ⊢ s
					» _^ w,s ⊢ w,s,sr
						0' "." 1' //
					∎ sr
				∐. n ⊢ fst_n◂w .
					∎ w 
		§§ hp 
			¶ 
				@.t 
					∐ ref : ref 
					∐ r64 : {} 
					∐ pv : _r64 
					∐ adt : { _r64 _lst◂t }
				@.ref 
					∐ opq : {}
					∐ arr : t
					∐ clr : t
					∐ pt_hp : {} 
					∐ rcd : _lst◂t
			§ 
				@.pnt h
					$ h ⊢ 
					∐ adt◂{ ax l } . 
						pnt_lst l ⊢ sl 
						» _^ ax,sl ⊢ ax,sl,sr 
							"a" 0d' "◂ [ " 1' "]" // 
						∎ sr 
					∐ r64◂{} . 
						» _^ _ ⊢ sr 
							"r" // 
						∎ sr 
					∐ ref◂q . 
						$ q ⊢ 
						∐ rcd◂l .  
							pnt_lst l ⊢ s
							» _^ s ⊢ s,sr 
								"*{ " 0' "}" // 
							∎ sr 
						∐ arr◂h .
							pnt h ⊢ sh 
							» _^ sh ⊢ sh,s 
								"{| " 0' "|}" // 
							∎ s 
						∐ clr◂h . 
							pnt h ⊢ sh 
							» _^ sh ⊢ sh,s 
								"{< " 0' ">}" // 
							∎ s
						∐ pt_hp◂{} . 
							» "*[< _ >]" _ ⊢ s 
							∎ s 
						∐. opq◂{} . 
							» "{| l |}" _ ⊢ s 
							∎ s  
						∐. pv◂ipv . 
							» _^ ipv ⊢ ipv,s
								"q" 0d' // 
							∎ s 
					@.pnt_lst l 
						lst.pnt◂◂{ pnt "" } l ⊢| 
				§ @.eq_hp { h0 h1 } 
					∐ h0 ⊢ ref◂q0; h1 ⊢ ref◂q1 .  
						∐ q0 ⊢ opq◂{}; q1 ⊢ opq◂{} . 
							∎ { ref◂opq◂{} ref◂opq◂{} bl.t◂{} }
						∐ q0 ⊢ rcd◂l0; q1 ⊢ rcd◂l1 . 
							eq_hp_lst { l0 l1 } ⊢ { l0 l1 b } 
							∎ { ref◂rcd◂%l0 ref◂rcd◂%l1 %b }
						∐ q0 ⊢ arr◂h0; q1 ⊢ arr◂h1 . 
							eq_hp { h0 h1 } ⊢ { h0 h1 b }
							∎ { ref◂arr◂%h0 ref◂arr◂%h1 b }
						∐ q0 ⊢ clr◂h0; q1 ⊢ clr◂h1 . 
							eq_hp { h0 h1 } ⊢ { h0 h1 b }
							∎ { ref◂clr◂%h0 ref◂clr◂%h1 b }
						∐ q0 ⊢ pt_hp◂{}; q1 ⊢ pt_hp◂{} .
							∎ { ref◂pt_hp◂{} ref◂pt_hp◂{} bl.t◂{} }
						∐. . 
							∎ { ref◂%q0 ref◂%q1 bl.f◂{} }
					∐ h0 ⊢ r64◂{}; h1 ⊢ r64◂{} . 
						∎ { r64◂{} r64◂{} bl.t◂{} }
					∐ h0 ⊢ pv◂q0; h1 ⊢ pv◂q1 .  
						∐ q0'=q1' . 
							∎ { pv◂q0 pv◂q1 bl.t◂{} }
						∐. . 
							∎ { pv◂q0 pv◂q1 bl.f◂{} }
					∐ h0 ⊢ adt◂{ ax0 hl0 }; h1 ⊢ adt◂{ ax1 hl1 } . 
						eq_hp_lst { hl0 hl1 } ⊢ { hl0 hl1 bh }
						∐ ax0'=ax1'; bh ⊢ bl.t◂{} . 
							adt { ax0 hl0 } ⊢ h0 
							adt { ax1 hl1 } ⊢ h1 
							bl.t {} ⊢ b 
							∎ { h0 h1 b }
						∐. . 
							adt { ax0 hl0 } ⊢ h0 
							adt { ax1 hl1 } ⊢ h1 
							bl.f {} ⊢ b 
							∎ { h0 h1 b }
					∐. . 
						bl.f {} ⊢ b 
						∎ { h0 h1 b } 
					@.eq_hp_lst = lst.eq◂◂eq_hp
			∎∎ 
		§ hp_rcd◂l = hp.ref◂hp.rcd◂l 
		¶
			@.rt r',e' = RP.t◂(rt_atm◂r'◂e') 
			@.rt_atm r',e'
				∐ hp : { r' hp.t }
				∐ hp_im : cst◂e'  
				∐ stt_adt : { _r64 _r64 rt◂r'◂e' } 
				∐ pt : { r' r' }
			@.src r',e'
				∐ im_reg : cst◂e'
				∐ src_reg : r'
				∐ src_agl : { e' SP◂r'◂e' }
			@.dst r'
				∐ wc : _opn◂r'
				∐ dst_reg : r'
			@.mtc_atm r',e'
				∐ mtc_agl : { e' MP◂r'◂e' }
				∐ mtc_cst : cst◂e'
				∐ mtc_wc : _opn◂r' 
				∐ mtc_reg : r' 
			@.src_ptn r',e' = RP.t◂(src◂r'◂e')
			@.dst_ptn r' = RP.t◂(dst◂r')
			@.SP r',e' = src_ptn◂r'◂e'
			@.DP r' = dst_ptn◂r'
			@.MP r',e' = RP.t◂(mtc_atm◂r'◂e')
			@.ct_ptn e' = RP.t◂(cst◂e')
			@.pt_m = _r64 
			@.var = _r64 
			@.op_id = _r64 
			@.ftr_id = _r64 
			@.cst e' 
				∐ k_op : { _r64 _r64 rt◂_r64◂_r64 _r64 rt◂_r64◂_r64 _r64 }
				∐ k_op_prs : { _r64 _r64 hp.t }
				∐ k_op_gnr : { _opn◂{ _r64 RP.t◂e' } _r64 DP◂_r64 lc_code◂_r64◂_r64 _r64 }
				∐ k_op_prs_ftr : { pt_m op_id var ftr_id }
				∐ k_app : { ct_ptn◂e' ct_ptn◂e' } 
				∐ k_var : { e' _r64 } 
				∐ k_op_axm : { _r64 _r64 } 
				∐ k_r64 : _r64 
				∐ k_s8 : _s8 
				∐ k_name : e' 
				∐ k_agl : { e' ct_ptn◂e' }
				∐ k_ctr : { _r64 _r64 _r64 }
				∐ k_ply : { RP.t◂_r64 SP◂_r64◂e' _r64 }
			@.fmt
				∐ fmt_s : {}
				∐ fmt_d : {}
				∐ fmt_x : {}
				∐ fmt_p : {}
			@.exp_s8◂e' 
				∐ exp_s8_cst : cst◂e'
				∐ exp_s8_idx : { fmt _r64 }
				∐ exp_s8_for : { _r64 cst◂e' } 
			@.tpl_ptn t' = RP.t◂t' 
			@.lc_code r',e'
				∐ jmp : { ct_ptn◂e' SP◂r'◂e' }
				∐ seq : { lc_line◂r'◂e' lc_code◂r'◂e' }
				∐ mtc : lc_mtc◂r'◂e'
				∐ op_id : { SP◂r'◂e' lc_id_line◂r'◂e' }
				∐ ret : _opn◂(SP◂r'◂e')
				∐ exn : exn◂r'◂e' 
			@.exn r',e' = _r64 
			@.lc_mtc r',e' = p_lst◂{ _lst◂(mtc_op◂r'◂e') mtc_etr◂r'◂e' }
			@.lc_id_mtc r',e' = p_lst◂{ MP◂r'◂e' _lst◂(mtc_op◂r'◂e') mtc_etr◂r'◂e' }
			@.lc_id_line r',e'
				∐ id_mtc : lc_id_mtc◂r'◂e'
				∐ id_line : { _lst◂(DP◂r') lc_code◂r'◂e' }
			@.lc_line r',e'
				∐ op_name : { ct_ptn◂e' SP◂r'◂e' DP◂r' }
				∐ op_exp_s8 : { _lst◂(exp_s8◂e') _lst◂(src◂r'◂e') _lst◂(dst◂r') }
			@.mtc_etr r',e'
				∐ mtc_rmf : lc_mtc◂r'◂e'
				∐ mtc_id_rmf : { SP◂r'◂e' lc_id_mtc◂r'◂e' }
				∐ mtc_code : lc_code◂r'◂e'
			@.mtc_op r',e'
				∐ mtc_id : { SP◂r'◂e' MP◂r'◂e' }
				∐ mtc_test : { test_var◂r'◂e' test_var◂r'◂e' }
				∐ mtc_cmp_test : { test_var◂r'◂e' test_var◂r'◂e' } 
			@.test_var r',e'
				∐ test_cst : cst◂e'
				∐ test_var : r'
		\[
		¶ 
			@.ct_atm = { _r64 _r64 cst_v } 
		\]
		§ 
			@.map_l_rt_reg_atm◂◂F { v a } 
				∐ a ⊢ hp◂{ r0 h } . 
					F { v r0 } ⊢ { v r0 } 
					hp { r0 h } ⊢ a 
					∎ { v a }
				∐ a ⊢ pt◂{ r0 r1 } . 
					F { v r0 } ⊢ { v r0 } 
					F { v r1 } ⊢ { v r1 } 
					pt { r0 r1 } ⊢ a 
					∎ { v a }
				∐ a ⊢ stt_adt◂{ ia nn pa } . 
					RP.map_l◂◂(map_l_rt_reg_atm◂◂F) { v pa } ⊢ { v pa }
					stt_adt { ia nn pa } ⊢ a 
					∎ { v a }
				∐. . 
					∎ { v a }
		§ @.ctr_of_k { evv c } 
			∐ c ⊢ k_ctr◂c . 
				∎ { evv c } 
			∐ c ⊢ k_name◂i . 
				lod_tv { evv i } ⊢ { evv i c } 
				ctr_of_k { evv c } ⊢| 
			∐. . 
				» "ast.ctr_of_k 0" _ ⊢ ee0 
				_emt ee0 ⊢ _ 
				∎|
		§ @.agl_of_cst { evv c } 
			∐ c ⊢ k_name◂i . 
				lod_tv { evv i } ⊢ { evv i c } 
				agl_of_cst { evv c } ⊢| 
			∐ c ⊢ k_agl◂{ v c } . 
				ctr_of_k { evv k_name◂%v } ⊢ { evv { i n v } }
				∎ { evv { i n v c } } 
			∐. . 
				_emt %[ "agl_of_cst 0" ] ⊢ _ 
				∎| 
		§ @.rt_atm_of_ct_atm { evv c } 
			∐ c ⊢ k_agl◂{ v c } . 
				rt_of_ct { evv c } ⊢ { evv k } 
				ctr_of_k { evv k_name◂%v } ⊢ { evv { i n v } } 
				∎ { evv stt_adt◂{ i n k } } 
			∐ c ⊢ k_name◂i . 
				lod_tv { evv i } ⊢ { evv i c } 
				rt_atm_of_ct_atm { evv c } ⊢| 
			∐. . 
				∎ { evv hp_im◂c }
			@.rt_of_ct = RP.map_l◂◂rt_atm_of_ct_atm
		§ @.op_of_k { evv c } 
			∐ c ⊢ k_name◂i . 
				lod_tv { evv i } ⊢ { evv i c } 
				op_of_k { evv c } ⊢| 
			∐. . 
				∎ { evv c }
		§ op_of_k { evv c } 
			$ c ⊢ 
			∐ RP.atm◂c . 
				op_of_k { evv c } ⊢| 
			∐. RP.rcd◂l . 
				∎| 
		§ 
			@.evl_ct_ptn { evv p }
				RP.map_l◂◂evl_ct { evv p } ⊢| 
			@.evl_ct_ptn_lst { evv l } 
				lst.map_l◂◂evl_ct_ptn { evv l } ⊢| 
			@.evl_ct { evv c } 
				∐ c ⊢ k_name◂i . 
					lod_tv { evv i } ⊢ { evv i k } 
					evl_ct { evv k } ⊢|
				∐ c ⊢ k_app◂{ c0 c1 } .
					evl_ct_ptn { evv c0 } ⊢ { evv c0 } 
					evl_ct_ptn { evv c1 } ⊢ { evv c1 }
					k_app { c0 c1 } ⊢ c 
					∎ { evv c }
				∐. . 
					∎ { evv c }
		§ 
			
			@.eq_ct_ptn = RP.eq_v◂◂eq_ct
			@.eq_ct_lst = lst.eq_v_err◂◂eq_ct_ptn 
			
			@.eq_ct { evv c0 c1 } 
				∐ c0 ⊢ k_name◂i0 . 
					lod_tv { evv i0 } ⊢ { evv i0 c2 } 
					eq_ct { evv c2 c1 } ⊢ { evv _ c1 b } 
					k_name i0 ⊢ c0 
					∎ { evv c0 c1 b } 
				∐ c1 ⊢ k_name◂i1 . 
					lod_tv { evv i1 } ⊢ { evv i1 c2 } 
					eq_ct { evv c0 c2 } ⊢ { evv c0 c2 b } 
					k_name i1 ⊢ c1 
					∎ { evv c0 c1 b }
				∐ c0 ⊢ k_op◂{ o_n0 s_n0 sp0 d_n0 dp0 v0 }; c1 ⊢ k_op◂{ o_n1 s_n1 sp1 d_n1 dp1 v1 }; o_n0'=o_n1' . 
					k_op { o_n0 s_n0 sp0 d_n0 dp0 v0 } ⊢ c0 
					k_op { o_n1 s_n1 sp1 d_n1 dp1 v1 } ⊢ c1
					bl.t {} ⊢ b 
					∎ { evv c0 c1 b }
				∐ c0 ⊢ k_op_gnr◂{ o_t0 o_n0 dp0 lc0 v0 }; c1 ⊢ k_op_gnr◂{ o_t1 o_n1 dp1 lc1 v1 }; o_n0'=o_n1' . 
					k_op_gnr { o_t0 o_n0 dp0 lc0 v0 } ⊢ c0 
					k_op_gnr { o_t1 o_n1 dp1 lc1 v1 } ⊢ c1 
					bl.t {} ⊢ b 
					∎ { evv c0 c1 b }
				∐ c0 ⊢ k_r64◂x0; c1 ⊢ k_r64◂x1; x0'=x1' . 
					k_r64 x0 ⊢ c0 
					k_r64 x1 ⊢ c1 
					bl.t {} ⊢ b 
					∎ { evv c0 c1 b }
				∐ c0 ⊢ k_s8◂s0; c1 ⊢ k_s8◂s1; s0'=s1' . 
					k_s8 s0 ⊢ c0 
					k_s8 s1 ⊢ c1 
					bl.t {} ⊢ b 
					∎ { evv c0 c1 b }
				∐ c0 ⊢ k_ctr◂{ i0 n0 v0 }; c1 ⊢ k_ctr◂{ i1 n1 v1 }; i0'=i1' . 
					k_ctr { i0 n0 v0 } ⊢ c0 
					k_ctr { i1 n1 v1 } ⊢ c1 
					bl.t {} ⊢ b 
					∎ { evv c0 c1 b }
				∐ c0 ⊢ k_agl◂{ v0 k0 }; c1 ⊢ k_agl◂{ v1 k1 } . 
					lod_tv { evv v0 } ⊢ { evv v0 kv0 } 
					lod_tv { evv v1 } ⊢ { evv v1 kv1 } 
					eq_ct { evv kv0 kv1 } ⊢ { evv kv0 kv1 b0 } 
					eq_ct_ptn { evv k0 k1 } ⊢ { evv k0 k1 b1 } 
					bl.and { b0 b1 } ⊢ b 
					k_agl { v0 k0 } ⊢ c0 
					k_agl { v1 k1 } ⊢ c1 
					∎ { evv c0 c1 b }
				∐ c0 ⊢ k_op_axm◂{ n0 v0 }; c1 ⊢ k_op_axm◂{ n1 v1 }; n0'=n1' . 
					k_op_axm { n0 v0 } ⊢ c0 
					k_op_axm { n1 v1 } ⊢ c1 
					bl.t {} ⊢ b 
					∎ { evv c0 c1 b }
				∐ c0 ⊢ k_op_prs◂{ o_n0 y0 h0 }; c1 ⊢ k_op_prs◂{ o_n1 y1 h1 }; o_n0'=o_n1' . 
					∎ { evv k_op_prs◂{ o_n0 y0 h0 } k_op_prs◂{ o_n1 y1 h1 } t◂{} }
				∐ c0 ⊢ k_app◂{ k0 k1 }; c1 ⊢ k_app◂{ k2 k3 } . 
					eq_ct_ptn { evv k0 k2 } ⊢ { evv k0 k2 b0 } 
					eq_ct_ptn { evv k1 k3 } ⊢ { evv k1 k3 b1 } 
					bl.and { b0 b1 } ⊢ b 
					k_app { k0 k1 } ⊢ c0 
					k_app { k2 k3 } ⊢ c1 
					∎ { evv c0 c1 b }
				∐. . 
					bl.f {} ⊢ b 
					∎ { evv c0 c1 b }
		§ @.r64_of_k { evv c } 
			∐ c ⊢ k_r64◂x . 
				∎ { evv x } 
			∐ c ⊢ k_name◂i . 
				lod_tv { evv i } ⊢ { evv i c } 
				r64_of_k { evv c } ⊢| 
			∐. . 
				» "ast.r64_of 0" _ ⊢ ee0 
				_emt ee0 ⊢ _ 
				∎|
		§ @.s8_of_k { evv c } 
			∐ c ⊢ k_s8◂s . 
				∎ { evv s } 
			∐ c ⊢ k_name◂i . 
				lod_tv { evv i } ⊢ { evv i c } 
				s8_of_k { evv c } ⊢| 
			∐. . 
				» "ast.s8_of_k 0" _ ⊢ ee0 
				_emt ee0 ⊢ _ 
				∎|    
		§§ pnt 
			§ 
				@.cst { evv c }
					∐ c ⊢ k_r64◂x . 
						» _^ x ⊢ x,sr
						0d' "r" //
						∎ { evv sr } 
					∐ c ⊢ k_s8◂s . 
						mk_esc_s8 s ⊢ { s ss } 
						» _^ ss ⊢ ss,sr
						"\"" 0' "\"" // 
						∎ { evv sr }
					∐ c ⊢ k_name◂i . 
						
						» _^ i ⊢ i,si 
							"#" 0d' // 
						∎ { evv si }
					∐. . 
						» " ? " _ ⊢ sr 
						∎ { evv sr } 
				@.cst_n { evv c }
					∐ c ⊢ k_r64◂x . 
						» _^ x ⊢ x,sr
						0d' "r" //
						∎ { evv sr } 
					∐ c ⊢ k_s8◂s . 
						mk_esc_s8 s ⊢ { s ss } 
						» _^ ss ⊢ ss,sr
						"\"" 0' "\"" // 
						∎ { evv sr }
					∐. . 
						» " ? " _ ⊢ sr 
						∎ { evv sr } 
				@.ct_ptn = RP.pnt_l◂◂cst
				@.ct_ptn_lst = lst.pnt_l◂◂{ ct_ptn " " } 
			§
				@.src { evv s } 
					$ s ⊢ 
					∐ im_reg◂c .
						cst_n { evv c } ⊢ { evv sc }
						» _^ sc ⊢ sc,sr
							"%[ " 0' " ] " // 
						∎ { evv sr }
					∐ src_agl◂{ e sp } .
						##cst_n { evv e } ⊢ { evv se } 
						src_ptn { evv sp } ⊢ { evv ss } 
						^ ss ⊢ _,sr 
							"?◂" 0' // 
						∎ { evv sr } 
					∐. src_reg◂w .
						∎ { evv w } 
				@.src_ptn = RP.pnt_l◂◂src 
			§ 
				@.dst { evv a } 
					$ a ⊢ 
					∐ wc◂o .
						» "_ " _ ⊢ sr
						∎ { evv sr }
					∐. dst_reg◂w .
						∎ { evv w }
				@.dst_ptn = RP.pnt_l◂◂dst
			§	src_ptn_lst = lst.pnt_l◂◂{ src_ptn " " }
			§ dst_ptn_lst = lst.pnt_l◂◂{ dst_ptn " " }
			§	
				@.mtc_atm { evv a } 
					$ a ⊢ 
					∐ mtc_cst◂c .
						cst_n { evv c } ⊢ { evv sc }
						» _^ sc ⊢ sc,sr
							"%[ " 0' " ] " // 
						∎ { evv sr }
					∐ mtc_agl◂{ n mp } .
						mtc_ptn { evv mp } ⊢ { evv smp } 
						pnt_name n ⊢ sn 
						» _^ sn,smp ⊢ sn,smp,sr
							0' "◂" 1' // 
						∎ { evv sr }
					∐ mtc_reg◂w . 
						» _^ w ⊢ w,sr
							"%" 0' // 
						∎ { evv sr } 
					∐. mtc_wc◂o . 
						» "_" _ ⊢ sr
						∎ { evv sr } 
				@.mtc_ptn = RP.pnt_l◂◂mtc_atm
			§ mtc_ptn_lst = lst.pnt_l◂◂{ mtc_ptn " " }
		§	
			@.lc_code { evv dn lc ep0 }
					$ lc ⊢ 
					∐ jmp◂{ n s } . 
						src_ptn { evv s } ⊢ { evv ss } 
						» _^ dn,ss ⊢ dn,ss,sr 
							0'*"\t" "? " 1' " ⊢|\n" // 
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						∎ { evv dn ep0 } 
					∐ seq◂{ ll lc } .
						lc_line { evv dn ll ep0 } ⊢ { evv dn ep0 }
						lc_code { evv dn lc ep0 } ⊢|
					∐ mtc◂m .
						lc_mtc { { evv dn ep0 } m } ⊢|
					∐ op_id◂{ s m } . 
						src_ptn { evv s } ⊢ { evv ss } 
						$ m ⊢ 
						∐ id_line◂{ d lc } . 
							dst_ptn_lst { evv d } ⊢ { evv sd } 
							» _^ dn,ss,sd ⊢ dn,_,_,sr 
								0'*"\t" "$ " 1' " ⊢ " 2' "\n" // 
							rp8.add_s8 { ep0 sr } ⊢ ep0 
							lc_code { evv dn lc ep0 } ⊢| 
						∐. id_mtc◂m . 
							» _^ dn,ss ⊢ dn,_,sr 
								0'*"\t" "$ " 1' " ⊢\n" //
							rp8.add_s8 { ep0 sr } ⊢ ep0
							lc_id_mtc { { evv dn ep0 } m } ⊢| 
					∐ ret◂sp .
						» _^ dn ⊢ dn,s
							0'*"\t" "∎ ..\n" //
						rp8.add_s8 { ep0 s } ⊢ ep0 
						∎ { evv dn ep0 }
					∐. exn◂ne .
						» _^ dn ⊢ dn,sr
							0'*"\t" "∎|\n" //
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						∎ { evv dn ep0 }
		
				@.exp_s8 { evv p } 
					$ p ⊢ 
					∐ exp_s8_cst◂c . 
						cst_n { evv c } ⊢ { evv sc } 
						∎ { evv sc } 
					∐ exp_s8_idx◂{ f x } .
						» _^ x ⊢ _,sr 
							0d' ".'" //
						∎ { evv sr } 
					∐. exp_s8_for◂{ n c } . 
						cst_n { evv c } ⊢ { evv sc } 
						» _^ n,sc ⊢ _,_,sr 
							0d' "*" 1' // 
						∎ { evv sr }  
				@.lc_line { evv dn o ep0 }
					∐ o ⊢ op_name◂{ n s d } .
						src_ptn { evv s } ⊢ { evv ss }
						dst_ptn { evv d } ⊢ { evv sd }
						##pnt_name n ⊢ sn
						##ct_ptn { evv n } ⊢ { evv sn } 
						» _^ dn,ss,sd ⊢ dn,ss,sd,sr
							0'*"\t" "? " 1' " ⊢ " 2' "\n" //
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						∎ { evv dn ep0 }
					∐. o ⊢ op_exp_s8◂{ l sl dl } .
						» _^ dn ⊢ dn,sr
							0'*"\t" "» _^ .." " ⊢ .." "\n"
							0'*"\t" "\t" //
						rp8.add_s8 { ep0 sr } ⊢ ep0
						lst.pp_l◂◂{ exp_s8 " " } { ep0 evv l } ⊢ { ep0 evv } 
						rp8.add_s8 { ep0 %[ " //\n" ] } ⊢ ep0
						∎ { evv dn ep0 }
				@.mtc_etr { { evv dn ep0 } e } 
					$ e ⊢ 
					∐ mtc_rmf◂m0 .
						_inc dn ⊢ dn 
						lc_mtc { { evv dn ep0 } m0 } ⊢ { evv dn ep0 }
						_dec dn ⊢ dn 
						∎ { evv dn ep0 }
					∐ mtc_id_rmf◂{ sp m0 } . 
						src_ptn { evv sp } ⊢ { evv ssp } 
						lc_id_mtc { { evv dn ep0 } m0 } ⊢| 
					∐. mtc_code◂lc .
						_inc dn ⊢ dn
						lc_code { evv dn lc ep0 } ⊢ { evv dn ep0 }
						_dec dn ⊢ dn 
						∎ { evv dn ep0 }
				@.lc_mtc_prd { { evv dn ep0 } { l e } }
					mtc_etr { { evv dn ep0 } e } ⊢| 
				@.lc_mtc = p_lst.fld_l◂◂lc_mtc_prd
				@.lc_id_mtc { { evv dn ep0 } m }
					∐ m ⊢ p_cns◂{ { mp l e } m } .
						mtc_ptn { evv mp } ⊢ { evv smp } 
						mtc_etr { { evv dn ep0 } e } ⊢ { evv dn ep0 } 
						lc_id_mtc { { evv dn ep0 } m } ⊢| 
					∐. m ⊢ p_end◂{ mp l e } .
					  mtc_ptn { evv mp } ⊢ { evv smp } 
						mtc_etr { { evv dn ep0 } e } ⊢ { evv dn ep0 } 
						∎ { evv dn ep0 } 
				@.rt_atm { evv a } 
						$ a ⊢ 					
						∐ hp◂{ r h } . 
							hp.pnt h ⊢ sh
							» _^ r,sh ⊢ r,sh,sr 
								0d' "'" "(= " 1' " )" // 
							∎ { evv sr }
						∐ hp_im◂v . 
							cst { evv v } ⊢ { evv sv } 
							» _^ sv ⊢ sv,sr 
								"%[ " 0' " ]" // 
							∎ { evv sr } 
						∐ pt◂{ r0 r1 } .
							» _^ r0,r1 ⊢ r0,r1,sr 
								"[< " 0d' "' , " 1d' "' >]" // 
							∎ { evv sr }
						∐. stt_adt◂{ c n p } .
							rt { evv p } ⊢ { evv sp }  
							» _^ c,n,sp ⊢ c,n,sp,sr 
								0d' "(<" 1d' ")◂" 2' // 
							∎ { evv sr }  
				@.rt = RP.pnt_l◂◂rt_atm 
				@.rt_lst = lst.pnt_l◂◂{ rt " " } 
			∎∎
	
		¶ 
			@.type_var 
				∐ app : { type type } 
				∐ type_name : name 
				∐ type_var : _s8 
				∐ type_ln : T.t◂type 
			@.type = T.t◂type_var
		\[
		¶ @.type
			∐ type_rcd : _lst◂type
			∐ imp : { type type }
			∐ app : { type type }
			∐ type_name : name
			∐ type_var : _s8
		\]
		
		§§ grm 
			¶ 
				@.t r',e' = _lst◂{ _s8 _opn◂_s8 etr◂r'◂e' }
				@.etr r',e' 
					∐ act : act◂r'◂e'
					∐ ln : exp◂e'
				@.act r',e' 
					∐ act_cns : { _lst◂(dst◂r') DP◂r' lc_code◂r'◂e' rle_flg rle◂e' _opn◂{ DP◂r' act◂r'◂e' } act◂r'◂e' }
					∐ act_end : { _lst◂(dst◂r') DP◂r' lc_code◂r'◂e' rle_flg rle◂e' _opn◂{ DP◂r' act◂r'◂e' } }
				@.rle_flg
					∐ lex : {}
					∐ synt : {}
					∐ line : {}
				@.rle e'
					∐ ptn_cut : rle_cut◂e'
					∐ ptn_seq : { ptn◂e' rle◂e' }
					∐ ptn_end : {}
				@.rle_cut e' = _lst◂(ptn◂e')
				@.ptn e'
					∐ lst : atm◂e'
					∐ atm : atm◂e'
				@.atm e'
					∐ exp : exp◂e'  
					∐ s8 : _s8
				@.exp e' 
					∐ name : e' 
					∐ app : { e' exp◂e' }
			§§ pnt  
				§ act0 = act 
				§ 
					@.f { evv dn q ep0 }
						$ q ⊢ 
						∐ _cns◂{ { w o e } q } .
								$ e ⊢ 
							∐ act0◂g . 
								» _^ dn,w ⊢ dn,w,sr
									0'*"\t" "@." 1' "\n" //
								rp8.add_s8 { ep0 sr } ⊢ ep0 
								_inc dn ⊢ dn 
								act { evv dn g ep0 } ⊢ { evv dn ep0 }
								_dec dn ⊢ dn
								f { evv dn q ep0 } ⊢|

							∐. ln◂e . 
								∎|    
							
						∐. _nil◂{} . 
							∎ { evv dn ep0 }
					@.act { evv dn g ep0 }
						$ g ⊢ 
						∐ act_cns◂{ dl dp lc o ps gc g } .
							pnt.dst_ptn { evv dp } ⊢ { evv sdp }
							» _^ dn,sdp ⊢ dn,sdp,sr
								0'*"\t" "∐ .. ⊢ " 1' "\n" // 
							rp8.add_s8 { ep0 sr } ⊢ ep0 
							_inc dn ⊢ dn
							pnt.lc_code { evv dn lc ep0 } ⊢ { evv dn ep0 }
							_dec dn ⊢ dn
							act { evv dn g ep0 } ⊢| 
						∐. act_end◂{ drl dp lc o ps gc } .
							pnt.dst_ptn { evv dp } ⊢ { evv sdp }
							» _^ dn,sdp ⊢ dn,sdp,sr
								0'*"\t" "∐ .. ⊢ " 1' "\n" // 
							rp8.add_s8 { ep0 sr } ⊢ ep0 
							_inc dn ⊢ dn
							pnt.lc_code { evv dn lc ep0 } ⊢ { evv dn ep0 }
							_dec dn ⊢ dn
							∎ { evv dn ep0 }
					@.rle { evv dn ps ep0 }
						$ ps ⊢ 
						∐ ptn_cut◂cps .
							» _^ _ ⊢ sr
								" !| " //
							rp8.add_s8 { ep0 sr } ⊢ ep0
							rle_cut { evv dn cps ep0 } ⊢| 
						∐ ptn_seq◂{ p ps } .
							» _^ _ ⊢ sr
								" .. "  //
							rp8.add_s8 { ep0 sr } ⊢ ep0
							rle { evv dn ps ep0 } ⊢|  
						∐. ptn_end◂{} .
							∎ { evv dn ep0 }
					@.rle_cut { evv dn ps ep0 }
						$ ps ⊢ 
						∐ _cns◂{ p ps } .
							» _^ _ ⊢ sr
								" .. "  //
							rp8.add_s8 { ep0 sr } ⊢ ep0 
							rle_cut { evv dn ps ep0 } ⊢|  
						∐. _nil◂{} .
							∎ { evv dn ep0 } 
				∎∎
			§ act_regs {} 
				∎ _cns◂{ dst_reg◂%[ "_n" ] _cns◂{ dst_reg◂%[ "_r" ] _nil◂{} } }
			∎∎
		¶
			@.file = _lst◂glb_etr
			@.glb_etr
				∐ mdl_etr : { _s8 mdl_etr }
				∐ grm_etr : grm.t◂_s8◂name
				∐ grm_ln : { _s8 grm.exp◂name }
				∐ lc_etr : { _s8 lc_etr }
				∐ lc_qlq_etr : _lst◂{ _s8 lc_etr }
				∐ dt_etr : { _s8 dt_etr }
				∐ dt_qlq_etr : _lst◂{ _s8 dt_etr }
			@.mdl_etr
				∐ mdl_def : _lst◂glb_etr
				∐ mdl_ln : name
			@.lc_etr
				∐ lc_def : { _opn◂(RP.t◂_s8) DP◂_s8 _opn◂type lc_code◂_s8◂name }
				∐ lc_ln : cst◂name
				∐ lc_cst : lc_code◂_s8◂name
				∐ lc_ply : { RP.t◂_s8 SP◂_s8◂name }
			@.dt_etr
				∐ dt_def : { _lst◂_s8 _lst◂{ _s8 type } }
				∐ dt_ln : { _lst◂_s8 type }
		§§ pnt_file
			§ lc_etr0 = lc_etr 
			§ dt_etr0 = dt_etr
			§ dt_def0 = dt_def 
			§ dt_qlq_etr0 = dt_qlq_etr
			§ lc_qlq_etr0 = lc_qlq_etr
			##§ type_rcd0 = type_rcd 
			§ 
				@.f { evv dn f ep0 } 
					$ f ⊢ 
					∐ _cns◂{ hd tl } .
						glb_etr { evv dn hd ep0 } ⊢ { evv dn ep0 }
						f { evv dn tl ep0 } ⊢| 
					∐. _nil◂{} .
						∎ { evv dn ep0 }
				@.glb_etr { evv dn e ep0 }
					$ e ⊢ 
					∐ mdl_etr◂{ w me } .
						$ me ⊢ 
						∐ mdl_def◂el .
							» _^ dn,w ⊢ dn,w,sr
								0'*"\t" "§§ " 1' "\n" // 
							rp8.add_s8 { ep0 sr } ⊢ ep0 
							_inc dn ⊢ dn
							f { evv dn el ep0 } ⊢ { evv dn ep0 }
							_dec dn ⊢ dn
							» _^ dn ⊢ dn,sr 
								0'*"\t" "\t" "∎∎\n" // 
							rp8.add_s8 { ep0 sr } ⊢ ep0
							∎ { evv dn ep0 }
						∐. mdl_ln◂n .
							pnt_name n ⊢ sn
							» _^ dn,w,sn ⊢ dn,w,sn,sr
								0'*"\t" "§§ " 1' " = " 2' "\n" //
							rp8.add_s8 { ep0 sr } ⊢ ep0
							∎ { evv dn ep0 }
					∐ grm_etr◂l .
						» _^ dn ⊢ dn,sr
							0'*"\t" "§§+s8\n" //
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						_inc dn ⊢ dn
						grm.pnt.f { evv dn l ep0 } ⊢ { evv dn ep0 }
						_dec dn ⊢ dn
						∎ { evv dn ep0 }
					∐ grm_ln◂{ w e } . 
						∎ { evv dn ep0 } 
					∐ lc_etr0◂{ w lce } .
						» _^ dn,w ⊢ dn,w,sr
							0'*"\t" "§ " 1' //
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						_inc dn ⊢ dn
						lc_etr { evv dn lce ep0 } ⊢ { evv dn ep0 }
						_dec dn ⊢ dn
						∎ { evv dn ep0 }
					∐ lc_qlq_etr0◂q .
						» _^ dn ⊢ dn,sr
							0'*"\t" "§ \n" //
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						_inc dn ⊢ dn
						lc_qlq_etr { evv dn q ep0 } ⊢ { evv dn ep0 }
						_dec dn ⊢ dn
						∎ { evv dn ep0 }
					∐ dt_etr0◂{ w d } .
						» _^ dn,w ⊢ dn,w,sr
							0'*"\t" "¶ " 1' //
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						dt_etr { evv dn d ep0 } ⊢| 
					∐. dt_qlq_etr0◂q .
						» _^ dn ⊢ dn,sr
							0'*"\t" "¶\n" //
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						_inc dn ⊢ dn
						dt_qlq_etr { evv dn q ep0 } ⊢ { evv dn ep0 }
						_dec dn ⊢ dn
						∎ { evv dn ep0 }
				@.dt_qlq_etr { evv dn q ep0 }
					$ q ⊢ 
					∐ _cns◂{ { w d } q } .
						» _^ dn,w ⊢ dn,w,sr
							0'*"\t" "@." 1' "\n" // 
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						dt_etr { evv dn d ep0 } ⊢ { evv dn ep0 } 
						dt_qlq_etr { evv dn q ep0 } ⊢|
					∐. _nil◂{} .
						∎ { evv dn ep0 }
				@.dt_etr { evv dn e ep0 }
					$ e ⊢ 
					∐ dt_def0◂{ a l } .
						» _^ _ ⊢ sr
							"\n" //
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						_inc dn ⊢ dn
						dt_def { evv dn l ep0 } ⊢ { evv dn ep0 }
						_dec dn ⊢ dn
						∎ { evv dn ep0 }
					∐. dt_ln◂{ a t } .
						type t ⊢ st
						» _^ _ ⊢ sr
							" = " //
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						∎ { evv dn ep0 }
				@.dt_def { evv dn l ep0 }
					$ l ⊢ 
					∐ _cns◂{ { w t } l } .
						type t ⊢ st
						» _^ dn,w,st ⊢ dn,w,st,sr
							0'*"\t" "∐ " 1' " : " 2' "\n" //
						dt_def { evv dn l ep0 } ⊢|
					∐. _nil◂{} .
						∎ { evv dn ep0 }
				@.type t 
					∎ %[ "?type" ] 
				\[
				@.type t
					$ t ⊢ 
					∐ type_rcd0◂l .
						type_rcd l ⊢ sl
						» _^ sl ⊢ sl,sr
							"{ " 0' "}" //
						∎ sr
					∐ imp◂{ t0 t1 } .
						type t0 ⊢ st0
						type t1 ⊢ st1
						» _^ st0,st1 ⊢ st0,st1,sr
							0' " → " 1' //
						∎ sr
					∐ app◂{ t0 t1 } .
						type t0 ⊢ st0
						type t1 ⊢ st1
						» _^ st0,st1 ⊢ st0,st1,sr
							0' "◂" 1' //
						∎ sr
					∐ type_name◂n .
						pnt_name n ⊢ sn
						∎ sn
					∐. type_var◂v .
						» _^ v ⊢ v,sr
							0' "'" //
						∎ sr
				@.type_rcd = lst.pnt◂◂{ type " " } 
				\]
				@.lc_etr { evv dn e ep0 }
					$ e ⊢ 
					∐ lc_def◂{ o_t dp dt lc } .
						∐ dt ⊢ _some◂dt . 
							type dt ⊢ sdt 
							pnt.dst_ptn { evv dp } ⊢ { evv sdp }
							» _^ sdp,sdt ⊢ sdp,sdt,sr
								" " 0' " : " 1' "\n" //
							rp8.add_s8 { ep0 sr } ⊢ ep0 
							_inc dn ⊢ dn
							pnt.lc_code { evv dn lc ep0 } ⊢ { evv dn ep0 }
							_dec dn ⊢ dn
							∎ { evv dn ep0 }
						∐. . 
							pnt.dst_ptn { evv dp } ⊢ { evv sdp }
							» _^ sdp ⊢ sdp,sr
								" " 0' " : \n" //
							rp8.add_s8 { ep0 sr } ⊢ ep0 
							_inc dn ⊢ dn
							pnt.lc_code { evv dn lc ep0 } ⊢ { evv dn ep0 }
							_dec dn ⊢ dn
							∎ { evv dn ep0 }
					∐ lc_ln◂c .
						pnt.cst_n { evv c } ⊢ { evv sc }
						» _^ sc ⊢ sc,sr
							" = " 0' "\n" //
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						∎ { evv dn ep0 }
					∐ lc_ply◂{ x p } . 
						rp8.add_s8 { ep0 %[ "◂ .. = .." ] } ⊢ ep0
						∎ { evv dn ep0 }
					∐. lc_cst◂lc .
						» _^ _ ⊢ sr
							"% \n" //
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						_inc dn ⊢ dn
						pnt.lc_code { evv dn lc ep0 } ⊢ { evv dn ep0 }
						_dec dn ⊢ dn
						∎ { evv dn ep0 }
				@.lc_qlq_etr { evv dn q ep0 }
					$ q ⊢ 
					∐ _cns◂{ { w le } q } .  
						» _^ dn,w ⊢ dn,w,sr
							0'*"\t" "@." //
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						lc_etr { evv dn le ep0 } ⊢ { evv dn ep0 } 
						lc_qlq_etr { evv dn q ep0 } ⊢| 
					∐. _nil◂{} .
						∎ { evv dn ep0 }				
			∎∎
		¶ k_of a',b' 
			∐ hp_of : b' 
			∐ im_of : a' 
		§ r64_of_rt { evv p }
			∐ p ⊢ RP.atm◂a . 
				∐ a ⊢ hp◂{ r0 h0 }; h0 ⊢ hp.r64◂{} . 
					hp_of r0 ⊢ a 
					∎ { evv a }
				∐ a ⊢ hp_im◂iv . 
					r64_of_k { evv iv } ⊢ { evv x } 
					im_of x ⊢ x  
					∎ { evv x } 
				∐. . 
					RP.atm a ⊢ p 
					» "r64_of_rt 0" _ ⊢ ee0 
					_emt ee0 ⊢ _ 
					pnt.rt { evv p } ⊢ { evv sp } 
					_emt sp ⊢ _ 
					∎| 
			∐. . 
				» "r64_of_rt 1" _ ⊢ ee0 
				_emt ee0 ⊢ _ 
				∎| 
		§ s8_of_rt { evv p }
			∐ p ⊢ RP.atm◂a . 
				∐ a ⊢ hp◂{ r0 h0 }; h0 ⊢ hp.ref◂q; q ⊢ hp.opq◂{} . 
					hp_of r0 ⊢ a 
					∎ { evv a }
				∐ a ⊢ hp_im◂iv . 
					s8_of_k { evv iv } ⊢ { evv x } 
					im_of x ⊢ x  
					∎ { evv x } 
				∐. . 
					» "s8_of_rt 0" _ ⊢ ee0 
					_emt ee0 ⊢ _ 
					∎| 
			∐. . 
				» "s8_of_rt 1" _ ⊢ ee0 
				_emt ee0 ⊢ _ 
				∎|
		§ arr_of_rt { evv p }
			∐ p ⊢ RP.atm◂a . 
				∐ a ⊢ hp◂{ r0 h0 }; h0 ⊢ hp.ref◂q; q ⊢ hp.arr◂h . 
					hp_of { r0 h } ⊢ a 
					∎ { evv a }
				∐. . 
					» "arr_of_rt 0" _ ⊢ ee0 
					_emt ee0 ⊢ _ 
					∎| 
			∐. . 
				» "arr_of_rt 0" _ ⊢ ee0 
				_emt ee0 ⊢ _ 
				∎|
		∎∎
	§§ stt_v 
			§
				@.ptn_of_hp { v0 h0 }
					∐ h0 ⊢ ast.hp.ref◂q0; q0 ⊢ ast.hp.rcd◂l0 .
						ptn_of_hp_lst { v0 l0 } ⊢ { v0 l0 } 
						RP.rcd l0 ⊢ p0 
						∎ { v0 p0 }
					∐ h0 ⊢ ast.hp.ref◂q0; q0 ⊢ ast.hp.pt_hp◂{} . 
						alc_vs v0 ⊢ { v0 m0 } 
						alc_vs v0 ⊢ { v0 m1 }
						ast.pt { m0 m1 } ⊢ p0 
						RP.atm p0 ⊢ p0 
						∎ { v0 p0 }
					∐. . 
						alc_vs v0 ⊢ { v0 m0 }
						ast.hp { m0 h0 } ⊢ a0 
						RP.atm a0 ⊢ p0 
						∎ { v0 p0 } 
				@.ptn_of_hp_lst = lst.map_l◂◂ptn_of_hp
			§ 
				@.mk_rset_atm { v a }
					$ a ⊢ 
					∐ ast.hp◂{ r h } .
						rset.set_t { v r } ⊢ { v r }
						∎ v 
					∐ ast.hp_im◂_ . 
						∎ v 
					∐ ast.pt◂{ r0 r1 } .
						rset.set_t { v r0 } ⊢ { v r0 } 
						rset.set_t { v r1 } ⊢ { v r1 }
						∎ v 
					∐. ast.stt_adt◂{ i n p } . 
						mk_rset { v p } ⊢|
				@.mk_rset { v p }
					$ p ⊢ 
					∐ RP.rcd◂l . 
						mk_rset_lst { v l } ⊢| 
					∐. RP.atm◂a . 
						mk_rset_atm { v a } ⊢|
				@.mk_rset_lst = lst.fld_l◂◂mk_rset
			§ mk_rset { p v } 
				mk_rset { v p } ⊢| 
			§	@.mk_rset_env { irv l v } 
					$ l ⊢ 
					∐ _cns◂{ i l } .
						lod_tv { irv i } ⊢ { irv i p } 
						mk_rset { p v } ⊢ v 
						mk_rset_env { irv l v } ⊢| 
					∐. _nil◂{} . 
						∎ { irv v }
			§ mk_rset_env_x { irv rl } 
				rset.ini {} ⊢ v0 
				$ rl ⊢ rl,rl0 
				mk_rset_env { irv rl0 v0 } ⊢ { irv v0 }
				∎ { irv rl v0 } 
			§ mk_rset_x p 
				$ p ⊢ p,p0
				rset.ini {} ⊢ v  
				mk_rset { p0 v } ⊢ v
				∎ { p v } 
			§ r64_reg◂r = RP.atm◂ast.hp◂{ %r ast.hp.r64◂{} }
			§ r64_im x 
				∎ RP.atm◂ast.hp_im◂ast.k_r64◂%x 
			§ s8_reg r 
				∎ RP.atm◂ast.hp◂{ %r ast.hp.ref◂ast.hp.opq◂{} }  
			§ s8_im s 
				∎ RP.atm◂ast.hp_im◂ast.k_s8◂%s
			§ arr_reg { r h } 
				∎ RP.atm◂ast.hp◂{ %r ast.hp.ref◂ast.hp.arr◂%h }   
			§ @.ptns_of_env { irv l } 
				$ l ⊢ 
				∐ _cns◂{ i l } .
					lod_tv { irv i } ⊢ { irv i p } 
					ptns_of_env { irv l } ⊢ { irv l } 
					∎ { irv _cns◂{ %p %l } } 
				∐. _nil◂{} . 
					∎ { irv _nil◂{} } 
			∎∎
	§ mk_app_i { p a } 
		∎ RP.atm◂T.var◂ast.app◂{ p a } 
	§ mk_app = lst.fld_l◂◂mk_app_i
	§§ syntax
	§§+s8 
		@.wc 
			∐. "_" !| ; ⊢ { {} },p 
				∎ _some◂{}
				∐ " " ⊢ { {} } 
					∎ _some◂{}
				∐ "\t" ⊢ { {} } 
					∎ _some◂{}
				∐ wc_tl !| ⊢ { xx }
					∎ _none◂{}
				∐. ⊢ { } 
					∎ _some◂{}
		@.wc_tl 
			∐ "," !| ⊢ { {} }
				∎ _none◂{} 
			∐. ⊢ { }
				_some {} ⊢ a  
				∎ a
	§§+s8
		@.name
			∐# prm_word "." name ⊢ { w {} n }
				ast.mdl_n { w n } ⊢ r
				_some r ⊢ a
				∎ a
			∐.# prm_word ⊢ { w }
				ast.fst_n w ⊢ r
				_some r ⊢ a
				∎ a
	§§+s8
		@.nl
			∐.# "\n" nl_tl ⊢ { {} nn }
				_some {} ⊢ a 
				∎ a 
		@.nl_tl 
			∐# "\n" nl_tl ⊢ { {} nn }
				_some {} ⊢ a 
				∎ a 
			∐.# ⊢ { } 
				_some {} ⊢ a 
				∎ a 
	¶ prs_rslt◂a'
		∐ prs_vld : a'
		∐ prs_err : _lst◂{ _r64 _r64 _s8 }  
	§ prs_add { a e } 
		$ e ⊢ 
		∐ prs_vld◂b . 
			prs_vld { a b } ⊢ r 
			∎ r 
		∐. prs_err◂e . 
			prs_err e ⊢ r 
			∎ r 
	§ prs_cct { e0 e1 } 
		$ e0 ⊢
		∐ prs_vld◂a0 . 
			$ e1 ⊢ 
			∐ prs_vld◂a1 . 
				prs_vld { a0 a1 } ⊢ e 
				∎ e 
			∐. prs_err◂l1 . 
				prs_err l1 ⊢ e 
				∎ e 
		∐. prs_err◂l0 .
			$ e1 ⊢ 
			∐ prs_vld◂a1  . 
				prs_err l0 ⊢ e 
				∎ e 
			∐. prs_err◂l1 . 
				apnd { l0 l1 } ⊢ l
				prs_err l ⊢ e 
				∎ e  
	§ prs_cct2 { e0 e1 e2 } 
		prs_cct { e0 e1 } ⊢ e 
		prs_cct { e e2 } ⊢ e 
		$ e ⊢ 
		∐ prs_vld◂{ { e0 e1 } e2 } .
			prs_vld { e0 e1 e2 } ⊢ e 
			∎ e 
		∐. prs_err◂e .
			prs_err e ⊢ e  
			∎ e 
	§ mk_prs_err { n r s } 
		$ _nil◂{} ⊢ l 
		_cns { { n r s } l } ⊢ l 
		prs_err l ⊢ e  
		∎ e 
	§ add_prs_err { n r s e } 
		$ e ⊢ 
		∐ prs_err◂e . 
			∎ prs_err◂_cns◂{ { n r s } e }
		∐. prs_vld◂_ . 
			∎ prs_err◂_cns◂{ { n r s } _nil◂{} } 
	§ prs_act◂◂F { s p } 
		$ p ⊢ 
		∐ prs_vld◂a . 
			F { s a } ⊢ b  
			prs_vld b ⊢ p 
			_some p ⊢ a 
			∎ a 
		∐. prs_err◂e . 
			prs_err e ⊢ p 
			_some p ⊢ r 
			∎ r 
	§ @.pnt_prs_err el 
		$ el ⊢ 
		∐ _cns◂{ { n0 n1 em } el } . 
			pnt_prs_err el ⊢ sel 
			» _^ n0,n1,em,sel ⊢ n0,n1,em,sel,sr 
				"prs_err " 0d' "-" 1d' ":" 2' "\n" 
				3' // 
			∎ sr   
		∐. _nil◂{} . 
			» "" _ ⊢ sr 
			∎ sr 
			

	\[
	§§+s8 
		@.g0◂◂{ G0 G1 } 
		@.g1 = g0◂◂{ g2 g3 }
	\]
	§§+s8
		@.cst
			∐ _scf_d "r" ⊢ { x {} }
				∎ _some◂ast.k_r64◂x
			∐ "0x" _scf_x "r" ⊢ { {} x {} }
				∎ _some◂ast.k_r64◂x  
			∐ stg_ltr ⊢ { s }
				∎ _some◂ast.k_s8◂s
			∐. name ⊢ { n }
				∎ _some◂ast.k_name◂n
	§§ ct_stx 
		§§+s8 
			@.ptn 
				∐.# atm ; ⊢ { a0 },a1
					∐ a1 ⊢ _some◂a1 . 
						∎ _some◂RP.atm◂ast.k_app◂{ a0 a1 }
					∐. . 
						∎ _some◂a0 

					∐# "◂◂" !| ptn ⊢ { {} a1 }
						∎ _some◂_some◂a1
					∐.# ⊢ { }
						∎ _some◂_none◂{}
			@.atm 
				∐# name "◂◂◂" !| ptn ⊢ { n {} p } 
					∎ _some◂RP.atm◂ast.k_agl◂{ n p }
				∐# "(" ptn ")" ⊢ { {} a {} }
					∎ _some◂a
				∐# "{" lst.stx_line◂+◂ptn "}" ⊢ { {} l {} } 
					∎ _some◂RP.rcd◂l
				∐.# cst ⊢ { c } 
					∎ _some◂RP.atm◂c
		∎∎
		\\§§ ct_ptn = ct_stx.ptn
		§ ct_ptn = ct_stx.ptn
	§§+s8 @.mtc 
		∐# name "◂" !| RP.stx◂+◂mtc ⊢ { n {} mp } 
			∎ _some◂ast.mtc_agl◂{ n mp }
		∐# "%[" !| cst "]" ⊢ { {} c {} }
			∎ _some◂ast.mtc_cst◂c
		∐# "%" word ⊢ { {} w } 
			∎ _some◂ast.mtc_reg◂w 
		∐# word ⊢ { w } 
			∎ _some◂ast.mtc_reg◂w
		∐.# "_" ⊢ { {} }
			∎ _some◂ast.mtc_wc◂_none◂{}
	§§+s8 mtc_ptn = RP.stx◂+◂mtc
	§§+s8 mtc_ptn_lst = lst.stx_line◂+◂mtc_ptn 
	§§+s8 mtc_tl = lst.stx_cmm_tl◂+◂mtc 

	§§+s8 
		@.src 
			∐# "%[" cst "]" ⊢ { {} c {} }
				∎ _some◂ast.im_reg◂c
			∐# name "◂" RP.stx◂+◂src ⊢ { n {} sp } 
				∎ _some◂ast.src_agl◂{ n sp }
			∐# reg_word ⊢ { w }
				∎ _some◂ast.src_reg◂w
			∐.# "⟦" !| src_cns "⟧" ⊢ { {} c {} }
				∎ _some◂c 
		
		@.src_cns 
			∐# RP.stx◂+◂src ; ⊢ { a },l 
				##∎ _some◂RP.atm◂ast.src_agl◂{ fst_n◂%[ "_cns" ] RP.rcd◂⟦ a l ⟧ }
				∎ _some◂ast.src_agl◂{ ast.fst_n◂%[ "_cns" ] RP.rcd◂_cns◂{ a _cns◂{ l _nil◂{} } } }
				
				∐# "<" reg_word ⊢ { {} w } 
					∎ _some◂RP.atm◂ast.src_reg◂w 
				∐.# src_cns ⊢ { l } 
					∎ _some◂RP.atm◂l
			∐.# ⊢ { } 
				∎ _some◂ast.src_agl◂{ ast.fst_n◂%[ "_nil" ] RP.rcd◂_nil◂{} } 

	§§+s8 src_ptn = RP.stx◂+◂src 
	§§+s8 src_ptn_lst = lst.stx_line◂+◂src_ptn 
	§§+s8 src_tl = lst.stx_cmm_tl◂+◂src 

	§§+s8 @.dst
		∐ "%" !| word ⊢ { {} w }
			∎ _some◂ast.dst_reg◂w
		∐ word ⊢ { w }
			∎ _some◂ast.dst_reg◂w
		∐. "_" ⊢ { {} }
			∎ _some◂ast.wc◂_none◂{}
	§§+s8 dst_ptn = RP.stx◂+◂dst
	§§+s8 dst_ptn_lst = lst.stx_line◂+◂dst_ptn 
	§§+s8 dst_tl = lst.stx_cmm_tl◂+◂dst 
	§§+s8 dst_ptn_tl = lst.stx_cmm_tl◂+◂dst_ptn
	§§+s8
		@.type
			∐.# type_atm type_app_tl type_tl ⊢ { t0 t1 t2 }
				mk_app { t0 t1 } ⊢ t
				∐ t2 ⊢ _some◂t2 .
					∎ _some◂RP.atm◂T.imp◂{ t t2 }
				∐. t2 ⊢ _none◂{} .
					∎ _some◂t
		@.type_tl
			∐# "→" !| type ⊢ { {} t }
				∎ _some◂_some◂%t
			∐.# ⊢ { }
				∎ _some◂_none◂{}
		@.type_app_tl
			∐# "◂" !| type_atm type_app_tl ⊢ { {} t0 t1 }
				∎ _some◂_cns◂{ %t0 %t1 }
			∐.# ⊢ { }
				$ _nil◂{} ⊢ r
				_some r ⊢ a
				∎ _some◂_nil◂{}
		@.type_atm
			∐# "{" lst.stx_line◂+◂type "}" ⊢ { {} l {} }
				∎ _some◂RP.rcd◂%l
			∐# "(" type ")" ⊢ { {} t {} }
				∎ _some◂%t
			∐# var ⊢ { v }
				∎ _some◂RP.atm◂T.var◂ast.type_var◂%v 
			∐.# name ⊢ { n }
				∎ _some◂RP.atm◂T.var◂ast.type_name◂%n
		@.var
			∐. word "'" ⊢ { w {} }
				∎ _some◂%w
			
	§§+s8
		@.line_res_i 
			∐# "\n" ⊢ { {} }
				_some {} ⊢ a 
				∎ a 
			∐# _byt line_res_i ⊢ { b {} }
				_some {} ⊢ a
				∎ a  
			∐.# ⊢ { }
				_some {} ⊢ a 
				∎ a 
	§§+s8 
		@.line_res 
			∐. line_res_i ⊢ { nn } 
				_some { _n _r } ⊢ a 
				∎ a 
	§§+s8 
		@.line_nl 
			∐# "\n" ⊢ { {} } 
				_some {} ⊢ a 
				∎ a 
			∐.# _byt line_nl ⊢ { b nn } 
				_some {} ⊢ a 
				∎ a 
	§§+s8 
		@.nls 
			∐# "\n" !| nls ⊢ { {} xx }
				prs_vld {} ⊢ p 
				_some p ⊢ a 
				∎ _some◂prs_vld◂{} 
			∐# "##" !| line_res nls ⊢ { {} xx yy } 
				∎ _some◂prs_vld◂{}
			∐# "\\\\" !| line_res nls ⊢ { {} xx yy } 
				∎ _some◂prs_vld◂{}
			∐# "\\[" !| ; ⊢ { {} },p
				∎ _some◂p
				∐# "\n" cmt_in nls ⊢ { {} p0 p1 }
					prs_cct { p0 p1 } ⊢ pr 
					$ pr ⊢ 
					∐ prs_vld◂{ p0 p1 } . 
						prs_vld {} ⊢ p 
						_some p ⊢ a 
						∎ a 
					∐. prs_err◂e . 
						pnt_prs_err e ⊢ s 
						_emt s ⊢ s 
						∎| 		
				∐.# ⊢ { } 
					^ _n,_r ⊢ n,r,sr 
						"nls_err " 0d' "-" 1d' ":\n" //
					_emt sr ⊢ sr 
					∎|   
			∐.# ⊢ { } 
				prs_vld {} ⊢ p 
				_some p ⊢ a 
				∎ a
		@.cmt_in 
			∐# "\\[" !| ; ⊢ { {} },p
				_some p ⊢ a 
				∎ a 
				∐# "\n" cmt_in cmt_in ⊢ { {} p0 p1 }
					prs_cct { p0 p1 } ⊢ pr 
					$ pr ⊢ 
					∐ prs_vld◂{ p0 p1 } . 
						prs_vld {} ⊢ p 
						_some p ⊢ a 
						∎ a 
					∐. prs_err◂e . 
						pnt_prs_err e ⊢ s 
						_emt s ⊢ s 
						∎| 		
					
					∐.# ⊢ { } 
						∎ _some◂prs_err◂_cns◂{ { %_n %_r %[ "blk_cmt 0" ] } _nil◂{} }
			∐ "\\]" nl_eof ⊢ { {} _ } 
				∎ _some◂prs_vld◂{} 
			∐# line_nl cmt_in ⊢ { nn c }
				_some c ⊢ a 
				∎ a
			∐.# ⊢ { } 
				∎ _some◂prs_err◂_cns◂{ { %_n %_r %[ "blk_cmt 1" ] } _nil◂{} }

	§§+s8 @.nls_lst◂+◂G 
		∐# nls G nls_lst◂+◂G ⊢ { _ a l } 
			∎ _some◂_cns◂{ a l } 
		∐.# nls ⊢ { _ } 
			∎ _some◂_nil◂{} 
	
	§§+s8 @.nls_lst_prs◂+◂G 
		∐# nls G nls_lst_prs◂+◂G ⊢ { _ a l } 
			prs_cct { a l } ⊢ e 
			$ e ⊢ 
			∐ prs_vld◂{ a l } . 
				∎ _some◂prs_vld◂_cns◂{ a l }
			∐. prs_err◂e . 
				∎ _some◂prs_err◂e 
		∐.# nls ⊢ { _ } 
			∎ _some◂prs_vld◂_nil◂{} 
	
	§§+s8 
		@.glb_etr_ch 
			∐* "§§+s8" ⊢ { {} }
				_some {} ⊢ a 
				∎ a
			∐* "§§" ⊢ { {} }
				_some {} ⊢ a 
				∎ a
			∐* "§" ⊢ { {} }
				_some {} ⊢ a 
				∎ a
			∐* "¶" ⊢ { {} }
				_some {} ⊢ a 
				∎ a
			∐.* "∎∎" ⊢ { {} }
				_some {} ⊢ a 
				∎ a
		@.glb_etr_res_ch 
			∐* glb_etr_ch !| ⊢ { g }
				_none {} ⊢ a 
				∎ a  
			∐.* _byt ⊢ { b } 
				_some {} ⊢ a 
				∎ a
		@.glb_etr_clq_ch 
			∐* "@" !| ⊢ { q } 
				_none {} ⊢ a 
				∎ a 
			∐* glb_etr_ch !| ⊢ { c } 
				_none {} ⊢ a
				∎ a  
			∐.* _byt ⊢ { b } 
				_some {} ⊢ a 
				∎ a
		@.glb_etr_res_clq 
			∐* glb_etr_clq_ch glb_etr_res_clq ⊢ { c r }
				_some {} ⊢ a 
				∎ a 
			∐.* ⊢ { } 
				_some {} ⊢ a 
				∎ a   
		@.glb_etr_res_line 
			∐# "\n" ⊢ { n } 
				_some {} ⊢ a 
				∎ a 
			∐# glb_etr_ch !| ⊢ { g } 
				_none {} ⊢ a 
				∎ a 
			∐# "@" !| ⊢ { q } 
				_none {} ⊢ a 
				∎ a 
			∐# _byt glb_etr_res_line ⊢ { b r } 
				_some {} ⊢ a 
				∎ a 
			∐# _byt ⊢ { b } 
				_some {} ⊢ a 
				∎ a 
			∐.# ⊢ { } 
				_some {} ⊢ a 
				∎ a
	§§+s8 @.rtm_sbl 
		∐ "§~" ⊢ { {} } 
			_some {} ⊢ a 
			∎ a 
		∐. "§%" ⊢ { {} } 
			_some {} ⊢ a 
			∎ a  
	§§+s8 
		@.s8_ptn
			∐* var_idx "*" !| stg_ltr ⊢ { i {} s }
				∎ _some◂ast.exp_s8_for◂{ %i ast.k_s8◂%s }
			∐* s8_ptn_line ⊢ { s }
				∎ _some◂ast.exp_s8_cst◂ast.k_s8◂%s
			∐* stg_ltr ⊢ { s }
				∎ _some◂ast.exp_s8_cst◂ast.k_s8◂%s
			∐* name ⊢ { n }
				∎ _some◂ast.exp_s8_cst◂ast.k_name◂%n
			∐.* s8_fmt ⊢ { f }
				∎ _some◂ast.exp_s8_idx◂%f
		@.var_idx
			∐. _scf_d "'" ⊢ { x {} }
				∎ _some◂%x
		@.s8_fmt
			∐ _scf_d "d'" ⊢ { d {} }
				∎ _some◂{ ast.fmt_d◂{} %d }
			∐ _scf_d "x'" ⊢ { d {} }
				ast.fmt_x {} ⊢ f
				_some { f d } ⊢ a
				∎ a
			∐. _scf_d "'" ⊢ { d {} }
				ast.fmt_s {} ⊢ f
				_some { f d } ⊢ a
				∎ a
		@.s8_ptn_line
			∐. "`" line ⊢ { {} l }
				rp8.to_s8 l ⊢ s 
				_some s ⊢ a
				∎ a
		@.line
			∐ "\n" ⊢ { {} }
				rp8.pfx_chr { %[ 10r ] rp8.e◂{} } ⊢ l 
				_some l ⊢ a
				∎ a
			∐. _byt line ⊢ { b l }
				rp8.pfx_chr { b l } ⊢ l 
				_some l ⊢ a
				∎ a
	§§+s8 
      @.s8_ptn_lst 
			∐# nls "//" ⊢ { nn {} } 
				$ _nil◂{} ⊢ l 
				_some l ⊢ a 
				∎ a 
			∐.# nls s8_ptn s8_ptn_lst ⊢ { nn p l } 
				_cns { p l } ⊢ l 
				_some l ⊢ a 
				∎ a   
	§§ act
		§ lc_mtc { {} m } 
			ast.mtc m ⊢|
		§ id_0 { {} { s il } }
			ast.op_id { s il } ⊢|
		§ id_mtc { {} m } 
			ast.id_mtc m ⊢|
		§ id_line { { r1 rs } lc } 
			_cns { r1 rs } ⊢ rs 
			ast.id_line { rs lc } ⊢|  
		∎∎

	§§+s8 
		@.mtc_test
			∐# src_ptn "⊢" !| name "◂" mtc_ptn ⊢ { r0 {} n {} r1 }
				∎ _some◂ast.mtc_id◂{ %r0 RP.atm◂ast.mtc_agl◂{ %n %r1 } }
			∐# mtc_val "=<" mtc_val ⊢ { v0 {} v1 }
				ast.mtc_cmp_test { v0 v1 } ⊢ r 
				_some r ⊢ a 
				∎ a  
			∐.# mtc_val "=" mtc_val ⊢ { v0 {} v1 }
				ast.mtc_test { v0 v1 } ⊢ r
				_some r ⊢ a
				∎ a
		@.mtc_test_tl
			∐# ";" !| mtc_test mtc_test_tl ⊢ { {} e l }
				_cns { e l } ⊢ l
				_some l ⊢ a
				∎ a
			∐.# "." "\n" ⊢ { {} {} }
				$ _nil◂{} ⊢ l
				_some l ⊢ a
				∎ a
		@.mtc_line_tl
			∐# ";" !| mtc_test mtc_test_tl ⊢ { {} e l }
				∎ _some◂prs_vld◂_cns◂{ %e %l } 
			∐# "." "\n" ⊢ { {} {} }
				∎ _some◂prs_vld◂_nil◂{}
			∐.# line_res ⊢ { bb } 
				∎ _some◂prs_err◂_cns◂{ { %_n %_r %[ "mtc_line_tl 0" ] } _nil◂{} } 
		@.mtc_val
			∐ word "'" ⊢ { w {} }
				ast.test_var w ⊢ v
				_some v ⊢ a
				∎ a
			∐. cst ⊢ { c }
				ast.test_cst c ⊢ v
				_some v ⊢ a
				∎ a
	§§+s8 
		@.lc_exp_s8_sd
			∐* wc "⊢" !| dst ⊢ { xx {} r }
				## ‹ { ⟦⟧ ⟦ %r ⟧ } ›
				∎ _some◂{ _nil◂{} _cns◂{ %r _nil◂{} } }  
			∐.* src src_tl "⊢" dst dst_tl ⊢ { r0 rs0 {} r1 rs1 }
				_cns { r0 rs0 } ⊢ rs0
				_cns { r1 rs1 } ⊢ rs1
				_some { rs0 rs1 } ⊢ a
				∎ a
	§§+s8	
		@.mtc_line
			∐# mtc_test mtc_test_tl ⊢ { e0 l }
				_cns { e0 l } ⊢ l
				prs_vld l ⊢ l 
				_some l ⊢ a
				∎ a
			∐# "." "\n" ⊢ { {} {} }
				$ _nil◂{} ⊢ l
				prs_vld l ⊢ l 
				_some l ⊢ a
				∎ a
			∐.# line_res ⊢ { bb } 
				∎ _some◂prs_err◂_cns◂{ { %_n %_r %[ "mtc_line 0" ] } _nil◂{} }  
	§§+s8 
		@.lc_code
			∐* nls "∎|" ⊢ { nn {} }
				∎ _some◂prs_vld◂ast.exn◂%_n
			∐# nls "∎" !| ; ⊢ { nn {} },r
				∎ _some◂%r  

				∐# "\n" ⊢ { {} } 
					∎ _some◂prs_vld◂ast.ret◂_none◂{} 
				∐# src_ptn "\n" ⊢ { r {} }
					∎ _some◂prs_vld◂ast.ret◂_some◂%r
				∐.# line_res ⊢ { b } 
					∎ _some◂prs_err◂_cns◂{ { %_n %_r %[ "lc_code ∎ .. " ] } _nil◂{} }
			∐* lc_mtc ⊢ { m }
				prs_act◂◂(act.lc_mtc) { {} m } ⊢| 
			∐# nls "$" !| ; ⊢ { nn {} },r
				prs_act◂◂act.id_0 { {} r } ⊢|
				
				∐# src_ptn "⊢" !| ; ⊢ { s {} },il 
					prs_add { s il } ⊢ a 
					_some a ⊢ a 
					∎ a 
					
					∐# "\n" lc_id_mtc ⊢ { {} m }
						prs_act◂◂(act.id_mtc) { {} m } ⊢|	
					∐.# dst_ptn dst_ptn_tl "\n" lc_code ⊢ { r1 rs {} lc }
						prs_act◂◂(act.id_line) { { r1 rs } lc } ⊢|
				∐# line_res lc_id_mtc ⊢ { { n r } lc }
					$ lc ⊢ 
					∐ prs_vld◂x . 
						mk_prs_err { n r %[ "glb_etr id_line line_res 0" ] } ⊢ l 
						_some l ⊢ a 
						∎ a
					∐. prs_err◂l . 
						» "glb_etr id_line line_res 1" _ ⊢ s
						_cns { { n r s } l } ⊢ l 
						prs_err l ⊢ l 
						_some l ⊢ a 
						∎ a
				∐.# line_res lc_code ⊢ { { n r } lc } 
					$ lc ⊢ 
					∐ prs_vld◂x . 
						mk_prs_err { n r %[ "glb_etr id_line line_res 2" ] } ⊢ l 
						_some l ⊢ a 
						∎ a
					∐. prs_err◂l . 
						∎ _some◂prs_err◂_cns◂{ { n r %[ "glb_etr id_line line_res 3" ] } %l }
			∐# nls "^" !| lc_exp_s8_sd "\n" s8_ptn_lst lc_code ⊢ { nn {} { s d } {} ps lc }
				ast.op_exp_s8 { ps s d } ⊢ l 
				$ lc ⊢ 
				∐ prs_vld◂lc . 
					ast.seq { l lc } ⊢ lc 
					prs_vld lc ⊢ lc 
					_some lc ⊢ a
					∎ a
				∐. prs_err◂e . 
					prs_err e ⊢ e 
					_some e ⊢ a 
					∎ a 
			∐* nls "»" "_^" !| lc_exp_s8_sd s8_ptn_lst lc_code ⊢ { nn {} {} { s d } ps lc }
				ast.op_exp_s8 { ps s d } ⊢ l
				$ lc ⊢ 
				∐ prs_vld◂lc . 
					ast.seq { l lc } ⊢ lc 
					prs_vld lc ⊢ lc 
					_some lc ⊢ a
					∎ a
				∐. prs_err◂e . 
					prs_err e ⊢ e 
					_some e ⊢ a 
					∎ a 
			∐* nls "»" !| cst "_" "⊢" dst_ptn lc_code ⊢ { nn {} c {} {} r lc }
				$ lc ⊢ 
				∐ prs_vld◂lc . 
					∎ _some◂prs_vld◂ast.op_id◂{ RP.atm◂ast.im_reg◂%c ast.id_line◂{ _cns◂{ %r _nil◂{} } %lc } }
				∐. prs_err◂e . 
					∎ _some◂prs_err◂%e			
			 
			∐# nls ct_ptn src_ptn ; ⊢ { nn n r0 },o 
				$ o ⊢ 
				∐ prs_vld◂o . 
					$ o ⊢ 
					∐ _some◂{ y lc } .
						∎ _some◂prs_vld◂ast.seq◂{ ast.op_name◂{ n r0 y } lc }
					∐. _none◂{} . 
						∎ _some◂prs_vld◂ast.jmp◂{ n r0 }
				∐. prs_err◂e . 
					∎ _some◂prs_err◂e 
				
				∐* "⊢|" !| ⊢ { {} }
					∎ _some◂prs_vld◂_none◂{} 
				∐# "⊢" dst_ptn "\n" !| lc_code ⊢ { {} r1 {} lc }
					$ lc ⊢ 
					∐ prs_vld◂lc . 
						∎ _some◂prs_vld◂_some◂{ r1 lc }
					∐. prs_err◂e . 
						∎ _some◂prs_err◂e
				∐.* line_res lc_code ⊢ { { nn rr } lc }
					$ lc ⊢ 
					∐ prs_vld◂_ . 
						∎ _some◂prs_err◂_cns◂{ { %nn %rr %[ "lc_code 20" ] } _nil◂{} }
					∐. prs_err◂e . 
						∎ _some◂prs_err◂_cns◂{ { %nn %rr %[ "lc_code 21" ] } %e } 
			∐.* glb_etr_res_line ; ⊢ { r },lc
				add_prs_err { _n _r %[ "lc_code 9" ] lc } ⊢ e 
				∎ _some◂e 
				
				∐* lc_code ⊢ { lc } 
					∎ _some◂%lc
				∐.* glb_etr_res_clq ⊢ { r } 
					∎ _some◂prs_err◂_cns◂{ { %_n %_r %[ "lc_code 11" ] } _nil◂{} }  
		@.id_line
			∐* lc_id_mtc ⊢ { m }
				$ m ⊢ 
				∐ prs_vld◂m . 
					∎ _some◂prs_vld◂ast.id_mtc◂m
				∐. prs_err◂e . 
					∎ _some◂prs_err◂e
			∐.* dst_ptn dst_ptn_tl lc_code ⊢ { r1 rs lc }
				$ lc ⊢ 
				∐ prs_vld◂lc . 
					##∎ _some◂prs_vld◂ast.id_line◂{ ⟦ %r1 < %rs ⟧ %lc }
					∎ _some◂prs_vld◂ast.id_line◂{ _cns◂{ r1 rs } lc }
				∐. prs_err◂e . 
					∎ _some◂prs_err◂e 
		@.lc_mtc
			∐* nls "∐." !| mtc_line lc_code ⊢ { nn {} l c0 }
				prs_cct { l c0 } ⊢ e 
				$ e ⊢
				∐ prs_vld◂{ l c0 } . 
					∎ _some◂prs_vld◂p_end◂{ %l ast.mtc_code◂%c0 }
				∐. prs_err◂e . 
					prs_err e ⊢ a 
					_some a ⊢ a 
					∎ a
			∐.* nls "∐" mtc_line lc_code lc_mtc ⊢ { nn {} l c m }
				prs_cct2 { l c m } ⊢ e 
				$ e ⊢ 
				∐ prs_vld◂{ l c m } . 
					ast.mtc_code c ⊢ c
					p_cns { { l c } m } ⊢ m
					prs_vld m ⊢ m 
					_some m ⊢ a
					∎ a
				∐. prs_err◂e . 
					prs_err e ⊢ e 
					_some e ⊢ a 
					∎ a 
		@.lc_id_mtc
			∐# nls "∐." !| mtc_ptn mtc_line_tl lc_code ⊢ { nn {} mp l c }
				prs_cct { l c } ⊢ e 
				$ e ⊢ 
				∐ prs_vld◂{ l c } .
					ast.mtc_code c ⊢ c
					p_end { mp l c } ⊢ m
					prs_vld m ⊢ m 
					_some m ⊢ a
					∎ a
				∐. prs_err◂e . 
					prs_err e ⊢ e 
					_some e ⊢ a 
					∎ a
			∐.# nls "∐" mtc_ptn mtc_line_tl lc_code lc_id_mtc ⊢ { nn {} mp l c m }
				prs_cct2 { l c m } ⊢ e 
				$ e ⊢ 
				∐ prs_vld◂{ l c m } . 
					ast.mtc_code c ⊢ c
					p_cns { { mp l c } m } ⊢ m
					prs_vld m ⊢ m 
					_some m ⊢ a
					∎	a
				∐. prs_err◂e . 
					prs_err e ⊢ e 
					_some e ⊢ a 
					∎ a 			
	§§+s8
		@.file
			∐.# nls_lst_prs◂+◂glb_etr nl_eof ⊢ { gl _ } 
				∎ _some◂gl
		@.glb_etr
			∐* "§§+s8" !| ; ⊢ { {} },p 
				_some p ⊢ a
				∎ a 

				∐# word "=" mdl_exp ⊢ { w {} e } 
					∎ _some◂prs_vld◂ast.grm_ln◂{ w e }  
				∐* grm_etr lst.stx_line◂+◂grm_etr ⊢ { e l }
					∎ _some◂prs_vld◂ast.grm_etr◂_cns◂{ %e %l }
				∐.* glb_etr_res ⊢ { bs }
					∎ _some◂prs_err◂_cns◂{ { %_n %_r %[ "glb_etr 1" ] } _nil◂{} }
			∐* nls "§§" !| ; ⊢ { nn {} },p 
				_some p ⊢ a 
				∎ a
				∐* word mdl_etr_def ⊢ { n d }
					$ d ⊢ 
					∐ prs_vld◂d . 
						∎ _some◂prs_vld◂ast.mdl_etr◂{ %n %d }
					∐. prs_err◂err . 
						prs_err err ⊢ err 
						_some err ⊢ a 
						∎ a 
				∐.* mdl_etr_res ⊢ { r } 
					∎ _some◂prs_err◂_cns◂{ { %_n %_r %[ "glb_etr 0.1" ] } _nil◂{} }
			∐# rtm_sbl "\n" lc_code ⊢ { {} {} lc }
				$ lc ⊢ 
				∐ prs_vld◂lc . 
					∎ _some◂prs_vld◂ast.lc_etr◂{ %[ "" ] ast.lc_cst◂%lc }
				∐. prs_err◂e .	
					prs_err e ⊢ e 
					_some e ⊢ a 
					∎ a  
			∐* "§" !| ; ⊢ { {} },p 
				_some p ⊢ a 
				∎ a
				∐* lc_etr_body ⊢ { le }
					_some le ⊢ a
					∎ a
				∐.* glb_etr_res ⊢ { bs }
					∎ _some◂prs_err◂_cns◂{ { %_n %_r %[ "glb_etr 3" ] } _nil◂{} }
			∐.* "¶" !| ; ⊢ { {} },p 
				_some p ⊢ a
				∎ a 
				∐* dt_etr ⊢ { de }
					prs_vld de ⊢ de 
					_some de ⊢ a
					∎ a
				∐.* glb_etr_res ⊢ { bs }
					∎ _some◂prs_err◂_cns◂{ { %_n %_r %[ "glb_etr 4" ] } _nil◂{} }
		@.glb_etr_res 
			∐* glb_etr_res_ch glb_etr_res ⊢ { c r }
				_some {} ⊢ a 
				∎ a
			∐.* ⊢ { }
				_some {} ⊢ a 
				∎ a
		@.mdl_etr_res 
			∐* "∎∎" ⊢ { {} } 
				_some {} ⊢ a
				∎ a 
			∐* "§§" ; ⊢ { {} },p
				_some {} ⊢ a 
				∎ a 
				∐* word "=" name mdl_etr_res ⊢ { w {} n r }
					_some {} ⊢ a 
					∎ a 
				∐.* mdl_etr_res mdl_etr_res ⊢ { r0 r1 } 
					_some {} ⊢ a 
					∎ a 
			∐* _byt mdl_etr_res ⊢ { b r } 
				_some {} ⊢ a 
				∎ a
			∐.* ⊢ { } 
				_some {} ⊢ a   
				∎ a 
		
		@.mdl_etr_def
			∐* "=" !| name nls ⊢ { {} n nn }
				ast.mdl_ln n ⊢ r
				prs_vld r ⊢ r 
				_some r ⊢ a
				∎ a
			∐.* nls mdl_glb_etr ⊢ { nn m }
				$ m ⊢ 
				∐ prs_vld◂m . 
					ast.mdl_def m ⊢ r
					prs_vld r ⊢ r 
					_some r ⊢ a
					∎ a
				∐. prs_err◂err . 
					prs_err err ⊢ err 
					_some err ⊢ a 
					∎ a
		@.mdl_glb_etr
			∐* nls "∎∎" nls ⊢ { nn0 {} nn }
				$ _nil◂{} ⊢ l
				prs_vld l ⊢ l 
				_some l ⊢ a
				∎ a
			∐* nls glb_etr mdl_glb_etr ⊢ { nn e gl }
				prs_cct { e gl } ⊢ e0 
				$ e0 ⊢ 
				∐ prs_vld◂{ e gl } . 
					_cns { e gl } ⊢ gl
					prs_vld gl ⊢ gl 
					_some gl ⊢ a
					∎ a
				∐. prs_err◂err . 
					prs_err err ⊢ e 
					_some e ⊢ a 
					∎ a 
			∐. mdl_etr_res ⊢ { r }
				∎ _some◂prs_err◂_cns◂{ { %_n %_r %[ "glb_etr 7" ] } _nil◂{} }
		@.dt_etr
			∐* "@" !| "." dt_etr_body qlq_dt_etr ⊢ { {} {} e q }
				_cns { e q } ⊢ q
				ast.dt_qlq_etr q ⊢ r
				_some r ⊢ a
				∎ a
			∐* dt_etr_body ⊢ { e }
				ast.dt_etr e ⊢ r
				_some r ⊢ a
				∎ a
			∐. ⊢ { }
				» "dt_etr 0" _ ⊢ s
				_emt s ⊢ s
				_none {} ⊢ a
				∎ a
		@.dt_etr_body
			∐* word dt_args "=" !| type ⊢ { w as {} n }
				ast.dt_ln { as n } ⊢ r
				_some { w r } ⊢ a 
				∎ a
			∐.* word dt_args nls "∐" word ":" type dt_etr_coprd ⊢ { w as nn {} wc {} t d }
				_cns { { wc t } d } ⊢ c
				ast.dt_def { as c } ⊢ r
				_some { w r } ⊢ a
				∎ a
		@.dt_args
			∐* "◂" !| var args_tl ⊢ { {} v as }
				_cns { v as } ⊢ as 
				_some as ⊢ o 
				∎ o  
			∐* var !| args_tl ⊢ { v as } 
				_cns { v as } ⊢ as
				_some as ⊢ o 
				∎ o  
			∐.* ⊢ { } 
				$ _nil◂{} ⊢ as 
				_some as ⊢ o 
				∎ o
		@.args_tl 
			∐. lst.stx_cmm_tl◂+◂var ⊢ { a } 
				∎ _some◂a 
		@.qlq_dt_etr
			∐* nls "@" !| "." dt_etr_body qlq_dt_etr ⊢ { nn {} {} p q }
				_cns { p q } ⊢ l
				_some l ⊢ a
				∎ a
			∐.* ⊢ { }
				$ _nil◂{} ⊢ l
				_some l ⊢ a
				∎ a
		@.dt_etr_coprd
			∐* nls "∐" !| word ":" type dt_etr_coprd ⊢ { nn {} w {} t d }
				_cns { { w t } d } ⊢ l
				_some l ⊢ a
				∎ a
			∐.* ⊢ { }
				$ _nil◂{} ⊢ l
				_some l ⊢ a
				∎ a
		@.lc_etr_body
			∐# nls "@" !| "." word lc_etr_def qlq_etr ⊢ { nn {} {} w le q }
				prs_cct { q le } ⊢ e 
				$ e ⊢ 
				∐ prs_vld◂{ q le } . 
					∎ _some◂prs_vld◂ast.lc_qlq_etr◂_cns◂{ { %w %le } %q }
				∐. prs_err◂e . 
					∎ _some◂prs_err◂%e
			∐* word lc_etr_def ⊢ { n e }
				$ e ⊢ 
				∐ prs_vld◂e . 	
					ast.lc_etr { n e } ⊢ r
					prs_vld r ⊢ r 
					_some r ⊢ a
					∎ a
				∐. prs_err◂e . 
					prs_err e ⊢ e 
					_some e ⊢ a 
					∎ a 
			∐. ⊢ { }
				» "lc_etr_body 0" _ ⊢ s
				_emt s ⊢ s
				_none {} ⊢ a
				∎ a
		@.qlq_etr
			∐# nls "@" !| "." word lc_etr_def qlq_etr ⊢ { nn {} {} w le q }
				prs_cct { q le } ⊢ e0 
				$ e0 ⊢ 
				∐ prs_vld◂{ q le } . 
					∐ le ⊢ ast.lc_cst◂_ . 
						mk_prs_err { _n _r %[ "qlq_etr:lc_cst" ] } ⊢ e 
						_some e ⊢ a 
						∎ a 
					∐. . 
						_cns { { w le } q } ⊢ q 
						prs_vld q ⊢ q  
						_some q ⊢ a
						∎ a
				∐. prs_err◂e . 
					prs_err e ⊢ e 
					_some e ⊢ a 
					∎ a
			∐.* ⊢ { } 
				∎ _some◂prs_vld◂_nil◂{} 
		@.type_rtr 
			∐# ":" !| type ⊢ { {} t } 
				_some t ⊢ t 
				_some t ⊢ a
				∎ a 
			∐.# ⊢ { }
				_none {} ⊢ t 
				_some t ⊢ a 
				∎ a 
		@.lc_etr_def
			∐# "=" !| ct_ptn "\n" ⊢ { {} c {} }
				∐ c ⊢ RP.atm◂c . 
					∎ _some◂prs_vld◂ast.lc_ln◂c
				∐. . 
					mk_prs_err { _n _r %[ "lc_etr_def 0" ] } ⊢ e 
					_some e ⊢ a 
					∎ a 
			∐# "«" !| "\n" lc_code ⊢ { {} {} x }
				$ x ⊢ 
				∐ prs_vld◂x . 
					ast.lc_cst x ⊢ r
					prs_vld r ⊢ r 
					_some r ⊢ a
					∎ a
				∐. prs_err◂e .	
					prs_err e ⊢ e 
					_some e ⊢ a 
					∎ a 
			∐# def_gnr dst_ptn type_rtr "\n" lc_code ⊢ { o_t r0 t0 {} x0 }  
				$ x0 ⊢ 
				∐ prs_vld◂x0 . 
					ast.lc_def { o_t r0 t0 x0 } ⊢ r
					prs_vld r ⊢ r 
					_some r ⊢ a
					∎ a
				∐. prs_err◂e . 
					prs_err e ⊢ e 
					_some e ⊢ a 
					∎ a 
			∐.# "◂" !| tpl_reg_ptn "=" src_ptn "\n" ⊢ { {} x {} p {} } 
				∎ _some◂prs_vld◂ast.lc_ply◂{ x p } 
		@.def_gnr 
			∐# "◂◂" !| tpl_ptn ⊢ { {} p } 
				∎ _some◂_some◂p
			∐.# ⊢ { } 
				∎ _some◂_none◂{}
		@.tpl_reg_ptn
			∐. RP.stx◂+◂tpl_word ⊢ { a } 
				∎ _some◂a  
		@.tpl_ptn 
			∐. RP.stx◂+◂word ⊢ { a } 
				∎ _some◂a
		@.grm_arg 
			∐# "◂+◂" word ⊢ { {} w }
				∎ _some◂_some◂%w 
			∐.# ⊢ { } 
				∎ _some◂_none◂{}
		@.grm_etr
			∐# "@" "." word "=" mdl_exp ⊢ { {} {} w {} e } 
				∎ _some◂{ w _none◂{} ast.grm.ln◂e } 
			∐.* "@" "." word grm_arg grm_etr_def ⊢ { {} {} w o d }
				∎ _some◂{ w o ast.grm.act◂d }
		@.grm_etr_def
			∐.* grm_etr_act ⊢ { g }
				_some g ⊢ a
				∎ a
		@.grm_etr_act
			∐* grm_ord_end !| grm_rle grm_etr_act_act	⊢ { o l { r0 lc a } }
				ast.grm.act_regs {} ⊢ dl 
				ast.grm.act_end { dl r0 lc o l a } ⊢ e
				_some e ⊢ a
				∎ a
			∐.* grm_ord grm_rle grm_etr_act_act grm_etr_act ⊢ { o l { r0 lc a } g }
				ast.grm.act_regs {} ⊢ dl 
				ast.grm.act_cns { dl r0 lc o l a g } ⊢ e
				_some e ⊢ a
				∎ a
		@.grm_etr_act_act
			∐* ";" "⊢" !| dst_ptn "," dst_ptn lc_code grm_etr_act ⊢ { {} {} r0 {} r1 lc g }
				$ lc ⊢ 
				∐ prs_vld◂lc . 
					_some { r1 g } ⊢ r
					_some { r0 lc r } ⊢ a
					∎ a
				∐. prs_err◂e .
					» "grm_etr_act_act 0" _ ⊢ se 
					_emt se ⊢ se 
					_emt { _n _r } ⊢ a 
					∎| 
			∐.* "⊢" !| dst_ptn lc_code ⊢ { {} r0 lc }
				$ lc ⊢ 
				∐ prs_vld◂lc . 
					_none {} ⊢ r
					_some { r0 lc r } ⊢ a
					∎ a
				∐. prs_err◂e .
					» "grm_etr_act_act 1" _ ⊢ se 
					_emt se ⊢ se 
					_emt { _n _r } ⊢ a 
					∎| 
		@.grm_rle
			∐* "!|" !| lst.stx_line◂+◂grm_ptn ⊢ { {} g }
				ast.grm.ptn_cut g ⊢ g
				_some g ⊢ r
				∎ r
			∐* grm_ptn grm_rle ⊢ { h g }
				ast.grm.ptn_seq { h g } ⊢ r
				_some r ⊢ a
				∎ a
			∐.* ⊢ { }
				ast.grm.ptn_end {} ⊢ r
				_some r ⊢ a
				∎ a
		@.grm_ptn
			∐* "⟦" grm_ptn_atm "⟧" ⊢ { {} p {} }
				∎ _some◂ast.grm.lst◂%p
			∐.* grm_ptn_atm ⊢ { a }
				∎ _some◂ast.grm.atm◂%a
		@.grm_ptn_atm
			∐# stg_ltr ⊢ { a }
				∎ _some◂ast.grm.s8◂%a
			∐.# mdl_exp ⊢ { n }
				∎ _some◂ast.grm.exp◂%n
		@.mdl_exp 
			∐#  name "◂+◂" mdl_exp ⊢ { a0 {} a1 }
				∎ _some◂ast.grm.app◂{ a0 a1 } 
			∐.# name ⊢ { a } 
				∎ _some◂ast.grm.name◂%a 
		@.grm_ord
			∐* "∐*" ⊢ { {} }
				∎ _some◂ast.grm.synt◂{}
			∐* "∐#" ⊢ { {} }
				∎ _some◂ast.grm.line◂{}
			∐.* "∐" ⊢ { {} }
				∎ _some◂ast.grm.lex◂{}
		@.grm_ord_end
			∐* "∐.*" ⊢ { {} }
				∎ _some◂ast.grm.synt◂{}
			∐* "∐.#" ⊢ { {} }
				∎ _some◂ast.grm.line◂{}
			∐.* "∐." ⊢ { {} }
				∎ _some◂ast.grm.lex◂{}
	∎∎	
		§§ gbg
			¶ t_t 
				∐ ln : {} 
				∐ rcd : _r64 				 
			¶ t = { _r64 t_t }
			§ pnt n 
				» _^ n ⊢ n,s 
					"QWORD [GBG_VCT+8*" 0d' "]" // 
				∎ { n s } 
			§ ini {} 
				∎ { %[ 0r ] _nil◂{} } 
			§ @.dlt { gl e } 
				$ gl ⊢ 
				∐ _cns◂{ { n g } gl } . 
					$ g ⊢ 
					∐ ln◂{} . 
						pnt n ⊢ { n sn } 
						» _^ sn ⊢ _,sr 
							"\tmov rdi," 0' "\n" 
							`	FREE_LN rdi
							// 
						rp8.add_s8 { e sr } ⊢ e 
						dlt { gl e } ⊢| 
					∐. rcd◂nr . 
						pnt n ⊢ { n sn } 
						» _^ sn,nr ⊢ _,_,sr 
							"\tmov rdi," 0' "\n" 
							"\tFREE_RCD " 1d' ",rdi\n"
							// 
						rp8.add_s8 { e sr } ⊢ e 
						dlt { gl e } ⊢|
				∐. _nil◂{} . 
					∎ e 
			∎∎

		§§ ns
		¶ 
			@.v = _r64 
			@.type_k_atm = T.t_atm◂v 
			@.type_k = T.t◂v 
			@.type_aux = T.aux◂v
			@.type_aux_vct = T.aux_vct◂v 
			@.type_exp = T.exp◂v 
			@.var = T.var◂v 
		##§§ TX = T.X 
		§ dta = T.dta 
		§ imp = T.imp 
		§ ct_imp = T.ct_imp 
		§ abs = T.abs 
		§ var = T.var 
		§ var_l = T.var_l 
		§ var_q = T.var_q 
		§ var_ln = T.var_ln 
		§ var_i = T.var_i 
		§ newvar_i = T.newvar_i 
		§ newvar_l = T.newvar_l 
		§ newvar_q = T.newvar_q 
		##§ var_app = T.var_app 
		
		
		¶ 
			@.reg_env = _lst◂{ _s8 _opn◂_r64 }
			@.mdl_env = { _lst◂{ _s8 _opn◂_r64 } type_env etr_env reg_env }
			@.etr_env = _lst◂{ _s8 _opn◂_r64 }
			@.type_env = _lst◂{ _s8 _opn◂_r64 }
			@.mdl_vct = _arr◂mdl_k
			@.reg_vct = _arr◂reg_k
			##@.etr_vct = _arr◂etr_k
			@.cst_vct = _arr◂cst_k
			@.type_vct = _arr◂var
			@.mdl_k = mdl_env
			@.reg_k = { _s8 _r64 _r64 } 
			## { name pos type-var } 
			@.cst_k = _r64
		
		¶ f_t e'
			∐ f_etr : e'
			∐ f_rtm : _s8 
			∐ f_inl : { e' _r64 }
		¶ gnr e',a' 
			∐ gnr_etr : e' 
			∐ gnr_axm : a' 
		¶ f_c a'
			∐ f_call : {} 
			∐ f_jmp : a' 
		
		§ newvar_ln = T.newvar_ln
		§§ t_axm = T.t_axm 
		§§ TX = t_axm
		§ pnt_dta_i = T.pnt_dta_i 
		
		§ pnt_type_k = T.pnt_type_k 
		§ pnt_type_k_lst = T.pnt_type_k_lst 
		§ pnt_dta = T.pnt_dta 
		§§ eq_t = T.eq_t 
		
		§§ cmp_t = T.cmp_t 
		
		§ occurs = T.occurs 
	
		§ occurs_lst = T.occurs_lst 
		§§ unify = T.unify 
		
		§ unifys = T.unifys 
	
		§ map_k = T.map_k 
		§ map_k_lst = T.map_k_lst 
		§ map_k_atm = T.map_k_atm 
		
		§§ inst = T.inst 
		
		§ inst = T.inst 
		§ inst_lst = T.inst_lst 
	
		§§ gen = T.gen 
		§ gen = T.gen 
		§ gen_lst = T.gen_lst 
				
		§ iug = T.iug 
		§ iug_imp = T.iug_imp 
		§ iug_imp_d = T.iug_imp_d 
		§§ inst_cl = T.inst_cl 
		§ inst_cl = T.inst_cl 
		§ inst_cl_lst = T.inst_cl_lst 
		§§ mk_t_aux = T.mk_t_aux 
		§ add_t = T.add_t 
		§ inst_imp = T.inst_imp 
		§ ini_reg = T.ini_reg 
		§ mk_reg = T.mk_reg 
		§ add_e = T.add_e 
		
		§ k_op_axm { tv_n tv i y } 
			newvar_ln { tv_n tv y } ⊢ { tv_n tv iy } 
			∎ { tv_n tv ast.k_op_axm◂{ i iy } } 
		§ k_ctr { tv_n tv i n y } 
			newvar_ln { tv_n tv y } ⊢ { tv_n tv iy } 
			ast.k_ctr { i n iy } ⊢ k 
			∎ { tv_n tv k } 
		§§ e_axm 
			§ mk_arr = 0r 
			§ exc_q = 1r 
			§ set_q = 2r 
			§ get_q = 3r 
			§ lod_q = 4r 
			
			§ args = 5r 
			
			§ mlc_s8 = 6r 
			§ s8_len = 7r 
			
			§ emt = 8r 
			
			§ inc = 9r 
			§ dec = 10r 
			§ add = 11r 
			§ sub = 12r 
			§ imul = 13r
			
			§ sts = 14r 
			§ lds = 15r 
			§ setge = 16r 
			§ rep_movsb = 17r 
			§ nil = 18r 
			§ cns = 19r 
			§ some = 20r 
			§ none = 21r
			§ in_fn = 22r
			§ emt_s8_to = 23r 
			§ cd = 24r  
			§ byt = 25r

			§ mk_clr = 26r 
			§ alp = 27r 
			§ frp = 28r 
			§ mkp = 29r
			§ dlp = 30r

			§ arr_len = 31r 
			§ arr_of_lst = 32r

			§ scf_d = 33r 
			§ scf_x = 34r 
			§ dlt = 35r 
			§ info = 36r 
			§ rpc = 37r
			§ getchar = 38r 

			§ shl = 39r 
			§ shr = 40r 

			§ app = 41r 
			§ and = 42r 
			§ or = 43r
			
			§ prs = 44r 
			∎∎
		§§ EX = e_axm 

		§§ alc_type_k 
			§ @.hp { pv_n al tav tv_n tv t0 }
				$ t0 ⊢ 
				∐ RP.rcd◂l . 
					hp_lst { pv_n al tav tv_n tv l } ⊢ { pv_n al tav tv_n tv l }
					∎ { pv_n al tav tv_n tv ast.hp.ref◂ast.hp.rcd◂l }
				∐. RP.atm◂ak . 
					$ ak ⊢ 
					∐ dta◂{ a l } . 	
						∐ a'=TX.id.arr; l ⊢ _cns◂{ y l }; l ⊢ _nil◂{} . 
							hp { pv_n al tav tv_n tv y } ⊢ { pv_n al tav tv_n tv ha }
							∎ { pv_n al tav tv_n tv ast.hp.ref◂ast.hp.arr◂ha }
						∐ a'=TX.id.s8; l ⊢ _nil◂{} . 
							∎ { pv_n al tav tv_n tv ast.hp.ref◂ast.hp.opq◂{} }
						∐ a'=TX.id.r64; l ⊢ _nil◂{} . 
							∎ { pv_n al tav tv_n tv ast.hp.r64◂{} }    
						∐. .
							hp_lst { pv_n al tav tv_n tv l } ⊢ { pv_n al tav tv_n tv l }
							∎ { pv_n al tav tv_n tv ast.hp.adt◂{ a l } } 
					∐ var◂i . 
						lod_tv { tv i } ⊢ { tv i v }
						∐ v ⊢ var_ln◂k . 
							hp { pv_n al tav tv_n tv k } ⊢| 
						∐. .
							assoc { al i } ⊢ { al i o } 
							∐ o ⊢ _some◂pvi . 
								∎ { pv_n al tav tv_n tv ast.hp.pv◂pvi } 
							∐. . 
								$ pv_n ⊢ pv_n,pvi 
								$ pvi ⊢ pvi,pvi0 
								_inc pv_n ⊢ pv_n 
								_some pvi0 ⊢ o0 
								_cns { { i o0 } al } ⊢ al 
								ast.hp.pv pvi ⊢ h 
								∎ { pv_n al tav tv_n tv h } 	
					∐ abs◂{ a k0 } . 
						» "hp abs" _ ⊢ se 
						_emt se ⊢ se 
						∎|  
					∐ ct_imp◂{ k0 k1 } .
						» "hp ct_imp" _ ⊢ se 
						_emt se ⊢ se 
						∎|
					∐. imp◂{ k0 k1 } .
						» "hp imp" _ ⊢ se 
						_emt se ⊢ se 
						∎|
				@.hp_lst { pv_n al tav tv_n tv l } 
					$ l ⊢ 
					∐ _cns◂{ k l } . 
						hp { pv_n al tav tv_n tv k } ⊢ { pv_n al tav tv_n tv h } 
						hp_lst { pv_n al tav tv_n tv l } ⊢ { pv_n al tav tv_n tv l } 
						_cns { h l } ⊢ l 
						∎ { pv_n al tav tv_n tv l }
					∐. _nil◂{} . 
						$ _nil◂{} ⊢ l 
						∎ { pv_n al tav tv_n tv l }
				@.f { pv_n al tav tv_n tv s0 t0 }
					$ t0 ⊢ 
					∐ RP.rcd◂l . 
						f_lst { pv_n al tav tv_n tv s0 l } ⊢ { pv_n al tav tv_n tv s0 l } 
						RP.rcd l ⊢ p0 
						∎ { pv_n al tav tv_n tv s0 p0 }
					∐. RP.atm◂ak . 
						$ ak ⊢ 
						∐ dta◂{ a l } . 	
							∐ a'=TX.id.arr; l ⊢ _cns◂{ y l }; l ⊢ _nil◂{} . 
								rset.min_f s0 ⊢ { s0 j0 }
								exc_q { s0 j0 bl.t◂{} } ⊢ { s0 j0 b } 
								hp { pv_n al tav tv_n tv y } ⊢ { pv_n al tav tv_n tv ha } 
								∎ { pv_n al tav tv_n tv s0 RP.atm◂ast.hp◂{ j0 ast.hp.ref◂ast.hp.arr◂ha } }
							∐ a'=TX.id.s8; l ⊢ _nil◂{} . 
								alc_vs s0 ⊢ { s0 j0 }
								stt_v.s8_reg j0 ⊢ p0 
								∎ { pv_n al tav tv_n tv s0 p0 }
							∐ a'=TX.id.r64; l ⊢ _nil◂{} . 
								alc_vs s0 ⊢ { s0 j0 } 
								$ stt_v.r64_reg◂j0 ⊢ p0 
								∎ { pv_n al tav tv_n tv s0 p0 }    
							∐. .
								hp_lst { pv_n al tav tv_n tv l } ⊢ { pv_n al tav tv_n tv hl } 
								ast.hp.adt { a hl } ⊢ h0 
								alc_vs s0 ⊢ { s0 j0 } 
								ast.hp { j0 h0 } ⊢ r0 
								RP.atm r0 ⊢ p0 
								∎ { pv_n al tav tv_n tv s0 p0 } 
						∐ var◂i . 
							lod_tv { tv i } ⊢ { tv i v }
							∐ v ⊢ var_ln◂k . 
								f { pv_n al tav tv_n tv s0 k } ⊢| 
							∐. .
								assoc { al i } ⊢ { al i o } 
								∐ o ⊢ _some◂pvi . 
									alc_vs s0 ⊢ { s0 j0 } 
									ast.hp.pv pvi ⊢ h 
									ast.hp { j0 h } ⊢ r0 
									RP.atm r0 ⊢ p0 
									∎ { pv_n al tav tv_n tv s0 p0 }
								∐. . 
									$ pv_n ⊢ pv_n,pvi 
									$ pvi ⊢ pvi,pvi0 
									_some pvi0 ⊢ o0 
									_cns { { i o0 } al } ⊢ al 
									_inc pv_n ⊢ pv_n 		
									alc_vs s0 ⊢ { s0 j0 } 
									ast.hp.pv pvi ⊢ h 
									ast.hp { j0 h } ⊢ r0 
									RP.atm r0 ⊢ p0 
									∎ { pv_n al tav tv_n tv s0 p0 }
						∐ abs◂{ a k0 } . 
							» "alc_type_k.f abs" _ ⊢ se 
							_emt se ⊢ se 
							∎|  
						∐ ct_imp◂{ k0 k1 } .
							» "alc_type_k.f ct_imp" _ ⊢ se 
							_emt se ⊢ se 
							∎|
						∐. imp◂{ k0 k1 } .
							» "alc_type_k.f imp" _ ⊢ se 
							_emt se ⊢ se 
							∎| 
			@.f_lst { pv_n al tav tv_n tv s0 l } 
				$ l ⊢ 
				∐ _cns◂{ k l } . 
					f { pv_n al tav tv_n tv s0 k } ⊢ { pv_n al tav tv_n tv s0 p }
					f_lst { pv_n al tav tv_n tv s0 l } ⊢ { pv_n al tav tv_n tv s0 l }
					_cns { p l } ⊢ l 
					∎ { pv_n al tav tv_n tv s0 l }
				∐. _nil◂{} . 
					$ _nil◂{} ⊢ l 
					∎ { pv_n al tav tv_n tv s0 l }
			∎∎
	§§ crt_type_k 
		§ 
	 		@.dst { { tv rv } d } 
				$ d ⊢ 
				∐ ast.wc◂o . 
					smt o ⊢ r
					lod_tv { rv r } ⊢ { rv r v } 
					∎ { { tv rv } RP.atm◂var◂v } 
				∐. ast.dst_reg◂r . 
					lod_tv { rv r } ⊢ { rv r v } 
					∎ { { tv rv } RP.atm◂var◂v } 
			@.dst_ptn = RP.map_l_atm◂◂dst 
			§ dst_ptn_lst = lst.map_l◂◂dst_ptn 
		§ cst { ev c }
			∐ c ⊢ ast.k_r64◂x . 
				∎ { ev TX.r64◂{} }
			∐ c ⊢ ast.k_s8◂s . 
				∎ { ev TX.s8◂{} }  
			∐ c ⊢ ast.k_name◂i . 
				lod_tv { ev i } ⊢ { ev i vi } 
				∎ { ev RP.atm◂var◂%vi }
			∐. . 
				_emt %[ "slv cst 0" ] ⊢ _
				∎| 
		§ 
	 		@.src_atm { { ev tv_n tv rv } r } 
				$ r ⊢ 
				∐ ast.im_reg◂c0 . 
					cst { ev c0 } ⊢ { ev y } 
					∎ { { ev tv_n tv rv } y } 
				∐ ast.src_agl◂{ i sp } . 
					src_ptn { { ev tv_n tv rv } sp } ⊢ { { ev tv_n tv rv } ys } 
					lod_tv { ev i } ⊢ { ev i vi } 
					iug_imp_d { tv_n tv %[ 0r ] ys RP.atm◂var◂%vi } ⊢ { tv_n tv _ ys yd yi } 
					∎ {{ ev tv_n tv rv } yd }
				∐. ast.src_reg◂%r . 
					lod_tv { rv r } ⊢ { rv r v } 
					∎ { { ev tv_n tv rv } RP.atm◂var◂%v } 
			@.src_ptn = RP.map_l_atm◂◂src_atm
			@.src_ptn_lst = lst.map_l◂◂src_ptn 
			
		§ 
			@.mtc_atm { { ev tv_n tv rv } r }
				$ r ⊢ 
				∐ ast.mtc_wc◂o . 
					smt o ⊢ r 
					lod_tv { rv r } ⊢ { rv r v } 
					∎ { { ev tv_n tv rv } RP.atm◂var◂%v }  
				∐ ast.mtc_cst◂c . 
					cst { ev c } ⊢ { ev y }
					∎ { { ev tv_n tv rv } y }
				∐ ast.mtc_agl◂{ ea mp } . 
					lod_tv { ev ea } ⊢ { ev ea ya }
					mtc_ptn { { ev tv_n tv rv } mp } ⊢ { { ev tv_n tv rv } yp } 
					newvar_l { tv_n tv %[ 0r ] } ⊢ { tv_n tv lv yy }
					$ yy ⊢ yy,yy0 
					iug { tv_n tv lv RP.atm◂var◂%ya RP.atm◂imp◂{ %yp %yy } } ⊢ { tv_n tv lv ya yi }
					∎ { { ev tv_n tv rv } yy0 }
				∐. ast.mtc_reg◂r . 
					lod_tv { rv r } ⊢ { rv r v } 
					∎ { { ev tv_n tv rv } RP.atm◂var◂%v } 
	 		@.mtc_ptn = RP.map_l_atm◂◂mtc_atm 
			@.mtc_ptn_lst = lst.map_l◂◂mtc_ptn 
		∎∎	 
	§§ mk_adt 
		§ @.inst { al h }
			∐ h ⊢ ast.hp.pv◂p . 
				assoc { al p } ⊢ { al p o }
				∐ o ⊢ _some◂h . 
					∎ { al h } 
				∐. . 
					» "mk_adt.inst 0" _ ⊢ se 
					_emt se ⊢ se 
					∎| 
			∐ h ⊢ ast.hp.adt◂{ ax hl } . 
				inst_lst { al hl } ⊢ { al hl } 
				ast.hp.adt { ax hl } ⊢ h 
				∎ { al h } 
			∐ h ⊢ ast.hp.ref◂q; q ⊢ ast.hp.arr◂ha . 
				inst { al ha } ⊢ { al ha } 
				ast.hp.arr ha ⊢ q 
				ast.hp.ref q ⊢ h 
				∎ { al h } 
			∐ h ⊢ ast.hp.ref◂q; q ⊢ ast.hp.rcd◂l . 
				inst_lst { al l } ⊢ { al l } 
				ast.hp.rcd l ⊢ q 
				ast.hp.ref q ⊢ h 
				∎ { al h }
			∐. . 
				∎ { al h }
			@.inst_lst = lst.map_l◂◂inst 
		§ @.lp { ql pl al } 
			∐ ql ⊢ _cns◂{ qi ql }; pl ⊢ _cns◂{ pi pl } . 
				_some qi ⊢ o 
				_cns { { pi o } al } ⊢ al 
				lp { ql pl al } ⊢| 
			∐ ql ⊢ _nil◂{}; pl ⊢ _nil◂{} . 
				∎ al 
			∐. . 
				» "mk_adt.lp 0" _ ⊢ se 
				_emt se ⊢ se 
				∎| 
		§ f { ql pl ipl }	
			$ _nil◂{} ⊢ al 
			lp { ql pl al } ⊢ al
			inst_lst { al ipl } ⊢ { al ipl }
			∎ ipl  
		∎∎ 
		§ @.slv_ns◂◂{ ASC_M ASC_F LOD P0 P1 } { n MV NS m_l }
			$ n ⊢ 
			∐ ast.mdl_n◂{ w n } . 
				ASC_M { NS w } ⊢ { NS w o }
				$ o ⊢ 
				∐ _some◂i_m . 
					LOD { MV i_m } ⊢ { MV i_m NS0 } 
					slv_ns◂◂{ ASC_M ASC_F LOD P0 P1 } { n MV NS0 _nil◂{} } ⊢ { MV _ _ i_e }
					∎ { MV NS m_l i_e }
				∐. _none◂{} . 
					$ m_l ⊢ 
					∐ _cns◂{ I m_l } .
						P0 I ⊢ { NS0 I } 
						ast.mdl_n { w n } ⊢ n 
						slv_ns◂◂{ ASC_M ASC_F LOD P0 P1 } { n MV NS0 m_l } ⊢ { MV NS0 m_l i_e }
						P1 { NS0 I } ⊢ I 
						_cns { I m_l } ⊢ m_l 
						∎ { MV NS m_l i_e }
					∐. _nil◂{} . 
						^ w ⊢ _,sr 
							"slv_ns 0:not found:" 0' "\n" //
						_emt sr ⊢ sr 
						∎|  
			∐. ast.fst_n◂w . 
				ASC_F { NS w } ⊢ { NS w o } 
				$ o ⊢
				∐ _some◂i_e . 
					∎ { MV NS m_l i_e }
				∐. _none◂{} . 
					$ m_l ⊢ 
					∐ _cns◂{ I m_l } .
						ast.fst_n w ⊢ n 
						P0 I ⊢ { NS0 I } 
						slv_ns◂◂{ ASC_M ASC_F LOD P0 P1 } { n MV NS0 m_l } ⊢ { MV NS0 m_l i_e }
						P1 { NS0 I } ⊢ I 
						_cns { I m_l } ⊢ m_l 
						∎ { MV NS m_l i_e }
					∐. _nil◂{} . 
						_emt w ⊢ w
						» _^ _ ⊢ sr 
							"slv_ns 1:not found\n" //
						_emt sr ⊢ sr 
						∎|  
		§§ slv_ns_e 
			§ asc_m { { m_ns t_ns } w }
				assoc { m_ns w } ⊢ { m_ns w o } 
				∎ { { m_ns t_ns } w o }
			§ asc_f { { m_ns t_ns } w } 
				assoc { t_ns w } ⊢ { t_ns w o } 
				∎ { { m_ns t_ns } w o } 
			§ lod { { mmv mtv } i_m } 
				_lod_q { mmv i_m } ⊢ { mmv i_m m_ns } 
				_lod_q { mtv i_m } ⊢ { mtv i_m t_ns } 
				∎ { { mmv mtv } i_m { m_ns t_ns } }
			§ p0 { i_m_r ns_m0 ns_e0 ns_t0 } 
				∎ { { ns_m0 ns_e0 } { i_m_r ns_t0 } } 
			§ p1 { { ns_m0 ns_e0 } { i_m_r ns_t0 } } 
				∎ { i_m_r ns_m0 ns_e0 ns_t0 }
			§ f = slv_ns◂◂{ asc_m asc_f lod p0 p1 } 
			∎∎
			§ slv_ns_e = slv_ns_e.f
		
		§§ slv_ns_t 
			§ asc_m { { m_ns t_ns } w }
				assoc { m_ns w } ⊢ { m_ns w o } 
				∎ { { m_ns t_ns } w o }
			§ asc_f { { m_ns t_ns } w } 
				assoc { t_ns w } ⊢ { t_ns w o } 
				∎ { { m_ns t_ns } w o } 
			§ lod { { mmv mtv } i_m } 
				_lod_q { mmv i_m } ⊢ { mmv i_m m_ns } 
				_lod_q { mtv i_m } ⊢ { mtv i_m t_ns } 
				∎ { { mmv mtv } i_m { m_ns t_ns } }
			§ p0 { i_m_r ns_m0 ns_e0 ns_t0 } 
				∎ { { ns_m0 ns_t0 } { i_m_r ns_e0 } } 
			§ p1 { { ns_m0 ns_t0 } { i_m_r ns_e0 } } 
				∎ { i_m_r ns_m0 ns_e0 ns_t0 }
			§ f = slv_ns◂◂{ asc_m asc_f lod p0 p1 } 
			∎∎
			§ slv_ns_t = slv_ns_t.f
		
		§§ slv_ns_m 
			§ asc_m = assoc 
			§ asc_f = assoc 
			§ lod = _lod_q 
			§ p0 { i_m_r ns_m0 ns_e0 ns_t0 } 
				∎ { ns_m0 { i_m_r ns_e0 ns_t0 } } 
			§ p1 { ns_m0 { i_m_r ns_e0 ns_t0 } } 
				∎ { i_m_r ns_m0 ns_e0 ns_t0 }
			§ f = slv_ns◂◂{ asc_m asc_f lod p0 p1 } 
			∎∎
		§ slv_ns_m = slv_ns_m.f
		
		§ @.find_gf { evv tv gfl i0 y0 o_p } 
			$ gfl ⊢ 
			∐ _cns◂{ ge gfl } . 
				∐ ge ⊢ gnr_etr◂{ lb i1 o_k y1 rsp_s p0 rsp_d p1 } .
					∐ i0'=i1' . 
						cmp_t.eqv { tv y0 y1 } ⊢ { tv y0 y1 b0 } 
						opn.eq_st_T◂◂(ast.eq_ct_ptn) { evv o_p o_k } ⊢ { evv o_p o_k b1 } 
						bl.and { b0 b1 } ⊢ b 
						∐ b ⊢ bl.t◂{} . 
							$ { lb i1 o_k y1 rsp_s p0 rsp_d p1 } ⊢ A0,A1 
							gnr_etr A0 ⊢ A0 
							_cns { A0 gfl } ⊢ gfl 
							_some A1 ⊢ A1 
							∎ { evv tv gfl i0 y0 o_p A1 }
						∐. . 
							$ { lb i1 o_k y1 rsp_s p0 rsp_d p1 } ⊢ A0
							gnr_etr A0 ⊢ A0 
							find_gf { evv tv gfl i0 y0 o_p } ⊢ { evv tv gfl i0 y0 o_p o0 } 
							_cns { A0 gfl } ⊢ gfl 
							∎ { evv tv gfl i0 y0 o_p o0 }
					∐. . 
						$ { lb i1 o_k y1 rsp_s p0 rsp_d p1 } ⊢ A0  
						gnr_etr A0 ⊢ A0 
						find_gf { evv tv gfl i0 y0 o_p } ⊢ { evv tv gfl i0 y0 o_p o0 } 
						_cns { A0 gfl } ⊢ gfl 
						∎ { evv tv gfl i0 y0 o_p o0 }
				∐. . 
					find_gf { evv tv gfl i0 y0 o_p } ⊢ { evv tv gfl i0 y0 o_p o0 } 
					_cns { ge gfl } ⊢ gfl
					∎ { evv tv gfl i0 y0 o_p o0 } 
			∐. _nil◂{} . 
				$ _nil◂{} ⊢ gfl 
				_none {} ⊢ o0 
				∎ { evv tv gfl i0 y0 o_p o0 }
		§§ find_axm 
			§ 
				@.l0 { gfl i0 h0 ge }
					f { gfl i0 h0 } ⊢ { gfl i0 h0 o0 } 
					_cns { ge gfl } ⊢ gfl 
					∎ { gfl i0 h0 o0 }
				@.f { gfl i0 h0 } 
					$ gfl ⊢ 
					∐ _cns◂{ ge gfl } . 
						∐ ge ⊢ gnr_axm◂{ lb i1 h1 } .
							∐ i0'=i1' . 
								ast.hp.eq_hp { h0 h1 } ⊢ { h0 h1 b } 
								∐ b ⊢ bl.t◂{} . 
									$ lb ⊢ lb,lb0 
									_some lb0 ⊢ A1 
									gnr_axm { lb i1 h1 } ⊢ ge 
									_cns { ge gfl } ⊢ gfl 
									∎ { gfl i0 h0 A1 }
								∐. . 
									gnr_axm { lb i1 h1 } ⊢ ge 
									l0 { gfl i0 h0 ge } ⊢|
							∐. .  
								gnr_axm { lb i1 h1 } ⊢ ge 
								l0 { gfl i0 h0 ge } ⊢|
						∐. . 
							l0 { gfl i0 h0 ge } ⊢|
					∐. _nil◂{} . 
						$ _nil◂{} ⊢ gfl 
						_none {} ⊢ o0 
						∎ { gfl i0 h0 o0 }
			∎∎
		§§ slv_n 
      § reg { w rv_n rv re tv_n tv }
			  $ rv_n ⊢ rv_n,n0
			  _some n0 ⊢ o
			  _cns { { w o } re } ⊢ re
			  _inc rv_n ⊢ rv_n 
			  ∎ { rv_n rv re tv_n tv }
      § 
				@.cst { { %env0 %tv_n %tv } %c } 
		    ∐ %c ⊢ ast.k_name◂%cn . 
			    $ %env0 ⊢ { %mmv %mev %ev %m_ns %e_ns %m_l } 
			    slv_ns_e { cn { mmv mev } { m_ns e_ns } m_l } ⊢ { { mmv mev } { m_ns e_ns } m_l i_e }
			    ast.k_name i_e ⊢ c  
			    $ { mmv mev ev m_ns e_ns m_l } ⊢ env0 	
			    ∎ { { env0 tv_n tv } c }
	    	∐ c ⊢ ast.k_r64◂x . 
		    	ast.k_r64 x ⊢ c 
		    	∎ { { env0 tv_n tv } c }
		    ∐ c ⊢ ast.k_s8◂s . 
		    	ast.k_s8 s ⊢ c
			    ∎ { { env0 tv_n tv } c } 
	    	∐ c ⊢ ast.k_app◂{ c0 c1 } . 
					ct_ptn { { env0 tv_n tv } c0 } ⊢ { { env0 tv_n tv } c0 }
					ct_ptn { { env0 tv_n tv } c1 } ⊢ { { env0 tv_n tv } c1 }
					ast.k_app { c0 c1 } ⊢ c 
					∎ { { env0 tv_n tv } c }
				∐ c ⊢ ast.k_agl◂{ i0 c0 } . 
					ct_ptn { { env0 tv_n tv } c0 } ⊢ { { env0 tv_n tv } c0 }
					$ %env0 ⊢ { %mmv %mev %ev %m_ns %e_ns %m_l } 
			    slv_ns_e { i0 { mmv mev } { m_ns e_ns } m_l } ⊢ { { mmv mev } { m_ns e_ns } m_l i_e }
			    ast.k_agl { i_e c0 } ⊢ c  
			    $ { mmv mev ev m_ns e_ns m_l } ⊢ env0 	
					∎ { { env0 tv_n tv } c }
				∐. . 
		    	» "slv_n.cst 0" _ ⊢ ee0 
					_emt ee0 ⊢ _ 
					∎|  	
			
				@.ct_ptn = RP.map_l◂◂cst 
			§ ct_ptn_lst = lst.map_l◂◂ct_ptn 
			§ 
				@.crt_mtc { { env0 rv tv tv_n n re } a }  
					 	$ a ⊢ 
						∐ ast.mtc_reg◂w .
							assoc { re w } ⊢ { re w o }
							nnt_emt { o w } ⊢ w 
							$ n ⊢ n,n0
							ast.mtc_reg n0 ⊢ a
							reg { w n rv re tv_n tv } ⊢ { n rv re tv_n tv } 
							∎ { { env0 rv tv tv_n n re } a }
						∐ ast.mtc_wc◂o .
							nnt o ⊢ {} 
							$ n ⊢ n,n0
							_some n0 ⊢ o 
							ast.mtc_wc o ⊢ a
							_inc n ⊢ n 							
							∎ { { env0 rv tv tv_n n re } a }
						∐ ast.mtc_cst◂c . 
							cst { { env0 tv_n tv } c } ⊢ { { env0 tv_n tv } c } 
							ast.mtc_cst c ⊢ a 
							∎ { { env0 rv tv tv_n n re } a }
						∐. ast.mtc_agl◂{ cn ap } . 
							crt_mtc_ptn { { env0 rv tv tv_n n re } ap } ⊢ { { env0 rv tv tv_n n re } ap } 
							$ env0 ⊢ { mmv mev ev m_ns e_ns m_l } 
							slv_ns_e { cn { mmv mev } { m_ns e_ns } m_l } ⊢ { { mmv mev } { m_ns e_ns } m_l i_e } 
							$ { mmv mev ev m_ns e_ns m_l } ⊢ env0 
							ast.mtc_agl { i_e ap } ⊢ a
							∎ { { env0 rv tv tv_n n re } a }
				@.crt_mtc_ptn = RP.map_l◂◂crt_mtc 
				@.crt_mtc_ptn_lst = lst.map_l◂◂crt_mtc_ptn 
		§ 
			@.crt_dst_ptn = RP.map_l◂◂crt_dst 
			@.crt_dst { { rv tv tv_n n re } a } 
				∐ a ⊢ ast.dst_reg◂w .
					assoc { re w } ⊢ { re w o }
					nnt_emt { o w } ⊢ w 
					$ n ⊢ n,n0
					ast.dst_reg n0 ⊢ a
					reg { w n rv re tv_n tv } ⊢ { n rv re tv_n tv } 
					∎ { { rv tv tv_n n re } a }
				∐. a ⊢ ast.wc◂o .
					nnt o ⊢ {} 
					$ n ⊢ n,n0
					_some n0 ⊢ o 
					ast.wc o ⊢ a
					_inc n ⊢ n 							
					∎ { { rv tv tv_n n re } a }
		§ crt_dst_ptn_lst = lst.map_l◂◂crt_dst_ptn 
		§ crt_dst_lst = lst.map_l◂◂crt_dst 
		§ 
			@.csm_src { { env0 rv tv tv_n re } a }
				$ a ⊢ 
				∐ ast.src_reg◂w .
					assoc { re w } ⊢ { re w o }
					» _^ w ⊢ w,e
						"csm_src 1:" 0' //
					smt_err { o e } ⊢ i 
					ast.src_reg i ⊢ a
					_none {} ⊢ o
					_cns { { w o } re } ⊢ re
					∎ { { env0 rv tv tv_n re } a }
				∐ ast.src_agl◂{ n sp } . 
					$ %env0 ⊢ { %mmv %mev %ev %m_ns %e_ns %m_l } 
			    slv_ns_e { n { mmv mev } { m_ns e_ns } m_l } ⊢ { { mmv mev } { m_ns e_ns } m_l i_e }
			    $ { mmv mev ev m_ns e_ns m_l } ⊢ env0 	
			    csm_src_ptn { { env0 rv tv tv_n re } sp } ⊢ { { env0 rv tv tv_n re } sp } 
					ast.src_agl { i_e sp } ⊢ a 
					∎ { { env0 rv tv tv_n re } a }				
				∐. ast.im_reg◂c .
					cst { { env0 tv_n tv } c } ⊢ { { env0 tv_n tv } c }
					ast.im_reg c ⊢ a 
					∎ { { env0 rv tv tv_n re } a }
			@.csm_src_lst = lst.map_l◂◂csm_src 
			@.csm_src_ptn_lst = lst.map_l◂◂csm_src_ptn 
			@.csm_src_ptn = RP.map_l◂◂csm_src
		§ @.test_var { env0 tv_n tv rv n re v } 
			$ v ⊢ 
			∐ ast.test_var◂w . 
				assoc { re w } ⊢ { re w o } 
				smt o ⊢ i 
				ast.test_var i ⊢ v 
  			∎ { env0 tv_n tv rv n re v }
			∐. ast.test_cst◂c . 
				cst { { env0 tv_n tv } c } ⊢ { { env0 tv_n tv } c }
				ast.test_cst c ⊢ v 
				∎ { env0 tv_n tv rv n re v }
		§ exp_s8 { { env0 tv_n tv } e } 
			$ e ⊢ 
			∐ ast.exp_s8_cst◂c . 
				cst { { env0 tv_n tv } c } ⊢ { { env0 tv_n tv } c } 
				ast.exp_s8_cst c ⊢ e 
				∎ { { env0 tv_n tv } e }
			∐ ast.exp_s8_idx◂{ p i } . 
				∐ p ⊢ ast.fmt_p◂{} .
					_emt %[ "slv_exp_s8_fmt 0" ] ⊢ _ 
					∎| 
				∐. . 
					ast.exp_s8_idx { p i } ⊢ e 
					∎ { { env0 tv_n tv } e }
			∐. ast.exp_s8_for◂{ i c } . 
				cst { { env0 tv_n tv } c } ⊢ { { env0 tv_n tv } c } 
				ast.exp_s8_for { i c } ⊢ e
			  ∎ { { env0 tv_n tv } e } 
		§§ exp_s8 
			§ 
				@.f { env0 n rv re tv_n tv ss ds el } 
					» 0r _ ⊢ i
					f0 { env0 n rv re tv_n tv ss ds i } ⊢ { env0 n rv re tv_n tv ss ds a i }
					f1 { { env0 tv_n tv } el } ⊢ { { env0 tv_n tv } el }
				  ∎ { env0 n rv re tv_n tv ss ds el }
				@.f0 { env0 n rv re tv_n tv ss ds i } 
					∐ ss ⊢ _cns◂{ s ss }; ds ⊢ _cns◂{ d ds } . 
						csm_src { { env0 rv tv tv_n re } s } ⊢ { { env0 rv tv tv_n re } s }
						crt_dst { { rv tv tv_n n re } d } ⊢ { { rv tv tv_n n re } d }
					  _inc i ⊢ i 
						f0 { env0 n rv re tv_n tv ss ds i } ⊢ { env0 n rv re tv_n tv ss ds a i }
						_dec i ⊢ i 
						_cns { s ss } ⊢ ss 
						_cns { d ds } ⊢ ds 
						∎ { env0 n rv re tv_n tv ss ds a i } 
					∐ ss ⊢ _nil◂{}; ds ⊢ _cns◂{ d ds }; ds ⊢ _nil◂{} . 
						crt_dst { { rv tv tv_n n re } d } ⊢ { { rv tv tv_n n re } d }						
						$ _nil◂{} ⊢ ss 
						$ _nil◂{} ⊢ ds 
						_cns { d ds } ⊢ ds
						ini_tv_n i ⊢ { i a } 
						∎ { env0 n rv re tv_n tv ss ds a i }
					∐. . 
						» "slv_exp_s8.f0 0" _ ⊢ se 
						_emt se ⊢ se
						∎|  
			@.f1 = lst.map_l◂◂exp_s8
			∎∎ 
		§ 
			@.r { env0 rv tv tv_n n re lc }
			$ lc ⊢
			∐ ast.jmp◂{ en x } . 
				ct_ptn { { env0 tv_n tv } en } ⊢ { { env0 tv_n tv } en } 
				csm_src_ptn { { env0 rv tv tv_n re } x } ⊢ { { env0 rv tv tv_n re } x } 
				ast.jmp { en x } ⊢ lc 
				∎ { env0 rv tv tv_n n re lc } 
			∐ ast.seq◂{ ll lc } .
				$ ll ⊢
				∐ ast.op_name◂{ o s d } .
					ct_ptn { { env0 tv_n tv } o } ⊢ { { env0 tv_n tv } o } 
					csm_src_ptn { { env0 rv tv tv_n re } s } ⊢ { { env0 rv tv tv_n re } s }
					crt_dst_ptn { { rv tv tv_n n re } d } ⊢ { { rv tv tv_n n re } d }
					ast.op_name { o s d } ⊢ ll 
					r { env0 rv tv tv_n n re lc } ⊢ { env0 rv tv tv_n n re lc }
					ast.seq { ll lc } ⊢ lc
					∎ { env0 rv tv tv_n n re lc }
				∐. ast.op_exp_s8◂{ pl ss ds } .
					exp_s8.f { env0 n rv re tv_n tv ss ds pl } ⊢ { env0 n rv re tv_n tv ss ds pl }
					ast.op_exp_s8 { pl ss ds } ⊢ ll 
					r { env0 rv tv tv_n n re lc } ⊢ { env0 rv tv tv_n n re lc } 
					ast.seq { ll lc } ⊢ lc 
					∎ { env0 rv tv tv_n n re lc }
			∐ ast.mtc◂lm .
				lc_mtc { env0 rv tv tv_n n re lm } ⊢ { env0 rv tv tv_n n re lm }
				ast.mtc lm ⊢ lc 
				∎ { env0 rv tv tv_n n re lc } 
			∐ ast.op_id◂{ sp ll } . 
				$ ll ⊢ 
				∐ ast.id_mtc◂ilm . 
					csm_src_ptn { { env0 rv tv tv_n re } sp } ⊢ { { env0 rv tv tv_n re } sp }  
					lc_id_mtc_mp { env0 rv tv tv_n n re ilm } ⊢ { env0 rv tv tv_n n ilm } 
					lc_id_mtc { { env0 rv tv tv_n n } ilm } ⊢ { { env0 rv tv tv_n n } ilm } 
					ast.id_mtc ilm ⊢ ll 
					ast.op_id { sp ll } ⊢ lc 
					$ _nil◂{} ⊢ re 
					∎ { env0 rv tv tv_n n re lc } 
				∐. ast.id_line◂{ dl lc } . 
					csm_src_ptn { { env0 rv tv tv_n re } sp } ⊢ { { env0 rv tv tv_n re } sp } 
					crt_dst_ptn_lst { { rv tv tv_n n re } dl } ⊢ { { rv tv tv_n n re } dl }
					r { env0 rv tv tv_n n re lc } ⊢ { env0 rv tv tv_n n re lc } 
					ast.id_line { dl lc } ⊢ ll
					ast.op_id { sp ll } ⊢ lc 
					∎ { env0 rv tv tv_n n re lc }
			∐ ast.ret◂s .
				$ s ⊢
				∐ _some◂s . 
					csm_src_ptn { { env0 rv tv tv_n re } s } ⊢ { { env0 rv tv tv_n re } s } 
					_some s ⊢ s 
					ast.ret s ⊢ lc 
					∎ { env0 rv tv tv_n n re lc } 			
				∐. _none◂{} . 
					_none {} ⊢ s 
					ast.ret s ⊢ lc 
				  ∎ { env0 rv tv tv_n n re lc } 						
			∐. ast.exn◂ne .
				ast.exn ne ⊢ lc 
				∎ { env0 rv tv tv_n n re lc }   			
		@.lc_mtc { env0 rv tv tv_n n re lm } 
			$ lm ⊢ 
			∐ p_cns◂{ { tl me } lm } .  
				$ re ⊢ re,re0 
				mtc_line { env0 rv tv tv_n n re tl } ⊢ { env0 rv tv tv_n n re tl } 
				mtc_etr { env0 rv tv tv_n n re me } ⊢ { env0 rv tv tv_n n re me } 
				lc_mtc { env0 rv tv tv_n n re0 lm } ⊢ { env0 rv tv tv_n n re0 lm } 
				p_cns { { tl me } lm } ⊢ lm 
				∎ { env0 rv tv tv_n n re lm }
			∐. p_end◂{ tl me } .
				mtc_line { env0 rv tv tv_n n re tl } ⊢ { env0 rv tv tv_n n re tl } 
				mtc_etr { env0 rv tv tv_n n re me } ⊢ { env0 rv tv tv_n n re me } 
				p_end { tl me } ⊢ lm 
				∎ { env0 rv tv tv_n n re lm }
		@.mtc_etr { env0 rv tv tv_n n re me } 
			$ me ⊢ 
			∐ ast.mtc_rmf◂lm0 .
				lc_mtc { env0 rv tv tv_n n re lm0 } ⊢ { env0 rv tv tv_n n re lm0 }  
				ast.mtc_rmf lm0 ⊢ me 
				∎ { env0 rv tv tv_n n re me } 
			∐ ast.mtc_id_rmf◂{ sp0 ilm0 } .  
				csm_src_ptn { { env0 rv tv tv_n re } sp0 } ⊢ { { env0 rv tv tv_n re } sp0 } 
				lc_id_mtc_mp { env0 rv tv tv_n n re ilm0 } ⊢ { env0 rv tv tv_n n ilm0 } 
				lc_id_mtc { { env0 rv tv tv_n n } ilm0 } ⊢ { { env0 rv tv tv_n n } ilm0 } 
				ast.mtc_id_rmf { sp0 ilm0 } ⊢ me  
				$ _nil◂{} ⊢ re
				∎ { env0 rv tv tv_n n re me }  
			∐. ast.mtc_code◂lc0 . 
				r { env0 rv tv tv_n n re lc0 } ⊢ { env0 rv tv tv_n n re lc0 } 
				ast.mtc_code lc0 ⊢ me 
				∎ { env0 rv tv tv_n n re me } 
		@.mtc_line { env0 rv tv tv_n n re tl } 
			$ tl ⊢ 
			∐ _cns◂{ t tl } . 
				$ t ⊢ 
				∐ ast.mtc_id◂{ sp mp } . 
					csm_src_ptn { { env0 rv tv tv_n re } sp } ⊢ { { env0 rv tv tv_n re } sp } 
					crt_mtc_ptn { { env0 rv tv tv_n n re } mp } ⊢ { { env0 rv tv tv_n n re } mp }
					ast.mtc_id { sp mp } ⊢ t 
					mtc_line { env0 rv tv tv_n n re tl } ⊢ { env0 rv tv tv_n n re tl } 
					_cns { t tl } ⊢ tl 
					∎ { env0 rv tv tv_n n re tl } 
				∐ ast.mtc_cmp_test◂{ v0 v1 } .  
					test_var { env0 tv_n tv rv n re v0 } ⊢ { env0 tv_n tv rv n re v0 } 
					test_var { env0 tv_n tv rv n re v1 } ⊢ { env0 tv_n tv rv n re v1 } 
					ast.mtc_cmp_test { v0 v1 } ⊢ t 
					mtc_line { env0 rv tv tv_n n re tl } ⊢ { env0 rv tv tv_n n re tl } 
					_cns { t tl } ⊢ tl 
					∎ { env0 rv tv tv_n n re tl } 
				∐. ast.mtc_test◂{ v0 v1 } .  
					test_var { env0 tv_n tv rv n re v0 } ⊢ { env0 tv_n tv rv n re v0 } 
					test_var { env0 tv_n tv rv n re v1 } ⊢ { env0 tv_n tv rv n re v1 } 
					ast.mtc_test { v0 v1 } ⊢ t 
					mtc_line { env0 rv tv tv_n n re tl } ⊢ { env0 rv tv tv_n n re tl } 
					_cns { t tl } ⊢ tl 
					∎ { env0 rv tv tv_n n re tl } 
			∐. _nil◂{} . 
				$ _nil◂{} ⊢ tl 
				∎ { env0 rv tv tv_n n re tl }
		@.lc_id_mtc_mp { env0 rv tv tv_n n re ilm } 
			$ ilm ⊢ 
			∐ p_cns◂{ { mp tl me } ilm } .
				$ re ⊢ re,re0 
				lc_id_mtc_mp { env0 rv tv tv_n n re0 ilm } ⊢ { env0 rv tv tv_n n ilm } 
				crt_mtc_ptn { { env0 rv tv tv_n n re } mp } ⊢ { { env0 rv tv tv_n n re } mp } 
				p_cns { { mp re tl me } ilm } ⊢ ilm 
				∎ { env0 rv tv tv_n n ilm }
			∐. p_end◂{ mp tl me } .
				crt_mtc_ptn { { env0 rv tv tv_n n re } mp } ⊢ { { env0 rv tv tv_n n re } mp } 
			  p_end { mp re tl me } ⊢ ilm 
				∎ { env0 rv tv tv_n n ilm }
		@.lc_id_mtc = p_lst.map_l◂◂lc_id_mtc_0 
		@.lc_id_mtc_0 { { env0 rv tv tv_n n } { mp re tl me } } 
			mtc_line { env0 rv tv tv_n n re tl } ⊢ { env0 rv tv tv_n n re tl } 
			mtc_etr { env0 rv tv tv_n n re me } ⊢ { env0 rv tv tv_n n _ me } 
			∎ { { env0 rv tv tv_n n } { mp tl me } }
		∎∎	
    
		§§ slv 
			§ reg { lv n0 rv tv_n tv }
				$ tv_n ⊢ tv_n,tv_n_0
				set_tv { rv n0 tv_n_0 } ⊢ { rv n0 } 			
				newvar_l { tv_n tv lv } ⊢ { tv_n tv lv y }
				∎ { lv n0 rv tv_n tv y }
			§ 
				@.cst { { lv ev tv_n tv } c } 
				$ c ⊢ c,c_0 
				∐ c ⊢ ast.k_name◂i_e . 
					lod_tv { ev i_e } ⊢ { ev i_e vi }
					var vi ⊢ y 
					RP.atm y ⊢ y 
					inst { tv_n tv lv y } ⊢ { tv_n tv lv y } 
					∎ { { lv ev tv_n tv } c_0 y }
				∐ c ⊢ ast.k_r64◂x . 
					$ TX.r64◂{} ⊢ y 
					∎ { { lv ev tv_n tv } c_0 y }
				∐ c ⊢ ast.k_s8◂s . 
					$ TX.s8◂{} ⊢ y 
					∎ { { lv ev tv_n tv } c_0 y } 
				∐ c ⊢ ast.k_app◂{ c0 c1 } . 
					ct_ptn { { lv ev tv_n tv } c0 } ⊢ { { lv ev tv_n tv } c0 y0 } 
					ct_ptn { { lv ev tv_n tv } c1 } ⊢ { { lv ev tv_n tv } c1 y1 } 
					newvar_l { tv_n tv lv } ⊢ { tv_n tv lv yy }
					$ yy ⊢ yy,yy0 
					ct_imp { y1 yy0 } ⊢ yi 
					RP.atm yi ⊢ yi 
					unify.f_emt { tv yi y0 } ⊢ tv    
					∎ { { lv ev tv_n tv } c_0 yy }
				∐ c ⊢ ast.k_ctr◂{ i n v } . 
					inst { tv_n tv lv RP.atm◂var◂%v } ⊢ { tv_n tv lv y } 
					∎ { { lv ev tv_n tv } c_0 y }
				∐ c ⊢ ast.k_agl◂{ i0 c0 } . 
					lod_tv { ev i0 } ⊢ { ev i0 vi }
					var vi ⊢ y 
					RP.atm y ⊢ yi 
					inst { tv_n tv lv yi } ⊢ { tv_n tv lv yi } 
					_inc lv ⊢ lv 
					ct_ptn { { lv ev tv_n tv } c0 } ⊢ { { lv ev tv_n tv } c0 ys } 
					newvar_l { tv_n tv lv } ⊢ { tv_n tv lv yd } 
					##inst { tv_n tv lv RP.atm◂var◂%v } ⊢ { tv_n tv lv yi }
					$ yd ⊢ yd,yd0 
					$ yi ⊢ yi,yi_0
					unify.f_emt { %tv RP.atm◂imp◂{ %ys %yd0 } %yi_0 } ⊢ tv
					_dec lv ⊢ lv 
					gen { tv_n tv lv yi } ⊢ { tv_n tv lv yi }
					inst { tv_n tv lv yd } ⊢ { tv_n tv lv yd }
					∎ { { lv ev tv_n tv } c_0 yd }
				∐ c ⊢ ast.k_var◂{ i v } . 
					var v ⊢ y 
					RP.atm y ⊢ y 
					inst { tv_n tv lv y } ⊢ { tv_n tv lv y } 
					∎ { { lv ev tv_n tv } c_0 y }
				∐ c ⊢ ast.k_op_axm◂{ i v } . 
					var v ⊢ y 
					RP.atm y ⊢ y 
					inst { tv_n tv lv y } ⊢ { tv_n tv lv y } 
					∎ { { lv ev tv_n tv } c_0 y }
				∐ c ⊢ ast.k_op_gnr◂{ og o_n dp lc v } . 
					var v ⊢ y 
					RP.atm y ⊢ y 
					inst { tv_n tv lv y } ⊢ { tv_n tv lv y } 
					∎ { { lv ev tv_n tv } c_0 y }
				∐ c ⊢ ast.k_op◂{ o_n s_n sp d_n dp v } . 
					var v ⊢ y 
					RP.atm y ⊢ y 
					inst { tv_n tv lv y } ⊢ { tv_n tv lv y } 
					∎ { { lv ev tv_n tv } c_0 y }
				∐ c ⊢ ast.k_op_prs◂{ o_n y h } . 
					inst { tv_n tv lv TX.prs_opn◂RP.atm◂var◂y } ⊢ { tv_n tv lv y } 
					∎ { { lv ev tv_n tv } c_0 y }
				∐. . 
					 » "slv.cst 0" _ ⊢ ee0 
					_emt ee0 ⊢ _ 
					∎|
				@.ct_ptn = RP.map_l_x◂◂cst
				@.ct_ptn_lst = RP.map_l_x_lst◂◂cst 
			§ 
				@.crt_mtc { { lv ev rv tv tv_n } a } 
					$ a ⊢ 
					∐ ast.mtc_reg◂n0 .
						reg { lv n0 rv tv_n tv } ⊢ { lv n0 rv tv_n tv y } 
						∎ { { lv ev rv tv tv_n } ast.mtc_reg◂%n0 y }
					∐ ast.mtc_wc◂o .
						smt o ⊢ n0 
						reg { lv n0 rv tv_n tv } ⊢ { lv n0 rv tv_n tv y } 						
						∎ { { lv ev rv tv tv_n } ast.mtc_wc◂_some◂%n0 y }
					∐ ast.mtc_cst◂c . 
						cst { { lv ev tv_n tv } c } ⊢ { { lv ev tv_n tv } c y } 
						ast.mtc_cst c ⊢ a 
						∎ { { lv ev rv tv tv_n } a y }
					∐. ast.mtc_agl◂{ i_e ap } . 
						crt_mtc_ptn { { lv ev rv tv tv_n } ap } ⊢ { { lv ev rv tv tv_n } ap y } 
						lod_tv { ev i_e } ⊢ { ev i_e iv } 
						var iv ⊢ yx 
						RP.atm yx ⊢ yx
						inst { tv_n tv lv yx } ⊢ { tv_n tv lv yx } 
						newvar_l { tv_n tv lv } ⊢ { tv_n tv lv yy }	
						$ yy ⊢ yy,yy0 
						imp { y yy } ⊢ y0 
						RP.atm y0 ⊢ y0 
						unify.f_emt { tv y0 yx } ⊢ tv 
						ast.mtc_agl { i_e ap } ⊢ a
						∎ { { lv ev rv tv tv_n } a yy0 }
				@.crt_mtc_ptn = RP.map_l_x◂◂crt_mtc 
				@.crt_mtc_ptn_lst = RP.map_l_x_lst◂◂crt_mtc 
		§ 
			@.crt_dst { { lv rv tv tv_n } a } 
				∐ a ⊢ ast.dst_reg◂n0 .
					reg { lv n0 rv tv_n tv } ⊢ { lv n0 rv tv_n tv y } 
					ast.dst_reg n0 ⊢ a
					∎ { { lv rv tv tv_n } a y }
				∐. a ⊢ ast.wc◂o .
					smt o ⊢ n0 
					reg { lv n0 rv tv_n tv } ⊢ { lv n0 rv tv_n tv y } 
					_some n0 ⊢ o 
					ast.wc o ⊢ a							
					∎ { { lv rv tv tv_n } a y }
			@.crt_dst_ptn = RP.map_l_x◂◂crt_dst
			@.crt_dst_ptn_lst = RP.map_l_x_lst◂◂crt_dst 
		§ crt_dst_lst = lst.map_l_x◂◂crt_dst
		§ 
			@.csm_src_ptn = RP.map_l_x◂◂csm_src 
			@.csm_src_ptn_lst = RP.map_l_x_lst◂◂csm_src 
			@.csm_src { { lv ev rv tv tv_n } a }
				$ a ⊢ 
				∐ ast.src_reg◂i .
					lod_tv { rv i } ⊢ { rv i vi } 
					var vi ⊢ y0 
					RP.atm y0 ⊢ y0 
					inst { tv_n tv lv y0 } ⊢ { tv_n tv lv y0 } 
					ast.src_reg i ⊢ a
					∎ { { lv ev rv tv tv_n } a y0 }
				∐ ast.src_agl◂{ e sp } .
					_inc lv ⊢ lv 
					csm_src_ptn { { lv ev rv tv tv_n } sp } ⊢ { { lv ev rv tv tv_n } sp yp } 
					lod_tv { ev e } ⊢ { ev e vi }
					var vi ⊢ y 
					RP.atm y ⊢ y 
					inst { tv_n tv lv y } ⊢ { tv_n tv lv y } 
					newvar_l { tv_n tv lv } ⊢ { tv_n tv lv yd } 
					$ yd ⊢ yd,yd0 
					imp { yp yd0 } ⊢ yi 
					RP.atm yi ⊢ yi 
					$ y ⊢ y,y0 
					unify.f_emt { tv yi y } ⊢ tv 
					_dec lv ⊢ lv 
					gen { tv_n tv lv y0 } ⊢ { tv_n tv lv _ }
					inst { tv_n tv lv yd } ⊢ { tv_n tv lv yd } 
					ast.src_agl { e sp } ⊢ a 
					∎ { { lv ev rv tv tv_n } a yd } 
				∐. ast.im_reg◂c .
					cst { { lv ev tv_n tv } c } ⊢ { { lv ev tv_n tv } c y0 }
					ast.im_reg c ⊢ a 
					∎ { { lv ev rv tv tv_n } a y0 }
		§ csm_src_lst = lst.map_l_x◂◂csm_src 
		
		§ @.test_var { lv ev tv_n tv rv v } 
			$ v ⊢ 
			∐ ast.test_var◂i . 
				lod_tv { rv i } ⊢ { rv i vi } 
				inst { tv_n tv lv RP.atm◂var◂%vi } ⊢ { tv_n tv lv yv }  
				∎ { lv ev tv_n tv rv ast.test_var◂%i yv }
			∐. ast.test_cst◂c . 
				cst { { lv ev tv_n tv } c } ⊢ { { lv ev tv_n tv } c y }
				∎ { lv ev tv_n tv rv ast.test_cst◂%c y }
		§ exp_s8 { lv  ev tv_n tv e } 
			$ e ⊢ 
			∐ ast.exp_s8_cst◂c . 
				cst { { lv ev tv_n tv } c } ⊢ { { lv ev tv_n tv } c y } 
				iug { tv_n tv lv y TX.s8◂{} } ⊢ { tv_n tv lv _ _ }
				∎ { lv  ev tv_n tv ast.exp_s8_cst◂%c _none◂{} }
			∐ ast.exp_s8_idx◂{ p i } . 
				$ i ⊢ i,i0 
				$ p ⊢ 
				∐ ast.fmt_s◂{} . 
					∎ { lv ev tv_n tv ast.exp_s8_idx◂{ ast.fmt_s◂{} %i } _some◂{ %i0 TX.s8◂{} } }
				∐ ast.fmt_d◂{} . 
					∎ { lv  ev tv_n tv ast.exp_s8_idx◂{ ast.fmt_d◂{} %i } _some◂{ %i0 TX.r64◂{} } }
				∐ ast.fmt_x◂{} .
					∎ { lv  ev tv_n tv ast.exp_s8_idx◂{ ast.fmt_x◂{} %i } _some◂{ %i0 TX.r64◂{} } } 
				∐. ast.fmt_p◂{} .
					_emt %[ "slv exp_s8_fmt 0" ] ⊢ _ 
					∎|  
			∐. ast.exp_s8_for◂{ i c } . 
				cst { { lv ev tv_n tv } c } ⊢ { { lv ev tv_n tv } c y0 } 
				iug { tv_n tv lv y0 TX.s8◂{} } ⊢ { tv_n tv lv _ _ }
				$ i ⊢ i,i0 
				∎ { lv  ev tv_n tv ast.exp_s8_for◂{ %i %c } _some◂{ %i0 TX.r64◂{} } } 
		§§ exp_s8 
			§ 
				@.f { lv  ev rv tv_n tv ss ds el } 
					_inc lv ⊢ lv 
					» 0r _ ⊢ i
					f0 { lv  ev rv tv_n tv ss ds i } ⊢ { lv  ev rv tv_n tv ss ds a i ys }
					f1 { lv  ev tv_n tv el a } ⊢ { lv  ev tv_n tv el a }
					_dec lv ⊢ lv 
					gen_lst { tv_n tv lv ys } ⊢ { tv_n tv lv ys }
					∎ { lv  ev rv tv_n tv ss ds el }
				@.f0 { lv  ev rv tv_n tv ss ds i } 
					∐ ss ⊢ _cns◂{ s ss }; ds ⊢ _cns◂{ d ds } . 
						csm_src { { lv ev rv tv tv_n } s } ⊢ { { lv ev rv tv tv_n } s ys }
						crt_dst { { lv rv tv tv_n } d } ⊢ { { lv rv tv tv_n } d yd }
						$ yd ⊢ yd,yd0 
						unify.f_emt { tv ys yd0 } ⊢ tv
						_inc i ⊢ i 
						f0 { lv  ev rv tv_n tv ss ds i } ⊢ { lv  ev rv tv_n tv ss ds a i ys }
						_dec i ⊢ i 
						$ yd ⊢ yd,yd0 
						set_tv { a i yd } ⊢ { a i } 
						_cns { s ss } ⊢ ss 
						_cns { d ds } ⊢ ds 
						_cns { yd0 ys } ⊢ ys 
						∎ { lv  ev rv tv_n tv ss ds a i ys } 
					∐ ss ⊢ _nil◂{}; ds ⊢ _cns◂{ d ds }; ds ⊢ _nil◂{} . 
						crt_dst { { lv rv tv tv_n } d } ⊢ { { lv rv tv tv_n } d yd }						
						$ TX.s8◂{} ⊢ yy 
						$ yd ⊢ yd,yd0 
						unify.f_emt { tv yy yd0 } ⊢ tv  
						ini_tv_n i ⊢ { i a } 
						∎ { lv ev rv tv_n tv _nil◂{} _cns◂{ %d _nil◂{} } a i _cns◂{ %yd _nil◂{} } }
					∐. . 
						» "slv_exp_s8.f0 0" _ ⊢ se 
						_emt se ⊢ se
						∎|  
			@.f1 { lv  ev tv_n tv el a } 
				$ el ⊢ 
				∐ _cns◂{ hd el } .
					exp_s8 { lv ev tv_n tv hd } ⊢ { lv  ev tv_n tv e o } 
					$ o ⊢ 
					∐ _some◂{ i y } . 
						lod_tv { a i } ⊢ { a i yd }
						unify.f { tv y yd } ⊢ tv
						f1 { lv  ev tv_n tv el a } ⊢ { lv  ev tv_n tv el a }
						_cns { e el } ⊢ el 
						∎ { lv  ev tv_n tv el a }
					∐. _none◂{} . 
						f1 { lv  ev tv_n tv el a } ⊢ { lv  ev tv_n tv el a }
						_cns { e el } ⊢ el 
						∎ { lv  ev tv_n tv el a }
				∐. _nil◂{} . 
					$ _nil◂{} ⊢ el 
					∎ { lv  ev tv_n tv el a }
			∎∎ 
		§ 
			@.r { lv ev rv tv tv_n lc }
			$ lc ⊢
			∐ ast.jmp◂{ i_e x } . 
				_inc lv ⊢ lv 
				ct_ptn { { lv ev tv_n tv } i_e } ⊢ { { lv ev tv_n tv } i_e yv } 
				csm_src_ptn { { lv ev rv tv tv_n } x } ⊢ { { lv ev rv tv tv_n } x y0 } 
				newvar_l { tv_n tv lv } ⊢ { tv_n tv lv yy } 
				$ yy ⊢ yy,yy0 
				imp { y0 yy } ⊢ y_f
				RP.atm y_f ⊢ y_f 
				unify.f_emt { tv y_f yv } ⊢ tv 
				_dec lv ⊢ lv 
				gen { tv_n tv lv yy0 } ⊢ { tv_n tv lv yy0 } 
				ast.jmp { i_e x } ⊢ lc 
				∎ { lv  ev rv tv tv_n lc yy0 } 
			∐ ast.seq◂{ ll lc } .
				$ ll ⊢
				∐ ast.op_name◂{ i_e s d } .
					_inc lv ⊢ lv 
					ct_ptn { { lv ev tv_n tv } i_e } ⊢ { { lv ev tv_n tv } i_e yo } 
					csm_src_ptn { { lv ev rv tv tv_n } s } ⊢ { { lv ev rv tv tv_n } s y_s }
					crt_dst_ptn { { lv rv tv tv_n } d } ⊢ { { lv rv tv tv_n } d y_d }
					imp { y_s y_d } ⊢ y_s_d 
					RP.atm y_s_d ⊢ y_s_d 
					$ yo ⊢ yo,yo0 
					unify.f_emt { tv yo0 y_s_d } ⊢ tv 
					_dec lv ⊢ lv 
					gen { tv_n tv lv yo } ⊢ { tv_n tv lv yo } 
					ast.op_name { i_e s d } ⊢ ll 
					r { lv  ev rv tv tv_n lc } ⊢ { lv  ev rv tv tv_n lc yr }
					ast.seq { ll lc } ⊢ lc
					∎ { lv  ev rv tv tv_n lc yr }
				∐. ast.op_exp_s8◂{ pl ss ds } .
					exp_s8.f { lv  ev rv tv_n tv ss ds pl } ⊢ { lv  ev rv tv_n tv ss ds pl }
					ast.op_exp_s8 { pl ss ds } ⊢ ll 
					r { lv  ev rv tv tv_n lc } ⊢ { lv  ev rv tv tv_n lc yr } 
					ast.seq { ll lc } ⊢ lc 
					∎ { lv  ev rv tv tv_n lc yr }
			∐ ast.mtc◂lm .
				lc_mtc { lv  ev rv tv tv_n lm } ⊢ { lv  ev rv tv tv_n lm yr }
				ast.mtc lm ⊢ lc 
				∎ { lv  ev rv tv tv_n lc yr } 
			∐ ast.op_id◂{ sp ll } . 
				$ ll ⊢ 
				∐ ast.id_mtc◂ilm . 
					_inc lv ⊢ lv 
					csm_src_ptn { { lv ev rv tv tv_n } sp } ⊢ { { lv ev rv tv tv_n } sp y0 } 
					_dec lv ⊢ lv 
					$ y0 ⊢ y0,y0_0 
					lc_id_mtc_mp { y0 lv  ev rv tv tv_n ilm } ⊢ { lv  ev rv tv tv_n ilm } 
					gen { tv_n tv lv y0_0 } ⊢ { tv_n tv lv y0_0 } 
					lc_id_mtc { lv  ev rv tv tv_n ilm } ⊢ { lv  ev rv tv tv_n ilm yr } 
					ast.id_mtc ilm ⊢ ll 
					ast.op_id { sp ll } ⊢ lc 
					∎ { lv  ev rv tv tv_n lc yr } 
				∐. ast.id_line◂{ dl lc } . 
					_inc lv ⊢ lv 
					csm_src_ptn { { lv ev rv tv tv_n } sp } ⊢ { { lv ev rv tv tv_n } sp y_s } 
					crt_dst_ptn_lst { { lv rv tv tv_n } dl } ⊢ { { lv rv tv tv_n } dl y_d }
					unifys { tv y_s y_d } ⊢ { tv y_s } 
					_dec lv ⊢ lv 
					gen { tv_n tv lv y_s } ⊢ { tv_n tv lv y_s } 
					r { lv  ev rv tv tv_n lc } ⊢ { lv  ev rv tv tv_n lc yr } 
					ast.id_line { dl lc } ⊢ ll
					ast.op_id { sp ll } ⊢ lc 
					∎ { lv  ev rv tv tv_n lc yr }
			∐ ast.ret◂s .
				$ s ⊢
				∐ _some◂s . 
					_inc lv ⊢ lv 
					csm_src_ptn { { lv ev rv tv tv_n } s } ⊢ { { lv ev rv tv tv_n } s y0 } 
					_dec lv ⊢ lv 
					gen { tv_n tv lv y0 } ⊢ { tv_n tv lv y0 } 
					_some s ⊢ s 
					ast.ret s ⊢ lc 
					∎ { lv ev rv tv tv_n lc y0 } 			
				∐. _none◂{} . 
					∎ { lv ev rv tv tv_n ast.ret◂_none◂{} RP.rcd◂_nil◂{} } 								
			∐. ast.exn◂ne .
				ast.exn ne ⊢ lc 
				newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yq }
				∎ { lv  ev rv tv tv_n lc yq }   			
		@.lc_mtc { lv  ev rv tv tv_n lm } 
			$ lm ⊢ 
			∐ p_cns◂{ { tl me } lm } .  
				mtc_line { lv  ev rv tv tv_n tl } ⊢ { lv  ev rv tv tv_n tl } 
				mtc_etr { lv  ev rv tv tv_n me } ⊢ { lv  ev rv tv tv_n me yr1 } 
				lc_mtc { lv  ev rv tv tv_n lm } ⊢ { lv  ev rv tv tv_n lm yr0 } 
				iug { tv_n tv lv yr0 yr1 } ⊢ { tv_n tv lv yr0 _ }
				p_cns { { tl me } lm } ⊢ lm 
				∎ { lv  ev rv tv tv_n lm yr0 }
			∐. p_end◂{ tl me } .
				mtc_line { lv  ev rv tv tv_n tl } ⊢ { lv  ev rv tv tv_n tl } 
				mtc_etr { lv  ev rv tv tv_n me } ⊢ { lv  ev rv tv tv_n me yr0 } 
				p_end { tl me } ⊢ lm 
				∎ { lv  ev rv tv tv_n lm yr0 }
		@.mtc_etr { lv  ev rv tv tv_n me } 
			$ me ⊢ 
			∐ ast.mtc_rmf◂lm0 .
				lc_mtc { lv  ev rv tv tv_n lm0 } ⊢ { lv  ev rv tv tv_n lm0 yr }  
				ast.mtc_rmf lm0 ⊢ me 
				∎ { lv  ev rv tv tv_n me yr } 
			∐ ast.mtc_id_rmf◂{ sp0 ilm0 } .  
				_inc lv ⊢ lv 
				csm_src_ptn { { lv ev rv tv tv_n } sp0 } ⊢ { { lv ev rv tv tv_n } sp0 y0 } 
				_dec lv ⊢ lv 
				$ y0 ⊢ y0,y0_0 
				lc_id_mtc_mp { y0 lv  ev rv tv tv_n ilm0 } ⊢ { lv  ev rv tv tv_n ilm0 } 
				gen { tv_n tv lv y0_0 } ⊢ { tv_n tv lv y0_0 } 
				lc_id_mtc { lv  ev rv tv tv_n ilm0 } ⊢ { lv  ev rv tv tv_n ilm0 yr } 
				ast.mtc_id_rmf { sp0 ilm0 } ⊢ me  
				$ _nil◂{} ⊢ re
				∎ { lv  ev rv tv tv_n me yr }  
			∐. ast.mtc_code◂lc0 . 
				r { lv  ev rv tv tv_n lc0 } ⊢ { lv  ev rv tv tv_n lc0 yr } 
				ast.mtc_code lc0 ⊢ me 
				∎ { lv  ev rv tv tv_n me yr } 
		@.mtc_line { lv  ev rv tv tv_n tl } 
			$ tl ⊢ 
			∐ _cns◂{ t tl } . 
				$ t ⊢ 
				∐ ast.mtc_id◂{ sp mp } . 
					_inc lv ⊢ lv 
					csm_src_ptn { { lv ev rv tv tv_n } sp } ⊢ { { lv ev rv tv tv_n } sp y0 } 
					crt_mtc_ptn { { lv ev rv tv tv_n } mp } ⊢ { { lv ev rv tv tv_n } mp y }
					_dec lv ⊢ lv 
					$ y0 ⊢ y0,y0_0 
					unify.f_emt { tv y0_0 y } ⊢ tv 
					gen { tv_n tv lv y0 } ⊢ { tv_n tv lv y0 } 
					ast.mtc_id { sp mp } ⊢ t 
					$ y0 ⊢ y0,y00 
					mtc_line { lv  ev rv tv tv_n tl } ⊢ { lv  ev rv tv tv_n tl } 
					_cns { t tl } ⊢ tl 
					∎ { lv  ev rv tv tv_n tl } 
				∐ ast.mtc_cmp_test◂{ v0 v1 } .  
					_inc lv ⊢ lv 
					test_var { lv  ev tv_n tv rv v0 } ⊢ { lv  ev tv_n tv rv v0 y0 } 
					test_var { lv  ev tv_n tv rv v1 } ⊢ { lv  ev tv_n tv rv v1 y1 } 
					_dec lv ⊢ lv 
					$ y0 ⊢ y0,y0_0 
					unify.f_emt { tv y0_0 y1 } ⊢ tv  
					gen { tv_n tv lv y0 } ⊢ { tv_n tv lv y0 } 
					ast.mtc_cmp_test { v0 v1 } ⊢ t 
					mtc_line { lv  ev rv tv tv_n tl } ⊢ { lv  ev rv tv tv_n tl } 
					_cns { t tl } ⊢ tl 
					∎ { lv  ev rv tv tv_n tl } 
				∐. ast.mtc_test◂{ v0 v1 } .  
					_inc lv ⊢ lv 
					test_var { lv  ev tv_n tv rv v0 } ⊢ { lv  ev tv_n tv rv v0 y0 } 
					test_var { lv  ev tv_n tv rv v1 } ⊢ { lv  ev tv_n tv rv v1 y1 } 
					_dec lv ⊢ lv 
					$ y0 ⊢ y0,y0_0 
					unify.f { tv y0_0 y1 } ⊢ tv  
					gen { tv_n tv lv y0 } ⊢ { tv_n tv lv y0 } 
					ast.mtc_test { v0 v1 } ⊢ t 
					mtc_line { lv  ev rv tv tv_n tl } ⊢ { lv  ev rv tv tv_n tl } 
					_cns { t tl } ⊢ tl 
					∎ { lv  ev rv tv tv_n tl } 
			∐. _nil◂{} . 
				$ _nil◂{} ⊢ tl 
				∎ { lv  ev rv tv tv_n tl }
		@.lc_id_mtc_mp { y0 lv  ev rv tv tv_n ilm } 
			$ ilm ⊢ 
			∐ p_cns◂{ { mp tl me } ilm } .
				$ y0 ⊢ y0,y0_0 
				lc_id_mtc_mp { y0_0 lv  ev rv tv tv_n ilm } ⊢ { lv  ev rv tv tv_n ilm } 
				_inc lv ⊢ lv 
				crt_mtc_ptn { { lv ev rv tv tv_n } mp } ⊢ { { lv ev rv tv tv_n } mp y } 
				_dec lv ⊢ lv  
				unify.f { tv y0 y } ⊢ tv
				p_cns { { mp tl me } ilm } ⊢ ilm 
				∎ { lv  ev rv tv tv_n ilm }
			∐. p_end◂{ mp tl me } .
				_inc lv ⊢ lv 
				crt_mtc_ptn { { lv ev rv tv tv_n } mp } ⊢ { { lv ev rv tv tv_n } mp y } 
				_dec lv ⊢ lv  
				unify.f { tv y0 y } ⊢ tv 
				p_end { mp tl me } ⊢ ilm 
				∎ { lv  ev rv tv tv_n ilm }
		@.lc_id_mtc { lv  ev rv tv tv_n ilm } 
			$ ilm ⊢ 
			∐ p_cns◂{ { mp tl me } ilm } .  
				mtc_line { lv  ev rv tv tv_n tl } ⊢ { lv ev rv tv tv_n tl } 
				mtc_etr { lv  ev rv tv tv_n me } ⊢ { lv ev rv tv tv_n me yr1 } 
				lc_id_mtc { lv  ev rv tv tv_n ilm } ⊢ { lv ev rv tv tv_n ilm yr0 } 
				_inc lv ⊢ lv 
				inst { tv_n tv lv yr0 } ⊢ { tv_n tv lv yr0 } 
				inst { tv_n tv lv yr1 } ⊢ { tv_n tv lv yr1 }
				$ yr0 ⊢ yr0,yr0_0 
				unify.f { tv yr0 yr1 } ⊢ tv 
				_dec lv ⊢ lv 
				gen { tv_n tv lv yr0_0 } ⊢ { tv_n tv lv yr0_0 } 
				p_cns { { mp tl me } ilm } ⊢ ilm 
				∎ { lv  ev rv tv tv_n ilm yr0_0 }
			∐. p_end◂{ mp tl me } .
				mtc_line { lv  ev rv tv tv_n tl } ⊢ { lv  ev rv tv tv_n tl } 
				mtc_etr { lv  ev rv tv tv_n me } ⊢ { lv  ev rv tv tv_n me yr0 } 
				p_end { mp tl me } ⊢ ilm 
				∎ { lv  ev rv tv tv_n ilm yr0 }
		∎∎
	§ 
		@.exc_tpl { ev evv tv tv_n t p } 
				$ t ⊢ 
				∐ RP.rcd◂l0 . 
					∐ p ⊢ RP.rcd◂l1 . 
						exc_tpl_lst { ev evv tv tv_n l0 l1 } ⊢ { ev evv tv tv_n l0 l1 } 
						RP.rcd l0 ⊢ t 
						RP.rcd l1 ⊢ p 
						∎ { ev evv tv tv_n t p }
					∐. . 
						∎|  
				∐. RP.atm◂i0 . 
					∐ p ⊢ RP.atm◂a0 . 
						» 1r _ ⊢ lv 
						slv.cst { { lv ev tv_n tv } a0 } ⊢ { { lv ev tv_n tv } a0 y0 } 
						_dec lv ⊢ lv 
						gen { tv_n tv lv y0 } ⊢ { tv_n tv lv y0 }  
						newvar_ln { tv_n tv y0 } ⊢ { tv_n tv v0 } 
						##ast.evl_ct { evv a0 } ⊢ { evv a0 } 
						exc_tv { evv i0 a0 } ⊢ { evv i0 a0 } 
						exc_tv { ev i0 v0 } ⊢ { ev i0 v0 } 
						RP.atm a0 ⊢ p 
						RP.atm { i0 v0 } ⊢ t 
						∎ { ev evv tv tv_n t p }
					∐. . 
						∎| 
			@.exc_tpl_lst { ev evv tv tv_n l0 l1 } 
				∐ l0 ⊢ _cns◂{ t l0 }; l1 ⊢ _cns◂{ p l1 } . 
					exc_tpl { ev evv tv tv_n t p } ⊢ { ev evv tv tv_n t p }
					exc_tpl_lst { ev evv tv tv_n l0 l1 } ⊢ { ev evv tv tv_n l0 l1 } 
					_cns { t l0 } ⊢ l0 
					_cns { p l1 } ⊢ l1 
					∎ { ev evv tv tv_n l0 l1 }
				∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
					$ _nil◂{} ⊢ l0 
					$ _nil◂{} ⊢ l1 
					∎ { ev evv tv tv_n l0 l1 }
				∐. . 
					∎| 
		§ 
		@.set_tpl { ev evv tv tv_n t p } 
				∐ t ⊢ RP.rcd◂l0; p ⊢ RP.rcd◂l1 . 
					set_tpl_lst { ev evv tv tv_n l0 l1 } ⊢ { ev evv tv tv_n l0 l1 } 
					∎ { ev evv tv tv_n RP.rcd◂l0 RP.rcd◂l1 } 
				∐ t ⊢ RP.atm◂{ i0 v0 }; p ⊢ RP.atm◂a0 . 
					exc_tv { evv i0 a0 } ⊢ { evv i0 a0 } 
					exc_tv { ev i0 v0 } ⊢ { ev i0 _ } 
					∎ { ev evv tv tv_n RP.atm◂i0 RP.atm◂a0 }
				∐. . 
					∎| 
			@.set_tpl_lst { ev evv tv tv_n l0 l1 } 
				∐ l0 ⊢ _cns◂{ t l0 }; l1 ⊢ _cns◂{ p l1 } . 
					set_tpl { ev evv tv tv_n t p } ⊢ { ev evv tv tv_n t p }
					set_tpl_lst { ev evv tv tv_n l0 l1 } ⊢ { ev evv tv tv_n l0 l1 } 
					∎ { ev evv tv tv_n _cns◂{ t l0 } _cns◂{ p l1 } }
				∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
					∎ { ev evv tv tv_n _nil◂{} _nil◂{} }
				∐. . 
					_emt %[ "set_tpl_lst 0" ] ⊢ _
					∎| 
	§ 
		@.tpl_ptn = RP.map_l_x◂◂tpl_atm 
		@.tpl_atm { { c_n wl lv evv ev ev_n tv tv_n } w } 		
			assoc { wl w } ⊢ { wl w o } 
			nnt_emt { o w } ⊢ w 
			$ tv_n ⊢ tv_n,t0 
			newvar_l { tv_n tv lv } ⊢ { tv_n tv lv y } 
			$ t0 ⊢ t0,t1 
			set_tv { ev ev_n t0 } ⊢ { ev ev_n }
			$ c_n ⊢ c_n,cv 
			$ ev_n ⊢ ev_n,cv0 
			_inc c_n ⊢ c_n 
			set_tv { evv ev_n ast.k_var◂{ cv t1 } } ⊢ { evv ev_n } 
			$ ev_n ⊢ ev_n,n0 
			_inc ev_n ⊢ ev_n 
			∎ { { c_n _cns◂{ { w _some◂n0 } wl } lv evv ev ev_n tv tv_n } cv0 y } 
		@.tpl_ptn_lst = lst.map_l_x◂◂tpl_atm 
	§ 
		@.tpl_reg_ptn = RP.map_l_x◂◂tpl_reg_atm 
		@.tpl_reg_atm { { wl lv rv rv_n tv tv_n } w } 		
			assoc { wl w } ⊢ { wl w o } 
			nnt_emt { o w } ⊢ w 
			$ tv_n ⊢ tv_n,t0 
			newvar_l { tv_n tv lv } ⊢ { tv_n tv lv y } 
			$ t0 ⊢ t0,t1 
			set_tv { rv rv_n t0 } ⊢ { rv rv_n }
			inc_x rv_n ⊢ { i rv_n } 
			$ i ⊢ i,i0
			∎ { { _cns◂{ { w _some◂i } wl } lv rv rv_n tv tv_n } i0 y } 
			@.tpl_reg_ptn_lst = lst.map_l_x◂◂tpl_reg_atm 
		§§ slv_type 
			§ 
				@.f = RP.map_l_atm◂◂f_atm 
				@.f_atm { ENV a }
					$ a ⊢ 
					∐ T.imp◂{ t0 t1 } .
						f { ENV t0 } ⊢ { ENV t0 } 
						f { ENV t1 } ⊢ { ENV t1 } 
						∎ { ENV RP.atm◂T.imp◂{ t0 t1} } 
					∐ T.ct_imp◂{ t0 t1 } . 
						f { ENV t0 } ⊢ { ENV t0 } 
						f { ENV t1 } ⊢ { ENV t1 } 
						∎ { ENV RP.atm◂T.ct_imp◂{ t0 t1} } 
					∐ T.dta◂{ ax tl } . 
						∎|
					∐ T.abs◂{ i t } . 
						∎| 
					∐. T.var◂v . 
						f_v { ENV v } ⊢| 
				@.f_v { ENV v } 
					$ v ⊢ 
					∐ ast.app◂{ t0 t1 } . 
						f { ENV t0 } ⊢ { ENV t0 } 
						f { ENV t1 } ⊢ { ENV t1 } 
						f_app { ENV { t0 t1 } } ⊢| 
					∐ ast.type_name◂n . 
						$ ENV ⊢ { env0 mtv tv_n tv t_ns al l2 } 
						$ env0 ⊢ { mmv mev ev m_ns e_ns m_l } 
						slv_ns_t { n { mmv mtv } { m_ns t_ns } m_l } ⊢ { { mmv mtv } { m_ns t_ns } m_l iv }
						$ { mmv mev ev m_ns e_ns m_l } ⊢ env0 	
						assoc { l2 iv } ⊢ { l2 iv o } 
						∐ o ⊢ _some◂o; o ⊢ _some◂{ w as y } .
							$ iv ⊢ iv,i0_0 
							_cns { { i0_0 _some◂_none◂{} } l2 } ⊢ l2 
							args_ln { { env0 mtv tv_n tv t_ns as _nil◂{} l2 } y } ⊢ { { env0 mtv tv_n tv t_ns al0 l2 } k } 
							$ iv ⊢ iv,i0_0 
							_cns { { i0_0 _none◂{} } l2 } ⊢ l2 
							set_tv { tv iv T.var_ln◂k } ⊢ { tv iv }
							∎ { { env0 mtv tv_n tv t_ns al l2 } RP.atm◂T.var◂iv } 
						∐ o ⊢ _some◂o; o ⊢ _none◂{} . 
							_emt %[ "slv_type 0" ] ⊢ se 
							∎| 
						∐. . 
							inst { tv_n tv %[ 1r ] RP.atm◂T.var◂iv } ⊢ { tv_n tv lv k }
							_dec lv ⊢ lv  
							gen { tv_n tv lv k } ⊢ { tv_n tv lv k } 
							∎ { { env0 mtv tv_n tv t_ns al l2 } k }
					∐. ast.type_var◂s . 
						$ ENV ⊢ { env0 mtv tv_n tv t_ns al l2 } 
						assoc { al s } ⊢ { al s o } 
						smt o ⊢ i 
						∎ { { env0 mtv tv_n tv t_ns al l2 } RP.atm◂var◂i }
			@.f_app { { env0 mtv tv_n tv t_ns al l2 } { k0 k1 } } 
				$ k0 ⊢ 
				∐ RP.rcd◂l . 
					pnt_type_k { tv RP.rcd◂l } ⊢ { tv s0 } 
					_emt s0 ⊢ _ 
					∎| 
				∐. RP.atm◂k0 . 
					∐ k0 ⊢ abs◂{ a k0 } . 
						exc_tv { tv a var_ln◂k1 } ⊢ { tv a _ } 
						∎ { { env0 mtv tv_n tv t_ns al l2 } k0 } 
					∐ k0 ⊢ var◂i . 
						lod_tv { tv i } ⊢ { tv i v } 
						∐ v ⊢ var_ln◂k2 . 
							f_app { { env0 mtv tv_n tv t_ns al l2 } { k2 k1 } } ⊢|
						∐. . 
							pnt_type_k { tv k1 } ⊢ { tv s0 } 
							» "slv_type_app 1" _ ⊢ se 
							_emt se ⊢ se 
							_emt s0 ⊢ s0 
							∎|
					∐. . 
						pnt_type_k { tv RP.atm◂k0 } ⊢ { tv s0 } 
						_emt %[ "slv_type_app 0" ] ⊢ _ 
						_emt s0 ⊢ s0 
						∎| 
			@.args_ln { { env0 mtv tv_n tv t_ns as al l2 } t } 
				$ as ⊢ 
				∐ _cns◂{ a as } . 
					assoc { al a } ⊢ { al a o } 
					nnt o ⊢ {} 
					newvar_i { tv_n tv } ⊢ { tv_n tv i } 
					$ i ⊢ i,i0 
					args_ln { { env0 mtv tv_n tv t_ns as _cns◂{ { a _some◂i } al } l2 } t } ⊢ { { env0 mtv tv_n tv t_ns al l2 } k } 
					∎ { { env0 mtv tv_n tv t_ns al l2 } RP.atm◂T.abs◂{ i0 k } }		
				∐. _nil◂{} .  
					f { { env0 mtv tv_n tv t_ns al l2 } t } ⊢|	
			∎∎ 
		§ slv_args_ln { { env0 mtv tv_n tv t_ns as l2 } t } 
			slv_type.args_ln { { env0 mtv tv_n tv t_ns as _nil◂{} l2 } t } ⊢| 
		§ @.slv_args_def_0 SAD
			inv SAD ⊢ { mtv tv_n tv t_ns as al x xl ql dl } 
			$ as ⊢ 
			∐ _cns◂{ a as } . 
				assoc { al a } ⊢ { al a o } 
				nnt o ⊢ {} 
				newvar_i { tv_n tv } ⊢ { tv_n tv i } 
				$ tv_n ⊢ tv_n,tv_n0 
				$ tv_n ⊢ tv_n,qi 
				newvar_q { tv_n tv %[ 0r ] } ⊢ { tv_n tv lv q } 
				$ i ⊢ i,i1 
				iso { mtv tv_n tv t_ns as _cns◂{ { a _some◂tv_n0 } al } x _cns◂{ RP.atm◂var◂i1 xl } _cns◂{ q ql } dl } ⊢ SAD 
				slv_args_def_0 SAD ⊢ { mtv tv_n tv t_ns al k yx dl ql } 
				∎ { mtv tv_n tv t_ns al RP.atm◂abs◂{ i k } yx dl _cns◂{ qi ql } }
			∐. _nil◂{} .  
				$ x ⊢ x,x0 
				∎ { mtv tv_n tv t_ns al RP.atm◂dta◂{ x xl } RP.atm◂dta◂{ x0 ql } dl _nil◂{} }
		§ slv_args_def { mtv tv_n tv t_ns as x dl } 
			iso { mtv tv_n tv t_ns as _nil◂{} x _nil◂{} _nil◂{} dl } ⊢ SAD 
			slv_args_def_0 SAD ⊢ { mtv tv_n tv t_ns al k yx dl ql0 } 
			rev ql0 ⊢ ql0 
			∎ { mtv tv_n tv t_ns al k yx dl ql0 }
	§ rtr_dst_ptn { env0 mtv tv_n tv ns_t y td } 
			∐ td ⊢ _some◂td . 
				slv_type.f { { env0 mtv tv_n tv ns_t _nil◂{} _nil◂{} } td } ⊢ { { env0 mtv tv_n tv ns_t al l2 } kd } 
				unify.f { tv y kd } ⊢ tv
				∎ { env0 mtv tv_n tv ns_t }
			∐. . 
				∎ { env0 mtv tv_n tv ns_t }
	
		§ @.slv_dt_def { { mmv mev ns_m il } { tav evv } an mtv al yx tv tv_n ns_t ev ev_n ns_e dl { dd ep0 ec0 } } 
			$ dl ⊢ 
			∐ _cns◂{ { cn y } dl } . 
				$ _nil◂{} ⊢ l2 
				slv_type.f { { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t al l2 } y } ⊢ { { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t al l2 } k  } 
				» 0r _ ⊢ lv 
				$ yx ⊢ yx,yx0 
				##$ k ⊢ k,k0 
				$ k ⊢ k,k0 
				imp { k yx0 } ⊢ yy 
				RP.atm yy ⊢ yy 
				$ yy ⊢ yy,yy0 
				pnt_type_k { tv yy0 } ⊢ { tv syy }
				» _^ dd,ev_n,cn,syy ⊢ dd,ev_n,cn,syy,ep1 
					0'*"\t" "§ " 2' "(" 1d' ") : " 3' "\n" // 
				_inc an ⊢ an 
				slv_dt_def { { mmv mev ns_m il } { tav evv } an mtv al yx tv tv_n ns_t ev ev_n ns_e dl { dd ep0 ec0 } } ⊢ { { mmv mev ns_m il } { tav evv } an mtv al yx tv tv_n ns_t ev ev_n ns_e { dd ep0 ec0 } ac kl }  
				_dec an ⊢ an 
				_cns { k0 kl } ⊢ kl 
				$ ac ⊢ ac,ac0 
				$ an ⊢ an,an0 
				$ yy ⊢ yy,yy0 
				k_ctr { tv_n tv an0 ac0 yy0 } ⊢ { tv_n tv k } 
				add_e { tv_n tv evv ev ev_n ns_e cn k yy } ⊢ { tv_n tv evv ev ev_n ns_e } 
				_cns { ep1 ep0 } ⊢ ep0 
				∎ { { mmv mev ns_m il } { tav evv } an mtv al yx tv tv_n ns_t ev ev_n ns_e { dd ep0 ec0 } ac kl } 
			∐. _nil◂{} . 
				$ an ⊢ an,ac 
				$ _nil◂{} ⊢ kl 
				∎ { { mmv mev ns_m il } { tav evv } an mtv al yx tv tv_n ns_t ev ev_n ns_e { dd ep0 ec0 } ac kl }
	§§ gnr
		§§ reg_idx  
			§ r13 = 0r 
			§ r14 = 1r 
			§ r8 = 2r 
			§ r9 = 3r 
			§ r10 = 4r 
			§ r11 = 5r 
			§ rcx = 6r 
			§ rdx = 7r 
			∎∎ 
		§ gnr_ret e 
			» "\tret\n" _ ⊢ sc0 
			rp8.add_s8 { e sc0 } ⊢ e 
			∎ e 
		§ lb_etr { lb e } 
			» _^ lb ⊢ lb,s 
				"LB_" 0d' ":\n" // 
			rp8.add_s8 { e s } ⊢ e 
			∎ { lb e }
		§ jmp_lb { lb e } 
			» _^ lb ⊢ lb,s0 
				"\tjmp LB_" 0d' "\n" // 
			rp8.add_s8 { e s0 } ⊢ e 
			∎ { lb e } 
		§ jg_lb { lb e } 
			» _^ lb ⊢ lb,s0 
				"\tjg LB_" 0d' "\n" // 
			rp8.add_s8 { e s0 } ⊢ e 
			∎ { lb e } 
		§ jnz_lb { lb e } 
			» _^ lb ⊢ lb,s0 
				"\tjnz LB_" 0d' "\n" // 
			rp8.add_s8 { e s0 } ⊢ e 
			∎ { lb e } 
		§ jz_lb { lb e } 
			» _^ lb ⊢ lb,s0 
				"\tjz LB_" 0d' "\n" // 
			rp8.add_s8 { e s0 } ⊢ e 
			∎ { lb e } 
		§ jl_lb { lb e } 
			» _^ lb ⊢ lb,s0 
				"\tjl LB_" 0d' "\n" // 
			rp8.add_s8 { e s0 } ⊢ e 
			∎ { lb e } 
		§ skip { lb_n e0 }
			rp8.e {} ⊢ e1 
			$ lb_n ⊢ lb_n,lb0 
			_inc lb_n ⊢ lb_n 
			» _^ lb0 ⊢ lb0,s0 
				"\tjmp LB_" 0d' "\n" // 
			rp8.add_s8 { e1 s0 } ⊢ e1 
			rp8.cct { e1 e0 } ⊢ e1 
			» _^ lb0 ⊢ lb0,s0 
				"LB_" 0d' ":\n" //
			rp8.add_s8 { e1 s0 } ⊢ e1 
			∎ { lb_n e1 }
		§ ret r 
			∐ r ⊢ _some◂lb . 
				» _^ lb ⊢ lb,s0 
					"\tjmp LB_" 0d' "\n" // 
				∎ s0 
			∐. . 
				» "\tret\n" _ ⊢ s0 
				∎ s0
		§ @.mk_jmp_tbl { lb_n n } 			 
			∐ n'=0r .
				rp8.e {} ⊢ e 
				$ _nil◂{} ⊢ lbl
				∎ { lb_n e lbl } 
			∐ n'=1r .
				» _^ lb_n ⊢ lb_n,s
					"LB_" 0d' // 
				rp8.of_s8 s ⊢ e 
				$ lb_n ⊢ lb_n,lb0 
				_inc lb_n ⊢ lb_n  
				$ _nil◂{} ⊢ lbl 
				_cns { lb0 lbl } ⊢ lbl
				∎ { lb_n e lbl }
			∐. . 
				» _^ lb_n ⊢ lb_n,s 
					"LB_" 0d' "," //
				rp8.of_s8 s ⊢ es  
				_dec n ⊢ n 
				$ lb_n ⊢ lb_n,lb0 
				_inc lb_n ⊢ lb_n 
				mk_jmp_tbl { lb_n n } ⊢ { lb_n e lbl } 
				rp8.cct { es e } ⊢ e 
				_cns { lb0 lbl } ⊢ lbl 
				∎ { lb_n e lbl }
		§ REG_N = 8r 
		§ mk_rbp rsp 
			» REG_N _ ⊢ rbp 
			_add { rbp rsp } ⊢ { rbp rsp } 
			∎ { rsp rbp } 
		§ mk_rsp p0 
			rset.ini {} ⊢ v0 
			stt_v.mk_rset { p0 v0 } ⊢ v0 
			rset.max_t v0 ⊢ { v0 j0 }
			» REG_N _ ⊢ n0
			setge { j0 n0 } ⊢ { j0 n0 b }
			∐ b'=0r . 
				» 0r _ ⊢ rsp 
				∎ rsp 
			∐. .
				_sub { j0 n0 } ⊢ { j0 n0 } 
				_inc j0 ⊢ rsp 
				∎ rsp  
		§ sub_rsp n 
			∐ n'=0r . 
				» "" _ ⊢ s 
				∎ { n s } 
			∐. . 
				$ n ⊢ n,x 
				» 3r _ ⊢ l 
				_shl { x l } ⊢ { x _ } 
				» _^ x ⊢ x,s 
					"\tsub rsp," 0d' "\n" // 
				∎ { n s }
		§ add_rsp n 
			∐ n'=0r . 
				» "; .add_rsp 0\n" _ ⊢ s 
				∎ { n s } 
			∐. . 
				$ n ⊢ n,x 
				» 3r _ ⊢ l 
				_shl { x l } ⊢ { x _ }  
				» _^ x,n ⊢ x,n,s 
					"; .add_rsp " 1d' "\n" 
					"\tadd rsp," 0d' "\n" // 
				∎ { n s }	
		§ set_rsp { rsp0 rsp1 } 
			∐ rsp0'=rsp1' .
				» "" _ ⊢ e 
				∎ { rsp0 rsp1 e } 
			∐. . 
				setge { rsp0 rsp1 } ⊢ { rsp0 rsp1 b } 
				∐ b'=1r . 
					$ rsp0 ⊢ rsp0,n 
					_sub { n rsp1 } ⊢ { n rsp1 } 
					add_rsp n ⊢ { n e } 
					∎ { rsp0 rsp1 e } 
				∐. . 
					$ rsp1 ⊢ rsp1,n 
					_sub { n rsp0 } ⊢ { n rsp0 } 
					sub_rsp n ⊢ { n e } 
					∎ { rsp0 rsp1 e } 
		§ resize_rsp { rsp n }
			$ n ⊢ n,rsp1 
			» REG_N _ ⊢ rbp 
			setge { n rbp } ⊢ { n rbp b } 
			∐ b'=1r . 
				_sub { rsp1 rbp } ⊢ { rsp1 rbp } 
				_inc rsp1 ⊢ rsp1 
				set_rsp { rsp rsp1 } ⊢ { rsp rsp1 e } 
				∎ { rsp1 n e }
			∐. . 
				add_rsp rsp ⊢ { rsp e } 
				» 0r _ ⊢ rsp0 
				∎ { rsp0 n e }
		§ set_rsp { rsp0 rsp1 e0 } 
			set_rsp { rsp0 rsp1 } ⊢ { rsp0 rsp1 e1 }
			rp8.add_s8 { e0 e1 } ⊢ e0 
			∎ { rsp1 e0 } 
		§ rb_rsp { rsp rsp0 lb0 e }
			set_rsp { rsp rsp0 e } ⊢ { rsp0 e } 
			jmp_lb { lb0 e } ⊢ { lb0 e } 
			∎ { rsp0 lb0 e } 
		§ c_call e 
			» _^ e ⊢ e,r 				
				"\tC_CALL " 0' "\n" 
				// 
			∎ { e r }
		##§ push_c_regs = "\tpush rdx\n\tpush rcx\n\tpush r8\n\tpush r9\n\tpush r10\n\tpush r11\n" 
		§ push_c_regs = "\tC_PUSH_REGS\n" 
		##§ pop_c_regs = "\tpop r11\n\tpop r10\n\tpop r9\n\tpop r8\n\tpop rcx\n\tpop rdx\n" 					  
		§ pop_c_regs = "\tC_POP_REGS\n" 
		§ mlc_s8 l 
			$ l ⊢ l,l0 
			» 3r _ ⊢ x0  
			_shr { l0 x0 } ⊢ { l0 x0 } 
			_inc l0 ⊢ l0  
			$ l0 ⊢ l0,l1 
			_inc l0 ⊢ l0 
			_shl { l0 x0 } ⊢ { l0 x0 } 
			» _^ l,l0 ⊢ l,l0,e 
				`	mov rsi,1  
				"\tmov rdi," 1d' "\n" 
				`	xor rax,rax 
				"\tadd QWORD [S8_N]," 0d' "\n" 
				`	C_CALL_SF calloc
				"\tmov QWORD [rax]," 0d' "\n"
				//
			∎ { l e }   
		§ @.mk_s8_lp { s l i e } 
			∐ i'=l' . 
				∎ { s l e } 
			∐. . 
				_lds { s i } ⊢ { s i b } 
				» _^ i,b ⊢ i,b,eb 
					"\tmov BYTE [rax+8+" 0d' "]," 1d' "\n" 
					// 
				rp8.of_s8 eb ⊢ eb 
				rp8.cct { e eb } ⊢ e 
				_inc i ⊢ i 
				mk_s8_lp { s l i e } ⊢| 
		§ mk_s8 s 
			_s8_len s ⊢ { s l } 
			mlc_s8 l ⊢ { l e0 } 
			rp8.of_s8 e0 ⊢ e0 
			» 0r _ ⊢ i 	
			mk_s8_lp { s l i e0 } ⊢ { s l e0 } 
			∎ { s e0 }
		§ @.mk_db_lp { s i l r } 
			∐ i'=l' . 
				» _^ r ⊢ r,e 
					0d' // 
				rp8.of_s8 e ⊢ e 
				∎ { s i l r e } 
			∐. . 
				_lds { s i } ⊢ { s i b } 
				» _^ b ⊢ b,eb 
					0d' "," // 
				_inc i ⊢ i 
				mk_db_lp { s i l r } ⊢ { s i l r e1 } 
				rp8.of_s8 eb ⊢ eb 
				rp8.cct { eb e1 } ⊢ e 
				∎ { s i l r e } 			
		§ mk_db { s r }  
			» 0r _ ⊢ i 
			_s8_len s ⊢ { s l } 
			mk_db_lp { s i l r } ⊢ { s i l r e } 
			rp8.to_s8 e ⊢ se  
			∎ { s r se }
		§ data_s8 { eds lb s }
			» 0r _ ⊢ r 
			mk_db { s r } ⊢ { s r se } 
			» _^ lb,se ⊢ lb,se,ss 
				"LB_" 0d' ": db " 1' "\n" // 
			rp8.add_s8 { eds ss } ⊢ eds 
			∎ { eds lb s } 
		§ reg { rsp i }  
			∐ i'=<7r . 
				^ i ⊢ i,r 
					"RX" 0d' // 
				∎ { rsp i r bl.t◂{} }
			∐. . 
				» REG_N _ ⊢ rbp 
				_add { rbp rsp } ⊢ { rbp rsp } 
				setge { i rbp } ⊢ { i rbp b } 
				∐ b'=0r . 
					$ i ⊢ i,i0 
					» REG_N _ ⊢ n0
					_sub { i0 n0 } ⊢ { i0 n0 } 
					$ rsp ⊢ rsp,rsp0 
					_sub { rsp0 i0 } ⊢ { rsp0 i0 } 
					» _^ rsp0 ⊢ rsp0,sr 
						"QWORD [rsp-8+8*" 0d' "]" // 
					bl.f {} ⊢ br 
					∎ { rsp i sr br } 
				∐. . 
					» "gnr.reg 0" _ ⊢ se0 
					_emt se0 ⊢ se0 
					_emt { rsp i } ⊢ { rsp i } 
					∎|
			§ brk_rsp { rsp i } 
				» REG_N _ ⊢ rbp 
				_add { rbp rsp } ⊢ { rbp rsp } 
				setge { i rbp } ⊢ { i rbp b } 
				∐ b'=0r . 
					» "" _ ⊢ s 
					∎ { rsp i s }  
				∐. . 
					$ i ⊢ i,i0 
					_sub { i rbp } ⊢ { i rbp } 
					_inc i ⊢ i  
					_add { rsp i } ⊢ { rsp i }
					sub_rsp i ⊢ { i s } 
					∎ { rsp i0 s } 
			§ brk_rsp_e { rsp i e } 
				brk_rsp { rsp i } ⊢ { rsp i s } 
				rp8.add_s8 { e s } ⊢ e 
				∎ { rsp i e }
		
			§ chk_rsp { rsp i } 
				» REG_N _ ⊢ rbp 
				_add { rbp rsp } ⊢ { rbp rsp } 
				setge { i rbp } ⊢ { i rbp b } 
				∐ b'=0r . 
					» 0r _ ⊢ i1 
					∎ { rsp i i1 }  
				∐. . 
					$ i ⊢ i,i0 
					_sub { i rbp } ⊢ { i rbp } 
					_inc i ⊢ i  
					_add { rsp i } ⊢ { rsp i }
					∎ { rsp i0 i } 
			§ mov { rsp i0 i1 } 
				∐ i0'=i1' . 
					» "" _ ⊢ sr 
					∎ { rsp i0 i1 sr }
				∐. . 
					reg { rsp i0 } ⊢ { rsp i0 s0 b0 } 
					reg { rsp i1 } ⊢ { rsp i1 s1 b1 } 
					∐ b0 ⊢ bl.f◂{}; b1 ⊢ bl.f◂{} . 
						» _^ s0,s1 ⊢ s0,s1,sr 
							"\tMOV_RBX " 1' "," 0' "\n" // 
						∎ { rsp i0 i1 sr } 
					∐. . 
						» _^ s0,s1 ⊢ s0,s1,sr 
							"\tmov " 1' "," 0' "\n" // 
						∎ { rsp i0 i1 sr } 
			§ mov_e { rsp r0 r1 e } 
				mov { rsp r0 r1 } ⊢ { rsp r0 r1 s } 
				rp8.add_s8 { e s } ⊢ e 
				∎ { rsp r0 r1 e } 
			
			§ r64_to_rax { rsp evv a0 }
				ast.r64_of_rt { evv a0 } ⊢ { evv x } 
				$ x ⊢ 
				∐ ast.im_of◂x . 
					» _^ x ⊢ x,sc0 
						"\tmov rax," 0d' "\n" //
					∎ { rsp evv sc0 }
				∐. ast.hp_of◂r0 . 
					reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
					» _^ sr0 ⊢ sr0,sc0 
						"\tmov rax," 0' "\n" //
					∎ { rsp evv sc0 }	
		§§ mov 
			§ emt_reg = reg 
		
				§ idx_mem { rsp r0 m e0 } 
					emt_reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
					∐ br0 ⊢ bl.t◂{} . 
						» _^ sr0,m ⊢ sr0,m,sc0 
							"\tmov " 0' "," 1' "\n" // 
						rp8.add_s8 { e0 sc0 } ⊢ e0 
						∎ { rsp r0 m e0 }
					∐. . 
						» _^ sr0,m ⊢ sr0,m,sc0 
							"\tMOV_RAX " 0' "," 1' "\n" // 
						rp8.add_s8 { e0 sc0 } ⊢ e0 
						∎ { rsp r0 m e0 }
				§ mem_idx { rsp m r1 e0 } 
					emt_reg { rsp r1 } ⊢ { rsp r1 sr br } 
					∐ br ⊢ bl.t◂{} . 
						» _^ sr,m ⊢ sr,m,sc0 
							"\tmov " 1' "," 0' "\n" // 
						rp8.add_s8 { e0 sc0 } ⊢ e0 
						∎ { rsp m r1 e0 }
					∐. . 
						» _^ sr,m ⊢ sr,m,sc0 
							"\tMOV_RAX " 1' "," 0' "\n" // 
						rp8.add_s8 { e0 sc0 } ⊢ e0 
						∎ { rsp m r1 e0 }
				§ idx_im { rsp r0 x e0 } 
					emt_reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
					» _^ sr0,x ⊢ _,x,sc0 
						"\tmov " 0' "," 1d' "\n" //
					rp8.add_s8 { e0 sc0 } ⊢ e0 
					∎ { rsp r0 x e0 }
				§ idx_lea_idx_x { rsp r0 r1 x e0 }
					emt_reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
					emt_reg { rsp r1 } ⊢ { rsp r1 sr1 br1 }
					$ br0 ⊢ 
					∐ bl.t◂{} . 
						$ br1 ⊢ 
						∐ bl.t◂{} . 
							» _^ sr0,sr1,x ⊢ sr0,sr1,x,sc0 
								"\tmov " 0' ", QWORD [" 1' "+" 2d' "]\n" // 
							rp8.add_s8 { e0 sc0 } ⊢ e0 
							∎ { rsp r0 r1 x e0 }
						∐. bl.f◂{} . 
							» _^ sr0,sr1,x ⊢ sr0,sr1,x,sc0 
								"\tmov rdi," 1' "\n" 
								"\tmov " 0' ", QWORD [rdi+" 2d' "]\n" // 
							rp8.add_s8 { e0 sc0 } ⊢ e0 
							∎ { rsp r0 r1 x e0 }
					∐. bl.f◂{} . 
						$ br1 ⊢ 
						∐ bl.t◂{} . 
							» _^ sr0,sr1,x ⊢ sr0,sr1,x,sc0 
								"\tMOV_RDI " 0' ", QWORD [" 1' "+" 2d' "]\n" // 
							rp8.add_s8 { e0 sc0 } ⊢ e0 
							∎ { rsp r0 r1 x e0 }
						∐. bl.f◂{} . 
							» _^ sr0,sr1,x ⊢ sr0,sr1,x,sc0 
								"\tmov rdi," 1' "\n" 
								"\tMOV_RDI " 0' ", QWORD [rdi+" 2d' "]\n" // 
							rp8.add_s8 { e0 sc0 } ⊢ e0 
							∎ { rsp r0 r1 x e0 }
				§ lea_rax { rsp r x e } 
					emt_reg { rsp r } ⊢ { rsp r s b } 
					∐ b ⊢ bl.t◂{} . 
						» _^ s,x ⊢ _,x,sc0
							"\tmov QWORD [" 0' "+" 1d' "],rax\n" 
							// 
						rp8.add_s8 { e sc0 } ⊢ e
						∎ { rsp r x e } 
					∐. . 
						» _^ s,x ⊢ _,x,sc0
							"\tmov rbx," 0' "\n" 
							"\tmov QWORD [rbx+" 1d' "],rax\n" 
							// 
						rp8.add_s8 { e sc0 } ⊢ e
						∎ { rsp r x e } 
				§ lea_reg_idx { rsp s x i e } 
					emt_reg { rsp i } ⊢ { rsp i si bi } 
					∐ bi ⊢ bl.t◂{} . 
						» _^ s,x,si ⊢ s,x,_,sc0 
							"\tmov QWORD [" 0' "+" 1d' "]," 2' "\n" //
						rp8.add_s8 { e sc0 } ⊢ e 
						∎ { rsp s x i e } 
					∐. . 
						» _^ s,x,si ⊢ s,x,_,sc0 
							"\tMOV_RDI QWORD [" 0' "+" 1d' "]," 2' "\n" //
						rp8.add_s8 { e sc0 } ⊢ e 
						∎ { rsp s x i e } 
				§ idx_rax { rsp r0 e } 
					emt_reg { rsp r0 } ⊢ { rsp r0 sr br }
					» _^ sr ⊢ _,sc0 
						"\tmov " 0' ",rax\n" // 
					rp8.add_s8 { e sc0 } ⊢ e
					∎ { rsp r0 e }
				§ S_idx◂◂S { rsp r0 e } 
					emt_reg { rsp r0 } ⊢ { rsp r0 sr br }
					» _^ sr ⊢ _,sc0 
						"\tmov " S "," 0' "\n" // 
					rp8.add_s8 { e sc0 } ⊢ e
					∎ { rsp r0 e }
				§ rax_idx = S_idx◂◂"rax" 
				§ rdi_idx = S_idx◂◂"rdi" 
				§ rax_im { x e } 
					» _^ x ⊢ x,s
						"\tmov rax," 0d' "\n" // 
					rp8.add_s8 { e s } ⊢ e 
					∎ { x e }
				§ rax_unt_n { n e } 
					» _^ n ⊢ n,s
						"\tmov rax,unt_" 0d' "\n" // 
					rp8.add_s8 { e s } ⊢ e 
					∎ { n e }
				§ idx_unt_n { rsp r n e } 
					emt_reg { rsp r } ⊢ { rsp r sr br } 
					» _^ sr,n ⊢ _,n,sc0 
						"\tmov " 0' ",unt_" 1d' "\n" // 
					rp8.add_s8 { e sc0 } ⊢ e 
					∎ { rsp r n e }
				§ rax_unt e 
					» "\tmov rax,unt\n" _ ⊢ s 
					rp8.add_s8 { e s } ⊢ e 
					∎ e 
				§ rax_set_n { n e } 
					» _^ n ⊢ n,sc0 
						"\tmov BYTE [rax+6]," 0d' "\n" // 
					rp8.add_s8 { e sc0 } ⊢ e 
					∎ { n e }
				§ idx_set_n { rsp r n e } 
					emt_reg { rsp r } ⊢ { rsp r sr br } 
					∐ br ⊢ bl.t◂{} . 
						» _^ sr,n ⊢ sr,n,sc0 
						"\tmov BYTE [" 0' "+6]," 1d' "\n" // 
						rp8.add_s8 { e sc0 } ⊢ e 
						∎ { rsp r n e }
					∐. . 
						rax_idx { rsp r e } ⊢ { rsp r e } 
						rax_set_n { n e } ⊢ { n e } 
						∎ { rsp r n e }
				§ idx_blk_n_rax { rsp r i e } 
					$ i ⊢ i,x 
					» 3r _ ⊢ xs 
					_shl { x xs } ⊢ { x _ } 
					» 8r _ ⊢ xa 
					_add { x xa } ⊢ { x _ } 
					lea_rax { rsp r x e } ⊢ { rsp r _ e } 
					∎ { rsp r i e } 
				§ lea_idx_x_idx { rsp r0 r1 x e0 }
					emt_reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
					emt_reg { rsp r1 } ⊢ { rsp r1 sr1 br1 }
					$ br0 ⊢ 
					∐ bl.t◂{} . 
						$ br1 ⊢ 
						∐ bl.t◂{} . 
							» _^ sr0,sr1,x ⊢ sr0,sr1,x,sc0 
								"\tmov QWORD [" 0' "+" 2d' "]," 1'" \n" // 
							rp8.add_s8 { e0 sc0 } ⊢ e0 
							∎ { rsp r0 r1 x e0 }
						∐. bl.f◂{} . 
							» _^ sr0,sr1,x ⊢ sr0,sr1,x,sc0 
								"\tMOV_RDI QWORD [" 0' "+" 2d' "]," 1' "\n" // 
							rp8.add_s8 { e0 sc0 } ⊢ e0 
							∎ { rsp r0 r1 x e0 }
					∐. bl.f◂{} . 
						$ br1 ⊢ 
						∐ bl.t◂{} . 
							» _^ sr0,sr1,x ⊢ sr0,sr1,x,sc0 
								"\tmov rax," 0' "\n" 
								"\tmov QWORD [rax+" 2d' "]," 1' "\n" // 
							rp8.add_s8 { e0 sc0 } ⊢ e0 
							∎ { rsp r0 r1 x e0 }
						∐. bl.f◂{} . 
							» _^ sr0,sr1,x ⊢ sr0,sr1,x,sc0 
								"\tmov rax," 0' "\n"  
								"\tMOV_RDI QWORD [rax+" 2d' "]," 1' "\n" // 
							rp8.add_s8 { e0 sc0 } ⊢ e0 
							∎ { rsp r0 r1 x e0 }
				§ idx_blk_n_idx { rsp r0 i r1 e }
					$ i ⊢ i,xn 
					_shl { xn %[ 3r ] } ⊢ { xn _ } 
					_add { xn %[ 8r ] } ⊢ { xn _ }
					lea_idx_x_idx { rsp r0 r1 xn e } ⊢ { rsp r0 r1 _ e }
					∎ { rsp r0 i r1 e } 
				§ idx_idx_blk_n { rsp r0 r1 i e } 
					$ i ⊢ i,xn 
					_shl { xn %[ 3r ] } ⊢ { xn _ } 
					_add { xn %[ 8r ] } ⊢ { xn _ }
					idx_lea_idx_x { rsp r0 r1 xn e } ⊢ { rsp r0 r1 _ e }
					∎ { rsp r0 r1 i e }
				§ idx_unt { rsp r e } 
					emt_reg { rsp r } ⊢ { rsp r sr br } 
					» _^ sr ⊢ _,sc0 
						"\tmov " 0' ",unt\n" // 
					rp8.add_s8 { e sc0 } ⊢ e 
					∎ { rsp r e }
			∎∎ 	
		§§ cmp 
			§ idx_idx { rsp r0 r1 e }
				reg { rsp r0 } ⊢ { rsp r0 sr0 b0 } 
				reg { rsp r1 } ⊢ { rsp r1 sr1 b1 } 
				∐ b1 ⊢ bl.t◂{} . 
					» _^ sr0,sr1 ⊢ sr0,sr1,sc 
						"\tcmp " 0' "," 1' "\n" //
					rp8.add_s8 { e sc } ⊢ e
					∎ { rsp r0 r1 e }  
				∐. . 
					» _^ sr0,sr1 ⊢ sr0,sr1,sc 
						"\tmov rdi," 1' "\n" 
						"\tcmp " 0' ",rdi\n" //
					rp8.add_s8 { e sc } ⊢ e
					∎ { rsp r0 r1 e }
			§ idx_im { rsp r0 x e }
				reg { rsp r0 } ⊢ { rsp r0 sr0 b0 } 
				» _^ sr0,x ⊢ sr0,x,sc 
					"\tcmp " 0' "," 1d' "\n" //
				rp8.add_s8 { e sc } ⊢ e
				∎ { rsp r0 x e }   
			∎∎
		§§ alc_mtc_ptn 
		§ 
			@.lp_agl { cl { gl lb1 rsp lb_n } { ia0 pa0 } { ia1 na1 mpa1 } rl ev evv rv irv tav tv_n tv vs0 e0 dl }
				∐ ia0'=ia1' . 
					lp { cl { gl lb1 rsp lb_n } pa0 mpa1 rl ev evv rv irv tav tv_n tv vs0 e0 dl } ⊢ { cl { gl lb1 rsp lb_n } rl ev evv rv irv tav tv_n tv vs0 e0 dl p1 }
					∐ p1 ⊢ _some◂p1 . 
						∎ { cl { gl lb1 rsp lb_n } rl ev evv rv irv tav tv_n tv vs0 e0 dl _some◂RP.atm◂ast.stt_adt◂{ ia1 na1 p1 } }
					∐. . 
						∎ { cl { gl lb1 rsp lb_n } rl ev evv rv irv tav tv_n tv vs0 e0 dl p1 }										
				∐. . 
					∐ lb1 ⊢ _some◂{ lb1 rsp0 } . 
						$ rsp ⊢ rsp,rsp1 
						rb_rsp { rsp1 rsp0 lb1 e0 } ⊢ { rsp0 lb1 e0 }
						∎ { cl { gl _some◂{ %lb1 %rsp0 } rsp lb_n } rl ev evv rv irv tav tv_n tv vs0 e0 dl _none◂{} } 											
					∐. . 
						rp8.add_s8 { e0 %[ "\tRT_ERR 0xffff_0007\n" ] } ⊢ e0 
						∎ { cl { gl lb1 rsp lb_n } rl ev evv rv irv tav tv_n tv vs0 e0 dl _none◂{} } 											
			@.adt_t { { rsp lb_n r0 ia1 lb1 } e0 }
				∐ lb1 ⊢ _some◂{ lb1 rsp0 } . 
					reg { rsp r0 } ⊢ { rsp r0 er0 _ } 
					inc_x lb_n ⊢ { lb2 lb_n } 
					inc_x lb_n ⊢ { lb3 lb_n }
					» _^ er0,ia1,lb2 ⊢ _,ia1,lb2,ec1 
						"\tmov rdi," 0' "\n" 
						"\tcmp BYTE [rdi+6]," 1d' "\n" 
						"\tjnz LB_" 2d' "\n" //
					rp8.add_s8 { e0 ec1 } ⊢ e0 
					jmp_lb { lb3 e0 } ⊢ { lb3 e0 }
					lb_etr { lb2 e0 } ⊢ { _ e0 } 
					$ rsp ⊢ rsp,rsp1 
					rb_rsp { rsp1 rsp0 lb1 e0 } ⊢ { rsp0 lb1 e0 }
					lb_etr { lb3 e0 } ⊢ { _ e0 } 
					$ _some◂{ %lb1 %rsp0 } ⊢ lb1 	
					∎ { { rsp lb_n r0 ia1 lb1 } e0 }
				∐. . 
					∎ { { rsp lb_n r0 ia1 lb1 } e0 }	
			@.lp_adt { cl { gl lb1 rsp lb_n } { r0 ax0 ql0 } { ia1 na1 mpa1 } rl ev evv rv irv tav tv_n tv vs0 e0 dl }
				$ mpa1 ⊢ mpa1,mpa2 
				crt_type_k.mtc_ptn { { ev tv_n tv rv } mpa2 } ⊢ { { ev tv_n tv rv } ys } 
				inst_cl { tv_n tv ys cl } ⊢ { tv_n tv ys cl }
				alc_type_k.hp { %[ 0r ] _nil◂{} tav tv_n tv ys } ⊢ { pv_n al tav tv_n tv ip0 } 
				adt_t { { rsp lb_n r0 ia1 lb1 } e0 } ⊢ { {  rsp lb_n r0 ia1 lb1 } e0 }
				∐ ip0 ⊢ ast.hp.ref◂iq0 . 
					lp { cl { gl lb1 rsp lb_n } RP.atm◂ast.hp◂{ %r0 ast.hp.ref◂%iq0 } mpa1 rl ev evv rv irv tav tv_n tv vs0 e0 dl } ⊢ { cl { gl lb1 rsp lb_n } rl ev evv rv irv tav tv_n tv vs0 e0 dl p1 }
					∐ p1 ⊢ _some◂p1 . 
						∎ { cl { gl lb1 rsp lb_n } rl ev evv rv irv tav tv_n tv vs0 e0 dl _some◂RP.atm◂ast.stt_adt◂{ %ia1 %na1 %p1 } }
					∐. . 
						∎ { cl { gl lb1 rsp lb_n } rl ev evv rv irv tav tv_n tv vs0 e0 dl p1 }												
				∐. . 
						alc_vs vs0 ⊢ { vs0 r2 } 
						brk_rsp { rsp r2 } ⊢ { rsp r2 sb0 } 
						rp8.add_s8 { e0 sb0 } ⊢ e0 
						$ gl ⊢ { gl_n gl } 
						gbg.pnt gl_n ⊢ { gl_n sg } 
						» _^ sg ⊢ _,sc0 
							"\tmov " 0' ",rdi\n" // 
						rp8.add_s8 { e0 sc0 } ⊢ e0 
						inc_x gl_n ⊢ { n0 gl_n }
						$ { gl_n _cns◂{ { %n0 gbg.ln◂{} } gl } } ⊢ gl 
						mov.idx_mem { rsp r2 %[ "QWORD [rdi+8]" ] e0 } ⊢ { rsp r2 _ e0 } 
						lp { cl { gl lb1 rsp lb_n } RP.atm◂ast.hp◂{ %r2 %ip0 } mpa1 rl ev evv rv irv tav tv_n tv vs0 e0 dl } ⊢ { cl { gl lb1 rsp lb_n } rl ev evv rv irv tav tv_n tv vs0 e0 dl p1 }
						∐ p1 ⊢ _some◂p1 . 
							∎ { cl { gl lb1 rsp lb_n } rl ev evv rv irv tav tv_n tv vs0 e0 dl _some◂RP.atm◂ast.stt_adt◂{ %ia1 %na1 %p1 } }											
						∐. . 
							∎ { cl { gl lb1 rsp lb_n } rl ev evv rv irv tav tv_n tv vs0 e0 dl p1 }
				
			@.lp { cl { gl lb1 rsp lb_n } isp mp rl ev evv rv irv tav tv_n tv vs0 e0 dl }
			$ mp ⊢ 
			∐ RP.rcd◂l1 . 
				$ isp ⊢ 
				∐ RP.rcd◂l0 . 
					lp_lst { cl { gl lb1 rsp lb_n } l0 l1 rl ev evv rv irv tav tv_n tv vs0 e0 dl } ⊢ { cl { gl lb1 rsp lb_n } rl ev evv rv irv tav tv_n tv vs0 e0 dl lr } 
					∐ lr ⊢ _some◂lr . 
						RP.rcd lr ⊢ p1 
						_some p1 ⊢ p1  
						∎ { cl { gl lb1 rsp lb_n } rl ev evv rv irv tav tv_n tv vs0 e0 dl p1 }
					∐. . 
						_none {} ⊢ p1 
						∎ { cl { gl lb1 rsp lb_n } rl ev evv rv irv tav tv_n tv vs0 e0 dl p1 } 
				∐. RP.atm◂a0 . 		
					∐ a0 ⊢ ast.hp◂{ r0 h0 }; h0 ⊢ ast.hp.ref◂q0; q0 ⊢ ast.hp.rcd◂l0 . 
						hp_rcd { cl { gl lb1 rsp lb_n } r0 l0 l1 rl ev evv rv irv tav tv_n tv vs0 e0 dl } ⊢|
					∐. .  
						» "mov_ptn.ptn_to_r d9" _ ⊢ ee0 
						_emt ee0 ⊢ _ 
						∎| 
			∐. RP.atm◂a1 .
				$ a1 ⊢ 
				∐ ast.mtc_wc◂o . 
					∐ o ⊢ _some◂wr . 
						$ isp ⊢ isp,isp0 
						set_tv { irv wr isp0 } ⊢ { irv wr }  
						$ isp ⊢ isp,isp0 
						_cns { isp0 dl } ⊢ dl 
						_some isp ⊢ isp 
						∎ { cl { gl lb1 rsp lb_n } rl ev evv rv irv tav tv_n tv vs0 e0 dl isp }
					∐. . 
						∎| 
				∐ ast.mtc_reg◂r1 . 
					$ isp ⊢ isp,isp0 
					set_tv { irv r1 isp0 } ⊢ { irv r1 }  
					_cns { r1 rl } ⊢ rl
					_some isp ⊢ isp
					∎ { cl { gl lb1 rsp lb_n } rl ev evv rv irv tav tv_n tv vs0 e0 dl isp }
				∐ ast.mtc_cst◂c1 . 
					_emt %[ "alc_mtc_ptn.mtc_cst 0" ] ⊢ _ 
					∎| 
				∐. ast.mtc_agl◂{ ea1 mpa1 } . 
					$ isp ⊢ 
					∐ RP.atm◂a0 . 
						lod_tv { evv ea1 } ⊢ { evv ea1 k1 } 
						ast.ctr_of_k { evv k1 } ⊢ { evv { ia1 na1 vi } }
						∐ a0 ⊢ ast.hp◂{ r0 h0 }; h0 ⊢ ast.hp.adt◂{ ax0 ql0 } . 
							$ mpa1 ⊢ mpa1,mpa2 
							lp_adt { cl { gl lb1 rsp lb_n } { r0 ax0 ql0 } { ia1 na1 mpa1 } rl ev evv rv irv tav tv_n tv vs0 e0 dl } ⊢|
						∐ a0 ⊢ ast.hp_im◂c0 . 
							ast.agl_of_cst { evv c0 } ⊢ { evv { ia0 na0 va0 ca0 } }
							ast.rt_of_ct { evv ca0 } ⊢ { evv pa0 } 
							lp_agl { cl { gl lb1 rsp lb_n } { ia0 pa0 } { ia1 na1 mpa1 } rl ev evv rv irv tav tv_n tv vs0 e0 dl } ⊢|							
						∐ a0 ⊢ ast.stt_adt◂{ ia0 rn0 pa0 } . 
							lp_agl { cl { gl lb1 rsp lb_n } { ia0 pa0 } { ia1 na1 mpa1 } rl ev evv rv irv tav tv_n tv vs0 e0 dl } ⊢|
						∐. .
							» "mov_ptn.ptn_to_r d6" _ ⊢ ee0 
							_emt ee0 ⊢ _ 
							∎|
					∐. RP.rcd◂l0 . 
						» "mov_ptn.ptn_to_r d7" _ ⊢ ee0 
						_emt ee0 ⊢ _ 
						∎| 
			@.hp_rcd { cl { gl lb1 rsp lb_n } r0 l0 l1 rl ev evv rv irv tav tv_n tv vs0 e0 dl }
				$ r0 ⊢ r0,r0_0 
				$ l0 ⊢ l0,l00 
				ast.hp.rcd l00 ⊢ q0 
				ast.hp.ref q0 ⊢ h0 
				##_cns { { r00 h0 } gl } ⊢ gl 
				» 0r _ ⊢ j0 
				lp_hp_lst { cl { gl lb1 rsp lb_n } j0 r0 l0 l1 rl ev evv rv irv tav tv_n tv vs0 e0 dl } ⊢ { cl { gl lb1 rsp lb_n } rl ev evv rv irv tav tv_n tv vs0 e0 dl l }
				∐ l ⊢ _some◂l . 
					∐ l ⊢ _nil◂{} . 
								$ _nil◂{} ⊢ l
								RP.rcd l ⊢ p1 
								_some p1 ⊢ p1 
								∎ { cl { gl lb1 rsp lb_n } rl ev evv rv irv tav tv_n tv vs0 e0 dl p1 }
							∐. . 
								$ gl ⊢ { gl_n gl } 
								gbg.pnt gl_n ⊢ { gl_n sg } 
								mov.mem_idx { rsp sg r0_0 e0 } ⊢ { rsp _ r0 e0 } 
								lst.len l ⊢ { l sl } 
								inc_x gl_n ⊢ { n0 gl_n }
								gbg.rcd sl ⊢ gb0 
								_cns { { n0 gb0 } gl } ⊢ gl 
								$ { gl_n gl } ⊢ gl 
								RP.rcd l ⊢ p1 
								_some p1 ⊢ p1 
								∎ { cl { gl lb1 rsp lb_n } rl ev evv rv irv tav tv_n tv vs0 e0 dl p1 }
						∐. . 
							_none {} ⊢ p1 
							∎ { cl { gl lb1 rsp lb_n } rl ev evv rv irv tav tv_n tv vs0 e0 dl p1 }							
			@.lp_lst { cl { gl lb1 rsp lb_n } l0 l1 rl ev evv rv irv tav tv_n tv vs0 e0 dl }
				∐ l0 ⊢ _cns◂{ p0 l0 }; l1 ⊢ _cns◂{ p1 l1 } . 
					lp { cl { gl lb1 rsp lb_n } p0 p1 rl ev evv rv irv tav tv_n tv vs0 e0 dl } ⊢ { cl { gl lb1 rsp lb_n } rl ev evv rv irv tav tv_n tv vs0 e0 dl p1 } 
					∐ p1 ⊢ _some◂p1 . 
						lp_lst { cl { gl lb1 rsp lb_n } l0 l1 rl ev evv rv irv tav tv_n tv vs0 e0 dl } ⊢ { cl { gl lb1 rsp lb_n } rl ev evv rv irv tav tv_n tv vs0 e0 dl l } 
						∐ l ⊢ _some◂l . 
							_cns { p1 l } ⊢ l 
							_some l ⊢ l
							∎ { cl { gl lb1 rsp lb_n } rl ev evv rv irv tav tv_n tv vs0 e0 dl l } 
						∐. . 
							∎ { cl { gl lb1 rsp lb_n } rl ev evv rv irv tav tv_n tv vs0 e0 dl l } 
					∐. . 
						_none {} ⊢ l 
						∎ { cl { gl lb1 rsp lb_n } rl ev evv rv irv tav tv_n tv vs0 e0 dl l } 					
				∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
					$ _nil◂{} ⊢ l 
					_some l ⊢ l 
					∎ { cl { gl lb1 rsp lb_n } rl ev evv rv irv tav tv_n tv vs0 e0 dl l }
				∐. . 
					» "mov_ptn.ptn_to_r d1" _ ⊢ ee0 
										_emt ee0 ⊢ _ 
					∎|
			@.lp_hp_lst { cl { gl lb1 rsp lb_n } j0 r0 l0 l1 rl ev evv rv irv tav tv_n tv vs0 e0 dl }
				∐ l0 ⊢ _cns◂{ h0 l0 }; l1 ⊢ _cns◂{ p1 l1 } . 
					alc_vs vs0 ⊢ { vs0 r2 } 
					brk_rsp { rsp r2 } ⊢ { rsp r2 sb0 } 
					rp8.add_s8 { e0 sb0 } ⊢ e0
					$ j0 ⊢ j0,xn 
					_shl { xn %[ 3r ] } ⊢ { xn _ } 
					_add { xn %[ 8r ] } ⊢ { xn _ }
					mov.idx_lea_idx_x { rsp r2 r0 xn e0 } ⊢ { rsp r2 r0 _ e0 }		
					lp { cl { gl lb1 rsp lb_n } RP.atm◂ast.hp◂{ %r2 %h0 } p1 rl ev evv rv irv tav tv_n tv vs0 e0 dl } ⊢ { cl { gl lb1 rsp lb_n } rl ev evv rv irv tav tv_n tv vs0 e0 dl p1 }
					∐ p1 ⊢ _some◂p1 . 
						_inc j0 ⊢ j0 
						lp_hp_lst { cl { gl lb1 rsp lb_n } j0 r0 l0 l1 rl ev evv rv irv tav tv_n tv vs0 e0 dl } ⊢ { cl { gl lb1 rsp lb_n } rl ev evv rv irv tav tv_n tv vs0 e0 dl l }
						∐ l ⊢ _some◂l . 
							_cns { p1 l } ⊢ l 
							_some l ⊢ l 
							∎ { cl { gl lb1 rsp lb_n } rl ev evv rv irv tav tv_n tv vs0 e0 dl l } 
						∐. . 
							∎ { cl { gl lb1 rsp lb_n } rl ev evv rv irv tav tv_n tv vs0 e0 dl l } 
					∐. . 
						_none {} ⊢ l 
						∎ { cl { gl lb1 rsp lb_n } rl ev evv rv irv tav tv_n tv vs0 e0 dl l } 
				∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
					$ _nil◂{} ⊢ l 
					_some l ⊢ l 
					∎ { cl { gl lb1 rsp lb_n } rl ev evv rv irv tav tv_n tv vs0 e0 dl l }
				∐. .
					» "alc_mtc_ptn d0" _ ⊢ ee0 
										_emt ee0 ⊢ _  
					∎|			
		§ f { cl { gl lb1 rsp lb_n } rl ev evv rv irv tav tv_n tv vs0 isp mp dl }
			rp8.e {} ⊢ e0 
			lp { cl { gl lb1 rsp lb_n } isp mp rl ev evv rv irv tav tv_n tv vs0 e0 dl } ⊢| 
		∎∎
	§§ idx 
		§ crt { irv d ip rl dl }
			$ d ⊢ 
			∐ ast.dst_reg◂i . 
				set_tv { irv i ip } ⊢ { irv i }
				_cns { i rl } ⊢ rl
				∎ { irv rl dl }
			∐. ast.wc◂o . 
				∐ o ⊢ _some◂i . 
					$ ip ⊢ ip,ip0 
					set_tv { irv i ip0 } ⊢ { irv i }
					_cns { ip dl } ⊢ dl 
					∎ { irv rl dl }
				∐. .
					» "crt_idx_ptn 1" _ ⊢ se 
					_emt se ⊢ se  
					∎|
		§ @.crt_lst { irv dl ipl rl dll } 
			∐ dl ⊢ _cns◂{ d dl }; ipl ⊢ _cns◂{ ip ipl } . 
				crt { irv d ip rl dll } ⊢ { irv rl dll } 
				crt_lst { irv dl ipl rl dll } ⊢|
			∐ dl ⊢ _nil◂{}; ipl ⊢ _nil◂{} . 
				∎ { irv rl dll }
			∐. . 
				» "idx.crt_lst 0" _ ⊢ ee 
				_emt ee ⊢ ee 
				∎|  
		§ 
			@.crt_ptn { irv rp ip rl dl }
				∐ rp ⊢ RP.rcd◂r . 
					∐ ip ⊢ RP.rcd◂ir . 
						crt_ptn_lst { irv r ir rl dl } ⊢| 
					∐ ip ⊢ RP.atm◂p0; p0 ⊢ ast.hp◂{ r0 h0 }; h0 ⊢ ast.hp.ref◂q0; q0 ⊢ ast.hp.rcd◂l0 .
						» "crt_idx_ptn 3" _ ⊢ se 
						_emt se ⊢ se 
						∎|
					∐. . 
						» "crt_idx_ptn 2" _ ⊢ se 
						_emt se ⊢ se  
						∎| 
				∐ rp ⊢ RP.atm◂a .  
					crt { irv a ip rl dl } ⊢| 
				∐. .
					» "crt_idx_ptn 0" _ ⊢ se 
					_emt se ⊢ se 
					∎| 
			@.crt_ptn_lst { irv r ir rl dl } 
				∐ r ⊢ _cns◂{ p r }; ir ⊢ _cns◂{ ip ir } . 
					crt_ptn { irv p ip rl dl } ⊢ { irv rl dl }  
					crt_ptn_lst { irv r ir rl dl } ⊢|
				∐ r ⊢ _nil◂{}; ir ⊢ _nil◂{} . 
					∎ { irv rl dl } 
				∐. . 
					» "crt_idx_ptn_lst 0" _ ⊢ se 
					_emt se ⊢ se 
					∎| 
		§
			@.asc_ply { { evv irv rl av } { xp sp } } 
				∐ xp ⊢ RP.rcd◂l0; sp ⊢ RP.rcd◂l1 . 
					asc_ply_lst { { evv irv rl av } { l0 l1 } } ⊢|
				∐ xp ⊢ RP.atm◂i0 .  
					set_tv { av i0 sp } ⊢ { av i0 } 
					∎ { evv irv rl av } 
				∐. . 
					_emt %[ "asc_ply 0" ] ⊢ _ 
					∎| 
			@.asc_ply_lst { { evv irv rl av } { l0 l1 } }
				∐ l0 ⊢ _cns◂{ xp l0 }; l1 ⊢ _cns◂{ sp l1 } . 
					asc_ply { { evv irv rl av } { xp sp } } ⊢ { evv irv rl av }
					asc_ply_lst { { evv irv rl av } { l0 l1 } } ⊢| 
				∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
					∎ { evv irv rl av }
				∐. . 
					∎| 
		§ 
			@.subst_ply = RP.map_l_atm◂◂subst_ply_atm
			@.subst_ply_atm { { evv irv rl av } a }
				$ a ⊢ 
				∐ ast.src_reg◂i . 
					lod_tv { av i } ⊢ { av i sp } 
					∎ { { evv irv rl av } sp } 
				∐ ast.src_agl◂{ e sp } . 
					subst_ply { { evv irv rl av } sp } ⊢ { { evv irv rl av } sp } 
					∎ { { evv irv rl av } RP.atm◂ast.src_agl◂{ e sp } } 
				∐. ast.im_reg◂c . 
					∎ { { evv irv rl av } RP.atm◂ast.im_reg◂c }
		§ 
			@.evl_ctr = RP.map_l_atm◂◂evl_ctr_atm 
			@.evl_ctr_atm { { evv irv rl } a }
				∐ a ⊢ ast.src_agl◂{ e sp } .
					evl_ctr { { evv irv rl } sp } ⊢ { { evv irv rl } sp } 
					lod_tv { evv e } ⊢ { evv e k } 
					∐ k ⊢ ast.k_ctr◂c . 
						∎ { { evv irv rl } RP.atm◂ast.src_agl◂{ e sp } } 
					∐ k ⊢ ast.k_name◂i . 
						lod_tv { evv i } ⊢ { evv i c } 
						evl_ctr_atm { { evv irv rl } ast.src_agl◂{ i sp } } ⊢| 
					∐ k ⊢ ast.k_ply◂{ xp yp v } . 
						mk_arr { %[ 64r ] _none◂{} } ⊢ { _ _ av } 
						asc_ply { { evv irv rl av } { xp sp } } ⊢ { evv irv rl av }
						subst_ply { { evv irv rl av } yp } ⊢ { { evv irv rl av } yp } 
						evl_ctr { { evv irv rl } yp } ⊢ { { evv irv rl } yp } 
						∎ { { evv irv rl } yp }
					∐. . 
						_emt %[ "evl_ctr 0" ] ⊢ _ 
						∎|
				∐. . 
					∎ { { evv irv rl } RP.atm◂a } 

		§ 
			@.csm { { evv irv rl } s } 
				$ s ⊢ 
				∐ ast.im_reg◂c . 
					∎ { { evv irv rl } RP.atm◂ast.hp_im◂c }
				∐ ast.src_agl◂{ e sp } . 
					csm_ptn { { evv irv rl } sp } ⊢ { { evv irv rl } ip } 
					lod_tv { evv e } ⊢ { evv e k1 } 
					ast.ctr_of_k { evv k1 } ⊢ { evv { ia1 na1 vi } }	
					∎ { { evv irv rl } RP.atm◂ast.stt_adt◂{ ia1 na1 ip } }
				∐. ast.src_reg◂r . 
					lod_tv { irv r } ⊢ { irv r ip }
					lst.csm { rl r } ⊢ { rl r }
					∎ { { evv irv rl } ip } 
			@.csm_ptn = RP.map_l_atm◂◂csm
		§ csm_lst = lst.map_l◂◂csm
		§ 
			@.csm_ptn_lst = lst.map_l◂◂csm_ptn
		§ csm { { evv irv rl } s } 
			evl_ctr_atm { { evv irv rl } s } ⊢ { { evv irv rl } s } 
			csm_ptn { { evv irv rl } s } ⊢| 
		§ csm_ptn { { evv irv rl } p } 
			evl_ctr { { evv irv rl } p } ⊢ { { evv irv rl } p } 
			csm_ptn { { evv irv rl } p } ⊢| 
		
		∎∎
		§ alc_ln_n { rsp r n e } 
			reg { rsp r } ⊢ { rsp r sr br } 
			∐ br ⊢ bl.t◂{} . 
				» _^ sr,n ⊢ _,n,sc1 
					`	ALC_LN rax
					"\tmov BYTE [rax+6]," 1d' "\n"
					"\tmov QWORD [rax+8]," 0' "\n"
					"\tmov " 0' ",rax\n" 
					// 
				rp8.add_s8 { e sc1 } ⊢ e 
				∎ { rsp r n e }
			∐. . 
				» _^ sr,n ⊢ _,n,sc1 
					`	ALC_LN rax
					"\tmov BYTE [rax+6]," 1d' "\n"
					"\tmov rdi," 0' "\n" 
					"\tmov QWORD [rax+8],rdi\n"
					"\tmov " 0' ",rax\n" 
					// 
					rp8.add_s8 { e sc1 } ⊢ e 
					∎ { rsp r n e }
		§ 
			@.subst_atm = ast.map_l_rt_reg_atm◂◂subst
			@.subst_ptn = RP.map_l◂◂subst_atm 
		§ subst_ptn_lst = lst.map_l◂◂subst_ptn 
			§§ mov_ptn2 
				§  	
					@.ptn { e0 { evv tav } rsp vs0 p0 p1 } 
						$ p1 ⊢ 
						∐ RP.rcd◂l1 . 
							∐ p0 ⊢ RP.rcd◂l0 . 		
								ptn_lst { e0 { evv tav } rsp vs0 l0 l1 } ⊢| 
							∐ p0 ⊢ RP.atm◂a0; a0 ⊢ ast.hp◂{ r0 h0 }; h0 ⊢ ast.hp.ref◂q; q ⊢ ast.hp.rcd◂l0 . 
								alc_vs vs0 ⊢ { vs0 m0 } 
								brk_rsp_e { rsp m0 e0 } ⊢ { rsp m0 e0 } 
								» 0r _ ⊢ i 
								r_to_rcd { e0 { evv tav } i rsp vs0 r0 l0 m0 l1 } ⊢| 
							∐. . 
								» "\tRT_ERR 0xffff_f000\n" _ ⊢ sc0 
								rp8.add_s8 { e0 sc0 } ⊢ e0 
								∎ { e0 { evv tav } rsp vs0 }
						∐. RP.atm◂a1 . 
							∐ a1 ⊢ ast.hp◂{ r1 h1 } . 				
								brk_rsp_e { rsp r1 e0 } ⊢ { rsp r1 e0 } 
								ptn_to_r { e0 { evv tav } rsp vs0 p0 r1 h1 } ⊢| 
							∐ a1 ⊢ ast.pt◂{ r10 r11 } . 
								max { r10 r11 } ⊢ { r10 r11 rM } 
								brk_rsp_e { rsp rM e0 } ⊢ { rsp rM e0 } 
								∐ p0 ⊢ RP.atm◂a0; a0 ⊢ ast.pt◂{ r00 r01 } . 
									mov_e { rsp r00 r10 e0 } ⊢ { rsp r00 r10 e0 } 
									mov_e { rsp r10 r11 e0 } ⊢ { rsp r10 r11 e0 } 
									∎ { e0 { evv tav } rsp vs0 } 
								∐ p0 ⊢ RP.atm◂a0; a0 ⊢ ast.hp◂{ r0 h0 }; h0 ⊢ ast.hp.ref◂q0; q0 ⊢ ast.hp.pt_hp◂{} . 
									reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
									reg { rsp r10 } ⊢ { rsp r10 sr10 br10 } 
									reg { rsp r11 } ⊢ { rsp r11 sr11 br11 } 
									» _^ sr0,sr10,sr11 ⊢ sr0,sr10,sr11,sr 
										"\tmov rdi," 0' "\n"
										`	mov rsi,QWORD [rdi+8]
										"\tmov " 1' ",rsi\n" 
										`	mov rsi,QWORD [rdi+16]
										"\tmov " 2' ",rsi\n" //   
									rp8.add_s8 { e0 sr } ⊢ e0 
									∎ { e0 { evv tav } rsp vs0 }
								∐. . 
									» "mov_ptn.lp1 pt 0" _ ⊢ ee0 
									_emt ee0 ⊢ _ 
									∎| 
							∐ a1 ⊢ ast.stt_adt◂{ p1_i p1_n p1_p } . 
								∐ p0 ⊢ RP.atm◂a0; a0 ⊢ ast.stt_adt◂{ ia0 na0 pa0 }; p1_i'=ia0' . 
									ptn { e0 { evv tav } rsp vs0 pa0 p1_p } ⊢| 
								∐ p0 ⊢ RP.atm◂a0; a0 ⊢ ast.hp_im◂c0 . 
									ast.agl_of_cst { evv c0 } ⊢ { evv { ia0 na0 va0 ca0 } }
									ast.rt_of_ct { evv ca0 } ⊢ { evv pc1 } 
									∐ ia0'=p1_i' . 
										ptn { e0 { evv tav } rsp vs0 pc1 p1_p } ⊢| 
									∐. . 
										_emt %[ "stt stt 1 " ] ⊢ _ 
										∎| 
								∐. . 
									» "stt stt 0" _ ⊢ se 
									_emt se ⊢ se 
									∎| 
							∐. . 
								» "mov_ptn.lp1 152" _ ⊢ se 
								_emt se ⊢ se  
								RP.atm a1 ⊢ p1 
								∎| 
					@.ptn_lst { e0 { evv tav } rsp vs0 l0 l1 }
						∐ l0 ⊢ _cns◂{ p0 l0 }; l1 ⊢ _cns◂{ p1 l1 } . 
							ptn { e0 { evv tav } rsp vs0 p0 p1 } ⊢ { e0 { evv tav } rsp vs0 }
							ptn_lst { e0 { evv tav } rsp vs0 l0 l1 } ⊢|			
						∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
							∎ { e0 { evv tav } rsp vs0 } 
						∐. . 
							» "lp1_lst 0" _ ⊢ se 
							_emt se ⊢ se 
							∎| 
					@.rcd_to_r { e0 { evv tav } i rsp vs0 l0 r1 l1 r2 }
						∐ l1 ⊢ _cns◂{ h1 l1 }; l0 ⊢ _cns◂{ p0 l0 } .  
							$ r2 ⊢ r2,r2_0 
							ptn_to_r { e0 { evv tav } rsp vs0 p0 r2_0 h1 } ⊢ { e0 { evv tav } rsp vs0 }
							mov.idx_blk_n_idx { rsp r1 i r2 e0 } ⊢ { rsp r1 i r2 e0 } 
							_inc i ⊢ i 
							rcd_to_r { e0 { evv tav } i rsp vs0 l0 r1 l1 r2 } ⊢| 
						∐ l1 ⊢ _nil◂{}; l0 ⊢ _nil◂{} . 
							∎ { e0 { evv tav } rsp vs0 }
						∐. . 
							» "rcd_to_r" _ ⊢ se 
							_emt se ⊢ se 
							∎|  
					@.im_to_r { e0 { evv tav } rsp vs0 c r1 h1 }
						∐ c ⊢ ast.k_r64◂x . 
							mov.idx_im { rsp r1 x e0 } ⊢ { rsp _ _ e0 }
							∎ { e0 { evv tav } rsp vs0 }
						∐ c ⊢ ast.k_s8◂s . 
							mk_s8 s ⊢ { s es } 
							rp8.cct { e0 es } ⊢ e0 
							mov.idx_rax { rsp r1 e0 } ⊢ { rsp _ e0 }
							∎ { e0 { evv tav } rsp vs0 }
						∐ c ⊢ ast.k_name◂i . 
							lod_tv { evv i } ⊢ { evv i c } 
							im_to_r { e0 { evv tav } rsp vs0 c r1 h1 } ⊢|							
						∐ c ⊢ ast.k_agl◂{ v c } . 
							ast.ctr_of_k { evv ast.k_name◂%v } ⊢ { evv { i n v } } 
							ast.rt_of_ct { evv c } ⊢ { evv p0 } 
							agl_to_r { e0 { evv tav } rsp vs0 { i n p0 } r1 h1 } ⊢| 
						∐. .
							_emt %[ "mov_ptn im hp 0" ] ⊢ _ 
							∎| 
					@.agl_to_r { e0 { evv tav } rsp vs0 { ia0 na0 pa0 } r1 h1 }
						∐ h1 ⊢ ast.hp.adt◂{ ax1 ql1 } . 
							lod_tv { tav ax1 } ⊢ { tav ax1 { aw1 o1 } } 
							smt o1 ⊢ { vl1 kl1 pl1 ipl1 }  
							mk_adt.f { ql1 pl1 ipl1 } ⊢ ipl1 
							$ ia0 ⊢ ia0,ia00
							lst.nth { ipl1 ia00 } ⊢ { ip1 ipl1 }
							$ ip1 ⊢ ip1,ip10 
							∐ ip1 ⊢ ast.hp.ref◂q1 .
								∐ q1 ⊢ ast.hp.rcd◂l1; l1 ⊢ _nil◂{} . 
									mov.idx_unt_n { rsp r1 ia0 e0 } ⊢ { rsp _ _ e0 }
									∎ { e0 { evv tav } rsp vs0 }
								∐. . 
									$ r1 ⊢ r1,r1_0 
									ptn_to_r { e0 { evv tav } rsp vs0 pa0 r1 ip10 } ⊢ { e0 { evv tav } rsp vs0 }
									mov.idx_set_n { rsp r1_0 ia0 e0 } ⊢ { rsp _ _ e0 } 
									∎ { e0 { evv tav } rsp vs0 }
							∐. .
								$ r1 ⊢ r1,r1_0 
								ptn_to_r { e0 { evv tav } rsp vs0 pa0 r1_0 ip10 } ⊢ { e0 { evv tav } rsp vs0 }
								alc_ln_n { rsp r1 ia0 e0 } ⊢ { rsp _ _ e0 }
								∎ { e0 { evv tav } rsp vs0 }
						∐. . 
							» "\tRT_ERR 0xffff_0001\n" _ ⊢ ec1
							rp8.add_s8 { e0 ec1 } ⊢ e0 
							∎ { e0 { evv tav } rsp vs0 }
					@.ptn_to_r { e0 { evv tav } rsp vs0 p0 r1 h1 } 
						$ p0 ⊢ 
						∐ RP.rcd◂l0 . 
							∐ h1 ⊢ ast.hp.ref◂q; q ⊢ ast.hp.rcd◂l1 . 
								∐ l0 ⊢ _nil◂{} . 
									mov.idx_unt { rsp r1 e0 } ⊢ { rsp _ e0 } 
									∎ { e0 { evv tav } rsp vs0 }
								∐. . 
									rset.set_t { vs0 r1 } ⊢ { vs0 r1 } 
									alc_vs vs0 ⊢ { vs0 r2 } 
									brk_rsp_e { rsp r2 e0 } ⊢ { rsp r2 e0 } 
									reg { rsp r1 } ⊢ { rsp r1 sr1 br1 } 
									lst.len l1 ⊢ { l1 nl1 } 
									» _^ sr1,nl1 ⊢ sr1,nl1,ec1 
										"\tALC_RCD " 1d' ", rax\n" 
										"\tmov " 0' ",rax\n" 
										//
									rp8.add_s8 { e0 ec1 } ⊢ e0   
									$ r1 ⊢ r1,r10 
									» 0r _ ⊢ i 
									rcd_to_r { e0 { evv tav } i rsp vs0 l0 r1 l1 r2 } ⊢| 
							∐. . 
								» "\tRT_ERR 0xffff_ff00\n" _ ⊢ ec1
								rp8.add_s8 { e0 ec1 } ⊢ e0 
								∎ { e0 { evv tav } rsp vs0 }
						∐. RP.atm◂a0 . 
							$ a0 ⊢ 
							∐ ast.hp◂{ r0 h0 } . 
								mov_e { rsp r0 r1 e0 } ⊢ { rsp _ _ e0 } 
								∎ { e0 { evv tav } rsp vs0 }
							∐ ast.hp_im◂c . 
								im_to_r { e0 { evv tav } rsp vs0 c r1 h1 } ⊢|								
							∐ ast.pt◂{ r00 r01 } . 
								reg { rsp r00 } ⊢ { rsp r00 sr00 br00 } 
								reg { rsp r01 } ⊢ { rsp r01 sr01 br01 } 
								» _^ sr00,sr01 ⊢ sr00,sr01,ec1 
									`	ALC_PT rax 
									"\tmov rsi," 0' "\n" 
									`	mov QWORD [rax+8],rsi
									"\tmov rsi," 1' "\n" 
									`	mov QWORD [rax+16],rsi 
									//
								rp8.add_s8 { e0 ec1 } ⊢ e0   
								∎ { e0 { evv tav } rsp vs0 }
							∐. ast.stt_adt◂{ ia0 na0 pa0 } .
								agl_to_r { e0 { evv tav } rsp vs0 { ia0 na0 pa0 } r1 h1 } ⊢|
					@.r_to_ptn { e0 { evv tav } rsp vs0 r0 h0 p1 }  
						∐ p1 ⊢ RP.rcd◂l1; h0 ⊢ ast.hp.ref◂q; q ⊢ ast.hp.rcd◂l0 . 
							alc_vs vs0 ⊢ { vs0 m0 } 
							brk_rsp_e { rsp m0 e0 } ⊢ { rsp m0 e0 } 
							» 0r _ ⊢ i 
							r_to_rcd { e0 { evv tav } i rsp vs0 r0 l0 m0 l1 } ⊢| 
						∐ p1 ⊢ RP.atm◂a1; a1 ⊢ ast.hp◂{ p1_r p1_h } . 
							brk_rsp_e { rsp p1_r e0 } ⊢ { rsp p1_r e0 } 
							mov_e { rsp r0 p1_r e0 } ⊢ { rsp r0 p1_r e0 } 
							##rset.set_t { vs0 p1_r } ⊢ { vs0 p1_r }
							∎ { e0 { evv tav } rsp vs0 }
						∐. . 
							» "mov_ptn.lp1 1007" _ ⊢ se 
							_emt se ⊢ se 
							∎|   							
					@.r_to_rcd { e0 { evv tav } i rsp vs0 r0 l0 m0 l1 } 
						∐ l0 ⊢ _cns◂{ h0 l0 }; l1 ⊢ _cns◂{ p1 l1 } .  
							mov.idx_idx_blk_n { rsp m0 r0 i e0 } ⊢ { rsp m0 r0 i e0 } 
							$ m0 ⊢ m0,m00 
							r_to_ptn { e0 { evv tav } rsp vs0 m00 h0 p1 } ⊢ { e0 { evv tav } rsp vs0 }
							_inc i ⊢ i 
							r_to_rcd { e0 { evv tav } i rsp vs0 r0 l0 m0 l1 } ⊢| 
						∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
							∐ i'=0r . 
								∎ { e0 { evv tav } rsp vs0 } 
							∐. . 
								reg { rsp r0 } ⊢ { rsp r0 er0 erb } 
								» _^ er0,i ⊢ _,_,sc0 
									"\tmov rdi," 0' "\n" 
									"\tFREE_RCD " 1d' ",rdi\n" // 
								rp8.add_s8 { e0 sc0 } ⊢ e0 
								∎ { e0 { evv tav } rsp vs0 }
						∐. . 
							» "r_to_rcd" _ ⊢ se 
							_emt se ⊢ se 
							∎|  
				§ @.f2_lp0 { p0 p1 r } 
						∐ p0 ⊢ RP.rcd◂l0; p1 ⊢ RP.rcd◂l1 . 
							f2_lp0_lst { l0 l1 r } ⊢| 
						∐. . 
							_cns { { p0 p1 } r } ⊢ r 
							∎ r
					@.f2_lp0_lst { l0 l1 r }
						∐ l0 ⊢ _cns◂{ p0 l0 }; l1 ⊢ _cns◂{ p1 l1 } . 
							f2_lp0 { p0 p1 r } ⊢ r 
							f2_lp0_lst { l0 l1 r } ⊢| 
						∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
							∎ r
						∐. . 
						» "mov_ptn.lp1 10000" _ ⊢ se 
									_emt se ⊢ se 
							∎|
				§ @.f2_lp1_i { a0 tij an i0 } 
						∐ i0'=an' . 
							∎ { a0 tij an }
						∐. . 
							» 0r _ ⊢ j0 
							f2_lp1_j { a0 tij an i0 j0 } ⊢ { a0 tij i0 an } 
							_inc i0 ⊢ i0 
							f2_lp1_i { a0 tij an i0 } ⊢| 
					@.f2_lp1_j { a0 tij an i0 j0 } 
						∐ j0'=an' . 
							∎ { a0 tij i0 an }
						∐. . 
							_lod_q { a0 i0 } ⊢ { a0 i0 { pi0 pi1 } }
							_lod_q { a0 j0 } ⊢ { a0 j0 { pj0 pj1 } } 
							stt_v.mk_rset_x pi1 ⊢ { pi1 vi }
							stt_v.mk_rset_x pj0 ⊢ { pj0 vj } 
							rset.and { vi vj } ⊢ { vi vj } 
							rset.is_zero vi ⊢ { vi b0 }
							$ i0 ⊢ i0,i00 
							_imul { i00 an } ⊢ { i00 an }
							_add { i00 j0 } ⊢ { i00 j0 }
							exc_q { tij i00 b0 } ⊢ { tij i00 _ }
							_inc j0 ⊢ j0 
							f2_lp1_j { a0 tij an i0 j0 } ⊢| 
				§ @.f2_lp2 { c0 vf0 tij an i0 l0 } 
						∐ i0'=an' . 
							∎ { vf0 tij an l0 } 
						∐. . 
							_lod_q { vf0 i0 } ⊢ { vf0 i0 b0 } 
							∐ b0 ⊢ bl.f◂{} . 
								$ c0 ⊢ c0,c01 
								$ c0 ⊢ 
								∐ _some◂c0 . 
									$ c0 ⊢ c0,c00 
									_imul { c00 an } ⊢ { c00 an }
									_add { c00 i0 } ⊢ { c00 i0 }
									_lod_q { tij c00 } ⊢ { tij c00 b0 }
									∐ b0 ⊢ bl.t◂{} . 
										bl.t {} ⊢ bt1 
										exc_q { vf0 i0 bt1 } ⊢ { vf0 i0 bt1 } 
										» 0r _ ⊢ j0 
										$ i0 ⊢ i0,i00 
										_some i00 ⊢ ci0 
										f2_lp2 { ci0 vf0 tij an j0 l0 } ⊢ { vf0 tij an l0 }
										$ i0 ⊢ i0,i00 
										_cns { i00 l0 } ⊢ l0 
										_inc i0 ⊢ i0 
										f2_lp2 { c01 vf0 tij an i0 l0 } ⊢|
									∐. . 
										_inc i0 ⊢ i0 
										f2_lp2 { c01 vf0 tij an i0 l0 } ⊢| 
								∐. _none◂{} . 
									bl.t {} ⊢ bt1 
									exc_q { vf0 i0 bt1 } ⊢ { vf0 i0 bt1 } 
									» 0r _ ⊢ j0 
									$ i0 ⊢ i0,i00 
									_some i00 ⊢ ci0 
									f2_lp2 { ci0 vf0 tij an j0 l0 } ⊢ { vf0 tij an l0 } 
									$ i0 ⊢ i0,i00 
									_cns { i00 l0 } ⊢ l0 
									_inc i0 ⊢ i0 
									f2_lp2 { c01 vf0 tij an i0 l0 } ⊢|
							∐. . 
								_inc i0 ⊢ i0 
								f2_lp2 { c0 vf0 tij an i0 l0 } ⊢| 
				§ @.lp0 { e0 rsp i vs0 vss v1 sl }
					∐ i'=128r . 
						∎ { e0 rsp vs0 vss v1 sl } 
					∐. . 
						_lod_q { vss i } ⊢ { vss i b0 } 
						_lod_q { v1 i } ⊢ { v1 i b1 } 
						∐ b0 ⊢ bl.t◂{}; b1 ⊢ bl.t◂{} .
							alc_vs vs0 ⊢ { vs0 m0 }
							brk_rsp_e { rsp m0 e0 } ⊢ { rsp m0 e0 } 
							mov_e { rsp i m0 e0 } ⊢ { rsp i m0 e0 }
							rset.set_f { vss i } ⊢ { vss i } 
							rset.set_t { vss m0 } ⊢ { vss m0 } 
							$ i ⊢ i,i0 
							_some m0 ⊢ o 
							_cns { { i0 o } sl } ⊢ sl 
							_inc i ⊢ i 
							lp0 { e0 rsp i vs0 vss v1 sl } ⊢| 
						∐. . 
							_inc i ⊢ i 
							lp0 { e0 rsp i vs0 vss v1 sl } ⊢| 
				§ @.f2_lp3 { { evv tav } rsp a0 { vs0 vss vp1 } l0 e0 sl } 
					$ l0 ⊢ 
					∐ _cns◂{ n0 l0 } . 
						_lod_q { a0 n0 } ⊢ { a0 n0 { p0 p1 } } 
						subst_ptn { sl p0 } ⊢ { sl p0 } 
						∐ p0 ⊢ RP.atm◂v0; v0 ⊢ ast.hp◂{ r0 h0 }; p1 ⊢ RP.atm◂v1; v1 ⊢ ast.hp◂{ r1 h1 }; r0'=r1' .  
							f2_lp3 { { evv tav } rsp a0 { vs0 vss vp1 } l0 e0 sl } ⊢| 
						∐. . 
							stt_v.mk_rset_x p1 ⊢ { p1 v1 } 
							» 0r _ ⊢ i 
							##$ vss ⊢ vss,vss0 
							##rset.or { vss0 vp1 } ⊢ { vss0 vp1 } 
							lp0 { e0 rsp i vs0 vss v1 sl } ⊢ { e0 rsp vs0 vss v1 sl }
							subst_ptn { sl p0 } ⊢ { sl p0 } 
							stt_v.mk_rset_x p0 ⊢ { p0 v0 } 
							$ vs0 ⊢ vs0,vs00
							rset.sub { vss v0 } ⊢ { vss v0 } 
							##rset.sub { vs0 v0 } ⊢ { vs0 _ } 
							##rset.or { vs0 v1 } ⊢ { vs0 v1 } 
							##rset.or { vs00 vp1 } ⊢ { vs00 vp1 }
							ptn { e0 { evv tav } rsp vs00 p0 p1 } ⊢ { e0 { evv tav } rsp _ } 
							f2_lp3 { { evv tav } rsp a0 { vs0 vss vp1 } l0 e0 sl } ⊢| 
					∐. _nil◂{} . 
						∎ { { evv tav } rsp a0 { vs0 vss vp1 } e0 sl }
				§ f2 { { evv tav } rsp v0 p0 p1 ec0 }
					$ p0 ⊢ p0,p00 
					ast.pnt.rt { evv p00 } ⊢ { evv sp0 } 
					$ p1 ⊢ p1,p10 
					ast.pnt.rt { evv p10 } ⊢ { evv sp1 } 
					stt_v.mk_rset_x p0 ⊢ { p0 vp0 } 
					stt_v.mk_rset_x p1 ⊢ { p1 vp1 } 
					$ _nil◂{} ⊢ r0 
					f2_lp0 { p0 p1 r0 } ⊢ r0 
					arr_of_lst_len r0 ⊢ { a0 na }  
					$ na ⊢ na,na0 
					_imul { na0 na } ⊢ { na0 na }
					bl.f {} ⊢ bf 
					mk_arr { na0 bf } ⊢ { na0 _ tij } 
					» 0r _ ⊢ i0 
					f2_lp1_i { a0 tij na i0 } ⊢ { a0 tij na }   
					rset.ini {} ⊢ vf0 
					» 0r _ ⊢ i0 
					$ _nil◂{} ⊢ l0 
					_none {} ⊢ c0 
					f2_lp2 { c0 vf0 tij na i0 l0 } ⊢ { vf0 tij na l0 } 
					$ v0 ⊢ v0,vc0 
					rset.or { vc0 vp0 } ⊢ { vc0 vp0 } 
					rset.or { vc0 vp1 } ⊢ { vc0 vp1 } 
					rset.pnt.f vc0 ⊢ { vc0 svc0 }
					» _^ sp0,sp1,svc0 ⊢ sp0,sp1,_,spr 
						"; .mov_ptn2 " 0' " ⊢ " 1' "\n" 
						"; {| " 2' "0.. |}\n" //
					rp8.add_s8 { ec0 spr } ⊢ ec0 
					$ _nil◂{} ⊢ sl 
					f2_lp3 { { evv tav } rsp a0 { vc0 vp0 vp1 } l0 ec0 sl } ⊢ { { evv tav } rsp a0 { vc0 vp0 vp1 } ec0 sl } 
					» "; mov_ptn2.\n" _ ⊢ sc0 
					rp8.add_s8 { ec0 sc0 } ⊢ ec0 
					∎ { { evv tav } rsp v0 ec0 }
				∎∎
			§§ push_regs 
				§ @.lp { rsp irv v i n l e } 
					∐ i' = REG_N . 
						sub_rsp n ⊢ { n e1 } 
						rp8.pfx_s8 { e1 e } ⊢ e 
						∎ { rsp irv v i n l e } 
					∐. . 
						_lod_q { v i } ⊢ { v i b } 
						$ b ⊢ 
						∐ bl.f◂{} . 
							_inc i ⊢ i 
							lp { rsp irv v i n l e } ⊢| 
						∐. bl.t◂{} . 
							» REG_N _ ⊢ m0 
							_add { m0 rsp } ⊢ { m0 rsp } 
							rset.set_f { v i } ⊢ { v i } 
							rset.set_t { v m0 } ⊢ { v m0 } 
							 $ i ⊢ i,i0 
							_cns { i0 l } ⊢ l 
							##reg { rsp i } ⊢ { rsp i si b0 } 
							» "rsp" _ ⊢ si 
							» 3r _ ⊢ xa 
							_shl { n xa } ⊢ { n xa } 
							mov.lea_reg_idx { rsp si n i e } ⊢ { rsp _ n i e } 
							_shr { n xa } ⊢ { n _ } 
							_inc i ⊢ i 
							_inc n ⊢ n 
							_inc rsp ⊢ rsp 
							lp { rsp irv v i n l e } ⊢| 
				§ f { rsp irv rl er } 
					stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl v } 
					» 0r _ ⊢ i 
					» 0r _ ⊢ n 
					$ _nil◂{} ⊢ l 
					rp8.e {} ⊢ e 
					lp { rsp irv v i n l e } ⊢ { rsp irv v i n l e }
					rp8.cct { er e } ⊢ er 
					∎ { rsp irv v rl er n l }
				∎∎
			§ shft { n i } 
				∐ REG_N=<i'. 
					_add { i n } ⊢ { i n } 
					∎ { n i } 
				∐. . 
					∎ { n i }
			
			§ 
				@.shft_atm = ast.map_l_rt_reg_atm◂◂shft 
				@.shft_ptn = RP.map_l◂◂shft_atm 
			§ shft_ptn_lst = lst.map_l◂◂shft_ptn 
			
			§§ pop_regs 
				§ @.lp { rsp irv v0 v1 rl i l sl e0 }
					$ l ⊢ 
					∐ _cns◂{ j l } . 
						_lod_q { v1 j } ⊢ { v1 j b } 
						$ b ⊢ 
						∐ bl.t◂{} . 
							rset.set_f { v0 i } ⊢ { v0 i } 
							alc_vs v0 ⊢ { v0 m0 } 
							brk_rsp { rsp m0 } ⊢ { rsp m0 sb0 } 
							rp8.add_s8 { e0 sb0 } ⊢ e0
							mov { rsp j m0 } ⊢ { rsp j m0 em0 } 
							reg { rsp j } ⊢ { rsp j ej bc } 
							reg { rsp i } ⊢ { rsp i ei bi } 
							∐ m0'=i' . 
								» _^ em0,ej,ei ⊢ em0,ej,ei,e1 
									"\tmov rax," 2' "\n" 
									0' 
									"\tmov " 1' ",rax\n" //
								rp8.add_s8 { e0 e1 } ⊢ e0 
								_some m0 ⊢ o 
								_cns { { j o } sl } ⊢ sl 
								_inc i ⊢ i 
								lp { rsp irv v0 v1 rl i l sl e0 } ⊢|
							∐. .
								mov { rsp i j } ⊢ { rsp i j em1 } 
								» _^ em0,em1 ⊢ em0,em1,e1 
									0' 
									1' //
								rp8.add_s8 { e0 e1 } ⊢ e0 
								_some m0 ⊢ o 
								_cns { { j o } sl } ⊢ sl 
								_inc i ⊢ i 
								lp { rsp irv v0 v1 rl i l sl e0 } ⊢|
						∐. bl.f◂{} . 
							rset.set_f { v0 i } ⊢ { v0 i }
							brk_rsp { rsp j } ⊢ { rsp j sb0 } 
							rp8.add_s8 { e0 sb0 } ⊢ e0
							mov { rsp i j } ⊢ { rsp i j em0 } 
							rp8.add_s8 { e0 em0 } ⊢ e0 
							_inc i ⊢ i 
							lp { rsp irv v0 v1 rl i l sl e0 } ⊢|
					∐. _nil◂{} . 
						∎ { rsp irv v0 v1 rl i sl e0 } 
				§ f { rsp irv rl p1 l vv n } 
					##» "pop_regs D0" _ ⊢ ee0 
					##_emt ee0 ⊢ _ 
					$ rl ⊢ rl,rl0 
					$ vv ⊢ vv,v0 
					stt_v.mk_rset_env { irv rl0 v0 } ⊢ { irv v0 }
					stt_v.mk_rset_x p1 ⊢ { p1 v1 }
					rset.or { v0 v1 } ⊢ { v0 v1 }
					$ _nil◂{} ⊢ sl 
					##» "" _ ⊢ e1 
					$ n ⊢ n,i
					rp8.e {} ⊢ e1 
					lp { rsp irv v0 v1 rl i l sl e1 } ⊢ { rsp irv v0 v1 rl i sl e1 }
					subst_ptn { sl p1 } ⊢ { sl p1 }
					rset.max_t v0 ⊢ { v0 im } 
					resize_rsp { rsp im } ⊢ { rsp im er }
					rp8.add_s8 { e1 er } ⊢ e1
					##» "pop_regs D1" _ ⊢ ee0 
					##_emt ee0 ⊢ _ 
					rp8.to_s8 e1 ⊢ e1
					∎ { rsp irv rl p1 e1 vv n }
				∎∎
		
			§ @.pnt_env_i { { evv irv e0 } i }  
				lod_tv { irv i } ⊢ { irv i p } 
				ast.pnt.rt { evv p } ⊢ { evv sp } 
				» _^ i,sp ⊢ i,sp,sr 
						"%" 0d' "~" 1' // 
				rp8.add_s8 { e0 sr } ⊢ e0 
				∎ { evv irv e0 }
			§ pnt_env { evv irv rsp rl } 
				» _^ rsp ⊢ rsp,s 
					";; rsp=" 0d' " , " // 
				rp8.add_s8 { rp8.e◂{} %s } ⊢ e0 
				lst.fld_l◂◂pnt_env_i { { evv irv e0 } rl } ⊢ { evv irv e0 }
				rp8.add_s8 { %e0 %[ "\n" ] } ⊢ e0 
				rp8.to_s8 e0 ⊢ sr  
				∎ { evv irv rsp sr } 
			§§ adp 
				§ adt_call◂◂ID { ahl fl tav lb_n e0 { ax0 l0 } }
					$ ax0 ⊢ ax0,ax00 
							$ l0 ⊢ l0,l00 
							ast.hp.adt { ax00 l00 } ⊢ h0 
							find_axm.f { ahl %[ ID ] h0 } ⊢ { ahl _ h0 o } 
							$ o ⊢ 
							∐ _some◂lb0 . 
								» _^ lb0 ⊢ lb0,s1 
									"\tcall LB_" 0d' "\n"  
									//		
								rp8.add_s8 { e0 s1 } ⊢ e0 
								∎ { ahl fl tav lb_n e0 }
							∐. _none◂{} . 
								inc_x lb_n ⊢ { lb0 lb_n } 
								» _^ lb0 ⊢ lb0,s1 
									"\tcall LB_" 0d' "\n"  
									//		
								rp8.add_s8 { e0 s1 } ⊢ e0 
								$ lb0 ⊢ lb0,lb00 
								gnr_axm { lb00 %[ ID ] h0 } ⊢ o 
								_cns { o ahl } ⊢ ahl 
								_cns { { ax0 l0 lb0 } fl } ⊢ fl 
								∎ { ahl fl tav lb_n e0 }
				§ 
					@.adt◂◂ADT_HP { ahl fl ax0 l0 tav lb_n { eds e0 } } 
						lod_tv { tav ax0 } ⊢ { tav ax0 { w0 o0 } } 
						∐ o0 ⊢ _some◂{ lx0 lx1 vl0 pl0 } .
							mk_adt.f { l0 vl0 pl0 } ⊢ pl0							
							lst.len pl0 ⊢ { pl0 n } 
							mk_jmp_tbl { lb_n n } ⊢ { lb_n ej lbl } 
							rp8.to_s8 ej ⊢ sj 
							inc_x lb_n ⊢ { lb0 lb_n }
							inc_x lb_n ⊢ { lb1 lb_n }
							» _^ lb0,sj ⊢ lb0,sj,s0  
								"\tmovzx rax,BYTE [r8+6]\n" 
								"\tjmp QWORD [LB_" 0d' "+8*rax]\n"
								"LB_" 0d' ": dq " 1' "\n" //
							rp8.add_s8 { e0 s0 } ⊢ e0 
							ADT_HP { ahl fl %[ 0r ] tav pl0 lbl lb1 lb_n { eds e0 } } ⊢ { ahl fl tav lb1 lb_n { eds e0 } }
							» _^ lb1 ⊢ lb1,s0 
								"LB_" 0d' ":\n"
								"\tret\n" //
							rp8.add_s8 { e0 s0 } ⊢ e0   
							∎ { ahl fl tav lb_n { eds e0 } }
						∐. . 
						» "emt x2" _ ⊢ ee 
									_emt ee ⊢ ee 
							∎|   
					@.adt_lp◂◂ADT { ahl fl tav lb_n { eds e0 } }
						∐ fl ⊢ _cns◂{ { ax0 tl0 lb0 } fl } . 
							» _^ lb0 ⊢ lb0,se 
								"LB_" 0d' ":\n" // 
							rp8.add_s8 { e0 se } ⊢ e0 
							ADT { ahl fl ax0 tl0 tav lb_n { eds e0 } } ⊢ { ahl fl tav lb_n { eds e0 } }
							adt_lp◂◂ADT { ahl fl tav lb_n { eds e0 } } ⊢| 
						∐. . 
							∎ { ahl tav lb_n { eds e0 } }
				∎∎
			§§ dlt 
				§ 
					@.ptn { ahl fl tav lb_n rsp is0 { eds e0 } } 
						$ is0 ⊢ 
						∐ RP.rcd◂l0 . 
							ptn_lst { ahl fl tav lb_n rsp l0 { eds e0 } } ⊢ { ahl fl tav lb_n rsp { eds e0 } }
							∎	{ ahl fl tav lb_n rsp { eds e0 } }
						∐. RP.atm◂k0 . 
							$ k0 ⊢ 
							∐ ast.hp◂{ r h } . 
								∐ h ⊢ ast.hp.r64◂{} . 
									∎ { ahl fl tav lb_n rsp { eds e0 } } 								
								∐. . 
									reg { rsp r } ⊢ { rsp r sr b }
									» _^ sr ⊢ sr,s0 
										"\tmov rdi," 0' "\n"
										push_c_regs
										"\tmov r8,rdi\n" 
										//		
									rp8.add_s8 { e0 s0 } ⊢ e0 
									hp { ahl fl tav lb_n h e0 } ⊢ { ahl fl tav lb_n e0 } 
									» _^ _ ⊢ s0 
										pop_c_regs //
									rp8.add_s8 { e0 s0 } ⊢ e0 
									∎ { ahl fl tav lb_n rsp { eds e0 } } 								
							∐ ast.hp_im◂_ . 
								∎ { ahl fl tav lb_n rsp { eds e0 } }
							∐ ast.pt◂{ r0 r1 } . 	
								» "clr A0" _ ⊢ ee0 
								_emt ee0 ⊢ _ 
								∎|  
							∐. ast.stt_adt◂{ ia0 na0 pa0 } .
								ptn { ahl fl tav lb_n rsp pa0 { eds e0 } } ⊢| 
					@.hp { ahl fl tav lb_n h e0 } 
						$ h ⊢ 
						∐ ast.hp.r64◂{} . 
							∎ { ahl fl tav lb_n e0 }
						∐ ast.hp.ref◂q0 . 
							$ q0 ⊢ 
							∐ ast.hp.opq◂{} . 	
								rp8.add_s8 { e0 %[ "\tFREE_S8 r8\n" ] } ⊢ e0 
								∎ { ahl fl tav lb_n e0 }
							∐ ast.hp.arr◂h0 . 
								inc_x lb_n ⊢ { lb0 lb_n } 
								inc_x lb_n ⊢ { lb1 lb_n } 
								» _^ lb0,lb1 ⊢ lb0,lb1,s1 
									`	GET_LEN rsi,r8
									`	mov rax,0 
									"LB_" 0d' ":\n"
									`	cmp rsi,0
									"\tjz LB_" 1d' "\n"
									`	push r8 
									`	push rsi 
									`	mov r8,QWORD [r8+8*rsi]
									//
								rp8.add_s8 { e0 s1 } ⊢ e0
								hp { ahl fl tav lb_n h0 e0 } ⊢ { ahl fl tav lb_n e0 } 
								» _^ lb0,lb1 ⊢ lb0,lb1,s1 	 
									`	pop rsi 
									`	pop r8 
									`	sub rsi,1 
									"\tjmp LB_" 0d' "\n" 
									"LB_" 1d' ":\n" 
									`	mov rdi,r8
									`	C_CALL_SF free 
									//	
								rp8.add_s8 { e0 s1 } ⊢ e0
								∎ { ahl fl tav lb_n e0 } 
							∐ ast.hp.clr◂h0 . 
							» "clr A1" _ ⊢ ee0 
								_emt ee0 ⊢ _ 
								∎|
							∐ ast.hp.pt_hp◂{} . 
								» "clr A2" _ ⊢ ee0 
								_emt ee0 ⊢ _ 
								∎|
							∐. ast.hp.rcd◂l0 . 
								» 0r _ ⊢ i0 
								hp_rcd { ahl fl tav lb_n l0 i0 e0 } ⊢ { ahl fl tav lb_n e0 }
								∎	{ ahl fl tav lb_n e0 }
						∐ ast.hp.adt◂{ ax0 l0 } . 
							adp.adt_call◂◂EX.dlt { ahl fl tav lb_n e0 { ax0 l0 } } ⊢|
						∐. ast.hp.pv◂pv0 .  
							» _^ _ ⊢ ec1
									`	RT_ERR 0xffff_0002 
									// 
							rp8.add_s8 { e0 ec1 } ⊢ e0 
							∎ { ahl fl tav lb_n e0 }
					@.hp_rcd { ahl fl tav lb_n l0 i0 e0 }
						$ l0 ⊢ 
						∐ _cns◂{ h l0 } . 
							» _^ i0 ⊢ i0,s0 
								"\tpush r8\n" 
								"\tmov r8,QWORD [r8+8+8*" 0d' "]\n" // 
							rp8.add_s8 { e0 s0 } ⊢ e0 
							hp { ahl fl tav lb_n h e0 } ⊢ { ahl fl tav lb_n e0 } 
							» _^ _ ⊢ s0 
								`	pop r8 
								//
							rp8.add_s8 { e0 s0 } ⊢ e0 
							_inc i0 ⊢ i0 
							hp_rcd { ahl fl tav lb_n l0 i0 e0 } ⊢| 
						∐. _nil◂{} . 
							∐ i0'=0r . 
								∎ { ahl fl tav lb_n e0 }
							∐. . 
								» _^ i0 ⊢ i0,s0 
									"\tFREE_RCD " 0d' ", r8\n" //
								rp8.add_s8 { e0 s0 } ⊢ e0 
								∎ { ahl fl tav lb_n e0 }
					@.ptn_lst { ahl fl tav lb_n rsp l0 { eds e0 } } 
						$ l0 ⊢ 
						∐ _cns◂{ p0 l0 } . 
							ptn { ahl fl tav lb_n rsp p0 { eds e0 } } ⊢ { ahl fl tav lb_n rsp { eds e0 } }
							ptn_lst { ahl fl tav lb_n rsp l0 { eds e0 } } ⊢|
						∐. _nil◂{} . 
							∎ { ahl fl tav lb_n rsp { eds e0 } } 
					
					@.adt = adp.adt◂◂adt_hp
					@.adt_hp { ahl fl j0 tav lr lbl lb1 lb_n { eds e0 } } 
						∐ lr ⊢ _cns◂{ h lr }; lbl ⊢ _cns◂{ lbi lbl } . 
							» _^ lbi ⊢ lbi,s0 
								"LB_" 0d' ":\n" // 
							rp8.add_s8 { e0 s0 } ⊢ e0 
							_inc j0 ⊢ j0 
							∐ h ⊢ ast.hp.ref◂q0 . 
								ast.hp.ref q0 ⊢ h 
								hp { ahl fl tav lb_n h e0 } ⊢ { ahl fl tav lb_n e0 } 
								» _^ lb1 ⊢ lb1,s0 
									"\tjmp LB_" 0d' "\n" // 
								rp8.add_s8 { e0 s0 } ⊢ e0 
								adt_hp { ahl fl j0 tav lr lbl lb1 lb_n { eds e0 } } ⊢| 
							∐. . 
								» _^ _ ⊢ s0 
									`	FREE_LN r8 
									"\tmov r8,QWORD [r8+8]\n" // 
								rp8.add_s8 { e0 s0 } ⊢ e0 
								hp { ahl fl tav lb_n h e0 } ⊢ { ahl fl tav lb_n e0 } 
								» _^ lb1 ⊢ lb1,s0 
									"\tjmp LB_" 0d' "\n" // 
								rp8.add_s8 { e0 s0 } ⊢ e0 
								adt_hp { ahl fl j0 tav lr lbl lb1 lb_n { eds e0 } } ⊢|
						∐ lr ⊢ _nil◂{}; lbl ⊢ _nil◂{} . 
							∎ { ahl fl tav lb1 lb_n { eds e0 } }
						∐. . 
						» "emt adt_hp x3" _ ⊢ ee 
									_emt ee ⊢ ee 
							∎|
					@.adt_lp = adp.adt_lp◂◂adt 
			
				§ @.f { gfl fl evv tav lb_n rsp dl { eds e0 } } 
					$ dl ⊢ 
					∐ _cns◂{ p dl } . 
						$ p ⊢ p,p0 
						ast.pnt.rt { evv p0 } ⊢ { evv sp } 
						» _^ sp ⊢ sp,sc 
							"; .dlt.ptn " 0' "\n" // 
						rp8.add_s8 { e0 sc } ⊢ e0 
						ptn { gfl fl tav lb_n rsp p { eds e0 } } ⊢ { gfl fl tav lb_n rsp { eds e0 } }
						f { gfl fl evv tav lb_n rsp dl { eds e0 } } ⊢| 
					∐. _nil◂{} . 
						∎ { gfl fl evv tav lb_n rsp { eds e0 } } 
				§ f { gfl evv tav lb_n rsp dl { eg0 eds e0 } }
					$ _nil◂{} ⊢ fl 
					rp8.e {} ⊢ e1 
					f { gfl fl evv tav lb_n rsp dl { eds e1 } } ⊢ { gfl fl evv tav lb_n rsp { eds e1 } }
					adt_lp { gfl fl tav lb_n { eds eg0 } } ⊢ { gfl tav lb_n { eds eg0 } }
					rp8.cct { e0 e1 } ⊢ e0 
					∎ { gfl evv tav lb_n rsp { eg0 eds e0 } }
				§ env { gfl evv irv tav lb_n rsp env { eg0 eds e0 } }
					stt_v.ptns_of_env { irv env } ⊢ { irv dl } 
					f { gfl evv tav lb_n rsp dl { eg0 eds e0 } } ⊢ { gfl evv tav lb_n rsp { eg0 eds e0 } } 
					∎ { gfl evv irv tav lb_n rsp { eg0 eds e0 } }
				∎∎
			§ printf { s lb_n }
				» 0r _ ⊢ rs  
				mk_db { s rs } ⊢ { s rs dbs }	
				$ lb_n ⊢ lb_n,lb0 
				_inc lb_n ⊢ lb_n 
				$ lb_n ⊢ lb_n,lb1 
				_inc lb_n ⊢ lb_n 
				» _^ lb0,lb1,dbs ⊢ lb0,lb1,dbs,s0
					"\tjmp LB_" 1d' "\n" 
					"LB_" 0d' ": db " 2' "\n"   
					"LB_" 1d' ":\n" 
					"\tmov rdi,LB_" 0d' "\n" 
					`	call emt_stg
					//
				∎ { s lb_n s0 }
			§ printf { eds ec0 s lb_n }
				inc_x lb_n ⊢ { lb0 lb_n }
				data_s8 { eds lb0 s } ⊢ { eds lb0 s }
				» _^ lb0 ⊢ lb0,sc0 
					"\tmov rdi,LB_" 0d' "\n" 
					`	call emt_stg 
					//
				rp8.add_s8 { ec0 sc0 } ⊢ ec0 
				∎ { eds ec0 s lb_n }
			§§ cmp_s8
				§ 
					@.f { lb0 s }  
						_s8_len s ⊢ { s ls } 
						» 0r _ ⊢ i 
						rp8.e {} ⊢ e0
						lp { lb0 s ls i e0 } ⊢ { lb0 s e0 }
						∎ { lb0 s e0 } 
					@.lp { lb0 s ls i e0 } 
						∐ ls'=i' . 
							∎ { lb0 s e0 } 
						∐. . 
							_lds { s i } ⊢ { s i c } 
							» _^ i,c,lb0 ⊢ i,c,lb0,s0 
								"\tcmp BYTE [rdi+" 0d' "]," 1d' "\n" 
								"\tjnz LB_" 2d' "\n" 
								// 
							_inc i ⊢ i 
							rp8.add_s8 { e0 s0 } ⊢ e0 
							lp { lb0 s ls i e0 } ⊢|
				∎∎ 
			§ @.asc_hp { l k }
				∐ l ⊢ _cns◂{ { k0 o0 } l } .
					ast.hp.eq_hp { k k0 } ⊢ { k k0 b } 
					∐ b ⊢ bl.t◂{} .
						∐ o0 ⊢ _some◂v0 .
							$ v0 ⊢ v0,v1
							_some v0 ⊢ o0
							_cns { { k0 o0 } l } ⊢ l
							_some v1 ⊢ r1
							∎ { l k r1 }
						∐. .
							_cns { { k0 o0 } l } ⊢ l
							_none {} ⊢ r1
							∎ { l k r1 }
					∐. .
						asc_hp { l k } ⊢ { l k r0 }
						_cns { { k0 o0 } l } ⊢ l
						∎ { l k r0 }
				∐. .
					_none {} ⊢ r1
					∎ { l k r1 }	
			
			§§ emt 
				§
					@.hp { ahl fl tav lb_n h e0 } 
						$ h ⊢ 
						∐ ast.hp.r64◂{} . 		 
							rp8.add_s8 { e0 %[ "\tmov rdi,r8\n\tcall emt_r64\n" ] } ⊢ e0 
							∎ { ahl fl tav lb_n e0 }
						∐ ast.hp.ref◂q0 . 
							$ q0 ⊢ 
							∐ ast.hp.opq◂{} . 		
								rp8.add_s8 { e0 %[ "\tmov rdi,r8\n\tcall emt_s8\n" ] } ⊢ e0 
								∎ { ahl fl tav lb_n e0 }
							∐ ast.hp.arr◂h0 . 
								inc_x lb_n ⊢ { lb0 lb_n } 
								inc_x lb_n ⊢ { lb1 lb_n } 
								» _^ lb0,lb1 ⊢ lb0,lb1,s1 
									`	mov rdi,fmt_arr_l 
									`	call emt_stg 
									`	mov rsi,0x0000_ffff_ffff_ffff 
									`	and rsi,[r8]
									`	mov rax,0 
									"LB_" 0d' ":\n"
									`	cmp rsi,rax 
									"\tjz LB_" 1d' "\n"
									`	push r8 
									`	push rsi 
									`	push rax 
									`	mov r8,QWORD [r8+8+8*rax]
									//
								rp8.add_s8 { e0 s1 } ⊢ e0
								hp { ahl fl tav lb_n h0 e0 } ⊢ { ahl fl tav lb_n e0 } 
								» _^ lb0,lb1 ⊢ lb0,lb1,s1 	 
									`	mov rdi,fmt_spc 
									`	call emt_stg 
									`	pop rax 
									`	pop rsi 
									`	pop r8 
									`	add rax,1 
									"\tjmp LB_" 0d' "\n" 
									"LB_" 1d' ":\n" 
									`	mov rdi,fmt_arr_r 
									`	call emt_stg
									//	
								rp8.add_s8 { e0 s1 } ⊢ e0
								∎ { ahl fl tav lb_n e0 } 
							∐ ast.hp.clr◂h0 . 
							» "clr A1" _ ⊢ ee0 
								_emt ee0 ⊢ _ 
								∎|
							∐ ast.hp.pt_hp◂{} . 
								» "clr A2" _ ⊢ ee0 
								_emt ee0 ⊢ _ 
								∎|
							∐. ast.hp.rcd◂l0 . 
								» "\tmov rdi,fmt_rcd_box_l\n\tcall emt_stg\n" _ ⊢ s0 
								rp8.add_s8 { e0 s0 } ⊢ e0 
								hp_rcd { ahl fl tav lb_n l0 %[ 0r ] e0 } ⊢ { ahl fl tav lb_n e0 }
								» "\tmov rdi,fmt_rcd_r\n\tcall emt_stg\n" _ ⊢ s1 
								rp8.add_s8 { e0 s1 } ⊢ e0
								∎	{ ahl fl tav lb_n e0 }
						∐ ast.hp.adt◂{ ax0 l0 } . 
							adp.adt_call◂◂EX.emt { ahl fl tav lb_n e0 { ax0 l0 } } ⊢| 						
						∐. ast.hp.pv◂pv0 .  
							» _^ _ ⊢ ec1
									`	RT_ERR 0xfff_0102 
									// 
								rp8.add_s8 { e0 ec1 } ⊢ e0 
								∎ { ahl fl tav lb_n e0 }
					@.hp_rcd { ahl fl tav lb_n l0 i0 e0 }
						$ l0 ⊢ 
						∐ _cns◂{ h l0 } . 
							» _^ i0 ⊢ i0,s0 
								"\tpush r8\n" 
								"\tmov r8,QWORD [r8+8+8*" 0d' "]\n" // 
							rp8.add_s8 { e0 s0 } ⊢ e0 
							hp { ahl fl tav lb_n h e0 } ⊢ { ahl fl tav lb_n e0 } 
							» _^ _ ⊢ s0 
								`	pop r8 
								`	mov rdi,fmt_spc 
								`	call emt_stg 
								//
							rp8.add_s8 { e0 s0 } ⊢ e0 
							_inc i0 ⊢ i0 
							hp_rcd { ahl fl tav lb_n l0 i0 e0 } ⊢| 
						∐. _nil◂{} . 
							∎ { ahl fl tav lb_n e0 }
				§ 
					@.ptn { ahl fl tav lb_n rsp is0 { eds e0 } } 
						$ is0 ⊢ 
						∐ RP.rcd◂l0 . 
							» _^ _ ⊢ s0 
								`	mov rdi,fmt_rcd_l 
								`	call emt_stg 
								//
							rp8.add_s8 { e0 s0 } ⊢ e0
							ptn_lst { ahl fl tav lb_n rsp l0 { eds e0 } } ⊢ { ahl fl tav lb_n rsp { eds e0 } }
							» _^ _ ⊢ s1 
								`	mov rdi,fmt_rcd_r 
								`	call emt_stg 
								//
							rp8.add_s8 { e0 s1 } ⊢ e0
							∎	{ ahl fl tav lb_n rsp { eds e0 } }
						∐. RP.atm◂k0 . 
							$ k0 ⊢ 
							∐ ast.hp◂{ r h } . 
								reg { rsp r } ⊢ { rsp r sr b }
								» _^ sr ⊢ sr,s0 
									"\tmov rdi," 0' "\n"
									push_c_regs 
									"\tmov r8,rdi\n" 
									//		
								rp8.add_s8 { e0 s0 } ⊢ e0 
								hp { ahl fl tav lb_n h e0 } ⊢ { ahl fl tav lb_n e0 } 
								» _^ _ ⊢ s0 
									pop_c_regs //
								rp8.add_s8 { e0 s0 } ⊢ e0 
								∎ { ahl fl tav lb_n rsp { eds e0 } } 								
							∐ ast.hp_im◂c . 
								∐ c ⊢ ast.k_r64◂x . 
									» _^ x ⊢ x,sx 
										0d' "r" //
									printf { eds e0 sx lb_n } ⊢ { eds e0 sx lb_n } 
									∎ { ahl fl tav lb_n rsp { eds e0 } }
								∐ c ⊢ ast.k_s8◂s . 
									» 0r _ ⊢ x0 
									mk_esc_s8 s ⊢ { s ss } 
									» _^ ss ⊢ ss,s0 
										"\"" 0' "\"" // 
									printf { eds e0 s0 lb_n } ⊢ { eds e0 s0 lb_n } 
									∎ { ahl fl tav lb_n rsp { eds e0 } }
								∐ c ⊢ ast.k_name◂e . 
									» _^ e ⊢ e,sx 
										"#[ " 0d' "]" //
									printf { eds e0 sx lb_n } ⊢ { eds e0 sx lb_n } 
									∎ { ahl fl tav lb_n rsp { eds e0 } }
								∐. . 
									» "emt x0 " _ ⊢ ee 
									_emt ee ⊢ ee 
									∎|
							∐ ast.pt◂{ r0 r1 } . 	
								» "clr A0" _ ⊢ ee0 
								_emt ee0 ⊢ _ 
								∎|  
							∐. ast.stt_adt◂{ ia0 na0 pa0 } .
								» _^ ia0 ⊢ ia0,sx 
										"'" 0d' "◂" //
								printf { eds e0 sx lb_n } ⊢ { eds e0 sx lb_n }
								ptn { ahl fl tav lb_n rsp pa0 { eds e0 } } ⊢| 
					
					@.ptn_lst { ahl fl tav lb_n rsp l0 { eds e0 } } 
						$ l0 ⊢ 
						∐ _cns◂{ p0 l0 } . 
							ptn { ahl fl tav lb_n rsp p0 { eds e0 } } ⊢ { ahl fl tav lb_n rsp { eds e0 } } 
							» _^ _ ⊢ s0 
								`	mov rdi,fmt_spc 
								`	call emt_stg 
								//
							rp8.add_s8 { e0 s0 } ⊢ e0
							ptn_lst { ahl fl tav lb_n rsp l0 { eds e0 } } ⊢|
						∐. _nil◂{} . 
							∎ { ahl fl tav lb_n rsp { eds e0 } } 
					@.adt = adp.adt◂◂adt_hp
					@.adt_hp { ahl fl j0 tav lr lbl lb1 lb_n { eds e0 } } 
						∐ lr ⊢ _cns◂{ h lr }; lbl ⊢ _cns◂{ lbi lbl } . 
							» _^ lbi ⊢ lbi,s0 
								"LB_" 0d' ":\n" // 
							rp8.add_s8 { e0 s0 } ⊢ e0 
							» _^ j0 ⊢ j0,sx 
										"'" 0d' "◂" //
							_inc j0 ⊢ j0 
							printf { eds e0 sx lb_n } ⊢ { eds e0 sx lb_n }
							∐ h ⊢ ast.hp.ref◂q0 . 
								ast.hp.ref q0 ⊢ h 
								hp { ahl fl tav lb_n h e0 } ⊢ { ahl fl tav lb_n e0 } 
								» _^ lb1 ⊢ lb1,s0 
									"\tjmp LB_" 0d' "\n" // 
								rp8.add_s8 { e0 s0 } ⊢ e0 
								adt_hp { ahl fl j0 tav lr lbl lb1 lb_n { eds e0 } } ⊢| 
							∐. . 
								» _^ _ ⊢ s0 
									"\tmov r8,QWORD [r8+8]\n" // 
								rp8.add_s8 { e0 s0 } ⊢ e0 
								hp { ahl fl tav lb_n h e0 } ⊢ { ahl fl tav lb_n e0 } 
								» _^ lb1 ⊢ lb1,s0 
									"\tjmp LB_" 0d' "\n" // 
								rp8.add_s8 { e0 s0 } ⊢ e0 
								adt_hp { ahl fl j0 tav lr lbl lb1 lb_n { eds e0 } } ⊢|
						∐ lr ⊢ _nil◂{}; lbl ⊢ _nil◂{} . 
							∎ { ahl fl tav lb1 lb_n { eds e0 } }
						∐. . 
						» "emt adt_hp x3" _ ⊢ ee 
									_emt ee ⊢ ee 
							∎|
					@.adt_lp = adp.adt_lp◂◂adt
				∎∎
			§§ rpc
				§ 
					@.hp_rcd { j0 ahl fl tav lb_n hl e0 }
						$ hl ⊢ 
						∐ _cns◂{ h hl } . 
							» _^ j0 ⊢ j0,s0 
								`	push r8
								`	push r9
								"\tmov r8,QWORD [r8+8+8*" 0d' "]\n" //
							rp8.add_s8 { e0 s0 } ⊢ e0
							hp { ahl fl tav lb_n h e0 } ⊢ { ahl fl tav lb_n e0 } 
							» _^ j0 ⊢ j0,s0
								`	pop r9  
								`	pop r8 
								"\tmov QWORD [r9+8+8*" 0d' "],rax\n"  
								//  
							rp8.add_s8 { e0 s0 } ⊢ e0
							_inc j0 ⊢ j0 
							hp_rcd { j0 ahl fl tav lb_n hl e0 } ⊢|
						∐. _nil◂{} . 
							» _^ _ ⊢ s0 
								`	mov rax,r9 
								//
							rp8.add_s8 { e0 s0 } ⊢ e0 
							∎ { ahl fl tav lb_n e0 } 
					
					@.hp { ahl fl tav lb_n h e0 }
						$ h ⊢ 
						∐ ast.hp.r64◂{} . 
							» "\tmov rax,r8\n" _ ⊢ s0 
							rp8.add_s8 { e0 s0 } ⊢ e0 
							∎ { ahl fl tav lb_n e0 }
						∐ ast.hp.ref◂q0 . 
							$ q0 ⊢ 
							∐ ast.hp.opq◂{} . 
								rp8.add_s8 { e0 %[ "\tmov rdi,r8\n\tCALL_SF rpc_s8\n" ] } ⊢ e0 
								∎ { ahl fl tav lb_n e0 }
							∐ ast.hp.arr◂ar0 .
								inc_x lb_n ⊢ { lb0 lb_n } 
								inc_x lb_n ⊢ { lb1 lb_n } 
								» _^ lb0,lb1 ⊢ lb0,lb1,sc0 
									`	mov r9,0x0000_ffff_ffff_ffff 
									`	and r9,QWORD [r8] 
									`	lea rdi,[8+8*r9] 
									`	mov rsi,1 
									`	xor rax,rax
									`	C_CALL_SF calloc
									`	mov QWORD [rax],r9
									`	mov r10,rax 
									"LB_" 0d' ":\n" 
									`	cmp r9,0 
									"\tjz LB_" 1d' "\n" 
									`	push r8 
									`	push r9
									`	push r10
									`	mov r8,QWORD [r8+8*r9]
									//
								rp8.add_s8 { e0 sc0 } ⊢ e0
								hp { ahl fl tav lb_n ar0 e0 } ⊢ { ahl fl tav lb_n e0 } 
								» _^ _ ⊢ s0
									`	pop r10 
									`	pop r9  
									`	pop r8 
									"\tmov QWORD [r10+8*r9],rax\n"  
									`	sub r9,1 
									//  
								rp8.add_s8 { e0 s0 } ⊢ e0
								jmp_lb { lb0 e0 } ⊢ { _ e0 } 
								lb_etr { lb1 e0 } ⊢ { _ e0 } 
								» "\tmov rax,r10\n" _ ⊢ s0 
								rp8.add_s8 { e0 s0 } ⊢ e0
								∎ { ahl fl tav lb_n e0 }
							∐ ast.hp.clr◂hc0 . 
								» "clr A4" _ ⊢ ee0 
								_emt ee0 ⊢ _ 
								∎|
							∐ ast.hp.pt_hp◂{} . 
								» "clr A5" _ ⊢ ee0 
								_emt ee0 ⊢ _ 
								∎|
							∐. ast.hp.rcd◂l0 .
								∐ l0 ⊢ _nil◂{} . 
									» _^ _ ⊢ s0 
										`	mov rax,unt
										//
									rp8.add_s8 { e0 s0 } ⊢ e0 
									∎ { ahl fl tav lb_n e0 }
								∐. . 
									lst.len l0 ⊢ { l0 nl0 } 
									» _^ nl0 ⊢ nl0,s0 
										"\tALC_RCD " 0d' ",r9\n" 
										// 
									rp8.add_s8 { e0 s0 } ⊢ e0
									» 0r _ ⊢ j0 
									hp_rcd { j0 ahl fl tav lb_n l0 e0 } ⊢| 
						∐ ast.hp.adt◂{ ax0 l0 } .
							adp.adt_call◂◂EX.rpc { ahl fl tav lb_n e0 { ax0 l0 } } ⊢| 
						∐. ast.hp.pv◂vi .
							» _^ _ ⊢ ec1
									`	RT_ERR 0xffff_0004
									// 
								rp8.add_s8 { e0 ec1 } ⊢ e0 
								∎ { ahl fl tav lb_n e0 }
				§	
					@.adt = adp.adt◂◂adt_hp 
					@.adt_hp { ahl fl j0 tav lr lbl lb1 lb_n { eds e0 } } 
						∐ lr ⊢ _cns◂{ h lr }; lbl ⊢ _cns◂{ lbi lbl } . 
							» _^ lbi ⊢ lbi,s0 
								"LB_" 0d' ":\n" // 
							rp8.add_s8 { e0 s0 } ⊢ e0 
							∐ h ⊢ ast.hp.ref◂q0 . 
								∐ q0 ⊢ ast.hp.rcd◂l0; l0 ⊢ _nil◂{} . 
									» _^ lb1,j0 ⊢ lb1,j0,s0
										"\tmov rax,unt_" 1d' "\n" 
										"\tjmp LB_" 0d' "\n" // 
									rp8.add_s8 { e0 s0 } ⊢ e0 
									_inc j0 ⊢ j0 
									adt_hp { ahl fl j0 tav lr lbl lb1 lb_n { eds e0 } } ⊢| 
								∐. .
									ast.hp.ref q0 ⊢ h 
									hp { ahl fl tav lb_n h e0 } ⊢ { ahl fl tav lb_n e0 } 
									» _^ lb1,j0 ⊢ lb1,j0,s0
										"\tmov BYTE [rax+6]," 1d' "\n" 
										"\tjmp LB_" 0d' "\n" // 
									rp8.add_s8 { e0 s0 } ⊢ e0 
									_inc j0 ⊢ j0 
									adt_hp { ahl fl j0 tav lr lbl lb1 lb_n { eds e0 } } ⊢| 
							∐. . 
								» _^ _ ⊢ s0 
									"\tmov r8,QWORD [r8+8]\n" // 
								rp8.add_s8 { e0 s0 } ⊢ e0 
								hp { ahl fl tav lb_n h e0 } ⊢ { ahl fl tav lb_n e0 } 
								» _^ lb1,j0 ⊢ lb1,j0,s0 
									`	ALC_LN rsi 
									"\tmov BYTE [rsi+6]," 1d' "\n"
									`	mov QWORD [rsi+8],rax
									`	mov rax,rsi
									"\tjmp LB_" 0d' "\n" // 
								rp8.add_s8 { e0 s0 } ⊢ e0 
								_inc j0 ⊢ j0 
								adt_hp { ahl fl j0 tav lr lbl lb1 lb_n { eds e0 } } ⊢|
						∐ lr ⊢ _nil◂{}; lbl ⊢ _nil◂{} . 
							∎ { ahl fl tav lb1 lb_n { eds e0 } }
						∐. . 
							∎|
					@.adt_lp = adp.adt_lp◂◂adt 
					
				§ 
					@.ptn_lst { ahl fl tav lb_n l0 rsp irv v0 { eds e0 } }   					
						$ l0 ⊢
						∐ _cns◂{ p0 l0 } . 
							ptn { ahl fl tav lb_n p0 rsp irv v0 { eds e0 } } ⊢ { ahl fl tav lb_n p0 p1 rsp irv v0 { eds e0 } }
							ptn_lst { ahl fl tav lb_n l0 rsp irv v0 { eds e0 } } ⊢ { ahl fl tav lb_n l0 l1 rsp irv v0 { eds e0 } } 
							_cns { p0 l0 } ⊢ l0 
							_cns { p1 l1 } ⊢ l1 
							∎ { ahl fl tav lb_n l0 l1 rsp irv v0 { eds e0 } }
						∐. _nil◂{} . 
							$ _nil◂{} ⊢ l0
							$ _nil◂{} ⊢ l1 
							∎ { ahl fl tav lb_n l0 l1 rsp irv v0 { eds e0 } }
					@.ptn { ahl fl tav lb_n is rsp irv vs0 { eds e0 } }
						$ is ⊢ is,is0 
						$ is0 ⊢ 
						∐ RP.atm◂k . 
							$ k ⊢ 
							∐ ast.hp◂{ r0 h } . 
								$ _nil◂{} ⊢ dl 
								alc_vs vs0 ⊢ { vs0 rm0 } 
								brk_rsp_e { rsp rm0 e0 } ⊢ { rsp rm0 e0 } 
								$ h ⊢ h,h0
								reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
								reg { rsp rm0 } ⊢ { rsp rm0 srm0 brm0 }
								ast.hp { rm0 h0 } ⊢ p1 
								RP.atm p1 ⊢ p1 
								» _^ sr0 ⊢ sr0,s0 
									"\tmov rdi," 0' "\n" 
									push_c_regs 
									"\tmov r8,rdi\n" // 
								rp8.add_s8 { e0 s0 } ⊢ e0 
								hp { ahl fl tav lb_n h e0 } ⊢ { ahl fl tav lb_n e0 }
								» _^ srm0 ⊢ srm0,s0 
									pop_c_regs
									"\tmov " 0' ",rax\n" // 
								rp8.add_s8 { e0 s0 } ⊢ e0
								∎ { ahl fl tav lb_n is p1 rsp irv vs0 { eds e0 } } 
							∐ ast.hp_im◂v0 .
								$ is ⊢ is,id 
								∎ { ahl fl tav lb_n is id rsp irv vs0 { eds e0 } } 
							∐ ast.pt◂{ r0 r1 } . 
							» "clr A6" _ ⊢ ee0 
								_emt ee0 ⊢ _ 
								∎|
							∐. ast.stt_adt◂{ ia na pa0 } . 
								ptn { ahl fl tav lb_n pa0 rsp irv vs0 { eds e0 } } ⊢ { ahl fl tav lb_n pa0 id0 rsp irv vs0 { eds e0 } }
								ast.stt_adt { ia na id0 } ⊢ p1 
								RP.atm p1 ⊢ p1 
								∎ { ahl fl tav lb_n is p1 rsp irv vs0 { eds e0 } }
						∐. RP.rcd◂l0 . 
							ptn_lst { ahl fl tav lb_n l0 rsp irv vs0 { eds e0 } } ⊢ { ahl fl tav lb_n l0 l1 rsp irv vs0 { eds e0 } }
							RP.rcd l0 ⊢ p0 
							RP.rcd l1 ⊢ p1 
							∎ { ahl fl tav lb_n p0 p1 rsp irv vs0 { eds e0 } }						   					
				§ @.lp { v0 gfl fl evv tav lb_n rsp irv rl is dpl ppl { eg0 eds e0 } } 
					$ dpl ⊢ 
					∐ _cns◂{ d0 dpl } . 
						ptn { gfl fl tav lb_n is rsp irv v0 { eds e0 } } ⊢ { gfl fl tav lb_n is id rsp irv v0 { eds e0 } } 
						$ id ⊢ id,id0 
						ast.pnt.rt { evv id0 } ⊢ { evv sid }
						» _^ sid ⊢ sid,s0 
							"," 0' // 
						rp8.add_s8 { ppl s0 } ⊢ ppl
						$ _nil◂{} ⊢ dl 
						idx.crt_ptn { irv d0 id rl dl } ⊢ { irv rl dl } 
						dlt.f { gfl evv tav lb_n rsp dl { eg0 eds e0 } } ⊢ { gfl evv tav lb_n rsp { eg0 eds e0 } }
						lp { v0 gfl fl evv tav lb_n rsp irv rl is dpl ppl { eg0 eds e0 } } ⊢| 
					∐. _nil◂{} . 
						» "\n" _ ⊢ s0 
						rp8.add_s8 { ppl s0 } ⊢ ppl 
						rp8.cct { ppl e0 } ⊢ e0
						∎ { v0 gfl fl evv tav lb_n rsp irv rl is { eg0 eds e0 } }
						
				§ id { v0 gfl evv tav lb_n rsp irv sis is rl dpl } 
					∐ dpl ⊢ _cns◂{ d0 dpl } . 
						rp8.e {} ⊢ e0 
						rp8.e {} ⊢ eg0 
						rp8.e {} ⊢ eds 
						» _^ sis ⊢ sis,ppl 
							"; $ " 0' " ⊢ " 0' // 
						rp8.of_s8 ppl ⊢ ppl 
						$ _nil◂{} ⊢ dl 
				 		$ is ⊢ is,is0 
						idx.crt_ptn { irv d0 is0 rl dl } ⊢ { irv rl dl } 
						$ _nil◂{} ⊢ fl
						lp { v0 gfl fl evv tav lb_n rsp irv rl is dpl ppl { eg0 eds e0 } } ⊢ { v0 gfl fl evv tav lb_n rsp irv rl is { eg0 eds e0 } } 
						dlt.f { gfl evv tav lb_n rsp dl { eg0 eds e0 } } ⊢ { gfl evv tav lb_n rsp { eg0 eds e0 } }
						adt_lp { gfl fl tav lb_n { eds eg0 } } ⊢ { gfl tav lb_n { eds eg0 } }
						∎ { v0 gfl evv tav lb_n rsp irv sis is rl { eg0 eds e0 } }
					∐. . 
					» "id 0" _ ⊢ ee 
									_emt ee ⊢ ee 
						∎| 
				∎∎ 
			§§ arr 
				§ l1 { rsp evv a0 e0 }
					ast.r64_of_rt { evv a0 } ⊢ { evv x } 
					$ x ⊢ 
					∐ ast.im_of◂x0 .
						» _^ x0 ⊢ x0,s0
							"\tmov rdi," 0d' "\n" //
						rp8.add_s8 { e0 s0 } ⊢ e0
						∎ { rsp evv e0 }
					∐. ast.hp_of◂r1 . 
						reg { rsp r1 } ⊢ { rsp r1 sr1 br1 } 
						» _^ sr1 ⊢ sr1,s0
							"\tmov rdi," 0' "\n" //
						rp8.add_s8 { e0 s0 } ⊢ e0
						∎ { rsp evv e0 }
				§ mk_arr { gfl is sis irv evv tav tv_n tv yd lb_n rl rsp }
					rp8.e {} ⊢ e0 
					rp8.e {} ⊢ eg0 
					stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl vs1 }
					$ is ⊢ is,is0 
					stt_v.mk_rset { is0 vs1 } ⊢ vs1 
					∐ is ⊢ RP.rcd◂l0; l0 ⊢ _cns◂{ a0 l0 }; l0 ⊢ _cns◂{ a1 l0 }; l0 ⊢ _nil◂{}; a0 ⊢ RP.atm◂a0 . 
						» 0r _ ⊢ pv_n 
						$ _nil◂{} ⊢ al 
						rset.ini {} ⊢ vs0 
						alc_type_k.f { pv_n al tav tv_n tv vs0 yd } ⊢ { pv_n al tav tv_n tv vs0 pd0 }
						∐ pd0 ⊢ RP.rcd◂l0; l0 ⊢ _cns◂{ a2 l0 }; l0 ⊢ _cns◂{ a3 l0 }; l0 ⊢ _cns◂{ a4 l0 }; l0 ⊢ _nil◂{} .
							∐ a4 ⊢ RP.atm◂ap; ap ⊢ ast.hp◂{ r0 h0 }; h0 ⊢ ast.hp.ref◂q0; q0 ⊢ ast.hp.arr◂ha0 . 
								alc_vs vs1 ⊢ { vs1 rm0 } 
								alc_vs vs1 ⊢ { vs1 rm1 } 
								alc_vs vs1 ⊢ { vs1 rm2 } 
								$ ha0 ⊢ ha0,ha00 
								$ rm0 ⊢ rm0,rm00 
								stt_v.arr_reg { rm00 ha00 } ⊢ k0 
								$ a0 ⊢ a0,a00 
								RP.atm a00 ⊢ a00 
								$ a1 ⊢ a1,a1_0 
								$ RP.cns3◂{ a00 a1_0 k0 } ⊢ pd1 
								$ rm1 ⊢ rm1,rm10				
								$ ha0 ⊢ ha0,ha00 
								ast.hp { rm10 ha00 } ⊢ pt0 
								RP.atm pt0 ⊢ pt0
								brk_rsp_e { rsp rm2 e0 } ⊢ { rsp rm2 e0 } 
								RP.atm a0 ⊢ a0 
								l1 { rsp evv a0 e0 } ⊢ { rsp evv e0 }
								$ rsp ⊢ rsp,rsp0 
								inc_x lb_n ⊢ { lb2 lb_n } 
								inc_x lb_n ⊢ { lb3 lb_n }
								reg { rsp rm0 } ⊢ { rsp rm0 srm0 _ } 
								reg { rsp rm2 } ⊢ { rsp rm2 srm2 _ } 
								reg { rsp rm1 } ⊢ { rsp rm1 srm1 _ } 
								» _^ srm0,srm2,lb2,lb3 ⊢ srm0,srm2,lb2,lb3,s0 
									`	push rdi 
									`	lea rsi,[8+8*rdi]
									`	mov rdi,1 
									` C_CALL_SF calloc
									`	pop rdi 
									"\tmov " 0' ",rax\n" 
									`	mov QWORD [rax],rdi 
									"LB_" 2d' ":\n" 
									`	cmp rdi,0 
									"\tjz LB_" 3d' "\n" 
									`	sub rdi,1
									"\tmov " 1' ",rdi\n" 
									//
								rp8.add_s8 { e0 s0 } ⊢ e0 
								$ _nil◂{} ⊢ fl
								rp8.e {} ⊢ eds 
								rpc.ptn { gfl fl tav lb_n a1 rsp irv vs1 { eds e0 } } ⊢ { gfl fl tav lb_n a1 p1 rsp irv vs1 { eds e0 } }					
								rpc.adt_lp { gfl fl tav lb_n { eds eg0 } } ⊢ { gfl tav lb_n { eds eg0 } }
								mov_ptn2.f2 { { evv tav } rsp vs1 p1 pt0 e0 } ⊢ { { evv tav } rsp vs1 e0 }
								set_rsp { rsp rsp0 e0 } ⊢ { rsp e0 } 
								» _^ srm0,srm1,srm2,lb2,lb3 ⊢ srm0,srm1,srm2,lb2,lb3,sc2	
									"\tmov rsi," 0' "\n" 
									"\tmov rax," 1' "\n" 
									"\tmov rdi," 2' "\n" 
									`	mov QWORD [rsi+8+8*rdi],rax 
									"\tjmp LB_" 3d' "\n" 
									"LB_" 4d' ":\n"
									//	
								rp8.add_s8 { e0 sc2 } ⊢ e0				
								∎ { gfl irv evv tav tv_n tv lb_n rl rsp { eds eg0 e0 } pd1 }
							∐. .
								» "mk_arr 0" _ ⊢ ee 
								_emt ee ⊢ ee 
								∎| 
						∐. . 
						» "mk_arr 0" _ ⊢ ee 
									_emt ee ⊢ ee 
							∎| 
					∐. . 
						» "mk_arr 0" _ ⊢ ee 
							_emt ee ⊢ ee 
							∎| 
			
				§ exc { h } 
					» "ret_f D660" _ ⊢ ee0 
									_emt ee0 ⊢ _ 
					∎| 
				§ arr_of_lst { is sis irv evv tav tv_n tv yd lb_n rl rsp }
					rp8.e {} ⊢ e0 
					» 0r _ ⊢ pv_n 
					$ _nil◂{} ⊢ al 
					alc_type_k.hp { pv_n al tav tv_n tv yd } ⊢ { pv_n al tav tv_n tv hd } 
					stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl vs0 } 
					$ is ⊢ is,is0 
					stt_v.mk_rset { is0 vs0 } ⊢ vs0 
					∐ is ⊢ RP.atm◂a0; a0 ⊢ ast.stt_adt◂{ ia na p0 } . 
						∐ ia'=1r; p0 ⊢ RP.rcd◂l0; l0 ⊢ _nil◂{} . 
							alc_vs vs0 ⊢ { vs0 rm0 } 
							brk_rsp { rsp rm0 } ⊢ { rsp rm0 sb0 } 
							rp8.add_s8 { e0 sb0 } ⊢ e0 
							reg { rsp rm0 } ⊢ { rsp rm0 srm0 brm0 } 
							» _^ srm0 ⊢ srm0,s0 
								`	xor rax,rax 
								`	mov rdi,1 
								`	mov rsi,8 
								`	C_CALL_SF calloc
								"\tmov " 0' ",rax\n" // 
							rp8.add_s8 { e0 s0 } ⊢ e0
							ast.hp { rm0 hd } ⊢ a0 
							RP.atm a0 ⊢ is1 
							∎ { irv evv tav tv_n tv lb_n rl rsp e0 is1 }	
						∐ hd ⊢ ast.hp.ref◂q0; q0 ⊢ ast.hp.arr◂ha0 . 
							$ ha0 ⊢ ha0,ha00 
							alc_vs vs0 ⊢ { vs0 rm0 } 
							$ rm0 ⊢ rm0,rm00 
							$ RP.atm◂ast.hp◂{ %rm00 ast.hp.adt◂{ %[ TX.id.lst ] _cns◂{ %ha00 _nil◂{} } } } ⊢ p1
							mov_ptn2.f2 { { evv tav } rsp vs0 p0 p1 e0 } ⊢ { { evv tav } rsp vs0 e0 } 
							reg { rsp rm0 } ⊢ { rsp rm0 srm0 brm0 }
							» _^ srm0 ⊢ srm0,s0 
								"\tmov rdi," 0' "\n" 
								`	CALL_SF arr_of_lst 
								"\tmov " 0' ",rax\n" //
							rp8.add_s8 { e0 s0 } ⊢ e0 
							$ RP.atm◂ast.hp◂{ %rm0 ast.hp.ref◂ast.hp.arr◂%ha0 } ⊢ is1 
							∎ { irv evv tav tv_n tv lb_n rl rsp e0 is1 }
						∐. . 							
							» "arr_of_lst d0" _ ⊢ ee0 
							_emt ee0 ⊢ _ 
							_emt sis ⊢ _ 
							∎| 
					∐ is ⊢ RP.atm◂a0; a0 ⊢ ast.hp◂{ r0 h0 }; h0 ⊢ ast.hp.adt◂{ ax0 hl0 } . 
						reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
						» _^ sr0 ⊢ sr0,s0 
							"\tmov rdi," 0' "\n" 
							`	CALL_SF arr_of_lst 
							"\tmov " 0' ",rax\n" //
						rp8.add_s8 { e0 s0 } ⊢ e0
						ast.hp { r0 hd } ⊢ a0 
						RP.atm a0 ⊢ is1 
						∎ { irv evv tav tv_n tv lb_n rl rsp e0 is1 }	
					∐. . 
					» "arr_of_lst d1" _ ⊢ ee0 
							_emt ee0 ⊢ _ 
						_emt sis ⊢ _ 
						∎| 
				 
				∎∎ 
			\[
			§§ eq 
				∎∎
			§§ spc 
				§ mk { h } 
					∎| 
				§ alp { h }
					∎| 
				§ frp { h } 
					∎|  
				§ ldp { h } 
					∎|  
				§ xcp { h } 
					∎| 
				∎∎
			\]
			§§ lc_code 
				§§ rep_movsb
					§ 
						@.f { sip0 ip0 lb_n rsp evv irv rl e0 } 
							stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl v0 }  	
							$ ip0 ⊢ ip0,is0 
							stt_v.mk_rset { is0 v0 } ⊢ v0
							∐ ip0 ⊢ RP.rcd◂l0; l0 ⊢ _cns◂{ a0 l0 }; l0 ⊢ _cns◂{ a1 l0 }; l0 ⊢ _cns◂{ a2 l0 }; l0 ⊢ _cns◂{ a3 l0 }; l0 ⊢ _cns◂{ a4 l0 };l0 ⊢ _nil◂{} . 
								ast.r64_of_rt { evv a0 } ⊢ { evv c0 } 
								ast.s8_of_rt { evv a1 } ⊢ { evv s0 } 
								ast.r64_of_rt { evv a2 } ⊢ { evv o0 } 
								ast.s8_of_rt { evv a3 } ⊢ { evv s1 } 
								ast.r64_of_rt { evv a4 } ⊢ { evv o1 } 
								f_c0 { c0 lb_n rsp rl e0 } ⊢ { lb_n rsp rl e0 c0 }
								f_s0 { s0 lb_n rsp rl e0 } ⊢ { lb_n rsp rl e0 s0 }
								f_o0 { o0 lb_n rsp rl e0 } ⊢ { lb_n rsp rl e0 o0 }
								f_s1 { v0 s1 lb_n rsp irv rl e0 } ⊢ { v0 lb_n rsp irv rl e0 s1 } 
								f_o1 { o1 lb_n rsp rl e0 } ⊢ { lb_n rsp rl e0 o1 }
								$ RP.cns5◂{ c0 s0 o0 s1 o1 } ⊢ p1 
								» _^ _ ⊢ sc0 
									`	mov rsi,QWORD [REP_MOVSB_VCT]
									##`	pop rsi 
									`	push rcx 
									`	mov rcx,rax 
									`	cld 
									`	rep movsb
									`	pop rcx 
									// 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								∎ { lb_n rsp evv irv rl e0 p1 }
							∐. . 
								∎| 
						@.f_c0 { c0 lb_n rsp rl e0 } 
							$ c0 ⊢ 
							∐ ast.im_of◂c0 . 
								mov.rax_im { c0 e0 } ⊢ { c0 e0 } 
								stt_v.r64_im c0 ⊢ p1 
								∎ { lb_n rsp rl e0 p1 }
							∐. ast.hp_of◂r0 . 
								mov.rax_idx { rsp r0 e0 } ⊢ { rsp r0 e0 }
								$ stt_v.r64_reg◂r0 ⊢ p1 
								∎ { lb_n rsp rl e0 p1 }
						@.f_s0 { s0 lb_n rsp rl e0 } 
							$ s0 ⊢ 
							∐ ast.im_of◂s0 . 
								_s8_len s0 ⊢ { s0 ls0 } 
								inc_x lb_n ⊢ { lb0 lb_n } 
								inc_x lb_n ⊢ { lb1 lb_n }  
								» 0r _ ⊢ x0 
								mk_db { s0 x0 } ⊢ { s0 x0 ss0 }
								» _^ lb0,lb1,ss0,ls0 ⊢ lb0,lb1,ss0,ls0,sc0 
									"\tjmp LB_" 0d' "\n"
									"\tLB_ " 1d' ": db " 2' "\n" 
									"LB_" 0d' ":\n" 
									"\tmov rsi,LB_" 1d' "\n" 
									"\tmov rdi," 3d' "\n"
									"\tsub rdi,rax\n" // 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								stt_v.s8_im s0 ⊢ p1 
								∎ { lb_n rsp rl e0 p1 }
							∐. ast.hp_of◂r0 . 
								reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
								» _^ sr0 ⊢ sr0,sc0 
									"\tmov rsi," 0' "\n" 
									"\tmov rdi,0x0000_ffff_ffff_ffff\n"
									"\tand rdi,[rsi]\n"
									"\tsub rdi,rax\n" 
									"\tadd rsi,8\n" // 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								stt_v.s8_reg r0 ⊢ p1 
								∎ { lb_n rsp rl e0 p1 }  
						@.f_o0 { o0 lb_n rsp rl e0 } 
							$ o0 ⊢ 
							∐ ast.im_of◂o0 . 
								» _^ o0 ⊢ o0,sc0 
									"\tcmp rdi," 0d' "\n" 
									"\tjl err_bc\n"
									"\tadd rsi," 0d' "\n" 
									`	mov QWORD [REP_MOVSB_VCT],rsi 
									##`	push rsi 
									// 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								stt_v.r64_im o0 ⊢ p1
								∎ { lb_n rsp rl e0 p1 } 
							∐. ast.hp_of◂r0 . 
								reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
								» _^ sr0 ⊢ sr0,sc0 
									"\tcmp rdi," 0' "\n" 
									"\tjl err_bc\n"
									"\tadd rsi," 0' "\n"
									##`	push rsi 
									`	mov QWORD [REP_MOVSB_VCT],rsi 
									// 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								$ stt_v.r64_reg◂r0 ⊢ p1
								∎ { lb_n rsp rl e0 p1 } 
						@.f_s1 { v0 s1 lb_n rsp irv rl e0 } 
							$ s1 ⊢ 
							∐ ast.im_of◂s1 . 
								_s8_len s1 ⊢ { s1 ls1 } 
								alc_vs v0 ⊢ { v0 rm0 } 
								brk_rsp_e { rsp rm0 e0 } ⊢ { rsp rm0 e0 } 
								reg { rsp rm0 } ⊢ { rsp rm0 srm0 brm0 } 
								$ rm0 ⊢ rm0,rm00 
								» _^ _ ⊢ sc0 
									"\tmov QWORD [REP_MOVSB_VCT+8],rax\n" // 
								rp8.add_s8 { e0 sc0 } ⊢ e0 
								mk_s8 s1 ⊢ { s1 es1 }
								rp8.cct { e0 es1 } ⊢ e0 
								» _^ srm0,ls1 ⊢ srm0,ls1,sc0 
									"\tmov " 0' ",rax\n" 
									`	lea rsi,[rax+8]
									`	mov rax,QWORD [REP_MOVSB_VCT+8]
									"\tmov rdi," 1d' "\n"
									`	sub rdi,rax
									// 
								rp8.add_s8 { e0 sc0 } ⊢ e0 
								stt_v.s8_reg rm00 ⊢ p1 
								∎ { v0 lb_n rsp irv rl e0 p1 }
							∐. ast.hp_of◂r0 . 
								reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
								» _^ sr0 ⊢ sr0,s0 
									"\tmov rsi," 0' "\n" 
									"\tmov rdi,0x0000_ffff_ffff_ffff\n"
									"\tand rdi,[rsi]\n"
									`	add rsi,8 
									`	sub rdi,rax 
									// 
								rp8.add_s8 { e0 s0 } ⊢ e0
								stt_v.s8_reg r0 ⊢ p1 
								∎ { v0 lb_n rsp irv rl e0 p1 }  
						@.f_o1 { o1 lb_n rsp rl e0 } 
							$ o1 ⊢ 
							∐ ast.im_of◂o1 . 
								» _^ o1 ⊢ o1,sc0 
									"\tcmp rdi," 0d' "\n" 
									"\tjl err_bc\n"
									"\tadd rsi," 0d' "\n"
									`	mov rdi,rsi
									// 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								stt_v.r64_im o1 ⊢ p1 
								∎ { lb_n rsp rl e0 p1 } 
							∐. ast.hp_of◂r0 . 
								reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
								» _^ sr0 ⊢ sr0,sc0 
									"\tcmp rdi," 0' "\n" 
									"\tjl err_bc\n"
									"\tadd rsi," 0' "\n" 
									`	mov rdi,rsi 
									// 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								$ stt_v.r64_reg◂r0 ⊢ p1 
								∎ { lb_n rsp rl e0 p1 } 
					∎∎
					§§ sts 
						§ 
						@.f { sip0 ip0 lb_n rsp evv irv rl e0 } 
							stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl v0 } 
							$ ip0 ⊢ ip0,is0 
							stt_v.mk_rset { is0 v0 } ⊢ v0
							∐ ip0 ⊢ RP.rcd◂l0; l0 ⊢ _cns◂{ a0 l0 }; l0 ⊢ _cns◂{ a1 l0 }; l0 ⊢ _cns◂{ a2 l0 }; l0 ⊢ _nil◂{} . 
								ast.s8_of_rt { evv a0 } ⊢ { evv s0 } 
								ast.r64_of_rt { evv a1 } ⊢ { evv o0 } 
								ast.r64_of_rt { evv a2 } ⊢ { evv c0 } 
								f_s0 { v0 s0 lb_n rsp irv rl e0 } ⊢ { v0 lb_n rsp irv rl e0 s0 } 
								f_o0 { o0 lb_n rsp rl e0 } ⊢ { lb_n rsp rl e0 o0 }
								f_c0 { c0 lb_n rsp rl e0 } ⊢ { lb_n rsp rl e0 c0 }
								$ RP.cns3◂{ s0 o0 c0 } ⊢ p1 
								∎ { lb_n rsp evv irv rl e0 p1 }
							∐. . 
								∎| 
						@.f_s0 { v0 s0 lb_n rsp irv rl e0 } 
							$ s0 ⊢ 
							∐ ast.im_of◂s0 . 
								_s8_len s0 ⊢ { s0 ls0 }  
								alc_vs v0 ⊢ { v0 rm0 } 
								brk_rsp_e { rsp rm0 e0 } ⊢ { rsp rm0 e0 } 
								reg { rsp rm0 } ⊢ { rsp rm0 srm0 brm0 } 
								$ rm0 ⊢ rm0,rm00 
								mk_s8 s0 ⊢ { s0 es0 }
								rp8.cct { e0 es0 } ⊢ e0 
								» _^ srm0,ls0 ⊢ srm0,ls0,sc0 
									"\tmov " 0' ",rax\n" 
									"\tmov rdi," 1d' "\n" // 
								rp8.add_s8 { e0 sc0 } ⊢ e0 
								stt_v.s8_reg rm00 ⊢ p1 
								∎ { v0 lb_n rsp irv rl e0 p1 }
							∐. ast.hp_of◂r0 . 
								reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
								» _^ sr0 ⊢ sr0,s0 
									"\tmov rax," 0' "\n" 
									"\tmov rdi,0x0000_ffff_ffff_ffff\n"
									"\tand rdi,[rax]\n" // 
								rp8.add_s8 { e0 s0 } ⊢ e0
								stt_v.s8_reg r0 ⊢ p1 
								∎ { v0 lb_n rsp irv rl e0 p1 }  
						@.f_o0 { o0 lb_n rsp rl e0 } 
							$ o0 ⊢ 
							∐ ast.im_of◂o0 . 
								» _^ o0 ⊢ o0,sc0 
									"\tcmp rdi," 0d' "\n" 
									"\tjle err_bc\n"
									"\tmov rsi," 0d' "\n" 
									// 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								stt_v.r64_im o0 ⊢ p1 
								∎ { lb_n rsp rl e0 p1 } 
							∐. ast.hp_of◂r0 . 
								reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
								» _^ sr0 ⊢ sr0,sc0 
									"\tcmp rdi," 0' "\n" 
									"\tjle err_bc\n"
									"\tmov rsi," 0' "\n"
									// 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								$ stt_v.r64_reg◂r0 ⊢ p1 
								∎ { lb_n rsp rl e0 p1 } 
						@.f_c0 { c0 lb_n rsp rl e0 } 
							$ c0 ⊢ 
							∐ ast.im_of◂c0 . 
								» _^ c0 ⊢ c0,sc0 
									"\tmov BYTE [rax+8+rsi]," 0d' "\n" 
									// 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								stt_v.r64_im c0 ⊢ p1 
								∎ { lb_n rsp rl e0 p1 } 
							∐. ast.hp_of◂r0 . 
								reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
								» _^ sr0 ⊢ sr0,sc0 
									"\tmov rdi," 0' "\n" 
									"\tmov BYTE [rax+8+rsi],dil\n" // 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								$ stt_v.r64_reg◂r0 ⊢ p1 
								∎ { lb_n rsp rl e0 p1 }   
					∎∎
				§§ exp_s8 
					§ @.lp0 { ep0 evv v0 i irv rl sl dl dll } 
						∐ sl ⊢ _cns◂{ s sl }; dl ⊢ _cns◂{ d dl } .
							idx.csm { { evv irv rl } s } ⊢ { { evv irv rl } ip } 
							$ ip ⊢ ip,ip0
							idx.crt { irv d ip0 rl dll } ⊢ { irv rl dll }
							$ ip ⊢ ip,ip0 
							» "," _ ⊢ sc0 
							rp8.add_s8 { ep0 sc0 } ⊢ ep0 
							ast.pnt.rt { evv ip0 } ⊢ { evv sp0 } 
							rp8.add_s8 { ep0 sp0 } ⊢ ep0 
							_inc i ⊢ i 
							lp0 { ep0 evv v0 i irv rl sl dl dll } ⊢ { ep0 evv v0 i irv rl dll ar rr } 
							_dec i ⊢ i 
							set_tv { ar i ip } ⊢ { ar i } 
							∎ { ep0 evv v0 i irv rl dll ar rr } 
						∐ sl ⊢ _nil◂{}; dl ⊢ _cns◂{ d dl }; dl ⊢ _nil◂{} .  
							alc_vs v0 ⊢ { v0 rr } 
							$ rr ⊢ rr,rr0 
							idx.crt { irv d RP.atm◂ast.hp◂{ rr0 ast.hp.ref◂ast.hp.opq◂{} } rl dll } ⊢ { irv rl dll }
							ini_tv_n i ⊢ { i ar }
							∎ { ep0 evv v0 i irv rl dll ar rr }
						∐. . 
							» "exp_s8 0" _ ⊢ ee 
							_emt ee ⊢ ee 
							∎| 
					§ 
						@.ip2 { evv l e0 } 
							$ l ⊢ 
							∐ _cns◂{ p1 l } . 
								∐ p1 ⊢ ast.exp_s8_cst◂s1 . 
									ast.s8_of_k { evv s1 } ⊢ { evv s1 } 
									rp8.add_s8 { e0 s1 } ⊢ e0 
									ip2 { evv l e0 } ⊢| 
								∐. . 
									rp8.to_s8 e0 ⊢ s0
									ast.k_s8 s0 ⊢ s0 
									ast.exp_s8_cst s0 ⊢ p0 
									ip0 { evv l } ⊢ { evv l } 
									_cns { p1 l } ⊢ l 
									_cns { p0 l } ⊢ l 
									∎ { evv l } 
							∐. _nil◂{} . 
								rp8.to_s8 e0 ⊢ s0
								ast.k_s8 s0 ⊢ s0 
								ast.exp_s8_cst s0 ⊢ p0 
								$ _nil◂{} ⊢ l 
								_cns { p0 l } ⊢ l 
								∎ { evv l }
						@.ip0 { evv l }  
							$ l ⊢ 
							∐ _cns◂{ p0 l } . 
								∐ p0 ⊢ ast.exp_s8_cst◂s0 . 
									ast.s8_of_k { evv s0 } ⊢ { evv s0 } 
									rp8.of_s8 s0 ⊢ e0 
									ip2 { evv l e0 } ⊢| 
								∐. . 
									ip0 { evv l } ⊢ { evv l } 
									_cns { p0 l } ⊢ l 
									∎ { evv l }
							∐. _nil◂{} . 
								$ _nil◂{} ⊢ l 
								∎ { evv l } 
					§ 
						@.s8 { v_n evv { eds e0 } ld lb_n rsp irv rl ar s0 rr pl }
							_s8_len s0 ⊢ { s0 l0 } 
							_add { ld l0 } ⊢ { ld l0 } 
							lp1 { v_n evv { eds e0 } ld lb_n rsp irv rl ar rr pl } ⊢ { v_n evv { eds e0 } ld lb_n rsp irv rl ar }
							_sub { ld l0 } ⊢ { ld l0 }
							inc_x lb_n ⊢ { lb0 lb_n }  
							data_s8 { eds lb0 s0 } ⊢ { eds lb0 s0 }
							» _^ lb0,l0 ⊢ lb0,l0,sr 
								"\tlea rsi,[LB_" 0d' "+" 1d' "-1]\n" 
								"\tmov rcx," 1d' "\n" 
								`	rep movsb
								//
							rp8.add_s8 { e0 sr } ⊢ e0 
							∎ { v_n evv { eds e0 } ld lb_n rsp irv rl ar }
						@.d { v_n evv { eds e0 } ld lb_n rsp irv rl ar x0 rr pl }
							» _^ x0 ⊢ x0,s0 
								0d' // 
							s8 { v_n evv { eds e0 } ld lb_n rsp irv rl ar s0 rr pl } ⊢| 
						@.s8_for { v_n evv { eds e0 } ld lb_n rsp irv rl ar x0 s0 rr pl }
							_s8_len s0 ⊢ { s0 l0 } 
							$ l0 ⊢ l0,l00 
							_imul { l00 x0 } ⊢ { l00 x0 }
							_add { ld l00 } ⊢ { ld l00 } 
							lp1 { v_n evv { eds e0 } ld lb_n rsp irv rl ar rr pl } ⊢ { v_n evv { eds e0 } ld lb_n rsp irv rl ar }
							_sub { ld l00 } ⊢ { ld l00 }
							inc_x lb_n ⊢ { lb1 lb_n }  
							data_s8 { eds lb1 s0 } ⊢ { eds lb1 s0 } 
							inc_x lb_n ⊢ { lb2 lb_n }
							inc_x lb_n ⊢ { lb3 lb_n }
							» _^ lb1,l0,x0,lb2,lb3 ⊢ lb1,l0,x0,lb2,lb3,sr 
								"\tmov rax," 2d' "\n" 
								"LB_" 3d' ":\n"
								`	cmp rax,0
								"\tjz LB_" 4d' "\n" 
								`	sub rax,1
								"\tlea rsi,[LB_" 0d' "+" 1d' "-1]\n" 
								"\tmov rcx," 1d' "\n" 
								`	rep movsb 
								"\tjmp LB_" 3d' "\n" 
								"LB_" 4d' ":\n"
								//
							rp8.add_s8 { e0 sr } ⊢ e0 
							∎ { v_n evv { eds e0 } ld lb_n rsp irv rl ar } 
						@.lp1 { v_n evv { eds e0 } ld lb_n rsp irv rl ar rr pl }
						$ pl ⊢ 
						∐ _cns◂{ ps pl } . 
							$ ps ⊢ 
							∐ ast.exp_s8_cst◂c0 . 
								ast.s8_of_k { evv c0 } ⊢ { evv s0 } 
								mk_esc_s8 s0 ⊢ { s0 ss0 } 
								» _^ ss0 ⊢ _,sc0 
									"; \"" 0' "\"\n" // 
								rp8.add_s8 { e0 sc0 } ⊢ e0 
								s8 { v_n evv { eds e0 } ld lb_n rsp irv rl ar s0 rr pl } ⊢|									
							∐ ast.exp_s8_idx◂{ f0 j0 } . 
								» _^ j0 ⊢ j0,sc0 
									"; " 0d' "'\n" // 
								rp8.add_s8 { e0 sc0 } ⊢ e0 
								lod_tv { ar j0 } ⊢ { ar j0 p0 }
								$ f0 ⊢ 
								∐ ast.fmt_s◂{} . 
									ast.s8_of_rt { evv p0 } ⊢ { evv s0 } 
									$ s0 ⊢ 
									∐ ast.im_of◂s0 . 
										s8 { v_n evv { eds e0 } ld lb_n rsp irv rl ar s0 rr pl } ⊢|									
									∐. ast.hp_of◂r0 . 
										∐ r0'=reg_idx.rcx . 
											» _^ v_n ⊢ v_n,s1 
												`	mov rax,0x0000_ffff_ffff_ffff 
												`	and rax,[rcx] 
												`	add rdi,rax 
												"\tmov QWORD [EXP_S8_VCT+" 0d' "],rax\n" // 
											rp8.add_s8 { e0 s1 } ⊢ e0
											incq v_n ⊢ v_n 
											##_inc rsp ⊢ rsp
											lp1 { v_n evv { eds e0 } ld lb_n rsp irv rl ar rr pl } ⊢ { v_n evv { eds e0 } ld lb_n rsp irv rl ar }
											##_dec rsp ⊢ rsp 
											decq v_n ⊢ v_n 
											» _^ v_n ⊢ v_n,sr 
												`	mov rsi,QWORD [tmp]
												"\tmov rcx,QWORD [EXP_S8_VCT+" 0d' "]\n"  
												`	lea rsi,[rsi+7+rcx]
												`	rep movsb
												//
											rp8.add_s8 { e0 sr } ⊢ e0 
											∎ { v_n evv { eds e0 } ld lb_n rsp irv rl ar } 	
										∐. . 
											reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
											∐ br0 ⊢ bl.t◂{} . 
												» _^ sr0,v_n ⊢ sr0,v_n,s1 
													`	mov rax,0x0000_ffff_ffff_ffff 
													"\tand rax,[" 0' "]\n"  
													`	add rdi,rax 
													"\tmov QWORD [EXP_S8_VCT+" 1d' "],rax\n" // 
												rp8.add_s8 { e0 s1 } ⊢ e0
												incq v_n ⊢ v_n 
												##_inc rsp ⊢ rsp
												lp1 { v_n evv { eds e0 } ld lb_n rsp irv rl ar rr pl } ⊢ { v_n evv { eds e0 } ld lb_n rsp irv rl ar }
												##_dec rsp ⊢ rsp 
												decq v_n ⊢ v_n 
												» _^ sr0,v_n ⊢ sr0,v_n,sr 
													"\tmov rcx,QWORD [EXP_S8_VCT+" 1d' "]\n"
													"\tlea rsi,[" 0' "+7+rcx]\n" 
													`	rep movsb
													//
												rp8.add_s8 { e0 sr } ⊢ e0 
												∎ { v_n evv { eds e0 } ld lb_n rsp irv rl ar } 
											∐. . 
												» _^ sr0,v_n ⊢ sr0,v_n,s1 
													"\tmov rsi," 0' "\n" 
													`	mov rax,0x0000_ffff_ffff_ffff 
													`	and rax,[rsi] 
													`	add rdi,rax 
													"\tmov QWORD [EXP_S8_VCT+" 1d' "],rax\n" // 
												rp8.add_s8 { e0 s1 } ⊢ e0
												##_inc rsp ⊢ rsp
												incq v_n ⊢ v_n 
												lp1 { v_n evv { eds e0 } ld lb_n rsp irv rl ar rr pl } ⊢ { v_n evv { eds e0 } ld lb_n rsp irv rl ar }
												##_dec rsp ⊢ rsp 
												decq v_n ⊢ v_n 
												» _^ sr0,v_n ⊢ sr0,v_n,sr 
													"\tmov rsi," 0' "\n"  
													"\tmov rcx,QWORD [EXP_S8_VCT+" 1d' "]\n" 
													`	lea rsi,[rsi+7+rcx]
													`	rep movsb
													//
												rp8.add_s8 { e0 sr } ⊢ e0 
												∎ { v_n evv { eds e0 } ld lb_n rsp irv rl ar } 					
								∐ ast.fmt_d◂{} .
									ast.r64_of_rt { evv p0 } ⊢ { evv x0 } 
									$ x0 ⊢ 
									∐ ast.im_of◂x0 . 
										d { v_n evv { eds e0 } ld lb_n rsp irv rl ar x0 rr pl } ⊢|									
									∐. ast.hp_of◂r0 . 
										reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
										» _^ sr0,v_n ⊢ sr0,v_n,s1 
											"\tmov rax," 0' "\n" 
											push_c_regs 
											`	push rdi 
											"\tlea QWORD rdi,[EXP_S8_VCT+" 1d' "]\n" 
											"\tmov rdx,rax\n" 
											`	mov rsi,fmt_d
											` xor rax,rax
											`	C_CALL sprintf
											`	pop rdi
											pop_c_regs 
											`	add rdi,rax 
											"\tmov QWORD [EXP_S8_VCT+128+" 1d' "],rax\n" 
											// 
										rp8.add_s8 { e0 s1 } ⊢ e0
										##_inc rsp ⊢ rsp 
										» 136r _ ⊢ w0 
										_add { v_n w0 } ⊢ { v_n w0 }
										lp1 { v_n evv { eds e0 } ld lb_n rsp irv rl ar rr pl } ⊢ { v_n evv { eds e0 } ld lb_n rsp irv rl ar }
										_sub { v_n w0 } ⊢ { v_n w0 }
										» _^ v_n ⊢ v_n,sr 
											"\tmov rcx,QWORD [EXP_S8_VCT+128+" 0d' "]\n" 
											"\tlea rsi, [EXP_S8_VCT+" 0d' "+rcx-1]\n" 
											`	rep movsb
											//
										rp8.add_s8 { e0 sr } ⊢ e0 
										∎ { v_n evv { eds e0 } ld lb_n rsp irv rl ar } 	 
								∐ ast.fmt_x◂{} .
									ast.r64_of_rt { evv p0 } ⊢ { evv x0 } 
									$ x0 ⊢ 
									∐ ast.im_of◂x0 . 
										d { v_n evv { eds e0 } ld lb_n rsp irv rl ar x0 rr pl } ⊢|									
									∐. ast.hp_of◂r0 . 
										reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
										» _^ sr0,v_n ⊢ sr0,v_n,s1 
											"\tmov rax," 0' "\n" 
											push_c_regs 
											`	push rdi 
											"\tlea QWORD rdi,[EXP_S8_VCT+" 1d' "]\n" 
											"\tmov rdx,rax\n" 
											`	mov rsi,fmt_d
											` xor rax,rax
											`	C_CALL sprintf
											`	pop rdi
											pop_c_regs 
											`	add rdi,rax 
											"\tmov QWORD [EXP_S8_VCT+128+" 1d' "],rax\n" 
											// 
										rp8.add_s8 { e0 s1 } ⊢ e0
										» 136r _ ⊢ w0 
										_add { v_n w0 } ⊢ { v_n w0 }
										lp1 { v_n evv { eds e0 } ld lb_n rsp irv rl ar rr pl } ⊢ { v_n evv { eds e0 } ld lb_n rsp irv rl ar }
										_sub { v_n w0 } ⊢ { v_n w0 }
										» _^ v_n ⊢ v_n,sr 
											"\tmov rcx,QWORD [EXP_S8_VCT+128+" 0d' "]\n" 
											"\tlea rsi, [EXP_S8_VCT+" 0d' "+rcx-1]\n" 
											`	rep movsb
											//
										rp8.add_s8 { e0 sr } ⊢ e0 
										∎ { v_n evv { eds e0 } ld lb_n rsp irv rl ar } 	
								∐. ast.fmt_p◂{} .
									∎| 
							∐. ast.exp_s8_for◂{ j0 s0 } . 
								ast.s8_of_k { evv s0 } ⊢ { evv s0 } 
								mk_esc_s8 s0 ⊢ { s0 ss0 } 
								» _^ j0,ss0 ⊢ j0,_,sc0 
									"; " 0d' "'*\"" 1' "\"\n" // 
								rp8.add_s8 { e0 sc0 } ⊢ e0 
								lod_tv { ar j0 } ⊢ { ar j0 p0 }
								ast.r64_of_rt { evv p0 } ⊢ { evv x0 } 
								$ x0 ⊢ 
								∐ ast.im_of◂x0 . 
									s8_for { v_n evv { eds e0 } ld lb_n rsp irv rl ar x0 s0 rr pl } ⊢|									
								∐. ast.hp_of◂r0 . 
									_s8_len s0 ⊢ { s0 l0 } 
									reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
									» _^ sr0,l0,v_n ⊢ sr0,l0,v_n,s1 
										"\tmov rsi," 0' "\n" 
										"\tmov QWORD [EXP_S8_VCT+" 2d' "],rsi\n" 
										"\timul rsi," 1d' "\n" 
										`	add rdi,rsi 
										// 
									rp8.add_s8 { e0 s1 } ⊢ e0
									incq v_n ⊢ v_n 
									lp1 { v_n evv { eds e0 } ld lb_n rsp irv rl ar rr pl } ⊢ { v_n evv { eds e0 } ld lb_n rsp irv rl ar }
									decq v_n ⊢ v_n 
									inc_x lb_n ⊢ { lb1 lb_n }  
									data_s8 { eds lb1 s0 } ⊢ { eds lb1 s0 } 
									inc_x lb_n ⊢ { lb2 lb_n }
									inc_x lb_n ⊢ { lb3 lb_n }
									» _^ lb1,l0,lb2,lb3,v_n ⊢ lb1,l0,lb2,lb3,v_n,sr 
										"\tmov rax,QWORD [EXP_S8_VCT+" 4d' "]\n" 
										"LB_" 2d' ":\n"
										`	cmp rax,0
										"\tjz LB_" 3d' "\n"
										`	sub rax,1
										"\tlea rsi,[LB_" 0d' "+" 1d' "-1]\n" 
										"\tmov rcx," 1d' "\n" 
										`	rep movsb 
										"\tjmp LB_" 2d' "\n" 
										"LB_" 3d' ":\n" 
										//
									rp8.add_s8 { e0 sr } ⊢ e0 
									∎ { v_n evv { eds e0 } ld lb_n rsp irv rl ar } 	 
						∐. _nil◂{} . 
							reg { rsp rr } ⊢ { rsp rr srr brr }
							» _^ ld,srr ⊢ ld,srr,s1 
								"\tadd rdi," 0d' "\n" 
								`	push rdi 
								`	call mlc_s8
								`	pop rdi
								"\tmov " 1' ",rax\n" 
								`	lea rdi,[rax+7+rdi]
								`	std 
								`	mov QWORD [tmp],rcx 
								//
							rp8.add_s8 { e0 s1 } ⊢ e0 
							∎ { v_n evv { eds e0 } ld lb_n rsp irv rl ar }
					§ f { gfl evv tav lb_n rsp irv rl sl dl pl { eg0 eds e0 } }
						ip0 { evv pl } ⊢ { evv pl } 
						» 0r _ ⊢ i 
						$ _nil◂{} ⊢ dll 
						stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl v0 } 
						rp8.e {} ⊢ ep0 
						lp0 { ep0 evv v0 i irv rl sl dl dll } ⊢ { ep0 evv v0 i irv rl dll ar rr }
						» "; ^ " _ ⊢ sc0 
						rp8.add_s8 { e0 sc0 } ⊢ e0 
						rp8.cct { e0 ep0 } ⊢ e0 
						» " ⊢ ..\n" _ ⊢ sc0 
						rp8.add_s8 { e0 sc0 } ⊢ e0 
						brk_rsp_e { rsp rr e0 } ⊢ { rsp rr e0 } 
						» 0r _ ⊢ ld 
						» "\tmov rdi,0\n" _ ⊢ se0 
						rp8.add_s8 { e0 se0 } ⊢ e0 
						» 0r _ ⊢ v_n 
						lp1 { v_n evv { eds e0 } ld lb_n rsp irv rl ar rr pl } ⊢ { v_n evv { eds e0 } ld lb_n rsp irv rl ar }
						» _^ _ ⊢ se0 
							`	mov rcx,QWORD [tmp] 
							//
						rp8.add_s8 { e0 se0 } ⊢ e0 
						dlt.f { gfl evv tav lb_n rsp dll { eg0 eds e0 } } ⊢ { gfl evv tav lb_n rsp { eg0 eds e0 } }
						∎ { gfl evv tav lb_n rsp irv rl { eg0 eds e0 } }
					∎∎ 
				\[
				§§ asc 
					§ rl { lb_n { ev evv } rsp { rv irv } tav tv_n tv lc { eg0 eds ec0 } rl ft} 
						∎ { rl { lb_n { ev evv } rsp { rv irv } tav tv_n tv lc ec0 ft } } 
					∎∎
				§§ rtn
					§ rl { rl { lb_n { ev evv } rsp { rv irv } tav tv_n tv lc ec0 ft } } 
						∎ { lb_n { ev evv } rsp { rv irv } tav tv_n tv lc { eg0 eds ec0 } rl ft } 
					∎∎ 
				\]
				§§ op2 
					§ f_p { op { evv tav } lb_n a rsp rl irv is }
						rp8.e {} ⊢ e0 
						∐ is ⊢ RP.rcd◂l; l ⊢ _cns◂{ a0 l }; l ⊢ _cns◂{ a1 l }; l ⊢ _nil◂{} . 
							ast.r64_of_rt { evv a0 } ⊢ { evv x0 } 
							ast.r64_of_rt { evv a1 } ⊢ { evv x1 } 
							$ x0 ⊢ 
							∐ ast.hp_of◂r0 . 
								$ x1 ⊢ 
								∐ ast.hp_of◂r1 . 
									$ r0 ⊢ r0,r00 
									$ stt_v.r64_reg◂r00 ⊢ a0
									$ r1 ⊢ r1,r10 
									$ stt_v.r64_reg◂r10 ⊢ a1 
									$ RP.rcd◂_cns◂{ %a0 _cns◂{ %a1 _nil◂{} } } ⊢ is 
									reg { rsp r0 } ⊢ { rsp r0 sr0 b0 } 
									reg { rsp r1 } ⊢ { rsp r1 sr1 b1 } 
									$ b1 ⊢ 
									∐ bl.t◂{} . 
										» _^ sr0,sr1,op ⊢ sr0,sr1,op,ec1 
											"\t" 2' " " 0' "," 1' "\n" //
										rp8.add_s8 { e0 ec1 } ⊢ e0 
										∎ { { evv tav } lb_n a rsp rl irv is e0 }
									∐. bl.f◂{} . 
										» _^ sr0,sr1,op ⊢ sr0,sr1,op,ec1 
											"\tmov rdi," 1' "\n" 
											"\t" 2' " " 0' ",rdi\n" //
										rp8.add_s8 { e0 ec1 } ⊢ e0 
										∎ { { evv tav } lb_n a rsp rl irv is e0 }
								∐. ast.im_of◂x1 .
									reg { rsp r0 } ⊢ { rsp r0 sr0 b0 } 
									$ stt_v.r64_reg◂r0 ⊢ a0 
									$ x1 ⊢ x1,x1_0 
									stt_v.r64_im x1_0 ⊢ a1 
									$ RP.cns2◂{ a0 a1 } ⊢ is
									∐ b0 ⊢ bl.t◂{} . 
										» _^ sr0,x1,op ⊢ sr0,_,op,ec1 
											"\t" 2' " " 0' "," 1d' "\n" 
											//
										rp8.add_s8 { e0 ec1 } ⊢ e0 
										∎ { { evv tav } lb_n a rsp rl irv is e0 }
									∐. . 
										» _^ sr0,x1,op ⊢ _,_,op,ec1 
											"\tmov rdi," 1d' "\n" 
											"\t" 2' " " 0' ",rdi\n" 
											//
										rp8.add_s8 { e0 ec1 } ⊢ e0 
										∎ { { evv tav } lb_n a rsp rl irv is e0 }
							∐. ast.im_of◂x0 .  
								$ x1 ⊢ 
								∐ ast.hp_of◂r1 . 
									stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl v0 }
									rset.set_t { v0 r1 } ⊢ { v0 r1 } 
									alc_vs v0 ⊢ { v0 rm0 } 
									brk_rsp_e { rsp rm0 e0 } ⊢ { rsp rm0 e0 } 
									$ r1 ⊢ r1,r10 
									$ stt_v.r64_reg◂r10 ⊢ a1 
									$ rm0 ⊢ rm0,rm00 
									$ stt_v.r64_reg◂rm00 ⊢ a0 
									$ RP.cns2◂{ a0 a1 } ⊢ is 
									reg { rsp r1 } ⊢ { rsp r1 sr1 b1 } 
									reg { rsp rm0 } ⊢ { rsp rm0 sr0 b0 } 
									∐ b0 ⊢ bl.t◂{} . 
										» _^ sr0,sr1,x0,op ⊢ sr0,sr1,x0,op,ec1  
											"\tmov " 0' "," 2d' "\n"  
											"\t" 3' " " 0' "," 1' "\n" //
										rp8.add_s8 { e0 ec1 } ⊢ e0 
										∎ { { evv tav } lb_n a rsp rl irv is e0 }
									∐. b0 ⊢ bl.f◂{} . 
										» _^ sr0,sr1,x0,op ⊢ sr0,sr1,x0,op,ec1 
											"\tmov rdi," 2d' "\n" 
											"\t" 3' " rdi," 1' "\n" 
											"\tmov " 0' ",rdi\n"  
											//
										rp8.add_s8 { e0 ec1 } ⊢ e0 
										∎ { { evv tav } lb_n a rsp rl irv is e0 }
								∐. ast.im_of◂x1 . 
									stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl v0 }
									alc_vs v0 ⊢ { v0 rm0 } 
									alc_vs v0 ⊢ { v0 rm1 } 
									brk_rsp_e { rsp rm1 e0 } ⊢ { rsp rm1 e0 } 
									reg { rsp rm1 } ⊢ { rsp rm1 sr1 b1 } 
									reg { rsp rm0 } ⊢ { rsp rm0 sr0 b0 } 
									$ stt_v.r64_reg◂rm0 ⊢ a0 
									$ stt_v.r64_reg◂rm1 ⊢ a1 
									$ RP.cns2◂{ a0 a1 } ⊢ is 
									^ sr0,sr1,x0,x1,op ⊢ _,_,_,_,_,sc0 
										"\tmov rdi," 2d' "\m" 
										"\tmov rsi," 3d' "\n" 
										"\t" 4' " rdi,rsi\n" 
										"\tmov " 0' ",rdi\n" 
										"\tmov " 1' ",rsi\n" //
										rp8.add_s8 { e0 sc0 } ⊢ e0 
									∎ { { evv tav } lb_n a rsp rl irv is e0 }
									
						∐. . 
							» "lc_code.f _imul 3" _ ⊢ se 
							_emt se ⊢ se 
							∎|
					§ @.f◂◂OP { op { evv tav } lb_n a rsp rl irv is }
						rp8.e {} ⊢ e0 
						∐ is ⊢ RP.rcd◂l; l ⊢ _cns◂{ a0 l }; l ⊢ _cns◂{ a1 l }; l ⊢ _nil◂{} . 
							ast.r64_of_rt { evv a0 } ⊢ { evv x0 } 
							ast.r64_of_rt { evv a1 } ⊢ { evv x1 } 
							$ x0 ⊢ 
							∐ ast.hp_of◂r0 . 
								$ x1 ⊢ 
								∐ ast.hp_of◂r1 . 
									$ r0 ⊢ r0,r00 
									$ stt_v.r64_reg◂r00 ⊢ a0
									$ r1 ⊢ r1,r10 
									$ stt_v.r64_reg◂r10 ⊢ a1 
									$ RP.rcd◂_cns◂{ %a0 _cns◂{ %a1 _nil◂{} } } ⊢ is 
									reg { rsp r0 } ⊢ { rsp r0 sr0 b0 } 
									reg { rsp r1 } ⊢ { rsp r1 sr1 b1 } 
									$ b1 ⊢ 
									∐ bl.t◂{} . 
										» _^ sr0,sr1,op ⊢ sr0,sr1,op,ec1 
											"\t" 2' " " 0' "," 1' "\n" //
										rp8.add_s8 { e0 ec1 } ⊢ e0 
										∎ { { evv tav } lb_n a rsp rl irv is e0 }
									∐. bl.f◂{} . 
										» _^ sr0,sr1,op ⊢ sr0,sr1,op,ec1 
											"\tmov rdi," 1' "\n" 
											"\t" 2' " " 0' ",rdi\n" //
										rp8.add_s8 { e0 ec1 } ⊢ e0 
										∎ { { evv tav } lb_n a rsp rl irv is e0 }
								∐. ast.im_of◂x1 .
									reg { rsp r0 } ⊢ { rsp r0 sr0 b0 } 
									$ stt_v.r64_reg◂r0 ⊢ a0 
									$ x1 ⊢ x1,x1_0 
									stt_v.r64_im x1_0 ⊢ a1 
									$ RP.cns2◂{ a0 a1 } ⊢ is
									∐ b0 ⊢ bl.t◂{} . 
										» _^ sr0,x1,op ⊢ sr0,_,op,ec1 
											"\t" 2' " " 0' "," 1d' "\n" 
											//
										rp8.add_s8 { e0 ec1 } ⊢ e0 
										∎ { { evv tav } lb_n a rsp rl irv is e0 }
									∐. . 
										» _^ sr0,x1,op ⊢ _,_,op,ec1 
											"\tmov rdi," 1d' "\n" 
											"\t" 2' " " 0' ",rdi\n" 
											//
										rp8.add_s8 { e0 ec1 } ⊢ e0 
										∎ { { evv tav } lb_n a rsp rl irv is e0 }
							∐. ast.im_of◂x0 .  
								$ x1 ⊢ 
								∐ ast.hp_of◂r1 . 
									stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl v0 }
									rset.set_t { v0 r1 } ⊢ { v0 r1 } 
									alc_vs v0 ⊢ { v0 rm0 } 
									brk_rsp_e { rsp rm0 e0 } ⊢ { rsp rm0 e0 } 
									$ r1 ⊢ r1,r10 
									$ stt_v.r64_reg◂r10 ⊢ a1 
									$ rm0 ⊢ rm0,rm00 
									$ stt_v.r64_reg◂rm00 ⊢ a0 
									$ RP.cns2◂{ a0 a1 } ⊢ is 
									reg { rsp r1 } ⊢ { rsp r1 sr1 b1 } 
									reg { rsp rm0 } ⊢ { rsp rm0 sr0 b0 } 
									∐ b0 ⊢ bl.t◂{} . 
										» _^ sr0,sr1,x0,op ⊢ sr0,sr1,x0,op,ec1  
											"\tmov " 0' "," 2d' "\n"  
											"\t" 3' " " 0' "," 1' "\n" //
										rp8.add_s8 { e0 ec1 } ⊢ e0 
										∎ { { evv tav } lb_n a rsp rl irv is e0 }
									∐. b0 ⊢ bl.f◂{} . 
										» _^ sr0,sr1,x0,op ⊢ sr0,sr1,x0,op,ec1 
											"\tmov rdi," 2d' "\n" 
											"\t" 3' " rdi," 1' "\n" 
											"\tmov " 0' ",rdi\n"  
											//
										rp8.add_s8 { e0 ec1 } ⊢ e0 
										∎ { { evv tav } lb_n a rsp rl irv is e0 }
								∐. ast.im_of◂x1 . 
									OP { x0 x1 } ⊢ { x0 x1 } 
									stt_v.r64_im x0 ⊢ a0 
									stt_v.r64_im x1 ⊢ a1 
									$ RP.cns2◂{ a0 a1 } ⊢ is 						
									∎ { { evv tav } lb_n a rsp rl irv is e0 }
						∐. . 
							» "lc_code.f _imul 3" _ ⊢ se 
							_emt se ⊢ se 
							∎|
					∎∎
				§ op_shr◂◂{ OP OP_N } { gfl evv tav tv_n tv lb_n a rsp rl irv is yd { eg0 eds ec0 } } 
					∐ is ⊢ RP.rcd◂l; l ⊢ _cns◂{ p0 l }; l ⊢ _cns◂{ p1 l }; l ⊢ _nil◂{} . 
								ast.r64_of_rt { evv p0 } ⊢ { evv x0 } 
								ast.r64_of_rt { evv p1 } ⊢ { evv x1 } 
								$ x0 ⊢ 
								∐ ast.hp_of◂r0 . 
									$ x1 ⊢ 
									∐ ast.hp_of◂r1 . 
										reg { rsp r0 } ⊢ { rsp r0 sr0 br0 }
										reg { rsp r1 } ⊢ { rsp r1 sr1 br1 } 
										» _^ sr0,sr1 ⊢ _,_,sc0 
											"\tmov rdi," 0' "\n" 
											"\tmov rax," 1' "\n" 
											`	push rcx 
											`	mov rcx,rax
											"\t" OP_N " rdi,cl\n"  
											`	pop rcx 
											"\tmov " 0' ",rdi\n" // 
										rp8.add_s8 { ec0 sc0 } ⊢ ec0 
										$ stt_v.r64_reg◂r0 ⊢ p0 
										$ stt_v.r64_reg◂r1 ⊢ p1 
										$ RP.cns2◂{ p0 p1 } ⊢ is1  
										∎ { gfl evv tav tv_n tv lb_n a rsp rl irv is1 { eg0 eds ec0 } }	
									∐. ast.im_of◂x1 . 
										reg { rsp r0 } ⊢ { rsp r0 sr0 br0 }
										» _^ sr0,x1 ⊢ _,x1,sc0 
											"\t" OP_N " " 0' "," 1d' "\n" // 
										rp8.add_s8 { ec0 sc0 } ⊢ ec0 
										$ stt_v.r64_reg◂r0 ⊢ p0 
										stt_v.r64_im x1 ⊢ p1 
										$ RP.cns2◂{ p0 p1 } ⊢ is1  
										∎ { gfl evv tav tv_n tv lb_n a rsp rl irv is1 { eg0 eds ec0 } }	
								∐. ast.im_of◂x0 . 
									stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl v0 } 
									$ x1 ⊢ 
									∐ ast.hp_of◂r1 . 
										rset.set_t { v0 r1 } ⊢ { v0 r1 } 
										alc_vs v0 ⊢ { v0 rm0 } 
										brk_rsp_e { rsp rm0 ec0 } ⊢ { rsp rm0 ec0 } 
										reg { rsp r1 } ⊢ { rsp r1 sr1 br1 } 
										reg { rsp rm0 } ⊢ { rsp rm0 sr0 br0 } 
										» _^ x0,sr0,sr1 ⊢ x0,_,_,sc0 
											"\tmov rdi," 0d' "\n" 
											"\tmov rax," 2' "\n" 
											`	push rcx 
											`	mov rcx,rax
											"\t" OP_N " rdi,cl\n"  
											`	pop rcx 
											"\tmov " 1' ",rdi\n" // 
										rp8.add_s8 { ec0 sc0 } ⊢ ec0
										$ stt_v.r64_reg◂rm0 ⊢ p0 
										$ stt_v.r64_reg◂r1 ⊢ p1 
										$ RP.cns2◂{ p0 p1 } ⊢ is1  
										∎ { gfl evv tav tv_n tv lb_n a rsp rl irv is1 { eg0 eds ec0 } }	
									∐. ast.im_of◂x1 . 
										OP { x0 x1 } ⊢ { x0 x1 } 
										stt_v.r64_im x0 ⊢ p0 
										stt_v.r64_im x1 ⊢ p1 
										$ RP.cns2◂{ p0 p1 } ⊢ is1  
										∎ { gfl evv tav tv_n tv lb_n a rsp rl irv is1 { eg0 eds ec0 } }	
							∐. . 
								» "op_axm shr 0" _ ⊢ ee0 
								_emt ee0 ⊢ _ 
								∎|
				§ op1◂◂{ OP OP_N } { gfl evv tav tv_n tv lb_n a rsp rl irv is yd { eg0 eds ec0 } }  
					ast.r64_of_rt { evv is } ⊢ { evv x0 } 
					$ x0 ⊢ 
					∐ ast.hp_of◂r . 
						$ r ⊢ r,r0 
						$ stt_v.r64_reg◂r0 ⊢ is 
						reg { rsp r } ⊢ { rsp r sr b } 						
						» _^ sr ⊢ sr,ec1 
							"\t" OP_N " " 0' ",1\n" 
							//
						rp8.add_s8 { ec0 ec1 } ⊢ ec0
						∎ { gfl evv tav tv_n tv lb_n a rsp rl irv is { eg0 eds ec0 } }
					∐. ast.im_of◂x . 
						OP x ⊢ x 
						stt_v.r64_im x ⊢ is1 
						∎ { gfl evv tav tv_n tv lb_n a rsp rl irv is1 { eg0 eds ec0 } }
				§ 
					op_axm { gfl evv tav tv_n tv lb_n a rsp rl irv is yd { eg0 eds ec0 } } 
						∐ a'=EX.inc . 
							op1◂◂{ _inc "add" } { gfl evv tav tv_n tv lb_n a rsp rl irv is yd { eg0 eds ec0 } } ⊢| 
						∐ a'=EX.dec . 
							op1◂◂{ _dec "sub" } { gfl evv tav tv_n tv lb_n a rsp rl irv is yd { eg0 eds ec0 } } ⊢| 
							
						∐ a' = EX.imul . 
							∐ is ⊢ RP.rcd◂l; l ⊢ _cns◂{ a0 l }; l ⊢ _cns◂{ a1 l }; l ⊢ _nil◂{} . 
								ast.r64_of_rt { evv a0 } ⊢ { evv x0 } 
								ast.r64_of_rt { evv a1 } ⊢ { evv x1 } 
								$ x0 ⊢ 
								∐ ast.hp_of◂r0 . 
									$ x1 ⊢ 
									∐ ast.hp_of◂r1 . 
										$ r0 ⊢ r0,r00 
										$ stt_v.r64_reg◂r00 ⊢ a0
										$ r1 ⊢ r1,r10 
										$ stt_v.r64_reg◂r10 ⊢ a1 
										$ _nil◂{} ⊢ l 
										_cns { a1 l } ⊢ l 
										_cns { a0 l } ⊢ l 
										RP.rcd l ⊢ is 
										reg { rsp r0 } ⊢ { rsp r0 sr0 b0 } 
										reg { rsp r1 } ⊢ { rsp r1 sr1 b1 } 
										$ b0 ⊢ 
										∐ bl.t◂{} . 
										» _^ sr0,sr1 ⊢ sr0,sr1,ec1 
											"\timul " 0' "," 1' "\n" 
											//
										rp8.add_s8 { ec0 ec1 } ⊢ ec0 
										∎ { gfl evv tav tv_n tv lb_n a rsp rl irv is { eg0 eds ec0 } }						
										∐. bl.f◂{} . 
											» _^ sr0,sr1 ⊢ sr0,sr1,ec1 
												"\tmov rdi," 0' "\n" 
												"\timul rdi," 1' "\n"
												"\tmov " 0' ",rdi\n"
												//
											rp8.add_s8 { ec0 ec1 } ⊢ ec0 
											∎ { gfl evv tav tv_n tv lb_n a rsp rl irv is { eg0 eds ec0 } }						
								∐. ast.im_of◂x1 .
									reg { rsp r0 } ⊢ { rsp r0 sr0 b0 } 
									$ stt_v.r64_reg◂r0 ⊢ a0 
									$ x1 ⊢ x1,x1_0 
									stt_v.r64_im x1_0 ⊢ a1 
									$ RP.cns2◂{ a0 a1 } ⊢ is
									∐ b0 ⊢ bl.t◂{} . 
										» _^ sr0,x1 ⊢ sr0,_,ec1 
											"\timul " 0' "," 1d' "\n" 
											//
										rp8.add_s8 { ec0 ec1 } ⊢ ec0 
										∎ { gfl evv tav tv_n tv lb_n a rsp rl irv is { eg0 eds ec0 } }						
									∐. . 
										» _^ sr0,x1 ⊢ _,_,ec1 
											"\tmov rdi," 0' "\n" 
											"\timul rdi," 1d' "\n"
											"\tmov " 0' ",rdi\n" 
											//
										rp8.add_s8 { ec0 ec1 } ⊢ ec0 
										∎ { gfl evv tav tv_n tv lb_n a rsp rl irv is { eg0 eds ec0 } }						
							∐. ast.im_of◂x0 .  
								$ x1 ⊢ 
								∐ ast.hp_of◂r1 . 
									stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl v0 }
									rset.set_t { v0 r1 } ⊢ { v0 r1 } 
									alc_vs v0 ⊢ { v0 rm0 } 
									brk_rsp_e { rsp rm0 ec0 } ⊢ { rsp rm0 ec0 } 
									$ r1 ⊢ r1,r10 
									$ stt_v.r64_reg◂r10 ⊢ a1 
									$ rm0 ⊢ rm0,rm00 
									$ stt_v.r64_reg◂rm00 ⊢ a0 
									$ RP.cns2◂{ a0 a1 } ⊢ is 
									reg { rsp r1 } ⊢ { rsp r1 sr1 b1 } 
									reg { rsp rm0 } ⊢ { rsp rm0 sr0 b0 } 
									∐ b0 ⊢ bl.t◂{} . 
										» _^ sr0,sr1,x0 ⊢ sr0,sr1,x0,ec1  
											"\tmov " 0' "," 2d' "\n"  
											"\timul " 0' "," 1' "\n" //
										rp8.add_s8 { ec0 ec1 } ⊢ ec0 
										∎ { gfl evv tav tv_n tv lb_n a rsp rl irv is { eg0 eds ec0 } }						
									∐. b0 ⊢ bl.f◂{} . 
										» _^ sr0,sr1,x0 ⊢ sr0,sr1,x0,ec1 
											"\tmov rdi," 2d' "\n" 
											"\timul rdi," 1' "\n" 
											"\tmov " 0' ",rdi\n"  
											//
										rp8.add_s8 { ec0 ec1 } ⊢ ec0 
										∎ { gfl evv tav tv_n tv lb_n a rsp rl irv is { eg0 eds ec0 } }						
								∐. ast.im_of◂x1 . 
									_imul { x0 x1 } ⊢ { x0 x1 } 
									stt_v.r64_im x0 ⊢ a0 
									stt_v.r64_im x1 ⊢ a1 
									$ RP.cns2◂{ a0 a1 } ⊢ is 
									∎ { gfl evv tav tv_n tv lb_n a rsp rl irv is { eg0 eds ec0 } }						
							∐. . 
								» "lc_code.f _imul 3" _ ⊢ se 
								_emt se ⊢ se 
								∎|
						∐ a' = EX.add . 
							» "add" _ ⊢ op0 
							op2.f◂◂_add { op0 { evv tav } lb_n a rsp rl irv is } ⊢ { { evv tav } lb_n a rsp rl irv is1 ec1 }
							rp8.cct { ec0 ec1 } ⊢ ec0 
							∎ { gfl evv tav tv_n tv lb_n a rsp rl irv is1 { eg0 eds ec0 } }	
						∐ a' = EX.sub . 
							» "sub" _ ⊢ op0 
							op2.f◂◂_sub { op0 { evv tav } lb_n a rsp rl irv is } ⊢ { { evv tav } lb_n a rsp rl irv is1 ec1 }
							rp8.cct { ec0 ec1 } ⊢ ec0 
							∎ { gfl evv tav tv_n tv lb_n a rsp rl irv is1 { eg0 eds ec0 } }	
						∐ a' = EX.and . 
							» "and" _ ⊢ op0 
							op2.f_p { op0 { evv tav } lb_n a rsp rl irv is } ⊢ { { evv tav } lb_n a rsp rl irv is1 ec1 }
							rp8.cct { ec0 ec1 } ⊢ ec0 
							∎ { gfl evv tav tv_n tv lb_n a rsp rl irv is1 { eg0 eds ec0 } }	
						∐ a'=EX.shl . 
							op_shr◂◂{ _shl "shl" } { gfl evv tav tv_n tv lb_n a rsp rl irv is yd { eg0 eds ec0 } }  ⊢| 
						∐ a'=EX.shr . 
							op_shr◂◂{ _shr "shr" } { gfl evv tav tv_n tv lb_n a rsp rl irv is yd { eg0 eds ec0 } }  ⊢| 
							
								\[
						∐ a' = EX.or . 
							» "or" _ ⊢ op0 
							op2.f { op0 { evv tav } lb_n a rsp rl irv is } ⊢ { { evv tav } lb_n a rsp rl irv is1 ec1 }
							rp8.cct { ec0 ec1 } ⊢ ec0 
							∎ { gfl evv tav tv_n tv lb_n a rsp rl irv is1 { eg0 eds ec0 } }	
						\]
						∐ a'=EX.mlc_s8 . 
							rp8.e {} ⊢ e0 
							ast.r64_of_rt { evv is } ⊢ { evv x } 
							$ x ⊢ 
							∐ ast.im_of◂l0 . 
								_mlc_s8 l0 ⊢ { l0 s1 }   
								stt_v.r64_im l0 ⊢ a0 
								stt_v.s8_im s1 ⊢ a1 
								$ RP.cns2◂{ a0 a1 } ⊢ ip1 
								rp8.cct { ec0 e0 } ⊢ ec0  
								∎ { gfl evv tav tv_n tv lb_n a rsp rl irv ip1 { eg0 eds ec0 } }
							∐. ast.hp_of◂r0 . 
								stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl v0 } 
								rset.set_t { v0 r0 } ⊢ { v0 r0 } 
								alc_vs v0 ⊢ { v0 rm0 } 
								$ rm0 ⊢ rm0,rm00 
								stt_v.s8_reg rm00 ⊢ a1 
								$ r0 ⊢ r0,r00 
								$ stt_v.r64_reg◂r00 ⊢ a0 
								$ RP.cns2◂{ a0 a1 } ⊢ ip1 
								brk_rsp_e { rsp rm0 e0 } ⊢ { rsp rm0 e0 } 
								reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
								reg { rsp rm0 } ⊢ { rsp rm0 srm0 brm0 } 
								» _^ sr0,srm0 ⊢ sr0,srm0,sc0 
									"\tmov rdi," 0' "\n" 
									`	call mlc_s8
									"\tmov " 1' ",rax\n" // 
								rp8.add_s8 { e0 sc0 } ⊢ e0 
								rp8.cct { ec0 e0 } ⊢ ec0
								∎ { gfl evv tav tv_n tv lb_n a rsp rl irv ip1 { eg0 eds ec0 } }
						∐ a'=EX.rep_movsb . 
							rp8.e {} ⊢ e0 
							$ is ⊢ is,is0 
							ast.pnt.rt { evv is0 } ⊢ { evv sis } 
							rep_movsb.f { sis is lb_n rsp evv irv rl e0 } ⊢ { lb_n rsp evv irv rl e0 p1 }
							rp8.cct { ec0 e0 } ⊢ ec0  
							∎ { gfl evv tav tv_n tv lb_n a rsp rl irv p1 { eg0 eds ec0 } }  
						∐ a'=EX.sts . 	
							rp8.e {} ⊢ e0 
							$ is ⊢ is,is0 
							ast.pnt.rt { evv is0 } ⊢ { evv sis } 
							sts.f { sis is lb_n rsp evv irv rl e0 } ⊢ { lb_n rsp evv irv rl e0 p1 }
							rp8.cct { ec0 e0 } ⊢ ec0 
							∎ { gfl evv tav tv_n tv lb_n a rsp rl irv p1 { eg0 eds ec0 } } 
						∐ a'=EX.lds . 
							stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl v0 } 
							$ is ⊢ is,is0 
							stt_v.mk_rset { is0 v0 } ⊢ v0
							∐ is ⊢ RP.rcd◂l; l ⊢ _cns◂{ p0 l }; l ⊢ _cns◂{ p1 l }; l ⊢ _nil◂{} .  
								ast.s8_of_rt { evv p0 } ⊢ { evv s } 
								ast.r64_of_rt { evv p1 } ⊢ { evv x } 
								$ s ⊢ 
								∐ ast.hp_of◂r0 .
									alc_vs v0 ⊢ { v0 m0 } 
									brk_rsp_e { rsp m0 ec0 } ⊢ { rsp m0 ec0 } 
									$ x ⊢ 
									∐ ast.hp_of◂r1 .
										reg { rsp r0 } ⊢ { rsp r0 sr0 br0 }
										reg { rsp r1 } ⊢ { rsp r1 sr1 br1 }
										reg { rsp m0 } ⊢ { rsp m0 sm0 bm0 }
										» _^ sr0,sr1,sm0 ⊢ _,_,_,sc0 
											"\tmov rdi," 0' "\n" 
											"\tmov rsi," 1' "\n" 
											"\tmov rax,0x0000_ffff_ffff_ffff\n" 
											"\tand rax,QWORD [rdi]\n" 
											"\tcmp rsi,rax\n" 
											"\tjge err_bc\n" 
											"\tmovzx rax,BYTE [rdi+8+rsi]\n" 
											"\tmov " 2' ",rax\n" //
										rp8.add_s8 { ec0 sc0 } ⊢ ec0 
										stt_v.s8_reg r0 ⊢ p0  
										$ stt_v.r64_reg◂r1 ⊢ p1  
										$ stt_v.r64_reg◂m0 ⊢ p2 
										$ RP.cns3◂{ p0 p1 p2 } ⊢ p1  
										∎ { gfl evv tav tv_n tv lb_n a rsp rl irv p1 { eg0 eds ec0 } }  
									∐. ast.im_of◂x .  
										reg { rsp r0 } ⊢ { rsp r0 sr0 br0 }
										reg { rsp m0 } ⊢ { rsp m0 sm0 bm0 }
										» _^ sr0,x,sm0 ⊢ _,x,_,sc0 
											"\tmov rdi," 0' "\n" 
											"\tmov rax,0x0000_ffff_ffff_ffff\n" 
											"\tand rax,QWORD [rdi]\n" 
											"\tcmp rax," 1d' "\n" 
											"\tjle err_bc\n" 
											"\tmovzx rax,BYTE [rdi+8+" 1d' "]\n" 
											"\tmov " 2' ",rax\n" //
										rp8.add_s8 { ec0 sc0 } ⊢ ec0 
										stt_v.s8_reg r0 ⊢ p0  
										stt_v.r64_im x ⊢ p1  
										$ stt_v.r64_reg◂m0 ⊢ p2 
										$ RP.cns3◂{ p0 p1 p2 } ⊢ p1  
										∎ { gfl evv tav tv_n tv lb_n a rsp rl irv p1 { eg0 eds ec0 } }  	
								∐. ast.im_of◂s . 
									$ x ⊢ 
									∐ ast.hp_of◂r1 . 
										alc_vs v0 ⊢ { v0 m0 } 
										brk_rsp_e { rsp m0 ec0 } ⊢ { rsp m0 ec0 } 
										_s8_len s ⊢ { s ls } 
										inc_x lb_n ⊢ { lb0 lb_n } 
										data_s8 { eds lb0 s } ⊢ { eds lb0 s } 
										reg { rsp r1 } ⊢ { rsp r1 sr1 br1 }
										reg { rsp m0 } ⊢ { rsp m0 sm0 bm0 }
										» _^ ls,lb0,sr1,sm0 ⊢ _,_,_,_,sc0 
											"\tmov rsi," 2' "\n" 
											"\tcmp rsi," 0d' "\n" 
											"\tjge err_bc\n" 
											"\tmovzx rax,BYTE [LB_" 1d' "+rsi]\n" 
											"\tmov " 3' ",rax\n" //
										rp8.add_s8 { ec0 sc0 } ⊢ ec0 
										stt_v.s8_im s ⊢ p0  
										$ stt_v.r64_reg◂r1 ⊢ p1  
										$ stt_v.r64_reg◂m0 ⊢ p2 
										$ RP.cns3◂{ p0 p1 p2 } ⊢ p1  
										∎ { gfl evv tav tv_n tv lb_n a rsp rl irv p1 { eg0 eds ec0 } }  
									∐. ast.im_of◂x . 
										_lds { s x } ⊢ { s x c } 
										stt_v.s8_im s ⊢ p0  
										stt_v.r64_im x ⊢ p1  
										stt_v.r64_im c ⊢ p2 
										$ RP.cns3◂{ p0 p1 p2 } ⊢ p1  
										∎ { gfl evv tav tv_n tv lb_n a rsp rl irv p1 { eg0 eds ec0 } }  									
							∐. . 
								» "op_axm lds 0" _ ⊢ ee0 
								_emt ee0 ⊢ _ 
								∎| 
						∐ a'=EX.s8_len . 
							ast.s8_of_rt { evv is } ⊢ { evv s0 } 
							$ s0 ⊢ 
							∐ ast.im_of◂s0 . 
								_s8_len s0 ⊢ { s0 l0 } 
								stt_v.r64_im l0 ⊢ a1 
								stt_v.s8_im s0 ⊢ a0 
								$ RP.cns2◂{ a0 a1 } ⊢ ip1 
								∎ { gfl evv tav tv_n tv lb_n a rsp rl irv ip1 { eg0 eds ec0 } }
							∐. ast.hp_of◂r0 . 
								stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl v0 } 
								rset.set_t { v0 r0 } ⊢ { v0 r0 } 
								alc_vs v0 ⊢ { v0 rm0 } 
								$ rm0 ⊢ rm0,rm00 
								$ stt_v.r64_reg◂rm00 ⊢ a1 
								$ r0 ⊢ r0,r00
								stt_v.s8_reg r00 ⊢ a0 
								$ RP.cns2◂{ a0 a1 } ⊢ ip1 
								brk_rsp_e { rsp rm0 ec0 } ⊢ { rsp rm0 ec0 }
								reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
								reg { rsp rm0 } ⊢ { rsp rm0 srm0 brm0 } 
								» _^ sr0,srm0 ⊢ sr0,srm0,sc0 
									"\tmov rdi," 0' "\n" 
									`	mov rsi,0x0000_ffff_ffff_ffff
									`	and rsi,[rdi] 
									"\tmov " 1' ",rsi\n" // 
									rp8.add_s8 { ec0 sc0 } ⊢ ec0 
								∎ { gfl evv tav tv_n tv lb_n a rsp rl irv ip1 { eg0 eds ec0 } }
						∐ a'=EX.emt .
							rp8.e {} ⊢ e0 
							$ is ⊢ is,is0  
							» "\tmov rdi,fmt_emt\n\tcall emt_stg\n" _ ⊢ se1 
							rp8.add_s8 { e0 se1 } ⊢ e0 
							emt.ptn { gfl _nil◂{} tav lb_n rsp is0 { eds e0 } } ⊢ { gfl fl tav lb_n rsp { eds e0 } }
							» "\tmov rdi,fmt_nl\n\tcall emt_stg\n" _ ⊢ se1 
							rp8.add_s8 { e0 se1 } ⊢ e0 
							emt.adt_lp { gfl fl tav lb_n { eds eg0 } } ⊢ { gfl tav lb_n { eds eg0 } }
							rp8.cct { ec0 e0 } ⊢ ec0 
							∎ { gfl evv tav tv_n tv lb_n a rsp rl irv is { eg0 eds ec0 } } 
						∐ a'=EX.emt_s8_to . 
							∐ is ⊢ RP.rcd◂l0; l0 ⊢ _cns◂{ a0 l0 }; l0 ⊢ _cns◂{ a1 l0 }; l0 ⊢ _nil◂{} . 
								ast.s8_of_rt { evv a0 } ⊢ { evv fn }
								ast.s8_of_rt { evv a1 } ⊢ { evv sb0 }
								$ fn ⊢ 
								∐ ast.hp_of◂r0 .
									$ sb0 ⊢ 
									∐ ast.hp_of◂r1 . 
										mov.rdi_idx { rsp r0 ec0 } ⊢ { rsp r0 ec0 }
										mov.rax_idx { rsp r1 ec0 } ⊢ { rsp r1 ec0 } 
										» _^ _ ⊢ sc0 
											push_c_regs 
											`	add rdi,8 
											` lea rsi,[rax+8]
											`	mov rdx,0x0000_ffff_ffff_ffff
											`	and rdx,QWORD [rax]
											`	C_CALL emt_s8_to 
											pop_c_regs 
											//	
										rp8.add_s8 { ec0 sc0 } ⊢ ec0 
										stt_v.s8_reg r0 ⊢ a0
										stt_v.s8_reg r1 ⊢ a1 
										$ RP.cns2◂{ a0 a1 } ⊢ is 
										∎ { gfl evv tav tv_n tv lb_n a rsp rl irv is { eg0 eds ec0 } } 								
									∐. ast.im_of◂s1 . 
										inc_x lb_n ⊢ { lb0 lb_n }
										data_s8 { eds lb0 s1 } ⊢ { eds lb0 s1 }
										mov.rdi_idx { rsp r0 ec0 } ⊢ { rsp r0 ec0 }
										» _^ lb0 ⊢ lb0,sc0 
											push_c_regs 
											`	add rdi,8 
											"\tmov rsi,LB_" 0d' "\n" 
											`	mov rdx,0x0000_ffff_ffff_ffff
											`	and rdx,QWORD [rax]
											`	C_CALL emt_s8_to 
											pop_c_regs 
											//	
										rp8.add_s8 { ec0 sc0 } ⊢ ec0 
										stt_v.s8_reg r0 ⊢ a0
										stt_v.s8_im s1 ⊢ a1 
										$ RP.cns2◂{ a0 a1 } ⊢ is 
										∎ { gfl evv tav tv_n tv lb_n a rsp rl irv is { eg0 eds ec0 } } 								
								∐. ast.im_of◂s0 . 
									$ sb0 ⊢ 
									∐ ast.hp_of◂r1 . 
										inc_x lb_n ⊢ { lb0 lb_n }
										data_s8 { eds lb0 s0 } ⊢ { eds lb0 s0 }
										mov.rax_idx { rsp r1 ec0 } ⊢ { rsp r1 ec0 } 
										^ lb0 ⊢ lb0,sc0 
											push_c_regs 
											"\tmov rdi,LB_" 0d' "\n" 
											` lea rsi,[rax+8]
											`	mov rdx,0x0000_ffff_ffff_ffff
											`	and rdx,QWORD [rax]
											`	C_CALL emt_s8_to 
											pop_c_regs 
											//	
										rp8.add_s8 { ec0 sc0 } ⊢ ec0 
										stt_v.s8_im s0 ⊢ a0
										stt_v.s8_reg r1 ⊢ a1 
										$ RP.cns2◂{ a0 a1 } ⊢ is 
										∎ { gfl evv tav tv_n tv lb_n a rsp rl irv is { eg0 eds ec0 } } 								
									∐. ast.im_of◂s1 . 
										inc_x lb_n ⊢ { lb0 lb_n }
										data_s8 { eds lb0 s0 } ⊢ { eds lb0 s0 }
										inc_x lb_n ⊢ { lb1 lb_n }
										data_s8 { eds lb0 s1 } ⊢ { eds lb0 s1 }
										» _^ lb0,lb1 ⊢ _,_,sc0 
											push_c_regs 
											`	add rdi,8 
											"\tmov rdi,LB_" 0d' "\n"
											"\tmov rsi,LB_" 1d' "\n" 
											`	mov rdx,0x0000_ffff_ffff_ffff
											`	and rdx,QWORD [rax]
											`	C_CALL emt_s8_to 
											pop_c_regs 
											//	
										rp8.add_s8 { ec0 sc0 } ⊢ ec0 
										stt_v.s8_im s0 ⊢ a0
										stt_v.s8_im s1 ⊢ a1 
										$ RP.cns2◂{ a0 a1 } ⊢ is 
										∎ { gfl evv tav tv_n tv lb_n a rsp rl irv is { eg0 eds ec0 } } 								
							∐. . 
								» "emt_s8_to 0" _ ⊢ ee0 
								_emt ee0 ⊢ _ 
								∎| 
						∐ a'=EX.cd . 
							ast.s8_of_rt { evv is } ⊢ { evv s0 } 
							$ s0 ⊢ 
							∐ ast.im_of◂s0 . 
								inc_x lb_n ⊢ { lb0 lb_n }
								data_s8 { eds lb0 s0 } ⊢ { eds lb0 s0 }
								» _^ lb0 ⊢ lb0,sc0 
									push_c_regs 
									"\tmov rdi,LB_" 0d' "\n" 
									`	C_CALL system 
									pop_c_regs 
									//	
								rp8.add_s8 { ec0 sc0 } ⊢ ec0 
								stt_v.s8_im s0 ⊢ is 
								∎ { gfl evv tav tv_n tv lb_n a rsp rl irv is { eg0 eds ec0 } } 								
							∐. ast.hp_of◂r0 . 
								mov.rdi_idx { rsp r0 ec0 } ⊢ { rsp r0 ec0 }
								» _^ _ ⊢ sc0 
									push_c_regs 
									`	add rdi,8 
									`	C_CALL system 
									pop_c_regs 
									//	
								rp8.add_s8 { ec0 sc0 } ⊢ ec0 
								stt_v.s8_reg r0 ⊢ is 
								∎ { gfl evv tav tv_n tv lb_n a rsp rl irv is { eg0 eds ec0 } } 								
						∐ a'=EX.mk_arr .
							$ is ⊢ is,is0 
							ast.pnt.rt { evv is0 } ⊢ { evv sis }
							arr.mk_arr { gfl is sis irv evv tav tv_n tv yd lb_n rl rsp } ⊢ { gfl irv evv tav tv_n tv lb_n rl rsp { eds1 eg1 e0 } is1 }
							rp8.cct { eds eds1 } ⊢ eds 
							rp8.cct { ec0 e0 } ⊢ ec0  
							rp8.cct { eg0 eg1 } ⊢ eg0 
							∎ { gfl evv tav tv_n tv lb_n a rsp rl irv is1 { eg0 eds ec0 } } 
						∐ a'=EX.arr_of_lst . 
							$ is ⊢ is,is0 
							ast.pnt.rt { evv is0 } ⊢ { evv sis } 
							arr.arr_of_lst { is sis irv evv tav tv_n tv yd lb_n rl rsp } ⊢ { irv evv tav tv_n tv lb_n rl rsp e0 is1 }
							rp8.cct { ec0 e0 } ⊢ ec0  
							∎ { gfl evv tav tv_n tv lb_n a rsp rl irv is1 { eg0 eds ec0 } } 
						∐ a'=EX.exc_q . 
							$ yd ⊢ yd,yd0 
							» 1r _ ⊢ lv 
							newvar_l { tv_n tv lv } ⊢ { tv_n tv lv y0 } 
							newvar_l { tv_n tv lv } ⊢ { tv_n tv lv y1 } 
							newvar_l { tv_n tv lv } ⊢ { tv_n tv lv y2 }
							$ y2 ⊢ y2,y2_0 
							inst { tv_n tv lv yd0 } ⊢ { tv_n tv lv yd0 } 
							$ RP.cns3◂{ y0 y1 y2 } ⊢ yt 
							unify.f { tv yt yd0 } ⊢ tv 
							_dec lv ⊢ lv 
							gen { tv_n tv lv y2_0 } ⊢ { tv_n tv lv y2_0 } 
							» 0r _ ⊢ pv_n 
							$ _nil◂{} ⊢ alp 
							alc_type_k.hp { pv_n alp tav tv_n tv y2_0 } ⊢ { _ _ tav tv_n tv h0 }
													
							stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl vs0 }
							$ is ⊢ is,is0 
							stt_v.mk_rset { is0 vs0 } ⊢ vs0
							∐ is ⊢ RP.rcd◂l0; l0 ⊢ _cns◂{ a0 l0 }; l0 ⊢ _cns◂{ a1 l0 }; l0 ⊢ _cns◂{ a2 l0 }; l0 ⊢ _nil◂{} .
								ast.arr_of_rt { evv a0 } ⊢ { evv a0 } 
								∐ a0 ⊢ ast.hp_of◂{ r0 _ } . 
									$ r0 ⊢ r0,r0_0 
									$ h0 ⊢ h0,h0_0 
									stt_v.arr_reg { r0_0 h0_0 } ⊢ a0
									alc_vs vs0 ⊢ { vs0 rm0 } 
									$ rm0 ⊢ rm0,rm00 
									$ h0 ⊢ h0,h0_0 
									ast.hp { rm00 h0_0 } ⊢ pp0 
									RP.atm pp0 ⊢ ip0 
									$ ip0 ⊢ ip0,ip00
									mov_ptn2.f2 { { evv tav } rsp vs0 a2 ip00 ec0 } ⊢ { { evv tav } rsp vs0 ec0 }
									$ a1 ⊢ a1,a1_0 
									r64_to_rax { rsp evv a1_0 } ⊢ { rsp evv sc0 } 
									rp8.add_s8 { ec0 sc0 } ⊢ ec0 
									reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
									reg { rsp rm0 } ⊢ { rsp rm0 srm0 brm0 }
									» _^ sr0,srm0 ⊢ sr0,srm0,sc0 
										"\tmov rdi," 0' "\n" 
										`	mov rsi,0x0000_ffff_ffff_ffff 
										`	and rsi,QWORD [rdi]
										`	cmp rax,rsi 
										`	jge err_bc
										`	lea rdi,[rdi+8+8*rax]
										`	mov rax,QWORD [rdi]
										"\tmov rsi," 1' "\n" 
										`	mov QWORD [rdi],rsi 
										"\tmov " 1' ",rax\n" 
										//
									rp8.add_s8 { ec0 sc0 } ⊢ ec0 
									stt_v.ptn_of_hp { vs0 h0 } ⊢ { vs0 pt0 }
									$ pt0 ⊢ pt0,pt00
									$ RP.cns3◂{ a0 a1 pt0 } ⊢ p1 
									mov_ptn2.f2 { { evv tav } rsp vs0 ip0 pt00 ec0 } ⊢ { { evv tav } rsp vs0 ec0 }
									∎ { gfl evv tav tv_n tv lb_n a rsp rl irv p1 { eg0 eds ec0 } }
								∐. .
									» "exc_q D0" _ ⊢ ee0 
									_emt ee0 ⊢ _ 
									∎| 
							∐. .
								» "exc_q D1" _ ⊢ ee0 
									_emt ee0 ⊢ _ 
								∎|
						∐ a'=EX.lod_q . 
							» "lod_q D0" _ ⊢ ee0 
							_emt ee0 ⊢ _ 
							rp8.e {} ⊢ e0 
							stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl vs0 }
							$ is ⊢ is,is0 
							stt_v.mk_rset { is0 vs0 } ⊢ vs0
							∐ is ⊢ RP.rcd◂l0; l0 ⊢ _cns◂{ a0 l0 }; l0 ⊢ _cns◂{ a1 l0 }; l0 ⊢ _nil◂{}; a0 ⊢ RP.atm◂aa0 .
								$ aa0 ⊢ aa0,aa00 
								RP.atm aa0 ⊢ a0
								$ a1 ⊢ a1,a1_0
								r64_to_rax { rsp evv a1_0 } ⊢ { rsp evv sc0 } 
								rp8.add_s8 { e0 sc0 } ⊢ e0 
								∐ aa00 ⊢ ast.hp◂{ r0 h0 }; h0 ⊢ ast.hp.ref◂q0; q0 ⊢ ast.hp.arr◂ha0 . 
									alc_vs vs0 ⊢ { vs0 rm0 } 
									brk_rsp_e { rsp rm0 e0 } ⊢ { rsp rm0 e0 } 
									reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
									» _^ sr0 ⊢ sr0,sc0 
										"\tmov rdi," 0' "\n"
										`	mov rsi,0x0000_ffff_ffff_ffff 
										`	and rsi,QWORD [rdi]
										`	cmp rax,rsi 
										`	jge err_bc
										`	mov rdi,[rdi+8+8*rax]
										push_c_regs 
										`	mov r8,rdi
										//
									rp8.add_s8 { e0 sc0 } ⊢ e0 
									rp8.e {} ⊢ eh 
									$ ha0 ⊢ ha0,ha00 
									$ _nil◂{} ⊢ fl
									rpc.hp { gfl fl tav lb_n ha00 eh } ⊢ { gfl fl tav lb_n eh }
									rpc.adt_lp { gfl fl tav lb_n { eds eg0 } } ⊢ { gfl tav lb_n { eds eg0 } }
									rp8.cct { e0 eh } ⊢ e0 
									reg { rsp rm0 } ⊢ { rsp rm0 srm0 brm0 }
									» _^ srm0 ⊢ srm0,sc0 
										pop_c_regs 
										"\tmov " 0' ",rax\n" //
									rp8.add_s8 { e0 sc0 } ⊢ e0 
									$ ha0 ⊢ ha0,ha00
									stt_v.ptn_of_hp { vs0 ha00 } ⊢ { vs0 pt0 } 
									$ rm0 ⊢ rm0,rm00 
									ast.hp { rm00 ha0 } ⊢ ap0 
									RP.atm ap0 ⊢ ip0 
									$ pt0 ⊢ pt0,pt00 
									$ RP.cns3◂{ a0 a1 pt0 } ⊢ p1
									mov_ptn2.f2 { { evv tav } rsp vs0 ip0 pt00 e0 } ⊢ { { evv tav } rsp vs0 e0 }
									rp8.cct { ec0 e0 } ⊢ ec0  
									∎ { gfl evv tav tv_n tv lb_n a rsp rl irv p1 { eg0 eds ec0 } }
								∐. . 
									» "lod_q 0" _ ⊢ ee0 
									_emt ee0 ⊢ _ 
									∎| 
							∐. . 
								» "lod_q 1" _ ⊢ ee0 
								_emt ee0 ⊢ _ 
								∎|
						∐ a'=EX.arr_len . 
							rp8.e {} ⊢ e0 
							stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl v0 } 
							$ is ⊢ is,is0 
							stt_v.mk_rset { is0 v0 } ⊢ v0 
							$ is ⊢ is,is0 
							∐ is ⊢ RP.atm◂a0 . 
								∐ a0 ⊢ ast.hp◂{ r0 h0 }; h0 ⊢ ast.hp.ref◂q0; q0 ⊢ ast.hp.arr◂ha .
									alc_vs v0 ⊢ { v0 rm0 } 
									$ rm0 ⊢ rm0,rm00 
									$ stt_v.r64_reg◂rm00 ⊢ a1 
									$ RP.cns2◂{ is0 a1 } ⊢ ip1 
									brk_rsp_e { rsp rm0 e0 } ⊢ { rsp rm0 e0 }
									reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
									reg { rsp rm0 } ⊢ { rsp rm0 srm0 brm0 } 
									» _^ sr0,srm0 ⊢ sr0,srm0,sc0 
										##"; _arr_len " 0' " ⊢ " 1' "\n" 
										"\tmov rdi," 0' "\n" 
										`	mov rsi,0x0000_ffff_ffff_ffff 
										`	and rsi,QWORD [rdi]
										"\tmov " 1' ",rsi\n" // 
									rp8.add_s8 { e0 sc0 } ⊢ e0 
									rp8.cct { ec0 e0 } ⊢ ec0  
									∎ { gfl evv tav tv_n tv lb_n a rsp rl irv ip1 { eg0 eds ec0 } }
								∐. . 
									» "arr_len 0" _ ⊢ se 
									_emt se ⊢ se 
									∎|	
							∐. . 
								» "arr_len 0" _ ⊢ se 
								_emt se ⊢ se 
								∎| 
						∐ a'=EX.info . 
							» "\tcall info\n" _ ⊢ sc0 
							rp8.add_s8 { ec0 sc0 } ⊢ ec0 
							$ is ⊢ p1
							∎ { gfl evv tav tv_n tv lb_n a rsp rl irv p1 { eg0 eds ec0 } }
						∐ a'=EX.getchar . 
							stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl v0 } 
							$ is ⊢ is,is0 
							stt_v.mk_rset { is0 v0 } ⊢ v0 
							alc_vs v0 ⊢ { v0 rm0 } 
							brk_rsp_e { rsp rm0 ec0 } ⊢ { rsp rm0 ec0 } 
							reg { rsp rm0 } ⊢ { rsp rm0 srm0 brm0 } 
							» _^ srm0 ⊢ srm0,sc0 
								`	mov rdi,fmt_getchar 
								`	call emt_stg 
								`	xor rax,rax 
								`	C_CALL_SF getchar 
								"\tmov " 0' ",rax\n" // 
							rp8.add_s8 { ec0 sc0 } ⊢ ec0 
							$ stt_v.r64_reg◂rm0 ⊢ p1 
							∎ { gfl evv tav tv_n tv lb_n a rsp rl irv p1 { eg0 eds ec0 } }						
						∐ a'=EX.in_fn . 
							rp8.e {} ⊢ e0 
							stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl vs0 }
							$ is ⊢ is,is0 
							stt_v.mk_rset { is0 vs0 } ⊢ vs0
							$ is ⊢ is,is0 
							alc_vs vs0 ⊢ { vs0 rm0 } 
							brk_rsp { rsp rm0 } ⊢ { rsp rm0 sb0 } 
							rp8.add_s8 { e0 sb0 } ⊢ e0 
							reg { rsp rm0 } ⊢ { rsp rm0 srm0 brm0 } 
							ast.s8_of_rt { evv is } ⊢ { evv s0 } 
							$ s0 ⊢ 
							∐ ast.hp_of◂r0 . 
								reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
								stt_v.s8_reg rm0 ⊢ a1 
								$ RP.cns2◂{ is0 a1 } ⊢ p1 
								» _^ sr0,srm0 ⊢ sr0,srm0,sc0 
									"\tmov rdi," 0' "\n" 
									push_c_regs 
									`	add rdi,8
									`	call in_fn
									pop_c_regs 
									"\tmov " 1' ",rax\n" 
									// 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								rp8.cct { ec0 e0 } ⊢ ec0 
								∎ { gfl evv tav tv_n tv lb_n a rsp rl irv p1 { eg0 eds ec0 } }
							∐. ast.im_of◂s0 . 
								stt_v.s8_reg rm0 ⊢ a1 
								$ RP.cns2◂{ is0 a1 } ⊢ p1 
								inc_x lb_n ⊢ { lb0 lb_n } 
								data_s8 { eds lb0 s0 } ⊢ { eds lb0 s0 }
								» _^ lb0,srm0 ⊢ lb0,srm0,sr 
									"\tmov rdi,LB_" 0d' "\n" 
									`	CALL_SF in_fn 
									"\tmov " 1' ",rax\n" 
								//
								rp8.add_s8 { e0 sr } ⊢ e0 
								rp8.cct { ec0 e0 } ⊢ ec0  
								∎ { gfl evv tav tv_n tv lb_n a rsp rl irv p1 { eg0 eds ec0 } }
						
						∐. . 
							» _^ a ⊢ a,ee1 
								"; ##" 0d' ".. ⊢ ..\n"
								"\tcall ETR_" 0d' "\n" //
							##rp8.of_s8 ec1 ⊢ ec1  
							_emt ee1 ⊢ ee1 
							∎| 
					
				§§ test
					§ 
						@.cmp { rsp lb_n evv irv lb_t lb_f v0 v1 ec0 }
							$ v0 ⊢ 
							∐ ast.test_var◂i0 . 
								$ v1 ⊢ 
								∐ ast.test_cst◂c1 . 
									bl.t {} ⊢ bf0 
									cmp_var_cst { bf0 i0 c1 rsp lb_n evv irv lb_t lb_f ec0 } ⊢| 
								∐. ast.test_var◂i1 . 
									lod_tv { irv i0 } ⊢ { irv i0 p0 } 
									lod_tv { irv i1 } ⊢ { irv i1 p1 }
									$ p0 ⊢ p0,p00 
									ast.pnt.rt { evv p00 } ⊢ { evv sp0 } 
									$ p1 ⊢ p1,p10 
									ast.pnt.rt { evv p10 } ⊢ { evv sp1 } 
									» _^ sp0,sp1 ⊢ sp0,sp1,e0 
										";;" 0' "=<" 1' "\n" //
									rp8.add_s8 { ec0 e0 } ⊢ ec0 
									ast.r64_of_rt { evv p0 } ⊢ { evv x0 } 
									ast.r64_of_rt { evv p1 } ⊢ { evv x1 } 
									$ x0 ⊢
									∐ ast.hp_of◂r0 .
										$ x1 ⊢ 
										∐ ast.hp_of◂r1 .
											cmp.idx_idx { rsp r0 r1 ec0 } ⊢ { rsp r0 r1 ec0 } 
											jg_lb { lb_f ec0 } ⊢ { lb_f ec0 }
											jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 } 
											∎ { rsp lb_n evv irv lb_t lb_f ec0 }
										∐. ast.im_of◂x1 .
											cmp.idx_im { rsp r0 x1 ec0 } ⊢ { rsp r0 x1 ec0 } 
											jg_lb { lb_f ec0 } ⊢ { lb_f ec0 }
											jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 } 
											∎	{ rsp lb_n evv irv lb_t lb_f ec0 }
									∐. ast.im_of◂x0 . 
										$ x1 ⊢ 
										∐ ast.hp_of◂r1 . 
											cmp.idx_im { rsp r1 x0 ec0 } ⊢ { rsp _ _ ec0 } 
											jl_lb { lb_f ec0 } ⊢ { lb_f ec0 }
											jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 } 	
											∎ { rsp lb_n evv irv lb_t lb_f ec0 }									
										∐. ast.im_of◂x1 . 
											setge { x1 x0 } ⊢ { x2 x0 bc } 
											∐ bc'=1r .  
												jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 } 
												∎ { rsp lb_n evv irv lb_t lb_f ec0 }
											∐. . 
												jmp_lb { lb_f ec0 } ⊢ { lb_f ec0 }
												∎ { rsp lb_n evv irv lb_t lb_f ec0 } 
							∐. ast.test_cst◂c0 . 
								$ v1 ⊢ 
								∐ ast.test_var◂i1 . 
									cmp_var_cst { f◂{} i1 c0 rsp lb_n evv irv lb_t lb_f ec0 } ⊢| 
								∐. ast.test_cst◂c1 . 
									\[
									$ c1 ⊢ 
									∐ ast.cst_v◂cv1 . 
										» "ret_f D672" _ ⊢ ee0 
										_emt ee0 ⊢ _ 
										∎|
									∐. ast.cst_name◂in1 . 
										» "ret_f D680" _ ⊢ ee0 
										_emt ee0 ⊢ _ 
									\]
										∎|
					@.eq { rsp lb_n evv irv lb_t lb_f v0 v1 ec0 }
						$ v0 ⊢ 
						∐ ast.test_var◂i0 . 
							$ v1 ⊢ 
							∐ ast.test_cst◂c1 . 
								lod_tv { irv i0 } ⊢ { irv i0 p0 } 
								eq_var_cst { p0 c1 rsp lb_n evv irv lb_t lb_f ec0 } ⊢|
							∐. ast.test_var◂i1 . 
								lod_tv { irv i0 } ⊢ { irv i0 p0 } 
								lod_tv { irv i1 } ⊢ { irv i1 p1 }
								∐ p0 ⊢ RP.atm◂a0; a0 ⊢ ast.hp◂{ r0 h0 } .
									∐ p1 ⊢ RP.atm◂a1; a1 ⊢ ast.hp◂{ r1 h1 } .
										∐ h0 ⊢ ast.hp.r64◂{} . 
											cmp.idx_idx { rsp r0 r1 ec0 } ⊢ { rsp r0 r1 ec0 } 
											jnz_lb { lb_f ec0 } ⊢ { lb_f ec0 }		
											jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 } 
											∎ { rsp lb_n evv irv lb_t lb_f ec0 }
										∐ h0 ⊢ ast.hp.ref◂q0 . 	
											∐ q0 ⊢ ast.hp.opq◂{} . 
												reg { rsp r0 } ⊢ { rsp r0 sr0 b0 } 
												reg { rsp r1 } ⊢ { rsp r1 sr1 b1 } 
												» _^ sr0,sr1,lb_f ⊢ sr0,sr1,lb_f,e0 
													"\tmov rdi," 1' "\n"
													"\tmov rsi," 0' "\n" 
													`	call eq_s8  
													"\tcmp rax,1\n" 
													"\tjnz LB_" 2d' "\n" // 
												rp8.add_s8 { ec0 e0 } ⊢ ec0 
												jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 }
												∎ { rsp lb_n evv irv lb_t lb_f ec0 }
											∐. . 
												» "ret_f D683" _ ⊢ ee0 
												_emt ee0 ⊢ _ 
												∎| 
										∐. . 
											\[
											ast.hp.pnt h0 ⊢ sh0 
											» "ret_f D673" _ ⊢ ee0 
											_emt ee0 ⊢ _ 
											_emt sh0 ⊢ _ 
											∎|
											\]
											» "\tRT_ERR 0xffff_00f0\n" _ ⊢ ec1
											rp8.add_s8 { ec0 ec1 } ⊢ ec0 
											∎ { rsp lb_n evv irv lb_t lb_f ec0 }
									∐ p1 ⊢ RP.atm◂a1; a1 ⊢ ast.hp_im◂iv; iv ⊢ ast.k_r64◂x1 .
										cmp.idx_im { rsp r0 x1 ec0 } ⊢ { rsp _ _ ec0 } 
										jnz_lb { lb_f ec0 } ⊢ { lb_f ec0 } 
										jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 } 
										∎ { rsp lb_n evv irv lb_t lb_f ec0 }
									∐. . 
										» "ret_f D674" _ ⊢ ee0 
										_emt ee0 ⊢ _ 
										∎|												
								∐ p0 ⊢ RP.atm◂a0; a0 ⊢ ast.hp_im◂iv; iv ⊢ ast.k_r64◂x0 . 
									∐ p1 ⊢ RP.atm◂a1; a1 ⊢ ast.hp◂{ r1 h1 } .
										cmp.idx_im { rsp r1 x0 ec0 } ⊢ { rsp r1 x0 ec0 } 
										jnz_lb { lb_f ec0 } ⊢ { lb_f ec0 } 
										jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 } 
										∎ { rsp lb_n evv irv lb_t lb_f ec0 }
									∐ p1 ⊢ RP.atm◂a1; a1 ⊢ ast.hp_im◂iv; iv ⊢ ast.k_r64◂x1 .
										∐ x0'=x1' . 
											jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 }
											∎ { rsp lb_n evv irv lb_t lb_f ec0 } 
										∐. . 
											jmp_lb { lb_f ec0 } ⊢ { lb_f ec0 }
											∎ { rsp lb_n evv irv lb_t lb_f ec0 } 
									∐. . 
										» "ret_f D675" _ ⊢ ee0 
										_emt ee0 ⊢ _ 
										∎| 	
								∐. . 
									» "ret_f D676" _ ⊢ ee0 
									_emt ee0 ⊢ _ 
									∎| 	
						∐. ast.test_cst◂c0 . 
							$ v1 ⊢ 
							∐ ast.test_var◂i1 . 
								lod_tv { irv i1 } ⊢ { irv i1 p0 } 
								eq_var_cst { p0 c0 rsp lb_n evv irv lb_t lb_f ec0 } ⊢|
							∐. ast.test_cst◂c1 . 
								\[
								∐ c1 ⊢ ast.cst_v◂cv1 . 
									» "ret_f D677" _ ⊢ ee0 
									_emt ee0 ⊢ _ 
									∎| 
								∐. .
									» "ret_f D678" _ ⊢ ee0 
									_emt ee0 ⊢ _ 
									\]
									∎|	
					@.eq_var_cst { p0 c1 rsp lb_n evv irv lb_t lb_f ec0 }
						∐ c1 ⊢ ast.k_r64◂x1 . 
							ast.r64_of_rt { evv p0 } ⊢ { evv x0 } 
							$ x0 ⊢ 
							∐ ast.hp_of◂r0 .
								cmp.idx_im { rsp r0 x1 ec0 } ⊢ { rsp r0 x1 ec0 } 
								jnz_lb { lb_f ec0 } ⊢ { lb_f ec0 } 
								jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 } 
								∎ { rsp lb_n evv irv lb_t lb_f ec0 }
							∐. ast.im_of◂x0 . 
								∐ x0'=x1' . 
									jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 } 
									∎ { rsp lb_n evv irv lb_t lb_f ec0 }
								∐. . 
									jmp_lb { lb_f ec0 } ⊢ { lb_f ec0 } 
									∎ { rsp lb_n evv irv lb_t lb_f ec0 }
						∐ c1 ⊢ ast.k_s8◂s1 . 
							» "ret_f D679" _ ⊢ ee0 
							_emt ee0 ⊢ _ 
							∎|
						∐ c1 ⊢ ast.k_name◂i1 . 
							lod_tv { evv i1 } ⊢ { evv _ c1 }
							eq_var_cst { p0 c1 rsp lb_n evv irv lb_t lb_f ec0 } ⊢|						 
						∐. .
							» "ret_f D780" _ ⊢ ee0 
							_emt ee0 ⊢ _ 
							∎|
					@.cmp_var_r64 { bf p0 x1 rsp lb_n evv irv lb_t lb_f ec0 }
						ast.r64_of_rt { evv p0 } ⊢ { evv x0 } 
						$ x0 ⊢ 
						∐ ast.hp_of◂r0 . 
							cmp.idx_im { rsp r0 x1 ec0 } ⊢ { rsp r0 x1 ec0 }
							$ bf ⊢ 
							∐ bl.t◂{} . 
								jg_lb { lb_f ec0 } ⊢ { lb_f ec0 } 
								jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 }	
								∎ { rsp lb_n evv irv lb_t lb_f ec0 }
							∐. bl.f◂{} . 
								jl_lb { lb_f ec0 } ⊢ { lb_f ec0 } 
								jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 }
								∎ { rsp lb_n evv irv lb_t lb_f ec0 }
						∐. ast.im_of◂x0 . 
							setge { x1 x0 } ⊢ { x1 x0 bc } 
							∐ bf ⊢ bl.t◂{}; bc'=1r . 
								jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 }
								∎ { rsp lb_n evv irv lb_t lb_f ec0 }
							∐ bf ⊢ bl.f◂{}; bc'=0r . 
								jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 }
								∎ { rsp lb_n evv irv lb_t lb_f ec0 }
							∐. . 
								jmp_lb { lb_f ec0 } ⊢ { lb_f ec0 }
								∎ { rsp lb_n evv irv lb_t lb_f ec0 }
					@.cmp_var_cst { bf i0 c1 rsp lb_n evv irv lb_t lb_f ec0 }
						lod_tv { irv i0 } ⊢ { irv i0 p0 } 
						∐ c1 ⊢ ast.k_r64◂x1 . 
							cmp_var_r64 { bf p0 x1 rsp lb_n evv irv lb_t lb_f ec0 } ⊢| 
						∐ c1 ⊢ ast.k_s8◂s1 . 
							» "ret_f D682" _ ⊢ ee0 
							_emt ee0 ⊢ _ 
							∎| 
						∐ c1 ⊢ ast.k_name◂i1 .
							lod_tv { evv i1 } ⊢ { evv i1 c1 } 
							cmp_var_cst { bf i0 c1 rsp lb_n evv irv lb_t lb_f ec0 } ⊢|
						∐. . 
							» "ret_f D983" _ ⊢ ee0 
							_emt ee0 ⊢ _ 
								∎|
					∎∎
				§ 
					@.stt_call { { evv tav } o lb_n rsp irv rl rsp_s p0 is }
						rp8.e {} ⊢ er 
						» REG_N _ ⊢ nb 
						_add { nb rsp } ⊢ { nb rsp }
						push_regs.f { rsp irv rl er } ⊢ { rsp irv v0 rl er n l }
						∐ rsp_s'=0r . 
							$ rsp ⊢ rsp,rsp00 
							mov_ptn2.f2 { { evv tav } rsp00 v0 is p0 er } ⊢ { { evv tav } rsp00 v0 er }
							set_rsp { rsp00 rsp er } ⊢ { rsp er } 
							» _^ o ⊢ o,e1 
								"\tcall " 0' "\n" //
							rp8.add_s8 { er e1 } ⊢ er 
							∎ { { evv tav } o lb_n rsp irv rl rsp_s er l v0 nb } 
						∐. . 
							inc_x lb_n ⊢ { lbr lb_n }  
							» _^ lbr ⊢ lbr,s0 
								"\tpush LB_" 0d' "\n" // 
							rp8.add_s8 { er s0 } ⊢ er 
							» REG_N _ ⊢ nb1 
							_add { nb1 rsp } ⊢ { nb1 rsp } 
							rset.set_t { v0 nb1 } ⊢ { v0 nb1 } 
							$ rsp ⊢ rsp,rsp00  
							_inc rsp00 ⊢ rsp00 
							shft_ptn { rsp00 p0 } ⊢ { rsp00 p0 }
							_add { rsp00 rsp_s } ⊢ { rsp00 rsp_s }
							sub_rsp rsp_s ⊢ { rsp_s ec2 }
							rp8.add_s8 { er ec2 } ⊢ er  
							$ rsp00 ⊢ rsp00,rsp00_0
							mov_ptn2.f2 { { evv tav } rsp00 v0 is p0 er } ⊢ { { evv tav } rsp00 v0 er }
							set_rsp { rsp00 rsp00_0 er } ⊢ { rsp00 er } 
							rset.set_f { v0 nb1 } ⊢ { v0 nb1 } 
							» _^ lbr,o ⊢ lbr,o,s0 
								"\tcall " 1' "\n" 
								"LB_" 0d' ":\n" // 
							rp8.add_s8 { er s0 } ⊢ er 
							∎ { { evv tav } o lb_n rsp irv rl rsp_s er l v0 nb } 
				§ 
					@.stt_jmp_op { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg0 eds ec0 } rl { { se0 rsp_d0 p0 rsp_d1 p1 } is yr } }
						stt_call { { evv tav } se0 lb_n rsp irv rl rsp_d0 p0 is } ⊢ { { evv tav } se0 lb_n rsp irv rl rsp_d0 er l v0 nb } 
						rp8.cct { ec0 er } ⊢ ec0 
						∐ rsp_d1'=0r . 
							pop_regs.f { rsp irv rl p1 l v0 nb } ⊢ { rsp irv rl p1 e1 v0 nb }
							rp8.add_s8 { ec0 e1 } ⊢ ec0 
							f_call {} ⊢ f_c 
							∎ { f_c { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg0 eds ec0 } rl { p1 yr } } 
						∐. . 
							_inc rsp ⊢ rsp 
							shft_ptn { rsp p1 } ⊢ { rsp p1 } 
							_add { rsp rsp_d1 } ⊢ { rsp rsp_d1 }
							pop_regs.f { rsp irv rl p1 l v0 nb } ⊢ { rsp irv rl p1 e1 v0 nb }
							rp8.add_s8 { ec0 e1 } ⊢ ec0 
							f_call {} ⊢ f_c 
							∎ { f_c { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg0 eds ec0 } rl { p1 yr } } 
				§ 
					@.stt_jmp { f_c { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg0 eds ec0 } rl { ys is o yr } } 
						ast.op_of_k { evv o } ⊢ { evv k } 
						∐ k ⊢ ast.k_op_axm◂{ a _ } . 
							$ yr ⊢ yr,yr0 
							op_axm { gfl evv tav tv_n tv lb_n a rsp rl irv is yr0 { eg0 eds ec0 } } ⊢ { gfl evv tav tv_n tv lb_n a rsp rl irv iy { eg0 eds ec0 } }
							f_call {} ⊢ f_c1 
							∎ { f_c1 { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg0 eds ec0 } rl { iy yr } } 
						∐ k ⊢ ast.k_ctr◂{ ia na _ } . 
							ast.stt_adt { ia na is } ⊢ iy 
							RP.atm iy ⊢ iy 
							f_call {} ⊢ f_c1 
							∎ { f_c1 { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg0 eds ec0 } rl { iy yr } } 
						∐ k ⊢ ast.k_op◂{ o_n rsp_s p0 rsp_d1 p1 _ } . 
							» _^ o_n ⊢ o_n,se0 
								"ETR_" 0d' // 
							stt_jmp_op { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg0 eds ec0 } rl { { se0 rsp_s p0 rsp_d1 p1 } is yr } } ⊢| 		
						∐ k ⊢ ast.k_op_prs◂{ o_n yt _ } . 
							$ TX.opn◂RP.atm◂var◂yt ⊢ yt 
							alc_type_k.hp { %[ 0r ] _nil◂{} tav tv_n tv yt } ⊢ { pv_n al tav tv_n tv ht } 
							^ o_n ⊢ o_n,se0 
								"ETR_" 0d' // 
							$ RP.rcd◂_cns◂{ RP.atm◂ast.hp◂{ %[ 0r ] ast.hp.ref◂ast.hp.opq◂{} } _cns◂{ RP.atm◂ast.hp◂{ %[ 1r ] ast.hp.r64◂{} } _nil◂{} } } ⊢ p0
							$ RP.rcd◂_cns◂{ RP.atm◂ast.hp◂{ %[ 0r ] ast.hp.ref◂ast.hp.opq◂{} } _cns◂{ RP.atm◂ast.hp◂{ %[ 1r ] ast.hp.r64◂{} } _cns◂{ RP.atm◂ast.hp◂{ %[ 2r ] %ht } _nil◂{} } } } ⊢ p1
							stt_jmp_op { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg0 eds ec0 } rl { { se0 %[ 0r ] p0 %[ 0r ] p1 } is yr } } ⊢| 									
						∐ k ⊢ ast.k_op_gnr◂{ og o_n dp lcg _ } . 
							_none {} ⊢ o_p 
							find_gf { evv tv gfl o_n ys o_p } ⊢ { evv tv gfl o_n ys _ oa0 } 
							∐ oa0 ⊢ _some◂{ lb ig o_k y1 rsp_g0 p0 rsp_g1 p1 } . 
								∐ f_c ⊢ f_jmp◂lb_i; lb_i'=lb' . 
									rset.ini {} ⊢ v0 
									mov_ptn2.f2 { { evv tav } rsp v0 is p0 ec0 } ⊢ { { evv tav } rsp v0 ec0 }
									set_rsp { rsp rsp_g0 ec0 } ⊢ { rsp ec0 } 
									» _^ lb ⊢ lb,sc0 
										"\tjmp JMP_" 0d' "\n" // 
									rp8.add_s8 { ec0 sc0 } ⊢ ec0 
									f_jmp lb_i ⊢ f_c1 
									∎ { f_c1 { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg0 eds ec0 } rl { p1 yr } } 
								∐. . 
									» _^ lb ⊢ lb,se0 
										"LB_" 0d' // 
									stt_jmp_op { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg0 eds ec0 } rl { { se0 rsp_g0 p0 rsp_g1 p1 } is yr } } ⊢| 
							∐. . 
								$ yr ⊢ yr,yr0
								_none {} ⊢ o_k 
								gnr_lc_code { o_k { o_n ys yr0 dp } { gfl cl } lb_n { ev evv } rv tav tv_n tv lcg } ⊢ { { eeg0 eds0 ee0 } R0 { gfl cl } lb_n { ev evv } rv tav tv_n tv }
								$ R0 ⊢ { lb ig o_k y1 rsp_g0 p0 rsp_g1 p1 }
								rp8.cct { eg0 eeg0 } ⊢ eg0 
								rp8.cct { eg0 ee0 } ⊢ eg0 
								rp8.cct { eds eds0 } ⊢ eds 
								» _^ lb ⊢ lb,se0 
									"LB_" 0d' // 
								stt_jmp_op { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg0 eds ec0 } rl { { se0 rsp_g0 p0 rsp_g1 p1 } is yr } } ⊢| 
						∐ k ⊢ ast.k_app◂{ k0 k1 } . 
							ast.op_of_k { evv k0 } ⊢ { evv k0 } 
							∐ k0 ⊢ ast.k_op_gnr◂{ og o_n dp lcg _ } .
								ast.evl_ct_ptn { evv k1 } ⊢ { evv k1 } 
								_some k1 ⊢ o_p 
								find_gf { evv tv gfl o_n ys o_p } ⊢ { evv tv gfl o_n ys o_p oa0 } 
								smt o_p ⊢ k1 
								∐ oa0 ⊢ _some◂{ lb ig o_k y1 rsp_g0 p0 rsp_g1 p1 } . 
									∐ f_c ⊢ f_jmp◂lb_i; lb_i'=lb' . 
										rset.ini {} ⊢ v0 
										mov_ptn2.f2 { { evv tav } rsp v0 is p0 ec0 } ⊢ { { evv tav } rsp v0 ec0 }
										set_rsp { rsp rsp_g0 ec0 } ⊢ { rsp ec0 } 
										» _^ lb ⊢ lb,sc0 
											"\tjmp JMP_" 0d' "\n" // 
										rp8.add_s8 { ec0 sc0 } ⊢ ec0 
										f_jmp lb_i ⊢ f_c1 
										∎ { f_c1 { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg0 eds ec0 } rl { p1 yr } } 
									∐. . 
										» _^ lb ⊢ lb,se0 
											"LB_" 0d' // 
										stt_jmp_op { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg0 eds ec0 } rl { { se0 rsp_g0 p0 rsp_g1 p1 } is yr } } ⊢| 
								∐. . 
									$ k1 ⊢ k1,k2 
									_some k2 ⊢ o_k 
									smt og ⊢ { c_n pg } 
									exc_tpl { ev evv tv tv_n pg k1 } ⊢ { ev evv tv tv_n pg k1 } 
									$ yr ⊢ yr,yr0
									gnr_lc_code { o_k { o_n ys yr0 dp } { gfl cl } lb_n { ev evv } rv tav tv_n tv lcg } ⊢ { { eeg0 eds0 ee0 } R0 { gfl cl } lb_n { ev evv } rv tav tv_n tv }
									set_tpl { ev evv tv tv_n pg k1 } ⊢ { ev evv tv tv_n pg k1 } 
									$ R0 ⊢ { lb ig o_k y1 rsp_g0 p0 rsp_g1 p1 }
									rp8.cct { eg0 eeg0 } ⊢ eg0 
									rp8.cct { eg0 ee0 } ⊢ eg0 
									rp8.cct { eds eds0 } ⊢ eds 
									» _^ lb ⊢ lb,se0 
										"LB_" 0d' // 
									stt_jmp_op { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg0 eds ec0 } rl { { se0 rsp_g0 p0 rsp_g1 p1 } is yr } } ⊢| 
							∐ k0 ⊢ ast.k_op_axm◂{ ix v0 } . 
								∐ ix'=EX.prs . 
									ast.evl_ct_ptn { evv k1 } ⊢ { evv k1 }
									∐ k1 ⊢ RP.atm◂k1; k1 ⊢ ast.k_op_prs◂{ o_n yt _ } .
										$ TX.opn◂RP.atm◂var◂yt ⊢ yt 
										alc_type_k.hp { %[ 0r ] _nil◂{} tav tv_n tv yt } ⊢ { pv_n al tav tv_n tv ht } 
										^ o_n ⊢ o_n,se0 
											"ETR_" 0d' // 
										$ RP.rcd◂_cns◂{ RP.atm◂ast.hp◂{ %[ 0r ] ast.hp.ref◂ast.hp.opq◂{} } _cns◂{ RP.atm◂ast.hp◂{ %[ 1r ] ast.hp.r64◂{} } _nil◂{} } } ⊢ p0
										$ RP.rcd◂_cns◂{ RP.atm◂ast.hp◂{ %[ 0r ] ast.hp.ref◂ast.hp.opq◂{} } _cns◂{ RP.atm◂ast.hp◂{ %[ 1r ] ast.hp.r64◂{} } _cns◂{ RP.atm◂ast.hp◂{ %[ 2r ] %ht } _nil◂{} } } } ⊢ p1
										stt_jmp_op { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg0 eds ec0 } rl { { se0 %[ 0r ] p0 %[ 0r ] p1 } is yr } } ⊢| 									
									\[
									∎|
									\]
									∐. . 
									_emt %[ "stt_call app 2" ] ⊢ _ 
									∎| 	
								∐. . 
									_emt %[ "stt_call app 0" ] ⊢ _ 
									∎|  
							∐. .
																_emt %[ "stt_call app 1" ] ⊢ _ 

								∎|  
						∐. . 
							ast.pnt.cst { evv k } ⊢ { evv sk } 
							» _^ sk ⊢ _,ec1 
								"; " "#" 0' ".." " ⊢|\n"  // 
							_emt ec1 ⊢ _ 
							∎|
					@.f { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv lc { eg0 eds ec0 } rl ft } 
						ret_f { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv lc { eg0 eds ec0 } rl ft } ⊢|						
					@.ret_f { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv lc { eg0 eds ec0 } rl ft } 
						$ rl ⊢ rl,rl0 
						pnt_env { evv irv rsp rl0 } ⊢ { evv irv rsp srl } 
						rp8.add_s8 { ec0 srl } ⊢ ec0 
						$ lc ⊢
						∐ ast.jmp◂{ o x } . 
							$ x ⊢ x,s0
							crt_type_k.src_ptn { { ev tv_n tv rv } s0 } ⊢ { { ev tv_n tv rv } ys } 
							inst_cl { tv_n tv ys cl } ⊢ { tv_n tv ys cl }
							idx.csm_ptn { { evv irv rl } x } ⊢ { { evv irv rl } is }
							$ is ⊢ is,is0 
							ast.pnt.rt { evv is0 } ⊢ { evv sis }
							$ o ⊢ o,o0 
							ast.pnt.ct_ptn { evv o0 } ⊢ { evv so } 
							» _^ so,sis ⊢ so,sis,ec1 
								"; #" 0' " " 1' " ⊢|\n" //
							rp8.add_s8 { ec0 ec1 } ⊢ ec0 
							dlt.env { gfl evv irv tav lb_n rsp rl { eg0 eds ec0 } } ⊢ { gfl evv irv tav lb_n rsp { eg0 eds ec0 } } 
							$ _nil◂{} ⊢ rl 
							» 1r _ ⊢ lv 
							slv.ct_ptn { { lv ev tv_n tv } o } ⊢ { { lv ev tv_n tv } o yk } 
							_dec lv ⊢ lv 
							gen { tv_n tv lv yk } ⊢ { tv_n tv lv yk }
							_inc lv ⊢ lv  
							∐ ft ⊢ f_etr◂{ lb_i rsp_d pr yr } . 
								$ yr ⊢ yr,yr0 
								iug_imp { tv_n tv lv ys yr0 yk } ⊢ { tv_n tv lv ys _ yk } 
								$ lb_i ⊢ lb_i,lb_i0 
								f_jmp lb_i0 ⊢ f_c 
								stt_jmp { f_c { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg0 eds ec0 } rl { ys is o yr } } ⊢ { f_c { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg0 eds ec0 } rl { p1 yr } }  
								∐ f_c ⊢ f_call◂{} . 
									rset.ini {} ⊢ vs0
									$ pr ⊢ pr,pr0
									mov_ptn2.f2 { { evv tav } rsp vs0 p1 pr0 ec0 } ⊢ { { evv tav } rsp vs0 ec0 } 
									$ rsp_d ⊢ rsp_d,rsp_d0 
									set_rsp { rsp rsp_d0 ec0 } ⊢ { rsp ec0 }
									∐ rsp_d'=0r . 
										» "\tret\n" _ ⊢ sc1 
										rp8.add_s8 { ec0 sc1 } ⊢ ec0 
										f_etr { lb_i rsp_d pr yr } ⊢ ft 
										∎ { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg0 eds ec0 } rl ft } 
									∐. . 
										» _^ rsp ⊢ rsp,sc1 
											"\tpush QWORD [rsp+8*" 0d' "]\n"
											`	ret
											//
										rp8.add_s8 { ec0 sc1 } ⊢ ec0 
										f_etr { lb_i rsp_d pr yr } ⊢ ft 
										∎ { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg0 eds ec0 } rl ft } 							
								∐. f_c ⊢ f_jmp◂lb_i0 . 
									f_etr { lb_i rsp_d pr yr } ⊢ ft 
									∎ { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg0 eds ec0 } rl ft } 													
							∐ ft ⊢ f_inl◂{ { lb_i rsp_d pr yr } lb_r } . 
								$ yr ⊢ yr,yr0 
								iug_imp { tv_n tv lv ys yr0 yk } ⊢ { tv_n tv lv ys _ yk } 
								$ lb_i ⊢ lb_i,lb_i0
								f_jmp lb_i0 ⊢ f_c 
								stt_jmp { f_c { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg0 eds ec0 } rl { ys is o yr } } ⊢ { f_c { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg0 eds ec0 } rl { p1 yr } }  
								∐ f_c ⊢ f_call◂{} . 
									rset.ini {} ⊢ vs0
									$ pr ⊢ pr,pr0
									mov_ptn2.f2 { { evv tav } rsp vs0 p1 pr0 ec0 } ⊢ { { evv tav } rsp vs0 ec0 } 
									$ rsp_d ⊢ rsp_d,rsp_d0 
									set_rsp { rsp rsp_d0 ec0 } ⊢ { rsp ec0 }
									jmp_lb { lb_r ec0 } ⊢ { lb_r ec0 } 
									f_inl { { lb_i rsp_d pr yr } lb_r } ⊢ ft 
									∎ { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg0 eds ec0 } rl ft } 
								∐. f_c ⊢ f_jmp◂lb_i0 . 
									f_inl { { lb_i rsp_d pr yr } lb_r } ⊢ ft 
									∎ { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg0 eds ec0 } rl ft } 
							∐. . 
								» "ret_f D664" _ ⊢ ee0 
									_emt ee0 ⊢ _ 
									∎| 
						∐ ast.seq◂{ ll lc } .
							$ ll ⊢
							∐ ast.op_name◂{ o s d } .			
								$ s ⊢ s,s0
								crt_type_k.src_ptn { { ev tv_n tv rv } s0 } ⊢ { { ev tv_n tv rv } ys } 
								idx.csm_ptn { { evv irv rl } s } ⊢ { { evv irv rl } is }
								$ is ⊢ is,is0 
								ast.pnt.rt { evv is0 } ⊢ { evv sis }
								$ d ⊢ d,d0 
								crt_type_k.dst_ptn { { tv rv } d0 } ⊢ { { tv rv } yd }
								inst_cl { tv_n tv ys cl } ⊢ { tv_n tv ys cl }
								inst_cl { tv_n tv yd cl } ⊢ { tv_n tv yd cl } 
								$ o ⊢ o,o0 
								ast.pnt.ct_ptn { evv o0 } ⊢ { evv so } 
								» 1r _ ⊢ lv 
								slv.ct_ptn { { lv ev tv_n tv } o } ⊢ { { lv ev tv_n tv } o yk }
								_dec lv ⊢ lv 
								gen { tv_n tv lv yk } ⊢ { tv_n tv lv yk }
								_inc lv ⊢ lv  
								iug_imp { tv_n tv lv ys yd yk } ⊢ { tv_n tv lv ys yd yk } 
								rp8.e {} ⊢ ec1 
								f_call {} ⊢ f_c 
								stt_jmp { f_c { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg0 eds ec1 } rl { ys is o yd } } ⊢ { _ { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg0 eds ec1 } rl { p1 yd } }  
								$ p1 ⊢ p1,iy 
								ast.pnt.rt { evv iy } ⊢ { evv sp1 } 
								» _^ so,sis,sp1 ⊢ _,sis,_,el1 
									"; #" 0' " " 1' " ⊢ " 2' "\n" //
								rp8.add_s8 { ec0 el1 } ⊢ ec0 
								rp8.cct { ec0 ec1 } ⊢ ec0
								$ _nil◂{} ⊢ dl 
								idx.crt_ptn { irv d p1 rl dl } ⊢ { irv rl dl } 
								dlt.f { gfl evv tav lb_n rsp dl { eg0 eds ec0 } } ⊢ { gfl evv tav lb_n rsp { eg0 eds ec0 } }
								ret_f { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv lc { eg0 eds ec0 } rl ft } ⊢|
						
							∐. ast.op_exp_s8◂{ pl ss ds } .
								» 0r _ ⊢ dn 
								$ pl ⊢ pl,pl0 
								rp8.e {} ⊢ ep0 
								» _^ _ ⊢ ec1 
									"; » _^ .. ⊢ ..\n"	// 
								rp8.add_s8 { ec0 ec1 } ⊢ ec0 
								exp_s8.f { gfl evv tav lb_n rsp irv rl ss ds pl { eg0 eds ec0 } } ⊢ { gfl evv tav lb_n rsp irv rl { eg0 eds ec0 } }
								ret_f { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv lc { eg0 eds ec0 } rl ft } ⊢|
						∐ ast.mtc◂lm .
							∐ ft ⊢ f_rtm◂ret0 . 
								» "ret_f D663" _ ⊢ ee0 
									_emt ee0 ⊢ _ 
									∎|
							∐. .  
								mtc { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv lm { eg0 eds ec0 } rl ft } ⊢| 
						∐ ast.op_id◂{ sp ll } . 
							idx.csm_ptn { { evv irv rl } sp } ⊢ { { evv irv rl } is }
							$ is ⊢ is,is0 
							ast.pnt.rt { evv is0 } ⊢ { evv sis }
							stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl v0 } 
							$ is ⊢ is,is0 
							stt_v.mk_rset { is0 v0 } ⊢ v0 
							$ ll ⊢ 
							∐ ast.id_mtc◂ilm . 
								∐ ft ⊢ f_rtm◂ret0 . 
									» "ret_f D662" _ ⊢ ee0 
									_emt ee0 ⊢ _ 
									∎| 
								∐. . 
									id_mtc { { gfl cl } { is sis } lb_n { ev evv } rsp { rv irv } tav tv_n tv ilm { eg0 eds ec0 } rl ft } ⊢| 
							∐. ast.id_line◂{ dl lc } . 
								rpc.id { v0 gfl evv tav lb_n rsp irv sis is rl dl } ⊢ { v0 gfl evv tav lb_n rsp irv sis is rl { eg1 eds1 e1 } }
								rp8.cct { eds eds1 } ⊢ eds 
								rp8.cct { ec0 e1 } ⊢ ec0 
								rp8.cct { eg0 eg1 } ⊢ eg0 
								ret_f { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv lc { eg0 eds ec0 } rl ft } ⊢|
						∐ ast.ret◂s .
							$ s ⊢ 
							∐ _some◂s . 
								idx.csm_ptn { { evv irv rl } s } ⊢ { { evv irv rl } is }
								$ is ⊢ is,is0 
								ast.pnt.rt { evv is0 } ⊢ { evv sis }
								» _^ sis ⊢ sis,ec1 
									"; ∎ " 0' "\n"
									 // 
								rp8.add_s8 { ec0 ec1 } ⊢ ec0 
								dlt.env { gfl evv irv tav lb_n rsp rl { eg0 eds ec0 } } ⊢ { gfl evv irv tav lb_n rsp { eg0 eds ec0 } } 
								$ _nil◂{} ⊢ rl 
								∐ ft ⊢ f_etr◂{ lb_i rsp_d pr yr } . 
									rset.ini {} ⊢ v 
									$ pr ⊢ pr,pr0 
									mov_ptn2.f2 { { evv tav } rsp v is pr0 ec0 } ⊢ { { evv tav } rsp v ec0 } 
									∐ rsp_d'=0r . 
										add_rsp rsp ⊢ { rsp es0 }
										rp8.add_s8 { ec0 es0 } ⊢ ec0 
										» "\tret\n" _ ⊢ ret 
										rp8.add_s8 { ec0 ret } ⊢ ec0
										f_etr { lb_i rsp_d pr yr } ⊢ ft 
										∎ { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg0 eds ec0 } rl ft }
									∐. .  
										$ rsp_d ⊢ rsp_d,rsp_d0
										set_rsp { rsp rsp_d0 ec0 } ⊢ { rsp ec0 } 
										» _^ rsp ⊢ rsp,ret 
											"\tpush QWORD [rsp+8*" 0d' "]\n"
											`	ret
											//
										rp8.add_s8 { ec0 ret } ⊢ ec0 
										f_etr { lb_i rsp_d pr yr } ⊢ ft 
										∎ { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg0 eds ec0 } rl ft }
								∐ ft ⊢ f_inl◂{ { lb_i rsp_d pr yr } lb_r } . 
									$ pr ⊢ pr,pr0 
									rset.ini {} ⊢ v 
									mov_ptn2.f2 { { evv tav } rsp v is pr0 ec0 } ⊢ { { evv tav } rsp v ec0 } 
									$ rsp_d ⊢ rsp_d,rsp_d0
									set_rsp { rsp rsp_d0 ec0 } ⊢ { rsp ec0 } 
									jmp_lb { lb_r ec0 } ⊢ { lb_r ec0 }
									f_inl { { lb_i rsp_d pr yr } lb_r } ⊢ ft 
									∎ { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg0 eds ec0 } rl ft }
								∐. . 
									» "ret_f D661" _ ⊢ ee0 
									_emt ee0 ⊢ _ 
									∎| 
							∐. _none◂{} . 
								∐ ft ⊢ f_rtm◂ret . 
									» "; ∎\n" _ ⊢ sc0 
									rp8.add_s8 { ec0 sc0 } ⊢ ec0 
									$ ret ⊢ ret,ret0 
									rp8.add_s8 { ec0 ret0 } ⊢ ec0
									f_rtm ret ⊢ ft 
									∎ { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg0 eds ec0 } rl ft }
								∐. . 
									» "ret_f D660" _ ⊢ ee0 
									_emt ee0 ⊢ _ 
									∎|
						∐. ast.exn◂ne .
							» _^ ne ⊢ ne,se 
								"; ∎|\n" 
								"exn " 0d' ":\n" // 
							printf { eds ec0 se lb_n } ⊢ { eds ec0 se lb_n }
							» _^ _ ⊢ ec1 
								"\tjmp err\n" // 
							rp8.add_s8 { ec0 ec1 } ⊢ ec0 
							∎ { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg0 eds ec0 } rl ft } 		
					@.gnr_lc_code { o_k { o gys gyd dp } { gfl cl } lb_n { ev evv } rv tav tv_n tv lc } 
						ini_tv {} ⊢ irv_g  
						ini_tv {} ⊢ rv_g 
						
						» 1r _ ⊢ lv_g 
						slv.crt_dst_ptn { { lv_g rv_g tv tv_n } dp } ⊢ { { lv_g rv_g tv tv_n } dp yd } 
						$ gys ⊢ gys,gys0 
						inst { tv_n tv lv_g gys0 } ⊢ { tv_n tv lv_g gys0 }
						$ yd ⊢ yd,yd0 
						unify.f { tv gys0 yd0 } ⊢ tv
						slv.r { lv_g ev rv_g tv tv_n lc } ⊢ { lv_g ev rv_g tv tv_n lc yr } 
						_dec lv_g ⊢ lv_g 
						gen { tv_n tv lv_g yd } ⊢ { tv_n tv lv_g yd } 
						
						inc_x lb_n ⊢ { lbg lb_n } 
						rset.ini {} ⊢ s0 
						$ gys ⊢ gys,gys0 
						alc_type_k.f { %[ 0r ] _nil◂{} tav tv_n tv s0 gys0 } ⊢ { pv_n alp tav tv_n tv s0 p0 } 
						rset.ini {} ⊢ sr0 
						$ gyd ⊢ gyd,gyd0 
						alc_type_k.f { pv_n alp tav tv_n tv sr0 gyd0 } ⊢ { pv_n alp tav tv_n tv sr0 pr0 } 
						$ p0 ⊢ p0,p00 
						ast.pnt.rt { evv p00 } ⊢ { evv sp0 } 
						$ pr0 ⊢ pr0,pr00 
						ast.pnt.rt { evv pr00 } ⊢ { evv spr0 } 
						$ pr0 ⊢ pr0,pr0_0 
						mk_rsp pr0_0 ⊢ rsp_d 
						$ p0 ⊢ p0,p00 
						mk_rsp p00 ⊢ rsp 
						$ yd ⊢ dk 
						$ p0 ⊢ p0,p00 
						idx.crt_ptn { irv_g dp p00 _nil◂{} _nil◂{} } ⊢ { irv_g rl dl } 
							
						$ pr0 ⊢ pr0,pr00 
						$ rsp ⊢ rsp,rsp0 
						$ rsp_d ⊢ rsp_d,rsp_d0 
						rp8.e {} ⊢ ee0 
						$ gys ⊢ gys,gys0 
						$ gyd ⊢ gyd,gyd0 
						imp { gys0 gyd0 } ⊢ yx 
						RP.atm yx ⊢ yx 
						
						$ gys ⊢ gys,gys0 
						inst { tv_n tv %[ 1r ] gys0 } ⊢ { tv_n tv lvg gys0 } 
						inst.al { { tv_n tv lvg _nil◂{} } dk } ⊢ { { tv_n tv lvg clg } dk } 

						$ dk ⊢ dk,dk0 
						unify.f { tv dk0 gys0 } ⊢ tv 
						_dec lvg ⊢ lvg 
						gen { tv_n tv lvg dk } ⊢ { tv_n tv lvg _ } 
						$ yx ⊢ yx,yx0 
						pnt_type_k { tv yx0 } ⊢ { tv syx } 
						$ o_k ⊢ o_k,o_k0 
						opn.pnt◂◂ast.pnt.ct_ptn { evv o_k0 } ⊢ { evv so_k } 
						» _^ lbg,o,sp0,spr0,syx,so_k ⊢ lbg,o,_,_,_,_,ec1 
							"LB_" 0d' ": ;; #" 1d' "◂◂(" 5' ") " 2' " ⊢ " 3' " : " 4' "\n" //
						» _^ lbg ⊢ lbg,sc0 
							"JMP_" 0d' ":\n" // 
						_emt ec1 ⊢ ec1 
						$ lbg ⊢ lbg,lbg0 
						$ { lbg o o_k gys rsp0 p0 rsp_d pr0 } ⊢ R0,R1
						gnr_etr R1 ⊢ R1
						_cns { R1 gfl } ⊢ gfl
						rp8.add_s8 { ee0 ec1 } ⊢ ee0 
						rp8.e {} ⊢ eds 
						rp8.e {} ⊢ eg0 
						∐ rsp'=0r . 
							rp8.add_s8 { ee0 sc0 } ⊢ ee0 
							f_etr { lbg0 rsp_d0 pr00 gyd } ⊢ ft 
							f { { gfl clg } lb_n { ev evv } rsp { rv_g irv_g } tav tv_n tv lc { eg0 eds ee0 } rl ft } ⊢ { { gfl clg } lb_n { ev evv } rsp { rv_g irv_g } tav tv_n tv { eg0 eds ee0 } rl ft } 
							∎ { { eg0 eds ee0 } R0 { gfl cl } lb_n { ev evv } rv tav tv_n tv } 
						∐. . 
							» "\tadd rsp,8\n" _ ⊢ sc1 
							rp8.add_s8 { ee0 sc1 } ⊢ ee0
							rp8.add_s8 { ee0 sc0 } ⊢ ee0 
							f_etr { lbg0 rsp_d0 pr00 gyd } ⊢ ft 
							f { { gfl cl } lb_n { ev evv } rsp { rv_g irv_g } tav tv_n tv lc { eg0 eds ee0 } rl ft } ⊢ { { gfl cl } lb_n { ev evv } rsp { rv_g irv_g } tav tv_n tv { eg0 eds ee0 } rl ft } 
							∎ { { eg0 eds ee0 } R0 { gfl cl } lb_n { ev evv } rv tav tv_n tv }
		
					@.mtc { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv lm { eg0 eds ec0 } rl ft } 
						$ lm ⊢ 
						∐ p_cns◂{ { tl me } lm } .  
							$ _nil◂{} ⊢ gl 
							» 0r _ ⊢ gl_n 
							$ { gl_n gl } ⊢ gl 
							stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl vs0 }
							$ rl ⊢ rl,rl0 
							inc_x lb_n ⊢ { lb0 lb_n } 
							lb_etr { lb0 rp8.e◂{} } ⊢ { lb0 slb0 } 
							$ _nil◂{} ⊢ dl
							$ rsp ⊢ rsp,rsp0 
							$ rsp ⊢ rsp,rsp1
							mtc_line { cl vs0 gl dl lb_n _some◂{ %lb0 %rsp1 } { ev evv } rsp0 { rv irv } tav tv_n tv tl { eg0 eds ec0 } rl0 } ⊢ { cl vs0 gl dl lb_n { ev evv } rsp0 { rv irv } tav tv_n tv { eg0 eds ec0 } rl0 } 
							$ gl ⊢ { _ gl } 
							gbg.dlt { gl ec0 } ⊢ ec0 
							mtc_etr { { gfl cl } lb_n { ev evv } rsp0 { rv irv } tav tv_n tv me { eg0 eds ec0 } rl0 ft } ⊢ { { gfl cl } lb_n { ev evv } rsp0 { rv irv } tav tv_n tv { eg0 eds ec0 } rl0 ft } 
							rp8.cct { ec0 slb0 } ⊢ ec0 
							mtc { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv lm { eg0 eds ec0 } rl ft } ⊢|
						∐. p_end◂{ tl me } .
							stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl vs0 }
							$ { %[ 0r ] _nil◂{} } ⊢ gl 
							$ _nil◂{} ⊢ dl 
							mtc_line { cl vs0 gl dl lb_n _none◂{} { ev evv } rsp { rv irv } tav tv_n tv tl { eg0 eds ec0 } rl } ⊢ { cl vs0 gl dl lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg0 eds ec0 } rl } 
							$ gl ⊢ { _ gl } 
							gbg.dlt { gl ec0 } ⊢ ec0 
							mtc_etr { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv me { eg0 eds ec0 } rl ft } ⊢ { { gfl cl } lb_n { ev evv } rsp { rv irv  } tav tv_n tv { eg0 eds ec0 } rl ft } 
							∎ { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg0 eds ec0 } rl ft }
					@.mtc_etr { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv me { eg0 eds ec0 } rl ft } 
						$ me ⊢ 
						∐ ast.mtc_rmf◂lm0 .
							mtc { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv lm0 { eg0 eds ec0 } rl ft } ⊢| 
						∐ ast.mtc_id_rmf◂{ sp0 ilm0 } .  
							idx.csm_ptn { { evv irv rl } sp0 } ⊢ { { evv irv rl } is0 }
							$ is0 ⊢ is0,is00 
							ast.pnt.rt { evv is00 } ⊢ { evv sis }
							id_mtc { { gfl cl } { is0 sis } lb_n { ev evv } rsp { rv irv } tav tv_n tv ilm0 { eg0 eds ec0 } rl ft } ⊢| 
						∐. ast.mtc_code◂lc0 . 
							ret_f { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv lc0 { eg0 eds ec0 } rl ft } ⊢|
					@.mtc_test_T◂◂F { rsp lb_n evv irv v0 v1 ec0 o0 } 
						$ o0 ⊢ 
						∐ _some◂{ lb0 rsp0 } . 
							inc_x lb_n ⊢ { lb_t lb_n } 
							inc_x lb_n ⊢ { lb_f lb_n }			 
							F { rsp lb_n evv irv lb_t lb_f v0 v1 ec0 } ⊢ { rsp lb_n evv irv lb_t lb_f ec0 }
							lb_etr { lb_f ec0 } ⊢ { lb_f ec0 } 
							$ rsp ⊢ rsp,rsp1 
							$ lb0 ⊢ lb0,lb00 
							$ rsp0 ⊢ rsp0,rsp00
							rb_rsp { rsp1 rsp0 lb0 ec0 } ⊢ { rsp0 lb0 ec0 }
							lb_etr { lb_t ec0 } ⊢ { lb_t ec0 } 											
							_some { lb00 rsp00 } ⊢ o0 
							∎ { rsp lb_n evv irv ec0 o0 }
						∐. _none◂{} . 
							_none {} ⊢ o0 
							∎ { rsp lb_n evv irv ec0 o0 }
					@.mtc_line { cl vs0 gl dl lb_n o0 { ev evv } rsp { rv irv } tav tv_n tv tl { eg0 eds ec0 } rl } 
						$ tl ⊢ 
						∐ _cns◂{ t tl } . 
							$ t ⊢ 
							∐ ast.mtc_id◂{ sp mp } . 
								idx.csm_ptn { { evv irv rl } sp } ⊢ { { evv irv rl } isp } 
								$ isp ⊢ isp,isp0 
								ast.pnt.rt { evv isp0 } ⊢ { evv sisp } 
								$ isp ⊢ isp,isp0
								alc_mtc_ptn.f { cl { gl o0 rsp lb_n } rl ev evv rv irv tav tv_n tv vs0 isp0 mp dl } ⊢ { cl { gl o0 rsp lb_n } rl ev evv rv irv tav tv_n tv vs0 e0 dl p1 } 
								∐ p1 ⊢ _some◂p1 . 
									$ p1 ⊢ p1,p10 
									ast.pnt.rt { evv p10 } ⊢ { evv sp1 } 
									» _^ sisp,sp1 ⊢ sisp,sp1,ec1 
										";; ?; " 0' " ⊢ " 1' "\n" // 
									rp8.add_s8 { ec0 ec1 } ⊢ ec0 
									rp8.cct { ec0 e0 } ⊢ ec0
									mtc_line { cl vs0 gl dl lb_n o0 { ev evv } rsp { rv irv } tav tv_n tv tl { eg0 eds ec0 } rl } ⊢|
								∐. . 
									∎ { cl vs0 gl dl lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg0 eds ec0 } rl }
							∐ ast.mtc_cmp_test◂{ v0 v1 } .  
								mtc_test_T◂◂test.cmp { rsp lb_n evv irv v0 v1 ec0 o0 } ⊢ { rsp lb_n evv irv ec0 o0 }										
								mtc_line { cl vs0 gl dl lb_n o0 { ev evv } rsp { rv irv } tav tv_n tv tl { eg0 eds ec0 } rl } ⊢|				
							∐. ast.mtc_test◂{ v0 v1 } .  
								mtc_test_T◂◂test.eq { rsp lb_n evv irv v0 v1 ec0 o0 } ⊢ { rsp lb_n evv irv ec0 o0 }										
								mtc_line { cl vs0 gl dl lb_n o0 { ev evv } rsp { rv irv } tav tv_n tv tl { eg0 eds ec0 } rl } ⊢|				
						∐. _nil◂{} . 
							∎ { cl vs0 gl dl lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg0 eds ec0 } rl }
					
					@.id_mtc { { gfl cl } { is sis } lb_n { ev evv } rsp { rv irv } tav tv_n tv ilm { eg0 eds ec0 } rl ft } 
						$ ilm ⊢ 
						∐ p_cns◂{ { mp tl me } ilm } .
							stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl vs0 }
							$ is ⊢ is,is0 
							stt_v.mk_rset { is0 vs0 } ⊢ vs0 
							gbg.ini {} ⊢ gl 
							$ _nil◂{} ⊢ dl
							$ rl ⊢ rl,rl0 
							$ is ⊢ is,is0 
							$ rsp ⊢ rsp,rsp0 
							$ rsp ⊢ rsp,rsp00
							inc_x lb_n ⊢ { lb0 lb_n } 
							» _^ lb0 ⊢ lb0,slb0 
								"LB_" 0d' ":\n" // 
							_some { lb0 rsp00 } ⊢ o0 
							alc_mtc_ptn.f { cl { gl o0 rsp0 lb_n } rl0 ev evv rv irv tav tv_n tv vs0 is0 mp dl } ⊢ { cl { gl o0 rsp0 lb_n } rl0 ev evv rv irv tav tv_n tv vs0 e0 dl p1 } 
							∐ p1 ⊢ _some◂p1 . 
								$ p1 ⊢ p1,p10 
								ast.pnt.rt { evv p10 } ⊢ { evv sp1 } 
								» _^ sis,sp1 ⊢ sis,sp1,ec1 
									";; ? " 0' " ⊢ " 1' "\n" // 
								rp8.add_s8 { ec0 ec1 } ⊢ ec0 
								rp8.cct { ec0 e0 } ⊢ ec0 
								mtc_line { cl vs0 gl dl lb_n o0 { ev evv } rsp0 { rv irv  } tav tv_n tv tl { eg0 eds ec0 } rl0 } ⊢ { cl vs0 gl dl lb_n { ev evv } rsp0 { rv irv  } tav tv_n tv { eg0 eds ec0 } rl0 }
								$ gl ⊢ { _ gl } 
								gbg.dlt { gl ec0 } ⊢ ec0 
								mtc_etr { { gfl cl } lb_n { ev evv } rsp0 { rv irv } tav tv_n tv me { eg0 eds ec0 } rl0 ft } ⊢ { { gfl cl } lb_n { ev evv } rsp0 { rv irv } tav tv_n tv { eg0 eds ec0 } rl0 ft } 
								rp8.add_s8 { ec0 slb0 } ⊢ ec0 
								id_mtc { { gfl cl } { is sis } lb_n { ev evv } rsp { rv irv } tav tv_n tv ilm { eg0 eds ec0 } rl ft } ⊢| 
							∐. . 
								id_mtc { { gfl cl } { is sis } lb_n { ev evv } rsp { rv irv } tav tv_n tv ilm { eg0 eds ec0 } rl ft } ⊢| 								
						∐. p_end◂{ mp tl me } .
							stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl vs0 }
							$ is ⊢ is,is0 
							stt_v.mk_rset { is0 vs0 } ⊢ vs0 
							gbg.ini {} ⊢ gl 
							$ _nil◂{} ⊢ dl
							_none {} ⊢ o0
							alc_mtc_ptn.f { cl { gl o0 rsp lb_n } rl ev evv rv irv tav tv_n tv vs0 is mp dl } ⊢ { cl { gl o0 rsp lb_n } rl ev evv rv irv tav tv_n tv vs0 e0 dl p1 } 
							∐ p1 ⊢ _some◂p1 . 
								$ p1 ⊢ p1,p10 
								ast.pnt.rt { evv p10 } ⊢ { evv sp1 } 
								» _^ sis,sp1 ⊢ sis,sp1,ec1 
									";; ?. " 0' " ⊢ " 1' "\n" // 
								rp8.add_s8 { ec0 ec1 } ⊢ ec0 
								rp8.cct { ec0 e0 } ⊢ ec0 
								mtc_line { cl vs0 gl dl lb_n o0 { ev evv } rsp { rv irv } tav tv_n tv tl { eg0 eds ec0 } rl } ⊢ { cl vs0 gl dl lb_n { ev evv }  rsp { rv irv  } tav tv_n tv { eg0 eds ec0 } rl }
								$ gl ⊢ { _ gl } 
								gbg.dlt { gl ec0 } ⊢ ec0
								mtc_etr { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv me { eg0 eds ec0 } rl ft } ⊢ { { gfl cl } lb_n { ev evv } rsp { rv irv  } tav tv_n tv { eg0 eds ec0 } rl ft }
								∎ { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg0 eds ec0 } rl ft }
							∐. . 
								rp8.add_s8 { ec0 %[ "\tRT_ERR 0xffff_0008\n" ] } ⊢ ec0 
								∎ { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg0 eds ec0 } rl ft }
			∎∎
		§§ slv_lc_clq 
			§ 
				@.f { env0 irv tav evv rv tv tv_n ev_n r_n q gfl { eds dd ep0 ec0 lb_n } } 
					f_l0 { { dd ep0 } env0 evv tv tv_n ev_n r_n q _nil◂{} } ⊢ { { dd ep0 } env0 evv tv tv_n ev_n r_n q ql } 
					f_l1_q { env0 ev_n evv rv tv tv_n r_n ql } ⊢ { env0 ev_n evv rv tv tv_n r_n ql }
					f_l1 { env0 ev_n evv rv tv tv_n r_n q } ⊢ { env0 ev_n evv rv tv tv_n r_n yl } 
					f_l2_q { tv_n tv ql dd ep0 } ⊢ { tv_n tv dd ep0 } 
					f_l2 { { %[ 0r ] _nil◂{} } env0 irv tav evv rv tv_n tv yl { dd ep0 ec0 lb_n } } ⊢ { { pv_n al } env0 irv tav evv rv tv_n tv yl { dd ep0 ec0 lb_n } } 
					∎ { env0 irv tav evv rv tv tv_n ev_n r_n gfl { eds dd ep0 ec0 lb_n } } 
				@.f_l0 { { dd ep0 } env0 evv tv tv_n ev_n r_n q cl }
					$ q ⊢ 
					∐ _cns◂{ { w le } q } . 
						∐ le ⊢ ast.lc_def◂{ o_t d td lc } . 
							assoc { cl w } ⊢ { cl w o } 
							nnt_emt { o w } ⊢ w 
							$ w ⊢ w,w0 
							_cns { { w0 _some◂{} } cl } ⊢ cl 
							$ env0 ⊢ { mmv mev ev ns_m ns_e il }
							newvar_l { tv_n tv %[ 1r ] } ⊢ { tv_n tv lv yx }
							$ w ⊢ w,w0
							$ ev_n ⊢ ev_n,en0 
							$ yx ⊢ yx,yx0 
							k_op_axm { tv_n tv %[ 0r ] yx0 } ⊢ { tv_n tv k } 				
							$ yx ⊢ yx,yx0 
							add_e { tv_n tv evv ev ev_n ns_e w k yx } ⊢ { tv_n tv evv ev ev_n ns_e }
							$ { mmv mev ev ns_m ns_e il } ⊢ env0 
							f_l0 { { dd ep0 } env0 evv tv tv_n ev_n r_n q cl } ⊢ { { dd ep0 } env0 evv tv tv_n ev_n r_n q ql } 
							_cns { { o_t en0 w0 yx0 d lc } q } ⊢ q 
							∎ { { dd ep0 } env0 evv tv tv_n ev_n r_n q ql }
						∐ le ⊢ ast.lc_ln◂c .
							$ env0 ⊢ { mmv mev ev ns_m ns_e il }
							$ ev_n ⊢ ev_n,i0 
							» 1r _ ⊢ lv 
							newvar_l { tv_n tv lv } ⊢ { tv_n tv lv yx }
							$ yx ⊢ yx,yx0 
							newvar_ln { tv_n tv yx0 } ⊢ { tv_n tv v0 } 
							set_tv { ev ev_n v0 } ⊢ { ev ev_n } 
							_some i0 ⊢ o 
							$ w ⊢ w,w0 
							_cns { { w o } ns_e } ⊢ ns_e 
							$ { mmv mev ev ns_m ns_e il } ⊢ env0 
							$ ev_n ⊢ ev_n,en 
							_inc ev_n ⊢ ev_n 
							f_l0 { { dd ep0 } env0 evv tv tv_n ev_n r_n q cl } ⊢ { { dd ep0 } env0 evv tv tv_n ev_n r_n q ql } 
							_cns { { w0 en c yx } ql } ⊢ ql
							∎ { { dd ep0 } env0 evv tv tv_n ev_n r_n q ql }
						∐. . 
							∎| 
					∐. _nil◂{} . 
						$ _nil◂{} ⊢ q 
						$ _nil◂{} ⊢ ql
						∎ { { dd ep0 } env0 evv tv tv_n ev_n r_n q ql } 
				@.f_l1_q { env0 ev_n evv rv tv tv_n r_n ql }
					$ env0 ⊢ { mmv mev ev ns_m ns_e il }
					$ ql ⊢ 
					∐ _cns◂{ { w en c yx } ql } . 
						slv_n.cst { { { mmv mev ev ns_m ns_e il } tv_n tv } c } ⊢ { { { mmv mev ev ns_m ns_e il } tv_n tv } c }   
						$ c ⊢ c,c0 
						set_tv { evv en c } ⊢ { evv en } 
						f_l1_q { { mmv mev ev ns_m ns_e il } ev_n evv rv tv tv_n r_n ql } ⊢ { { mmv mev ev ns_m ns_e il } ev_n evv rv tv tv_n r_n ql }
						slv.cst { { %[ 1r ] ev tv_n tv } c0 } ⊢ { { lv ev tv_n tv } c0 y0 } 
						$ yx ⊢ yx,yx0 
						unify.f { tv yx0 y0 } ⊢ tv 
						_cns { { w en c0 yx } ql } ⊢ ql 
						∎ { { mmv mev ev ns_m ns_e il } ev_n evv rv tv tv_n r_n ql } 
					∐. _nil◂{} .  
						$ _nil◂{} ⊢ ql
						∎ { { mmv mev ev ns_m ns_e il } ev_n evv rv tv tv_n r_n ql }
				@.f_l2_q { tv_n tv ql dd ep0 } 
					$ ql ⊢ 
					∐ _cns◂{ { w en c y } ql } . 
						gen { tv_n tv %[ 0r ] y } ⊢ { tv_n tv _ y } 
						$ y ⊢ y,y0 
						pnt_type_k { tv y0 } ⊢ { tv sy }
						» _^ dd,en,w,sy ⊢ dd,en,w,sy,ep1 
							0'*"\t" "§ " 2' "(" 1d' ") : " 3' "\n" // 
						_emt ep1 ⊢ ep1 
						_cns { ep1 ep0 } ⊢ ep0 
						f_l2_q { tv_n tv ql dd ep0 } ⊢|
					∐. _nil◂{} . 
						∎ { tv_n tv dd ep0 } 
				@.f_l1 { env0 ev_n evv rv tv tv_n r_n q } 
					$ q ⊢ 
					∐ _cns◂{ { o_t en w yx d lc } q } . 
						_emt %[ "enter f_l1" ] ⊢ _
						_emt w ⊢ w 
						$ _nil◂{} ⊢ re 
						» 1r _ ⊢ lv 
						$ o_t ⊢ 
						∐ _none◂{} . 
							_none {} ⊢ o_t 
							slv_n.crt_dst_ptn { { rv tv tv_n r_n re } d } ⊢ { { rv tv tv_n r_n re } d } 
							slv_n.r { env0 rv tv tv_n r_n re lc } ⊢ { env0 rv tv tv_n r_n re lc } 
							$ env0 ⊢ { mmv mev ev ns_m ns_e il }
							slv.crt_dst_ptn { { lv rv tv tv_n } d } ⊢ { { lv rv tv tv_n } d y0 } 
							slv.r { lv ev rv tv tv_n lc } ⊢ { lv ev rv tv tv_n lc yr } 
							$ { mmv mev ev ns_m ns_e il } ⊢ env0
							inst { tv_n tv lv yr } ⊢ { tv_n tv lv yr } 
							$ y0 ⊢ y0,y00 
							$ yr ⊢ yr,yr0 
							$ RP.atm◂imp◂{ y00 yr0 } ⊢ yf
							$ yx ⊢ yx,yx0
							unify.f { tv yf yx } ⊢ tv 
							f_l1 { env0 ev_n evv rv tv tv_n r_n q } ⊢ { env0 ev_n evv rv tv tv_n r_n yl } 
							_cns { { o_t en lc w { d y0 yr yx0 } } yl } ⊢ yl 
							∎ { env0 ev_n evv rv tv tv_n r_n yl } 
						∐. _some◂p . 
							$ env0 ⊢ { mmv mev ev ns_m ns_e il }
							tpl_ptn { { %[ 0r ] _nil◂{} lv evv ev ev_n tv tv_n } p } ⊢ { { c_n wl lv evv ev ev_n tv tv_n } p y_c } 
							$ c_n ⊢ c_n,c_n0 
							_some { c_n0 p } ⊢ o_t 
							rev_apnd { wl ns_e } ⊢ ns_e 
							slv_n.crt_dst_ptn { { rv tv tv_n r_n re } d } ⊢ { { rv tv tv_n r_n re } d } 
							slv_n.r { { mmv mev ev ns_m ns_e il } rv tv tv_n r_n re lc } ⊢ { { mmv mev ev ns_m ns_e il } rv tv tv_n r_n re lc } 
							pop_n { c_n ns_e } ⊢ { _ ns_e } 
							slv.crt_dst_ptn { { lv rv tv tv_n } d } ⊢ { { lv rv tv tv_n } d y0 } 
							slv.r { lv ev rv tv tv_n lc } ⊢ { lv ev rv tv tv_n lc yr } 
							$ { mmv mev ev ns_m ns_e il } ⊢ env0
							inst { tv_n tv lv yr } ⊢ { tv_n tv lv yr } 
							$ y0 ⊢ y0,y00 
							$ yr ⊢ yr,yr0 
							$ RP.atm◂ct_imp◂{ %y_c RP.atm◂imp◂{ y00 yr0 } } ⊢ yf 
							$ yx ⊢ yx,yx0 
							unify.f { tv yf yx } ⊢ tv 
							f_l1 { env0 ev_n evv rv tv tv_n r_n q } ⊢ { env0 ev_n evv rv tv tv_n r_n yl } 
							_cns { { o_t en lc w { d y0 yr yx0 } } yl } ⊢ yl 
							∎ { env0 ev_n evv rv tv tv_n r_n yl } 
					∐. _nil◂{} . 
						$ _nil◂{} ⊢ yl
						∎ { env0 ev_n evv rv tv tv_n r_n yl }
				@.f_l2 { { pv_n al } env0 irv tav evv rv tv_n tv yl { dd ep0 ec0 lb_n } }  
					$ yl ⊢ 
					∐ _cns◂{ { o_t en lc w { d ys yd yx } } yl } .
						_emt %[ "f_l2 0" ] ⊢ _
						gen { tv_n tv %[ 0r ] yx } ⊢ { tv_n tv lv yx } 
						$ ys ⊢ ys,ys0 
						$ _nil◂{} ⊢ ql0 
						$ en ⊢ en,o_n
						$ yx ⊢ yx,yx0 
						pnt_type_k { tv yx0 } ⊢ { tv syx }
						$ yx ⊢ yx,yx0 
						newvar_ln { tv_n tv yx0 } ⊢ { tv_n tv iy0 } 
						##_none {} ⊢ o 
						ast.k_op_gnr { o_t o_n d lc iy0 } ⊢ k 		
						exc_tv { evv en k } ⊢ { evv en _ } 
						» _^ dd,en,w,syx ⊢ dd,en,w,syx,ep1 
							0'*"\t" "§ " 2' "(" 1d' ") : " 3' "\n" // 
						_emt ep1 ⊢ ep1 
						_cns { ep1 ep0 } ⊢ ep0 
						f_l2 { { pv_n al } env0 irv tav evv rv tv_n tv yl { dd ep0 ec0 lb_n } } ⊢ { { pv_n al } env0 irv tav evv rv tv_n tv yl { dd ep0 ec0 lb_n } }
						∎ { { pv_n al } env0 irv tav evv rv tv_n tv yl { dd ep0 ec0 lb_n } } 
					∐. _nil◂{} . 
						$ _nil◂{} ⊢ yl 
						∎ { { pv_n al } env0 irv tav evv rv tv_n tv yl { dd ep0 ec0 lb_n } }
			∎∎ 
		§ @.mk_asc_lst { tv_n tv ql } 
			$ ql ⊢ 
			∐ _cns◂{ i0 ql } . 
				mk_asc_lst { tv_n tv ql } ⊢ { tv_n tv ql al } 
				newvar_i { tv_n tv } ⊢ { tv_n tv i1 }
				$ i1 ⊢ i1,i11 
				_some i1 ⊢ o 
				_cns { { i0 o } al } ⊢ al 
				_cns { i11 ql } ⊢ ql 
				∎ { tv_n tv ql al }
			∐. _nil◂{} . 
				$ _nil◂{} ⊢ al 
				$ _nil◂{} ⊢ ql 
				∎ { tv_n tv ql al } 
		§ mk_t_aux_f { tv_n tv ql kl } 
			mk_asc_lst { tv_n tv ql } ⊢ { tv_n tv ql al } 
			» 1r _ ⊢ lv 
			inst_lst { tv_n tv lv kl al } ⊢ { tv_n tv lv kl al } 
			_dec lv ⊢ lv 
			gen_lst { tv_n tv lv kl } ⊢ { tv_n tv lv kl }
			∎ { tv_n tv ql kl }
		§§ slv_dt_clq 
			§ 
				@.f { q { mmv mev ev ns_m ns_e il } tav evv ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } }
					$ _nil◂{} ⊢ l0 
					$ _nil◂{} ⊢ l1
					$ _nil◂{} ⊢ l2 
					lp0 { q { l0 l1 l2 } { mmv mev ev ns_m ns_e il } tav tx_n mtv tv_n tv ns_t } ⊢ { { l0 l1 l2 } { mmv mev ev ns_m ns_e il } tav tx_n mtv tv_n tv ns_t }
					lp0_ln { { l1 l2 } { mmv mev ev ns_m ns_e il } ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } } ⊢ { { mmv mev ev ns_m ns_e il } ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } } 
					lp0_def { l0 { mmv mev ev ns_m ns_e il } tav evv ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } } ⊢ { { mmv mev ev ns_m ns_e il } tav evv ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } }
					∎ { { mmv mev ev ns_m ns_e il } tav evv ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } }
				@.lp0 { q { l0 l1 l2 } { mmv mev ev ns_m ns_e il } tav tx_n mtv tv_n tv ns_t } 
					##» "slv_dt_clq.lp0" _ ⊢ sec1 
					##_emt sec1 ⊢ sec1 
					$ q ⊢ 
					∐ _cns◂{ { w d } q } . 
						$ d ⊢ 
						∐ ast.dt_def◂{ as dl } .
							$ tx_n ⊢ tx_n,x 
							$ x ⊢ x,x0 
							$ w ⊢ w,w0 
							_inc tx_n ⊢ tx_n 
							slv_args_def { mtv tv_n tv ns_t as x dl } ⊢ { mtv tv_n tv ns_t al k yx dl ql } 
							add_t { tv_n tv ns_t w k } ⊢ { tv_n tv ns_t }
							_cns { { al yx dl x0 w0 ql } l0 } ⊢ l0 
							##_cns { { as dl
							 lp0 { q { l0 l1 l2 } { mmv mev ev ns_m ns_e il } tav tx_n mtv tv_n tv ns_t } ⊢| 
						∐. ast.dt_ln◂{ as y } . 
							##slv_args_ln { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t as y } ⊢ { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t al k } 
							##add_t { tv_n tv ns_t w k } ⊢ { tv_n tv ns_t } 
							$ tv_n ⊢ tv_n,t0
							_some t0 ⊢ o 
							$ w ⊢ w,w0 
							_cns { { w o } ns_t } ⊢ ns_t 
							$ tv_n ⊢ tv_n,t0 
							_cns { t0 l2 } ⊢ l2 
							$ tv_n ⊢ tv_n,t0 
							_inc tv_n ⊢ tv_n 
							_some { w0 as y } ⊢ o 
							_some o ⊢ o 
							_cns { { t0 o } l1 } ⊢ l1
							lp0 { q { l0 l1 l2 } { mmv mev ev ns_m ns_e il } tav tx_n mtv tv_n tv ns_t } ⊢| 
					∐. _nil◂{} .
						∎ { { l0 l1 l2 } { mmv mev ev ns_m ns_e il } tav tx_n mtv tv_n tv ns_t } 
				@.lp0_ln { { l1 l2 } { mmv mev ev ns_m ns_e il } ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } }  
					$ l2 ⊢ 
					∐ _cns◂{ i0 l2 } . 
						assoc { l1 i0 } ⊢ { l1 i0 o } 
						∐ o ⊢ _some◂o; o ⊢ _some◂{ w as y } . 
							_none {} ⊢ o 
							_some o ⊢ o 
							$ i0 ⊢ i0,i0_0 
							_cns { { i0_0 o } l1 } ⊢ l1 
							slv_args_ln { { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t as l1 } y } ⊢ { { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t al l1 } k } 
							_none {} ⊢ o 
							$ i0 ⊢ i0,i0_0 
							_cns { { i0_0 o } l1 } ⊢ l1 
							$ k ⊢ k,k0 
							var_ln k ⊢ v 
							pnt_type_k { tv k0 } ⊢ { tv sv } 
							» _^ dd,w,i0,sv ⊢ dd,w,i0,sv,ep1 
								0'*"\t" "¶ " 1' "(" 2d' ") ~ " 3' // 
							_cns { ep1 ep0 } ⊢ ep0 
							set_tv { tv i0 v } ⊢ { tv i0 }
							lp0_ln { { l1 l2 } { mmv mev ev ns_m ns_e il } ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } } ⊢|
						∐ o ⊢ _some◂o; o ⊢ _none◂{} . 
							» "lp0_ln 0" _ ⊢ se 
							_emt se ⊢ se 
							∎|	  
						∐. .
							lp0_ln { { l1 l2 } { mmv mev ev ns_m ns_e il } ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } } ⊢|
					∐. _nil◂{} . 
						∎ { { mmv mev ev ns_m ns_e il } ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } } 
				@.lp0_def { l0 { mmv mev ev ns_m ns_e il } tav evv ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } } 
					$ l0 ⊢ 
					∐ _cns◂{ { al yx dl x w ql } l0 } . 
						» 0r _ ⊢ an 
						slv_dt_def { { mmv mev ns_m il } { tav evv } an mtv al yx tv tv_n ns_t ev ev_n ns_e dl { dd ep0 ec0 } } ⊢ { { mmv mev ns_m il } { tav evv } an mtv al yx tv tv_n ns_t ev ev_n ns_e { dd ep0 ec0 } ac kl }
						mk_t_aux_f { tv_n tv ql kl } ⊢ { tv_n tv ql kl }
						$ kl ⊢ kl,kl0 
						» 0r _ ⊢ pv_n 
						$ _nil◂{} ⊢ alp 
						alc_type_k.hp_lst { pv_n alp tav tv_n tv kl0 } ⊢ { pv_n alp tav tv_n tv hl }
						$ ql ⊢ ql,ql0 
						subst_lst { alp ql0 } ⊢ { alp ql0 } 
						_some { ql kl ql0 hl } ⊢ o 						
						set_tv { tav x { w o } } ⊢ { tav x } 
						lp0_def { l0 { mmv mev ev ns_m ns_e il } tav evv ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } } ⊢| 
					∐. _nil◂{} .
						∎ { { mmv mev ev ns_m ns_e il } tav evv ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } }	
			∎∎
	
		§ add_grm { { w ix yt } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
			$ yt ⊢ yt,yt0 
			newvar_ln { tv_n tv TX.grm◂yt0 } ⊢ { tv_n tv v } 
			$ ev_n ⊢ ev_n,en 
			add_e { tv_n tv evv ev ev_n ns_e w ast.k_op_axm◂{ ix v } TX.grm◂yt } ⊢ { tv_n tv evv ev ev_n ns_e }
			∎ { i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
		
		§§ slv_n_grm_act
			§
				@.grm_rle { MV gr }  
					$ gr ⊢ 
					∐ ast.grm.ptn_cut◂gc . 
						grm_rle_cut { MV gc } ⊢ { MV gc } 
						∎ { MV ast.grm.ptn_cut◂%gc }
					∐ ast.grm.ptn_seq◂{ gp gr } .
						grm_ptn { MV gp } ⊢ { MV gp } 
						grm_rle { MV gr } ⊢ { MV gr }
						∎ { MV ast.grm.ptn_seq◂{ gp gr } }   
					∐. ast.grm.ptn_end◂{} . 
						∎ { MV ast.grm.ptn_end◂{} }
				@.grm_rle_cut = lst.map_l◂◂grm_ptn 
				
				@.grm_ptn { MV gp }  
					$ gp ⊢ 
					∐ ast.grm.lst◂ga . 
						grm_atm { MV ga } ⊢ { MV ga } 
						∎ { MV ast.grm.lst◂%ga }
					∐. ast.grm.atm◂ga . 
						grm_atm { MV ga } ⊢ { MV ga } 
						∎ { MV ast.grm.atm◂%ga }
				@.grm_atm { MV ga }  
					$ ga ⊢ 
					∐ ast.grm.exp◂e . 
						grm_exp { MV e } ⊢ { MV e }
						∎ { MV ast.grm.exp◂e }						
					∐. ast.grm.s8◂s . 
						∎ { MV ast.grm.s8◂%s }
				@.grm_exp { MV e }  
					$ e ⊢ 
					∐ ast.grm.app◂{ en a1 } . 
						grm_exp { MV a1 } ⊢ { MV a1 } 
						$ MV ⊢ { il mmv mev mtv ns_m ns_e } 
						slv_ns_e { en { mmv mev } { ns_m ns_e } il } ⊢ { { mmv mev } { ns_m ns_e } il i_m } 
						$ { il mmv mev mtv ns_m ns_e } ⊢ MV 
						∎ { MV ast.grm.app◂{ %i_m a1 } }
					∐. ast.grm.name◂en . 
						$ MV ⊢ { il mmv mev mtv ns_m ns_e } 
						slv_ns_e { en { mmv mev } { ns_m ns_e } il } ⊢ { { mmv mev } { ns_m ns_e } il i_m } 
						$ { il mmv mev mtv ns_m ns_e } ⊢ MV 
						∎ { MV ast.grm.name◂%i_m }
					
			§ 
				@.lp1_act { ga i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
					$ ga ⊢ 
					∐ ast.grm.act_cns◂{ drl dp lc rf gr go ga } . 
						lp1_act_0 { { drl dp lc rf gr go } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } ⊢ { { drl dp lc rf gr go } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }						
						lp1_act { ga i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } ⊢ { ga i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
						∎ { ast.grm.act_cns◂{ drl dp lc rf gr go ga } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }						
					∐. ast.grm.act_end◂{ drl dp lc rf gr go } .
						lp1_act_0 { { drl dp lc rf gr go } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } ⊢ { { drl dp lc rf gr go } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }						
						∎ { ast.grm.act_end◂{ drl dp lc rf gr go } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }						
				@.lp1_act_1 { re go i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
					$ go ⊢ 
					∐ _some◂{ dpr gar } . 
						lp1_act { gar i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } ⊢ { gar i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
						slv_n.crt_dst_ptn { { rv tv tv_n rv_n re } dpr } ⊢ { { rv tv tv_n rv_n re } dpr } 
						∎ { re _some◂{ dpr gar } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
					∐. _none◂{} . 
						∎ { re _none◂{} i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
				@.lp1_act_0 { { drl dp lc rf gr go } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
					$ _nil◂{} ⊢ re 
					grm_rle { { il mmv mev mtv ns_m ns_e } gr } ⊢ { { il mmv mev mtv ns_m ns_e } gr }  
					slv_n.crt_dst_ptn { { rv tv tv_n rv_n re } dp } ⊢ { { rv tv tv_n rv_n re } dp } 
					slv_n.crt_dst_lst { { rv tv tv_n rv_n re } drl } ⊢ { { rv tv tv_n rv_n re } drl }
					lp1_act_1 { re go i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } ⊢ { re go i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
					slv_n.r { { mmv mev ev ns_m ns_e il } rv tv tv_n rv_n re lc } ⊢ { { mmv mev ev ns_m ns_e il } rv tv tv_n rv_n re lc } 						
					∎ { { drl dp lc rf gr go } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }						
			∎∎
		§§ slv_grm_act 
			§ act_regs◂{} = _cns◂{ TX.r64◂{} _cns◂{ TX.r64◂{} _nil◂{} } } 
			§
				@.grm_rle { { MV { tv_n tv lv } } gr }  
					$ gr ⊢ 
					∐ ast.grm.ptn_cut◂gc . 
						grm_rle_cut { { MV { tv_n tv lv } } gc } ⊢ { { MV { tv_n tv lv } } gc yl } 
						∎ { { MV { tv_n tv lv } } ast.grm.ptn_cut◂%gc yl }
					∐ ast.grm.ptn_seq◂{ gp gr } .
						grm_ptn { { MV { tv_n tv lv } } gp } ⊢ { { MV { tv_n tv lv } } gp y } 
						grm_rle { { MV { tv_n tv lv } } gr } ⊢ { { MV { tv_n tv lv } } gr yl }
						∎ { { MV { tv_n tv lv } } ast.grm.ptn_seq◂{ %gp %gr } _cns◂{ y yl } }   
					∐. ast.grm.ptn_end◂{} . 
						∎ { { MV { tv_n tv lv } } ast.grm.ptn_end◂{} _nil◂{} }
				@.grm_rle_cut = lst.map_l_x◂◂grm_ptn
				@.grm_ptn { { MV { tv_n tv lv } } gp }  
					$ gp ⊢ 
					∐ ast.grm.lst◂ga . 
						grm_atm { { MV { tv_n tv lv } } ga } ⊢ { { MV { tv_n tv lv } } ga y } 
						∎ { { MV { tv_n tv lv } } ast.grm.lst◂%ga TX.lst◂y }
					∐. ast.grm.atm◂ga . 
						grm_atm { { MV { tv_n tv lv } } ga } ⊢ { { MV { tv_n tv lv } } ga y } 
						∎ { { MV { tv_n tv lv } } ast.grm.atm◂%ga y }
				@.grm_atm { { MV { tv_n tv lv } } ga }  
					$ ga ⊢ 
					∐ ast.grm.exp◂e . 
						newvar_l { tv_n tv lv } ⊢ { tv_n tv lv v0 } 
						$ v0 ⊢ v0,v1 
						grm_exp { { MV { tv_n tv lv } } e } ⊢ { { MV { tv_n tv lv } } e y } 
						unify.f { tv y TX.grm◂v1 } ⊢ tv 
						∎ { { MV { tv_n tv lv } } ast.grm.exp◂%e v0 }
					∐. ast.grm.s8◂s . 
						∎ { { MV { tv_n tv lv } } ast.grm.s8◂%s TX.unt◂{} }
				@.grm_exp { { MV { tv_n tv lv } } e }
					$ e ⊢ 
					∐ ast.grm.app◂{ i_m a1 } . 
						_inc lv ⊢ lv 
						grm_exp { { MV { tv_n tv lv } } a1 } ⊢ { { MV { tv_n tv lv } } a1 t1 } 
						_dec lv ⊢ lv 
						$ MV ⊢ { mmv mev mtv ev } 
						lod_tv { ev i_m } ⊢ { ev i_m iv }
						$ { mmv mev mtv ev } ⊢ MV 
						
						T.iug_ct_imp_d { tv_n tv lv t1 RP.atm◂var◂iv } ⊢ { tv_n tv lv _ yd _ }
						inst { tv_n tv lv yd } ⊢ { tv_n tv lv yd } 
						∎ { { MV { tv_n tv lv } } ast.grm.app◂{ i_m a1 } yd }  						 
					∐. ast.grm.name◂i_m . 
						$ MV ⊢ { mmv mev mtv ev } 
						lod_tv { ev i_m } ⊢ { ev i_m v0 }
						$ { mmv mev mtv ev } ⊢ MV 
						inst { tv_n tv lv RP.atm◂var◂v0 } ⊢ { tv_n tv lv y } 
						∎ { { MV { tv_n tv lv } } ast.grm.name◂%i_m y }
					
			§ 
				@.lp1_act { { lv yt ga }  { mmv mev mtv mv_n rv  ev tv tv_n } irv tav evv       }
					$ ga ⊢ 
					∐ ast.grm.act_cns◂{ drl dp lc rf gr go ga } . 
						lp1_act_0 { { drl dp lc rf gr go } { lv yt }   { mmv mev mtv mv_n rv  ev   tv tv_n } irv tav evv       } ⊢ { { drl dp lc rf gr go } { lv yt }   { mmv mev mtv mv_n rv  ev   tv tv_n } irv tav evv       }						
						lp1_act { { lv yt ga }   { mmv mev mtv mv_n rv  ev   tv tv_n } irv tav evv       } ⊢ { { lv yt ga }   { mmv mev mtv mv_n rv  ev   tv tv_n } irv tav evv       }
						∎ { { lv yt ast.grm.act_cns◂{ drl dp lc rf gr go ga } } { mmv mev mtv mv_n rv  ev   tv tv_n } irv tav evv       }						
					∐. ast.grm.act_end◂{ drl dp lc rf gr go } .
						lp1_act_0 { { drl dp lc rf gr go } { lv yt } { mmv mev mtv mv_n rv  ev   tv tv_n } irv tav evv       } ⊢ { { drl dp lc rf gr go } { lv yt }   { mmv mev mtv mv_n rv  ev   tv tv_n } irv tav evv       }						
						∎ { { lv yt ast.grm.act_end◂{ drl dp lc rf gr go } } { mmv mev mtv mv_n rv  ev   tv tv_n } irv tav evv       }						
					
				@.lp1_act_1 { go { lv yt }   { mmv mev mtv mv_n rv  ev   tv tv_n } irv tav evv       }
					$ go ⊢ 
					∐ _some◂{ dpr gar } . 
						_inc lv ⊢ lv 
						newvar_l { tv_n tv lv } ⊢ { tv_n tv lv ytr }
						lp1_act { { lv ytr gar }   { mmv mev mtv mv_n rv  ev   tv tv_n } irv tav evv       } ⊢ { { lv ytr gar }   { mmv mev mtv mv_n rv  ev   tv tv_n } irv tav evv       }
						slv.crt_dst_ptn { { lv rv tv tv_n } dpr } ⊢ { { lv rv tv tv_n } dpr y0 } 
						$ ytr ⊢ ytr,ytr0
						unify.f { tv ytr0 y0 } ⊢ tv 
						_dec lv ⊢ lv 
						gen { tv_n tv lv ytr } ⊢ { tv_n tv lv _ } 
						∎ { _some◂{ dpr gar } { lv yt }   { mmv mev mtv mv_n rv  ev   tv tv_n } irv tav evv       }
					∐. _none◂{} . 
						∎ { _none◂{} { lv yt }   { mmv mev mtv mv_n rv  ev   tv tv_n } irv tav evv       }
				@.lp1_act_0 { { drl dp lc rf gr go } { lv yt }   { mmv mev mtv mv_n rv  ev   tv tv_n } irv tav evv       }
					grm_rle { { { mmv mev mtv ev } { tv_n tv lv } } gr } ⊢ { { { mmv mev mtv ev } { tv_n tv lv } } gr yl }  
					_inc lv ⊢ lv 
					inst { tv_n tv lv RP.rcd◂yl } ⊢ { tv_n tv lv yd } 
					slv.crt_dst_ptn { { lv rv tv tv_n } dp } ⊢ { { lv rv tv tv_n } dp y0 } 
					$ yd ⊢ yd,yd0 
					unify.f { tv yd0 y0 } ⊢ tv 
					_dec lv ⊢ lv 
					gen { tv_n tv lv yd } ⊢ { tv_n tv lv yd } 
					_inc lv ⊢ lv 
					slv.crt_dst_lst { { lv rv tv tv_n } drl } ⊢ { { lv rv tv tv_n } drl yrl }
					$ yrl ⊢ yrl,yrl0 
					unify.f_lst { tv act_regs◂{} yrl0 } ⊢ tv 
					_dec lv ⊢ lv 
					gen_lst { tv_n tv lv yrl } ⊢ { tv_n tv lv _ } 
					lp1_act_1 { go { lv yt }   { mmv mev mtv mv_n rv  ev   tv tv_n } irv tav evv       } ⊢ { go { lv yt }   { mmv mev mtv mv_n rv  ev   tv tv_n } irv tav evv       }
					slv.r { lv ev rv tv tv_n lc } ⊢ { lv ev rv tv tv_n lc yr } 						
					$ yt ⊢ yt,yt0 
					$ TX.opn◂yt0 ⊢ yt0 
					_inc lv ⊢ lv 
					inst { tv_n tv lv yr } ⊢ { tv_n tv lv yr }
					$ yr ⊢ yr,yr0 
					unify.f { tv yt0 yr0 } ⊢ tv  
					_dec lv ⊢ lv 
					gen { tv_n tv lv yr } ⊢ { tv_n tv lv yr }
					∎ { { drl dp lc rf gr go } { lv yt }   { mmv mev mtv mv_n rv  ev   tv tv_n } irv tav evv       }						
			
			∎∎ 
		§§ slv_grm 			
			§		
				@.f { g i il { hpv hpv_n } { mmv mev mtv mfv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
					_emt %[ "grm_etr D0.0" ] ⊢ _ 
					lp0 { { i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } g } ⊢ { { i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } g }
					_emt %[ "grm_etr D0.1" ] ⊢ _ 
					lp1 { { %[ 1r ] i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } g } ⊢ { { lv i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } g }
						_emt %[ "grm_etr D0.2" ] ⊢ _ 
					
					lp2 { { i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } g } ⊢ { { i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } g }
					##	_emt %[ "grm_etr D0.3" ] ⊢ _ 
					lp3 { { i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } g } ⊢ { { i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } g }
					∎ { g i il { hpv hpv_n } { mmv mev mtv mfv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
			 
				@.lp0 = lst.map_l◂◂lp0_i 
				@.lp0_i { { i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } { w m_o ge } }
					$ ge ⊢ 
					∐ ast.grm.act◂e . 
						newvar_l { tv_n tv %[ 1r ] } ⊢ { tv_n tv lv0 yt }
						$ ev_n ⊢ ev_n,en 
						» _^ dd,en,w ⊢ dd,en,w,ep1 
							0'*"\t" "§§+s8 " 2' "(" 1d' ") : ..\n" // 
						_cns { ep1 ep0 } ⊢ ep0 
						$ yt ⊢ yt,yt0 
						k_op_axm { tv_n tv %[ 0r ] %yt0 } ⊢ { tv_n tv k } 				
						$ w ⊢ w,w0 
						$ yt ⊢ yt,yt0 
						add_e { tv_n tv evv ev ev_n ns_e w0 k %yt0 } ⊢ { tv_n tv evv ev ev_n ns_e }
						∎ { { i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } { en m_o yt e } }
					∐. ast.grm.ln◂e  . 
						##lp0 { g i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } ⊢ { g i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } 
						∎|
				@.lp1 = lst.map_l◂◂lp1_i  
				@.lp1_i { { lv i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } { en m_o yt ga } }
					$ m_o ⊢ 
					∐ _none◂{} . 
						slv_n_grm_act.lp1_act { ga i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } ⊢ { ga i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }						
						newvar_l { tv_n tv %[ 1r ] } ⊢ { tv_n tv lv0 yd }
						slv_grm_act.lp1_act { { lv yd ga } { mmv mev mtv mv_n rv  ev tv tv_n } irv tav evv } ⊢ { { lv yd ga } { mmv mev mtv mv_n rv ev tv tv_n } irv tav evv }
						$ yt ⊢ yt,yt0 
						$ yd ⊢ yd,yd0 
						unify.f { tv TX.grm◂yd yt } ⊢ tv 
						∎ { { lv i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } { en yt0 yd0 _none◂{} ga } }					
					∐. _some◂wa . 
						$ wa ⊢ wa,wa0 
						tpl_atm { { %[ 0r ] _nil◂{} lv evv ev ev_n tv tv_n } wa } ⊢ { { c_n wl lv evv ev ev_n tv tv_n } ea0 ya } 
						rev_apnd { wl ns_e } ⊢ ns_e  
						slv_n_grm_act.lp1_act { ga i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } ⊢ { ga i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }						
						pop_n { c_n ns_e } ⊢ { _ ns_e } 
						newvar_l { tv_n tv %[ 1r ] } ⊢ { tv_n tv lv0 yd }
						slv_grm_act.lp1_act { { lv yd ga } { mmv mev mtv mv_n rv  ev tv tv_n } irv tav evv } ⊢ { { lv yd ga } { mmv mev mtv mv_n rv  ev tv tv_n } irv tav evv }
						$ yt ⊢ yt,yt0 
						$ yd ⊢ yd,yd0 
						unify.f { tv RP.atm◂ct_imp◂{ ya TX.grm◂yd } yt } ⊢ tv  
						∎ { { lv i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } { en yt0 yd0 _some◂ea0 ga } }											
			
				@.lp2 = lst.map_l◂◂lp2_i 
				@.lp2_i { { i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } { en yt yd m_o e } }
					gen { tv_n tv %[ 0r ] yt } ⊢ { tv_n tv lv yt } 
					op_x_v◂◂pnt_type_k { tv yd } ⊢ { tv yd s0 } 
					_inc dd ⊢ dd 
					» _^ dd,s0 ⊢ dd,_,ep1 
						0'*"\t" "§ t = " 1' "\n" // 
					_cns { ep1 ep0 } ⊢ ep0 
					_dec dd ⊢ dd 
					∎ { { i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } { en yt yd m_o e } }
				@.lp3 = lst.map_l◂◂lp3_i 
				@.lp3_i { { i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } { en yt yd m_o e } }
					$ yd ⊢ yd,yd0 
					alc_type_k.hp { %[ 0r ] _nil◂{} tav tv_n tv yd } ⊢ { pv_n al tav tv_n tv ht } 
					$ en ⊢ en,o_n
					newvar_ln { tv_n tv yd0 } ⊢ { tv_n tv iy0 }
					exc_tv { evv en ast.k_op_prs◂{ o_n iy0 ht } } ⊢ { evv en _ }
					∎ { { i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } { en m_o e } }
				∎∎ 
		§§ emt_grm  
			§ act_regs {} 
				∎ _cns◂{ RP.atm◂ast.hp◂{ %[ 0r ] ast.hp.r64◂{} } _cns◂{ RP.atm◂ast.hp◂{ %[ 1r ] ast.hp.r64◂{} } _nil◂{} } }  
			§ 
				@.rf { lb_n rf e0 } 
					$ rf ⊢ 
					∐ ast.grm.lex◂{} .
						∎ { lb_n e0 }   
					∐ ast.grm.synt◂{} . 
						inc_x lb_n ⊢ { lb0 lb_n } 
						inc_x lb_n ⊢ { lb1 lb_n } 
						inc_x lb_n ⊢ { lb2 lb_n } 
						» _^ lb0,lb1,lb2 ⊢ lb0,lb1,lb2,s0 
							"\tjmp LB_" 1d' "\n" 
							"LB_" 0d' ":\n" 
							`	add r14,1 
							"LB_" 1d' ":\n" 
							`	cmp r14,r9
							"\tjge LB_" 2d' "\n" 
							"\tJZ_SPC BYTE [r13+8+r14], LB_" 0d' "\n"  
							"LB_" 2d' ":\n" //
						rp8.add_s8 { e0 s0 } ⊢ e0  
						∎ { lb_n e0 }
					∐. ast.grm.line◂{} . 
						inc_x lb_n ⊢ { lb0 lb_n } 
						inc_x lb_n ⊢ { lb1 lb_n } 
						inc_x lb_n ⊢ { lb2 lb_n } 
						» _^ lb0,lb1,lb2 ⊢ lb0,lb1,lb2,s0 
							"\tjmp LB_" 1d' "\n" 
							"LB_" 0d' ":\n" 
							`	add r14,1 
							"LB_" 1d' ":\n" 
							`	cmp r14,r9
							"\tjge LB_" 2d' "\n" 
							"\tJZ_LINE_SPC BYTE [r13+8+r14], LB_" 0d' "\n"
							"LB_" 2d' ":\n" // 
						rp8.add_s8 { e0 s0 } ⊢ e0 
						∎ { lb_n e0 }
				@.rb_rle { rsp_g hl e0 } 
					$ rsp_g ⊢ rsp_g,rn 
					» 3r _ ⊢ sn 
					_shl { rn sn } ⊢ { rn _ }
					» _^ rn ⊢ rn,s0 
						`; .rb_rle 
						"\tadd rsp," 0d' "\n" // 
					rp8.add_s8 { e0 s0 } ⊢ e0 
					∎ { rsp_g hl e0 } 
				@.scf◂◂C { MV XV tav vs0 rsp_g e0 lb_f evv lb_n { ax0 iy0 } }
					mk_rbp rsp_g ⊢ { rsp_g rbp0 } 
					rset.set_t { vs0 rbp0 } ⊢ { vs0 rbp0 } 
				_inc rsp_g ⊢ rsp_g 
				$ stt_v.r64_reg◂rbp0 ⊢ a0 
					» _^ lb_f ⊢ lb_f,s0 
						`	cmp r14,r9
							"\tjge LB_" 0d' "\n"
							` lea rdi,[r13+8+r14] 
									"\tCALL_SF " C "\n"
										`	cmp rax,0 
										"\tjz LB_" 0d' "\n" 
										`	add r14,rsi
										`	push rdi
										//
									rp8.add_s8 { e0 s0 } ⊢ e0 
									∎ { a0 MV XV tav vs0 rsp_g e0 lb_f evv lb_n }
				@.find_fl { evv fl e_a } 
					$ fl ⊢ 
					∐ _cns◂{ { e_x o } fl } .
						$ e_x ⊢ e_x,e_x0 
						$ e_a ⊢ e_a,e_a0 
						ast.eq_ct { evv ast.k_name◂e_a0 ast.k_name◂e_x0 } ⊢ { evv _ _ b } 
						∐ b ⊢ t◂{} . 
							$ o ⊢ o,o0 
							∎ { evv _cns◂{ { e_x o } fl } e_a o0 }
						∐. . 
							find_fl { evv fl e_a } ⊢ { evv fl e_a o0 } 
							∎ { evv _cns◂{ { e_x o } fl } e_a o0 }
					∐. _nil◂{} . 
						∎ { evv _nil◂{} e_a _none◂{} }
				@.exp { MV XV tav e0 evv lb_n e }
					$ e ⊢ 
					∐ ast.grm.app◂{ i_m a } . 
						exp { MV XV tav e0 evv lb_n a } ⊢ { MV XV tav e0 evv lb_n e_a } 
						$ MV ⊢ { mmv mev mtv mfv mv_n ev_n } 
						lod_tv { mfv i_m } ⊢ { mfv i_m { mna0 ga fl } }
						find_fl { evv fl e_a } ⊢ { evv fl e_a o } 
						∐ o ⊢ _some◂e_f . 
							$ { mmv mev mtv mfv mv_n ev_n } ⊢ MV 		
							∎ { MV XV tav e0 evv lb_n e_f } 
						∐. . 	
							ini_tv {} ⊢ rv_f
							ini_tv {} ⊢ irv_f 
							$ XV ⊢ { rv ev tv tv_n eg0 eds gfl } 
							lod_tv { ev e_a } ⊢ { ev e_a t_a } 
							lod_tv { evv e_a } ⊢ { evv e_a k_a } 
							ast.evl_ct { evv k_a } ⊢ { evv k_a } 
							exc_tv { ev mna0 t_a } ⊢ { ev mna0 t_a } 
							exc_tv { evv mna0 k_a } ⊢ { evv mna0 k_a } 
							$ %[ 1r ] ⊢ lv 
							newvar_l { tv_n tv lv } ⊢ { tv_n tv lv yt } 
							slv_grm_act.lp1_act { { lv yt ga } { mmv mev mtv mv_n rv_f  ev tv tv_n } irv_f tav evv } ⊢ { { lv yt ga } { mmv mev mtv mv_n rv_f ev tv tv_n } irv_f tav evv }
							_dec lv ⊢ lv 
							gen { tv_n tv lv yt } ⊢ { tv_n tv lv yt } 
							$ yt ⊢ yt0,yt 
							pnt_type_k { tv yt0 } ⊢ { tv sy } 
							$ ga ⊢ ga,ga0 
							$ mna0 ⊢ mna0,mna0_0
							$ yt ⊢ yt,yt0 
							newvar_ln { tv_n tv TX.grm◂yt0 } ⊢ { tv_n tv i0 } 
							$ yt ⊢ yt,yt0 
							newvar_ln { tv_n tv yt0 } ⊢ { tv_n tv iy0 }
							$ yt ⊢ yt,yt0 
							alc_type_k.hp { %[ 0r ] _nil◂{} tav tv_n tv yt0 } ⊢ { pv_n al tav tv_n tv ht } 
							set_tv { ev ev_n i0 } ⊢ { ev ev_n }
							$ ev_n ⊢ ev_n,en 
							set_tv { evv ev_n ast.k_op_prs◂{ en iy0 ht } } ⊢ { evv ev_n } 
							rp8.e {} ⊢ ef0 
							^ ev_n,sy,i_m,e_a ⊢ ev_n,_,i_m,e_a,s0 
								"ETR_" 0d' ": ; #" 2d' "◂+◂#" 3d' " t=" 1' "\n" 
								`	PUSH_GRM_DT
								"\tcall GRM_" 0d' "\n"
								`	POP_GRM_DT 
								`	ret
								"GRM_" 0d' ":\n"
								`	push r14
								//
							rp8.add_s8 { ef0 s0 } ⊢ ef0 
							$ ev_n ⊢ ev_n,en 
							exc_tv { mfv i_m { mna0_0 ga0 _cns◂{ { e_a _some◂en } fl } } } ⊢ { mfv i_m _ }
							$ ev_n ⊢ ev_n,en 
							_inc ev_n ⊢ ev_n 
							$ TX.opn◂yt ⊢ y00 
							$ y00 ⊢ y00,y000 
							alc_type_k.hp { %[ 0r ] _nil◂{} tav tv_n tv y000 } ⊢ { _ _ tav tv_n tv h0 } 
							inc_x lb_n ⊢ { lb_r lb_n } 
							act_lp { gfl lb_r y00 h0 ga { eg0 eds ef0 } { mmv mev mtv mfv mv_n ev_n } ev evv rv_f irv_f tav tv tv_n lb_n } ⊢ { gfl lb_r { eg0 eds ef0 } { mmv mev mtv mfv mv_n ev_n } ev evv rv_f irv_f tav tv tv_n lb_n } 
							gnr_ret ef0 ⊢ ef0
							rp8.cct { eg0 ef0 } ⊢ eg0 
							exc_tv { ev mna0 t_a } ⊢ { ev mna0 t_a } 
							exc_tv { evv mna0 k_a } ⊢ { evv mna0 k_a } 
							∎ { { mmv mev mtv mfv mv_n ev_n } { rv ev tv tv_n eg0 eds gfl }  tav e0 evv lb_n en } 
					∐. ast.grm.name◂en . 
						∎ { MV XV tav e0 evv lb_n en } 
				@.ptn { MV XV tav vs0 rsp_g e0 lb_f evv lb_n gp }  
					$ gp ⊢ 
					∐ ast.grm.lst◂ga . 
						» "emt_grm.ptn lst 0" _ ⊢ ee0 
						_emt ee0 ⊢ _ 
						∎| 
					∐. ast.grm.atm◂ga . 
						$ ga ⊢ 
						∐ ast.grm.exp◂e . 
							exp { MV XV tav e0 evv lb_n e } ⊢ { MV XV tav e0 evv lb_n en }
							lod_tv { evv en } ⊢ { evv en k } 
							ast.op_of_k { evv RP.atm◂k } ⊢ { evv k } 
							∐ k ⊢ ast.k_op_axm◂{ ax0 iy0 } . 
								∐ ax0'=EX.byt .   
									» _^ lb_f ⊢ lb_f,ec1 
										`	cmp r14,r9
										"\tjge LB_" 0d' "\n" 
										`	movzx rdi,BYTE [r13+8+r14]
										`	push rdi 
										`	add r14,1 
										//
									rp8.add_s8 { e0 ec1 } ⊢ e0 
									mk_rbp rsp_g ⊢ { rsp_g rbp0 } 
									rset.set_t { vs0 rbp0 } ⊢ { vs0 rbp0 } 
									_inc rsp_g ⊢ rsp_g 			
									$ stt_v.r64_reg◂rbp0 ⊢ a0 			
									∎ { a0 MV XV tav vs0 rsp_g e0 lb_f evv lb_n }
								∐ ax0'=EX.scf_d . 
									scf◂◂"scf_d" { MV XV tav vs0 rsp_g e0 lb_f evv lb_n { ax0 iy0 } } ⊢|
								∐ ax0'=EX.scf_x . 
									scf◂◂"scf_x" { MV XV tav vs0 rsp_g e0 lb_f evv lb_n { ax0 iy0 } } ⊢|
								∐. . 
									» "emt_grm 2" _ ⊢ ee0 
									_emt ee0 ⊢ ee0
									∎| 	 
							∐ k ⊢ ast.k_op_prs◂{ o_n yt iap0 } . 
								» _^ o_n,lb_f ⊢ o_n,lb_f,ec1 
									"\tcall GRM_" 0d' "\n" 
									`	cmp BYTE [r8+6],0
									"\tjnz LB_" 1d' "\n" 
									//
									rp8.add_s8 { e0 ec1 } ⊢ e0 
									reg_vs.f {} ⊢ vs1 
									rset.or { vs0 vs1 } ⊢ { vs0 vs1 }  
									$ iap0 ⊢ iap0,iap00 
									stt_v.ptn_of_hp { vs0 iap00 } ⊢ { vs0 ipp0 } 
									rset.sub { vs0 vs1 } ⊢ { vs0 vs1 }
									rset.set_t { vs0 %[ 0r ] } ⊢ { vs0 ir0 } 
									rset.set_t { vs0 %[ 1r ] } ⊢ { vs0 ir1 } 
									rset.set_t { vs0 %[ 3r ] } ⊢ { vs0 ir3 }
									rset.max_t vs0 ⊢ { vs0 rbp }
									brk_rsp_e { rsp_g rbp e0 } ⊢ { rsp_g rbp e0 } 
									$ vs0 ⊢ vs0,v0
									∐ iap0 ⊢ ast.hp.ref◂iq0 .
										$ RP.atm◂ast.hp◂{ %[ 2r ] ast.hp.ref◂%iq0 } ⊢ iy 
										$ ipp0 ⊢ ipp0,a0   
											$ rsp_g ⊢ rsp_g,rsp0 
											mov_ptn2.f2 { { evv tav } rsp_g v0 iy ipp0 e0 } ⊢ { { evv tav } rsp_g v0 e0 }  
											set_rsp { rsp_g rsp0 e0 } ⊢ { rsp_g e0 } 
											∎ { a0 MV XV tav vs0 rsp_g e0 lb_f evv lb_n }
									∐. . 
											rp8.add_s8 { e0 %[ "\tmov rdi,[r8+8]\n\tFREE_LN r8\n\tmov r8,rdi\n" ] } ⊢ e0 
											ast.hp { %[ 2r ] iap0 } ⊢ iy 
											RP.atm iy ⊢ iy 
											$ ipp0 ⊢ ipp0,a0 
											$ rsp_g ⊢ rsp_g,rsp0 									
											mov_ptn2.f2 { { evv tav } rsp_g v0 iy ipp0 e0 } ⊢ { { evv tav } rsp_g v0 e0 } 
											set_rsp { rsp_g rsp0 e0 } ⊢ { rsp_g e0 }   
											∎ { a0 MV XV tav vs0 rsp_g e0 lb_f evv lb_n }
							∐ k ⊢ ast.k_var◂_ . 
								_emt %[ "emt_grm.ptn 5" ] ⊢ _ 
								∎|
							∐ k ⊢ ast.k_s8◂_ . 
								_emt %[ "emt_grm.ptn 6" ] ⊢ _ 
								∎|
							∐ k ⊢ ast.k_name◂_ . 
								_emt %[ "emt_grm.ptn 7" ] ⊢ _ 
								∎|
							∐ k ⊢ ast.k_app◂_ . 
								_emt %[ "emt_grm.ptn 8" ] ⊢ _ 
								∎|
							∐. . 
									» "emt_grm 4" _ ⊢ ee0 
									_emt ee0 ⊢ ee0
									∎| 			
						∐. ast.grm.s8◂s .
							_s8_len s ⊢ { s ls } 
							» _^ ls,lb_f ⊢ ls,lb_f,sc1 
								"\tlea rax,[r14+" 0d' "]\n"
								"\tcmp rax,r9\n"
								"\tjg LB_" 1d' "\n"
								"\tlea rdi,[r13+8+r14]\n" // 
							rp8.add_s8 { e0 sc1 } ⊢ e0
							cmp_s8.f { lb_f s } ⊢ { lb_f s e1 }
							rp8.cct { e0 e1 } ⊢ e0 
							» _^ ls ⊢ ls,s0 
								"\tadd r14," 0d' "\n" 
								//
							rp8.add_s8 { e0 s0 } ⊢ e0 
							∎ { RP.rcd◂_nil◂{} MV XV tav vs0 rsp_g e0 lb_f evv lb_n } 		
	
			
				@.act_rmf { gfl lb_f rsp_g go { eg0 eds e0 } MV ev evv rv irv tav tv tv_n rl lb_n }
					$ go ⊢
					∐ _none◂{} . 
						∎ { gfl lb_f rsp_g { eg0 eds e0 } MV ev evv rv irv tav tv tv_n rl lb_n } 
					∐. _some◂{ dpr gar } .
						$ dpr ⊢ dpr,dpr0 
						crt_type_k.dst_ptn { { tv rv } dpr0 } ⊢ { { tv rv } k0 }
						$ k0 ⊢ k0,k00 
						$ TX.opn◂k00 ⊢ ok0 
						» 0r _ ⊢ pv_n
						$ _nil◂{} ⊢ al 
						$ ok0 ⊢ ok0,ok00 
						alc_type_k.hp { pv_n al tav tv_n tv ok00 } ⊢ { pv_n al tav tv_n tv hok0 } 
						» "\tpush r14\n" _ ⊢ sc0 
						rp8.add_s8 { e0 sc0 } ⊢ e0 
						inc_x lb_n ⊢ { lb_r lb_n }
						act_lp { gfl lb_r ok0 hok0 gar { eg0 eds e0 } MV ev evv rv irv tav tv tv_n lb_n } ⊢ { gfl lb_r { eg0 eds e0 } MV ev evv rv irv tav tv tv_n lb_n }
						stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl vs0 } 
						rset.set_t { vs0 %[ 2r ] } ⊢ { vs0 _ }
						$ k0 ⊢ k0,k00 
						alc_type_k.f { pv_n al tav tv_n tv vs0 k00 } ⊢ { pv_n al tav tv_n tv vs0 pk0 } 
						$ k0 ⊢ k0,k00 
						alc_type_k.hp { pv_n al tav tv_n tv k00 } ⊢ { pv_n al tav tv_n tv hk0 } 
						» _^ lb_f ⊢ lb_f,sc1 
							`	cmp BYTE [r8+6],0
							"\tjnz LB_" 0d' "\n" 
							//
						rp8.add_s8 { e0 sc1 } ⊢ e0 						
						adt_t { hk0 e0 } ⊢ { hk0 e0 }
						ast.hp { %[ 2r ] hk0 } ⊢ a0 
						RP.atm a0 ⊢ pr0 						 
						$ pk0 ⊢ pk0,pk00 
						mov_ptn2.f2 { { evv tav } rsp_g vs0 pr0 pk00 e0 } ⊢ { { evv tav } rsp_g vs0 e0 }  
						$ _nil◂{} ⊢ dl 
						idx.crt_ptn { irv dpr pk0 rl dl } ⊢ { irv rl dl } 																			
						∎ { gfl lb_f rsp_g { eg0 eds e0 } MV ev evv rv irv tav tv tv_n rl lb_n } 
					@.adt_t { h0 e0 } 
						∐ h0 ⊢ ast.hp.ref◂q0 . 
							∎ { ast.hp.ref◂q0 e0 }
						∐. . 
							rp8.add_s8 { e0 %[ "\tmov rdi,[r8+8]\n\tFREE_LN r8\n\tmov r8,rdi\n" ] } ⊢ e0 
							∎ { h0 e0 } 
				@.act_mtc_end { { rsp_g vs0 hl } gfl { lb_f lb_r e_lb } kh0 h0 { drl dp lc rf go } { eg0 eds e0 } MV ev evv rv irv tav tv tv_n lb_n }
					$ hl ⊢ hl,hl0 
						rev hl0 ⊢ hl0 
						RP.rcd hl0 ⊢ gp0 
						$ _nil◂{} ⊢ rl 
						$ _nil◂{} ⊢ dl 
						idx.crt_ptn { irv dp gp0 rl dl } ⊢ { irv rl dl } 																			
						act_regs {} ⊢ ipl 
						idx.crt_lst { irv drl ipl rl dl } ⊢ { irv rl dl } 
						inc_x lb_n ⊢ { lb0 lb_n }
						inc_x lb_n ⊢ { lb_t lb_n } 
						$ rsp_g ⊢ rsp_g,rsp_g0 
						act_rmf { gfl lb0 rsp_g go { eg0 eds e0 } MV ev evv rv irv tav tv tv_n rl lb_n }  ⊢ { gfl lb0 rsp_g { eg0 eds e0 } MV ev evv rv irv tav tv tv_n rl lb_n } 										
						jmp_lb { lb_t e0 } ⊢ { lb_t e0 } 
						lb_etr { lb0 e0 } ⊢ { _ e0 } 
						$ hl ⊢ hl,hl0 
						dlt.f { gfl evv tav lb_n rsp_g0 hl0 { eg0 eds e0 } } ⊢ { gfl evv tav lb_n rsp_g0 { eg0 eds e0 } }  
						» 0r _ ⊢ rsp_0 
						set_rsp { rsp_g0 rsp_0 e0 } ⊢ { rsp_g0 e0 } 
						rp8.cct { e0 e_lb } ⊢ e0 

						lb_etr { lb_t e0 } ⊢ { _ e0 } 
						$ h0 ⊢ h0,h00 
						ast.hp { %[ 2r ] h00 } ⊢ a0 
						RP.atm a0 ⊢ pr0 
						» _^ rsp_g ⊢ rsp_g,sc0 
							"\tmov QWORD [GRM_DT+24],r14\n" 
							"\tmov r13,QWORD [rsp+8*" 0d' "]\n" // 
						rp8.add_s8 { e0 sc0 } ⊢ e0 
						inc_x lb_n ⊢ { lbr lb_n } 
						» 0r _ ⊢ rsp_d 
						$ lbr ⊢ lbr,lbr0
						inc_x lb_n ⊢ { lb_e lb_n } 
						f_inl { { lb_e rsp_d pr0 kh0 } lbr0 } ⊢ ft 
						$ _nil◂{} ⊢ cl
						lc_code.ret_f { { gfl cl } lb_n { ev evv } rsp_g { rv irv } tav tv_n tv lc { eg0 eds e0 } rl ft } ⊢ { { gfl cl } lb_n { ev evv } rsp_g { rv irv } tav tv_n tv { eg0 eds e0 } rl ft } 
						» _^ lbr,lb_r,lb_f ⊢ lbr,lb_r,lb_f,sl0 
							"LB_" 0d' ":\n" 
							`	RET_GRM_DT 
							`	cmp BYTE [r8+6],0
							"\tjz LB_" 1d' "\n" 
							"LB_" 2d' ":\n"
							`	mov r14,QWORD [rsp]
							//
						rp8.add_s8 { e0 sl0 } ⊢ e0 
						∎ { gfl { lb_f lb_r } { eg0 eds e0 } MV ev evv rv irv tav tv tv_n lb_n } 
			
				@.act_mtc { { rsp_g vs0 hl } gfl { lb_f lb_r } kh0 h0 { drl dp lc rf gr go } { eg0 eds e0 } MV ev evv rv irv tav tv tv_n lb_n } 
					$ gr ⊢ 
					∐ ast.grm.ptn_cut◂gc . 
						act_mtc_cut { { rsp_g vs0 hl }  gfl { lb_f lb_r } kh0 h0 { drl dp lc rf gc go } { eg0 eds e0 } MV ev evv rv irv tav tv tv_n lb_n } ⊢|
					∐ ast.grm.ptn_seq◂{ gp gr } .
						jmp_lb { lb_f rp8.e◂{} } ⊢ { lb_f e_lb } 
						act_mtc_seq { { rsp_g vs0 hl } gfl e_lb kh0 h0 { drl dp lc rf gp go } { eg0 eds e0 } MV ev evv rv irv tav tv tv_n lb_n } ⊢ { { rsp_g vs0 hl } gfl kh0 h0 { drl dp lc rf go } { eg0 eds e0 } MV ev evv rv irv tav tv tv_n lb_n }
						act_mtc { { rsp_g vs0 hl } gfl { lb_f lb_r } kh0 h0 { drl dp lc rf gr go } { eg0 eds e0 } MV ev evv rv irv tav tv tv_n lb_n } ⊢|
					∐. ast.grm.ptn_end◂{} . 
						jmp_lb { lb_f rp8.e◂{} } ⊢ { lb_f e_lb } 
						act_mtc_end { { rsp_g vs0 hl } gfl { lb_f lb_r e_lb } kh0 h0 { drl dp lc rf go } { eg0 eds e0 } MV ev evv rv irv tav tv tv_n lb_n } ⊢|
				@.act_mtc_seq { { rsp_g vs0 hl } gfl e_lb kh0 h0 { drl dp lc rf gp go } { eg0 eds e0 } MV ev evv rv irv tav tv tv_n lb_n }
					$ rf ⊢ rf,rf0 
					rf { lb_n rf0 e0 } ⊢ { lb_n e0 } 
					inc_x lb_n ⊢ { lb_t lb_n } 
					inc_x lb_n ⊢ { lb0 lb_n } 
					$ rsp_g ⊢ rsp_g,rsp_g0
					ptn { MV { rv ev tv tv_n eg0 eds gfl } tav vs0 rsp_g e0 lb0 evv lb_n gp } ⊢ { h MV { rv ev tv tv_n eg0 eds gfl } tav vs0 rsp_g e0 lb0 evv lb_n } 
					jmp_lb { lb_t e0 } ⊢ { lb_t e0 } 
					lb_etr { lb0 e0 } ⊢ { _ e0 } 
					$ hl ⊢ hl,hl0 
					_cns { h hl } ⊢ hl 
					dlt.f { gfl evv tav lb_n rsp_g0 hl0 { eg0 eds e0 } } ⊢ { gfl evv tav lb_n rsp_g0 { eg0 eds e0 } }  
					» 0r _ ⊢ rsp_0 
					set_rsp { rsp_g0 rsp_0 e0 } ⊢ { rsp_g0 e0 } 
					rp8.cct { e0 e_lb } ⊢ e0 
					lb_etr { lb_t e0 } ⊢ { _ e0 }
 					∎ { { rsp_g vs0 hl } gfl kh0 h0 { drl dp lc rf go } { eg0 eds e0 } MV ev evv rv irv tav tv tv_n lb_n }
				@.act_mtc_cut { { rsp_g vs0 hl } gfl { lb_f lb_r } kh0 h0 { drl dp lc rf gc go } { eg0 eds e0 } MV ev evv rv irv tav tv tv_n lb_n }
					$ %[ "\tmov r14,QWORD [rsp]\n\tmov r8,unt_1\n" ] ⊢ sc0 
					rp8.add_s8 { rp8.e◂{} sc0 } ⊢ e_lb 
					jmp_lb { lb_r e_lb } ⊢ { lb_r e_lb } 
					$ gc ⊢ 
					∐ _cns◂{ gp gc } .
						act_mtc_seq { { rsp_g vs0 hl } gfl e_lb kh0 h0 { drl dp lc rf gp go } { eg0 eds e0 } MV ev evv rv irv tav tv tv_n lb_n } ⊢ { { rsp_g vs0 hl } gfl kh0 h0 { drl dp lc rf go } { eg0 eds e0 } MV ev evv rv irv tav tv tv_n lb_n }
						act_mtc_cut { { rsp_g vs0 hl } gfl { lb_f lb_r } kh0 h0 { drl dp lc rf gc go } { eg0 eds e0 } MV ev evv rv irv tav tv tv_n lb_n } ⊢| 
					∐. _nil◂{} . 
						act_mtc_end { { rsp_g vs0 hl } gfl { lb_f lb_r e_lb } kh0 h0 { drl dp lc rf go } { eg0 eds e0 } MV ev evv rv irv tav tv tv_n lb_n } ⊢|
				@.act_lp { gfl lb_r kh0 h0 ga { eg0 eds e0 } MV ev evv rv irv tav tv tv_n lb_n }
					» 0r _ ⊢ i0 
					$ _nil◂{} ⊢ hl
					rset.ini {} ⊢ vs0 
					rset.set_t { vs0 %[ 0r ] } ⊢ { vs0 _ }
					rset.set_t { vs0 %[ 1r ] } ⊢ { vs0 _ }
					rset.set_t { vs0 %[ 2r ] } ⊢ { vs0 _ }
					» 0r _ ⊢ rsp_g
					inc_x lb_n ⊢ { lb_f lb_n } 
					$ ga ⊢ 
					∐ ast.grm.act_cns◂{ drl dp lc rf gr go ga } . 
						$ h0 ⊢ h0,h00 
						$ kh0 ⊢ kh0,kh00 
						act_mtc { { rsp_g vs0 hl } gfl { lb_f lb_r } kh00 h00 { drl dp lc rf gr go } { eg0 eds e0 } MV ev evv rv irv tav tv tv_n lb_n } ⊢ { gfl { lb_f lb_r } { eg0 eds e0 } MV ev evv rv irv tav tv tv_n lb_n } 						
						act_lp { gfl lb_r kh0 h0 ga { eg0 eds e0 } MV ev evv rv irv tav tv tv_n lb_n } ⊢| 
					∐. ast.grm.act_end◂{ drl dp lc rf gr go } .
						act_mtc { { rsp_g vs0 hl } gfl { lb_f lb_r } kh0 h0 { drl dp lc rf gr go } { eg0 eds e0 } MV ev evv rv irv tav tv tv_n lb_n } ⊢ { gfl { lb_f lb_r } { eg0 eds e0 } MV ev evv rv irv tav tv tv_n lb_n } 						
						rp8.add_s8 { e0 %[ "\tmov r8,unt_1\n" ] } ⊢ e0 
						lb_etr { lb_r e0 } ⊢ { lb_r e0 } 
						rp8.add_s8 { e0 %[ "; discard r14\n\tadd rsp,8\n" ] } ⊢ e0 
					∎ { gfl lb_r { eg0 eds e0 } MV ev evv rv irv tav tv tv_n lb_n }	
			§ 
				@.f { gfl { eg0 eds e0 } MV ev evv rv irv tav tv tv_n lb_n g }
					$ g ⊢ 
					∐ _cns◂{ { en o_m ga } g } . 
						$ o_m ⊢ 
						∐ _none◂{} .
							lod_tv { evv en } ⊢ { evv en k } 
							lod_tv { ev en } ⊢ { ev en yk }
							∐ k ⊢ ast.k_op_prs◂{ o_n yt ht } .
								$ TX.opn◂RP.atm◂var◂yt ⊢ y00 
								$ y00 ⊢ y00,y000 
								alc_type_k.hp { %[ 0r ] _nil◂{} tav tv_n tv y000 } ⊢ { pv_n al tav tv_n tv h0 } 
								» _^ o_n ⊢ o_n,s0 
									"ETR_" 0d' ":\n" 
									`	PUSH_GRM_DT
									"\tcall GRM_" 0d' "\n"
									`	POP_GRM_DT
									`	ret
									"GRM_" 0d' ":\n"
									`	push r14
									//
								rp8.add_s8 { e0 s0 } ⊢ e0 
								inc_x lb_n ⊢ { lb_r lb_n } 
								act_lp { gfl lb_r y00 h0 ga { eg0 eds e0 } MV ev evv rv irv tav tv tv_n lb_n } ⊢ { gfl lb_r { eg0 eds e0 } MV ev evv rv irv tav tv tv_n lb_n } 
								gnr_ret e0 ⊢ e0							
								f { gfl { eg0 eds e0 } MV ev evv rv irv tav tv tv_n lb_n g } ⊢| 
							∐. .  
								##f { gfl { eg0 eds e0 } MV ev evv rv irv tav tv tv_n lb_n g } ⊢|
								∎|
						∐. _some◂mna0 .
							$ MV ⊢ { mmv mev mtv mfv mv_n ev_n }
							set_tv { mfv en { mna0 ga _nil◂{} } } ⊢ { mfv en } 
							$ { mmv mev mtv mfv mv_n ev_n } ⊢ MV 
							f { gfl { eg0 eds e0 } MV ev evv rv irv tav tv tv_n lb_n g } ⊢|						
					∐. _nil◂{} . 
						∎ { gfl { eg0 eds e0 } MV ev evv rv irv tav tv tv_n lb_n }
				∎∎
			∎∎
		§ lst_v { tv_n tv } 
			newvar_i { tv_n tv } ⊢ { tv_n tv i0 } 
			$ i0 ⊢ i0,i1 
			∎ { tv_n tv RP.atm◂abs◂{ %i1 TX.lst◂ RP.atm◂var◂%i0 } }  

		§ opn_v { tv_n tv } 
			newvar_i { tv_n tv } ⊢ { tv_n tv i0 } 
			$ i0 ⊢ i0,i1 
			∎ { tv_n tv RP.atm◂abs◂{ %i1 TX.opn◂RP.atm◂var◂%i0 } }  
		
		§ arr_v { tv_n tv } 
			newvar_i { tv_n tv } ⊢ { tv_n tv i0 } 
			$ i0 ⊢ i0,i1 
			var i0 ⊢ y0 
			RP.atm y0 ⊢ y0 
			TX.arr y0 ⊢ y0 
			∎ { tv_n tv RP.atm◂abs◂{ i1 y0 } }  
		§ unt_n_e { e i } 
			^ i ⊢ i,s 
				"\tunt_" 0d' ": dq (" 0d' "<<48)\n" // 
			rp8.add_s8 { e s } ⊢ e 
			∎ e 
		§ unt_N = for◂◂unt_n_e 
		§ ss_rcd_n { n m e } 
			∐ n'=2r . 
				» _^ n,m ⊢ n,m,s 
					"%define SS_RCD_2_MAX (1<<20)\n" 
					"\tBSS_SS_RCD " 0d' ",SS_RCD_2_MAX\n" 
					//
				rp8.add_s8 { e s } ⊢ e 
				∎ { n m e }
			∐ n'=3r . 
				» _^ n,m ⊢ n,m,s 
					"%define SS_RCD_3_MAX (1<<19)\n" 
					"\tBSS_SS_RCD " 0d' ",SS_RCD_3_MAX\n" 
					//
				rp8.add_s8 { e s } ⊢ e 
				∎ { n m e }
			∐ n'=4r . 
				» _^ n,m ⊢ n,m,s 
					"%define SS_RCD_4_MAX (1<<13)\n" 
					"\tBSS_SS_RCD " 0d' ",SS_RCD_4_MAX\n" 
					//
				rp8.add_s8 { e s } ⊢ e 
				∎ { n m e }
			∐. . 
				» _^ n,m ⊢ n,m,s 
					"%define SS_RCD_" 0d' "_MAX (1<<13)\n"
					"\tBSS_SS_RCD " 0d' ",SS_RCD_" 0d' "_MAX\n" 
					//
				rp8.add_s8 { e s } ⊢ e 
				∎ { n m e }
		§ @.ss_rcd_n_lp { n N m e } 
			∐ n'=N' . 
				∎ { N m e } 
			∐. . 
				ss_rcd_n { n m e } ⊢ { n m e } 
				_inc n ⊢ n 
				ss_rcd_n_lp { n N m e } ⊢| 
		§ ss_init_n { lb top vct null n m e }
			» _^ lb,top,vct,null,n,m ⊢ lb,top,vct,null,n,m,s 
				"\tmov QWORD [" 1' "]," 2' "\n" 
				`	mov rdi,0 
				"\tmov rax," 2' "\n" 
				"ss_lp_" 0' ":\n" 
				"\tcmp rdi," 5' "\n" 
				"\tjz ss_end_" 0' "\n" 
				`	add rdi,1 
				"\tlea rsi,[rax+8*" 4d' "]\n" 
				`	mov QWORD [rax],rsi 
				`	mov rax,rsi 
				"\tjmp ss_lp_" 0' "\n" 
				"ss_end_" 0' ":\n" 
				"\tmov rsi," 3' "\n" 
				`	mov [rax],rsi 
				// 
			rp8.add_s8 { e s } ⊢ e 
			∎ { lb top vct null n m e } 
		§ ss_init_rcd { n m e } 
			» _^ n ⊢ n,lb 
				"rcd_" 0d' // 
			» _^ n ⊢ n,top 
				"SS_RCD_" 0d' "_TOP" //
			» _^ n ⊢ n,vct 
				"SS_RCD_" 0d' "_VCT" // 
			» _^ n ⊢ n,M 
				"SS_RCD_" 0d' "_MAX" //
			» 0xffffffffffff0000r _ ⊢ nl 
			_add { nl n } ⊢ { nl n }
			» _^ nl ⊢ nl,null 
				0d' //
			» _^ n ⊢ n,etr 
				"\ninit_ss_rcd_" 0d' ":\n"
				"\tmov QWORD [SS_RCD_N+8*" 0d' "],0\n"
				"\tmov QWORD [SS_RCD_C+8*" 0d' "],0\n" // 
			rp8.add_s8 { e etr } ⊢ e  
			_inc n ⊢ n  
			ss_init_n { lb top vct null n M e } ⊢ { lb top vct null n _ e }
			_dec n ⊢ n 
			∎ { n m e } 
		§ @.ss_init_rcd_lp { n m N e }
			∐ n'=N' . 
				∎ { m N e }  
			∐. . 	
				ss_init_rcd { n m e } ⊢ { n m e }
				_inc n ⊢ n 
				ss_init_rcd_lp { n m N e } ⊢| 
		§ RCD_N = 32r 
		§ iso_env { mmv mev ev m_ns e_ns m_l } 
			iso { mmv mev ev m_ns e_ns m_l } ⊢ env 
			∎ env 
		§ inv_env env 
			inv env ⊢ env 
			∎ env 
		§ iso_file { { rsp rl ns_r } { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } { hpv hpv_n rv rv_n ev ev_n tv tv_n irv tav evv } { eds dd ep ec rtm_n lb_n } }
			iso { rsp rl ns_r } ⊢ RTM_ST 
			iso { mmv mev mtv mfv mv_n } ⊢ MV 
			iso { ns_m ns_e ns_t } ⊢ NS
			iso { hpv hpv_n rv rv_n ev ev_n tv tv_n irv tav evv } ⊢ LCV 
			iso { eds dd ep ec rtm_n lb_n } ⊢ EC
			∎ { RTM_ST MV NS LCV EC } 
		§ inv_file { RTM_ST MV NS LCV EC }	
			inv RTM_ST ⊢ { rsp rl ns_r } 
			inv MV ⊢ { mmv mev mtv mfv mv_n } 
			inv NS ⊢ { ns_m ns_e ns_t }
			inv LCV ⊢ { hpv hpv_n rv rv_n ev ev_n tv tv_n irv tav evv }
			inv EC ⊢ { eds dd ep ec rtm_n lb_n }
			∎ { { rsp rl ns_r } { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } { hpv hpv_n rv rv_n ev ev_n tv tv_n irv tav evv } { eds dd ep ec rtm_n lb_n } }

		§ 
			@.slv_file_lp { RTM_ST i il MV LCV tx_n NS gel gfl EC }
				inv_file { RTM_ST MV NS LCV EC } ⊢ { { rsp rl ns_r } { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } { hpv hpv_n rv rv_n ev ev_n tv tv_n irv tav evv } { eds dd ep0 ec0 rtm_n lb_n } }
				» "enter slv_file_lp" _ ⊢ sxe0 
				_emt sxe0 ⊢ _
				$ gel ⊢ 
				∐ _cns◂{ e gel } .
					$ e ⊢ 
					∐ ast.mdl_etr◂{ w e } .
						$ e ⊢ 
						∐ ast.mdl_def◂gel0 . 
							
							» "mdl_def" _ ⊢ sxe1 
							_emt sxe1 ⊢ sxe1 
							_emt w ⊢ w 
							» _^ dd,w ⊢ dd,w,ep1 
								0'*"\t" "§§ " 1' "\n" // 
							_cns { ep1 ep0 } ⊢ ep0
							_inc dd ⊢ dd 
							$ mv_n ⊢ mv_n,mv_n_0 
							_inc mv_n ⊢ mv_n
					
							_cns { { i ns_m ns_e ns_t } il } ⊢ il 
							$ _nil◂{} ⊢ ns_m 
							$ _nil◂{} ⊢ ns_e 
							$ _nil◂{} ⊢ ns_t 							
							iso_file { { rsp rl ns_r } { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } { hpv hpv_n rv rv_n ev ev_n tv tv_n irv tav evv } { eds dd ep0 ec0 rtm_n lb_n } } ⊢ { RTM_ST MV NS0 LCV EC }
							slv_file_lp { RTM_ST mv_n_0 il MV LCV tx_n NS0 gel0 gfl EC } ⊢ { RTM_ST mv_n_0 il MV LCV tx_n NS0 gfl EC }
							inv_file { RTM_ST MV NS0 LCV EC } ⊢ { { rsp rl ns_r } { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } { hpv hpv_n rv rv_n ev ev_n tv tv_n irv tav evv } { eds dd ep0 ec0 rtm_n lb_n } }
							exc_q { mmv mv_n_0 ns_m } ⊢ { mmv mv_n_0 _ } 
							exc_q { mev mv_n_0 ns_e } ⊢ { mev mv_n_0 _ } 
							exc_q { mtv mv_n_0 ns_t } ⊢ { mtv mv_n_0 _ } 
							» _^ dd ⊢ dd,ep1 
								0'*"\t" "∎∎\n" // 
							_cns { ep1 ep0 } ⊢ ep0
							_dec dd ⊢ dd 
							$ il ⊢ 
							∐ _cns◂{ { i ns_m ns_e ns_t } il } . 
								_cns { { w _some◂mv_n_0 } ns_m } ⊢ ns_m
								iso_file { { rsp rl ns_r } { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } { hpv hpv_n rv rv_n ev ev_n tv tv_n irv tav evv } { eds dd ep0 ec0 rtm_n lb_n } } ⊢ { RTM_ST MV NS LCV EC }
								slv_file_lp { RTM_ST i il MV LCV tx_n NS gel gfl EC } ⊢|
							∐. _nil◂{} . 
								» "slv_file_lp 0" _ ⊢ se 
								_emt se ⊢ se 
								∎| 
						∐. ast.mdl_ln◂n0 .
						
							$ n0 ⊢ n0,n0_0 
							ast.pnt_name n0_0 ⊢ sn0  							
							» _^ dd,w,sn0 ⊢ dd,w,sn0,ep1 
								0'*"\t" "§§ " 1' " = " 2' "\n" // 
							_cns { ep1 ep0 } ⊢ ep0
							$ n0 ⊢ n0,n0_0 
							slv_ns_m { n0 mmv ns_m il } ⊢ { mmv ns_m il i_m } 
							_some i_m ⊢ o 
							_cns { { w o } ns_m } ⊢ ns_m 
							iso_file { { rsp rl ns_r } { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } { hpv hpv_n rv rv_n ev ev_n tv tv_n irv tav evv } { eds dd ep0 ec0 rtm_n lb_n } } ⊢ { RTM_ST MV NS LCV EC }
							slv_file_lp { RTM_ST i il MV LCV tx_n NS gel gfl EC } ⊢|
					∐ ast.grm_etr◂g .
						_emt %[ "grm_etr D0" ] ⊢ _ 
						gnr.slv_grm.f { g i il { hpv hpv_n } { mmv mev mtv mfv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } ⊢ { g i il { hpv hpv_n } { mmv mev mtv mfv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
						rp8.e {} ⊢ ec1 
						rp8.e {} ⊢ eg1 
						_emt %[ "grm_etr D1" ] ⊢ _ 
						gnr.emt_grm.f { gfl { eg1 eds ec1 } { mmv mev mtv mfv mv_n ev_n } ev evv rv irv tav tv tv_n lb_n g } ⊢ { gfl { eg1 eds ec1 } { mmv mev mtv mfv mv_n ev_n } ev evv rv irv tav tv tv_n lb_n }
						rp8.cct { ec0 eg1 } ⊢ ec0 
						rp8.cct { ec0 ec1 } ⊢ ec0 
						iso_file { { rsp rl ns_r } { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } { hpv hpv_n rv rv_n ev ev_n tv tv_n irv tav evv } { eds dd ep0 ec0 rtm_n lb_n } } ⊢ { RTM_ST MV NS LCV EC }
						slv_file_lp { RTM_ST i il MV LCV tx_n NS gel gfl EC } ⊢|
				
					∐ ast.grm_ln◂{ w e } . 
						rp8.e {} ⊢ eg1 
						gnr.slv_n_grm_act.grm_exp { { il mmv mev mtv ns_m ns_e } e } ⊢ { { il mmv mev mtv ns_m ns_e } e } 
						gnr.slv_grm_act.grm_exp { { { mmv mev mtv ev } { tv_n tv %[ 1r ] } } e } ⊢ { { { mmv mev mtv ev } { tv_n tv lv } } e _ } 
						gnr.emt_grm.exp { { mmv mev mtv mfv mv_n ev_n } { rv ev tv tv_n eg1 eds gfl } tav ec0 evv lb_n e } ⊢ { { mmv mev mtv mfv mv_n ev_n } { rv ev tv tv_n eg1 eds gfl } tav ec0 evv lb_n e_m }
						\\_cns { { w _some◂i_m } ns_m } ⊢ ns_m 
						$ _cns◂{ { w _some◂e_m } ns_e } ⊢ ns_e 
						rp8.cct { ec0 eg1 } ⊢ ec0 
						
						iso { rsp rl ns_r } ⊢ RTM_ST 
						iso { mmv mev mtv mfv mv_n } ⊢ MV 
						iso { hpv hpv_n rv rv_n ev ev_n tv tv_n irv tav evv } ⊢ LCV 
						iso { ns_m ns_e ns_t } ⊢ NS 
						iso { eds dd ep0 ec0 rtm_n lb_n } ⊢ EC 
						
						##iso_file { { rsp rl ns_r } { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } { hpv hpv_n rv rv_n ev ev_n tv tv_n irv tav evv } { eds dd ep0 ec0 rtm_n lb_n } } ⊢ { RTM_ST MV NS LCV EC }
						##∎| 
						slv_file_lp { RTM_ST i il MV LCV tx_n NS gel gfl EC } ⊢|
						
					∐ ast.lc_etr◂{ w e } .
						» "lc_etr" _ ⊢ sxe1 
						_emt sxe1 ⊢ sxe1 
						_emt w ⊢ w 
						$ e ⊢
						∐ ast.lc_def◂{ o_t d td lc } .
							$ _nil◂{} ⊢ ns_r_e
							» 1r _ ⊢ lv 
							∐ o_t ⊢ _none◂{} . 
								slv_n.crt_dst_ptn { { rv tv tv_n rv_n ns_r_e } d } ⊢ { { rv tv tv_n rv_n ns_r_e } d } 
								slv.crt_dst_ptn { { lv rv tv tv_n } d } ⊢ { { lv rv tv tv_n } d y } 
								$ y ⊢ y,y0 
								rtr_dst_ptn { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t y0 td } ⊢ { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t } 
								slv_n.r { { mmv mev ev ns_m ns_e il } rv tv tv_n rv_n ns_r_e lc } ⊢ { { mmv mev ev ns_m ns_e il } rv tv tv_n rv_n ns_r_e lc } 
								slv.r { lv ev rv tv tv_n lc } ⊢ { lv ev rv tv tv_n lc yr } 
								_dec lv ⊢ lv 
								gen { tv_n tv lv y } ⊢ { tv_n tv lv y } 
								imp { y yr } ⊢ yx 
								RP.atm yx ⊢ yx 
								$ yx ⊢ yx,yx0 
								pnt_type_k { tv yx0 } ⊢ { tv syx } 
								_none {} ⊢ o 
								$ ev_n ⊢ ev_n,o_n
								$ yx ⊢ yx,yx0 
								newvar_ln { tv_n tv yx0 } ⊢ { tv_n tv iy0 } 
								ast.k_op_gnr { o o_n d lc iy0 } ⊢ k 
								» _^ dd,ev_n,w,syx ⊢ dd,ev_n,w,syx,ep1 
									0'*"\t" "§ " 2' "(" 1d' ") : " 3' "\n" // 
								_emt ep1 ⊢ ep1 
								_cns { ep1 ep0 } ⊢ ep0 
								add_e { tv_n tv evv ev ev_n ns_e w k yx } ⊢ { tv_n tv evv ev ev_n ns_e }
								iso_file { { rsp rl ns_r } { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } { hpv hpv_n rv rv_n ev ev_n tv tv_n irv tav evv } { eds dd ep0 ec0 rtm_n lb_n } } ⊢ { RTM_ST MV NS LCV EC }
								slv_file_lp { RTM_ST i il MV LCV tx_n NS gel gfl EC } ⊢|
							∐. o_t ⊢ _some◂p . 
								tpl_ptn { { %[ 0r ] _nil◂{} lv evv ev ev_n tv tv_n } p } ⊢ { { c_n wl lv evv ev ev_n tv tv_n } p y_c } 
								rev_apnd { wl ns_e } ⊢ ns_e 
								slv_n.crt_dst_ptn { { rv tv tv_n rv_n ns_r_e } d } ⊢ { { rv tv tv_n rv_n ns_r_e } d } 
								slv.crt_dst_ptn { { lv rv tv tv_n } d } ⊢ { { lv rv tv tv_n } d y } 
								$ y ⊢ y,y0 
								rtr_dst_ptn { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t y0 td } ⊢ { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t } 
								slv_n.r { { mmv mev ev ns_m ns_e il } rv tv tv_n rv_n ns_r_e lc } ⊢ { { mmv mev ev ns_m ns_e il } rv tv tv_n rv_n ns_r_e lc } 
								$ c_n ⊢ c_n,c_n0 
								pop_n { c_n ns_e } ⊢ { _ ns_e } 
								slv.r { lv ev rv tv tv_n lc } ⊢ { lv ev rv tv tv_n lc yr } 
								_dec lv ⊢ lv 
								gen { tv_n tv lv y } ⊢ { tv_n tv lv y } 
								gen { tv_n tv lv y_c } ⊢ { tv_n tv lv y_c } 
								imp { y yr } ⊢ yx 
								RP.atm yx ⊢ yx 
								ct_imp { y_c yx } ⊢ yx 
								RP.atm yx ⊢ yx 
								$ yx ⊢ yx,yx0 
								pnt_type_k { tv yx0 } ⊢ { tv syx } 
								$ ev_n ⊢ ev_n,o_n
								$ yx ⊢ yx,yx0 
								newvar_ln { tv_n tv yx0 } ⊢ { tv_n tv iy0 } 
								ast.k_op_gnr { _some◂{ c_n0 p } o_n d lc iy0 } ⊢ k 
								» _^ dd,ev_n,w,syx ⊢ dd,ev_n,w,syx,ep1 
									0'*"\t" "§ " 2' "(" 1d' ") : " 3' "\n" // 
								_cns { ep1 ep0 } ⊢ ep0 
								add_e { tv_n tv evv ev ev_n ns_e w k yx } ⊢ { tv_n tv evv ev ev_n ns_e }
								iso_file { { rsp rl ns_r } { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } { hpv hpv_n rv rv_n ev ev_n tv tv_n irv tav evv } { eds dd ep0 ec0 rtm_n lb_n } } ⊢ { RTM_ST MV NS LCV EC }
								slv_file_lp { RTM_ST i il MV LCV tx_n NS gel gfl EC } ⊢|	
						∐ ast.lc_ln◂c . 
							» 1r _ ⊢ lv 
							slv_n.cst { { { mmv mev ev ns_m ns_e il } tv_n tv } c } ⊢ { { { mmv mev ev ns_m ns_e il } tv_n tv } c } 
							slv.cst { { lv ev tv_n tv } c } ⊢ { { lv ev tv_n tv } c yx } 
							_dec lv ⊢ lv 
							gen { tv_n tv lv yx } ⊢ { tv_n tv lv yx } 
							add_e { tv_n tv evv ev ev_n ns_e w c yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
							iso_file { { rsp rl ns_r } { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } { hpv hpv_n rv rv_n ev ev_n tv tv_n irv tav evv } { eds dd ep0 ec0 rtm_n lb_n } } ⊢ { RTM_ST MV NS LCV EC }
							slv_file_lp { RTM_ST i il MV LCV tx_n NS gel gfl EC } ⊢|
						∐ ast.lc_ply◂{ x p } . 
							mk_arr { %[ 64r ] _none◂{} } ⊢ { _ _ rv_t } 
							tpl_reg_ptn { { _nil◂{} %[ 1r ] rv_t %[ 0r ] tv tv_n } x } ⊢ { { ns_r_t lv rv_t rv_t_n tv tv_n } x y }
							slv_n.csm_src_ptn { { { mmv mev ev ns_m ns_e il } rv_t tv tv_n ns_r_t } p } ⊢ { { { mmv mev ev ns_m ns_e il } rv_t tv tv_n ns_r_t } p }
							slv.csm_src_ptn { { lv ev rv_t tv tv_n } p } ⊢ { { lv ev rv_t tv tv_n } p yp } 
							_dec lv ⊢ lv 
							gen { tv_n tv lv y } ⊢ { tv_n tv lv y } 
							gen { tv_n tv lv yp } ⊢ { tv_n tv lv yp } 
							$ RP.atm◂imp◂{ y yp } ⊢ yi,yi0 
							newvar_ln { tv_n tv yi0 } ⊢ { tv_n tv v0 } 
							$ yi ⊢ yi,yi0 
							pnt_type_k { tv yi0 } ⊢ { tv syi } 
							» _^ dd,ev_n,w,syi ⊢ dd,ev_n,w,_,ep1 
								0'*"\t" "§ " 2' "(" 1d' ") : " 3' "\n" // 
							_cns { ep1 ep0 } ⊢ ep0 
							add_e { tv_n tv evv ev ev_n ns_e w ast.k_ply◂{ x p v0 } yi } ⊢ { tv_n tv evv ev ev_n ns_e }
							iso_file { { rsp rl ns_r } { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } { hpv hpv_n rv rv_n ev ev_n tv tv_n irv tav evv } { eds dd ep0 ec0 rtm_n lb_n } } ⊢ { RTM_ST MV NS LCV EC }
							slv_file_lp { RTM_ST i il MV LCV tx_n NS gel gfl EC } ⊢|	
						∐. ast.lc_cst◂lc . 
							» 0r _ ⊢ lv 
							slv_n.r { { mmv mev ev ns_m ns_e il } rv tv tv_n rv_n ns_r lc } ⊢ { { mmv mev ev ns_m ns_e il } rv tv tv_n rv_n ns_r lc } 
							slv.r { lv ev rv tv tv_n lc } ⊢ { lv ev rv tv tv_n lc yr0 } 
							» _^ dd ⊢ dd,ep1 
								0'*"\t" "§ _ _ ⊢ _\n" // 
							_cns { ep1 ep0 } ⊢ ep0
							$ rtm_n ⊢ rtm_n,n0 
							_inc rtm_n ⊢ rtm_n 
							rp8.e {} ⊢ eg1 
							rp8.e {} ⊢ er0 
							» _^ rtm_n ⊢ rtm_n,ret0 
								"\tjmp RTM_" 0d' "\n" // 
							» _^ n0 ⊢ n0,ec1 
								"RTM_" 0d' ":\n" //
							rp8.add_s8 { er0 ec1 } ⊢ er0 
							f_rtm ret0 ⊢ ft 
							$ _nil◂{} ⊢ cl
							gnr.lc_code.f { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv lc { eg1 eds er0 } rl ft } ⊢ { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv { eg1 eds er0 } rl ft } 
							rp8.cct { ec0 eg1 } ⊢ ec0 
							rp8.cct { ec0 er0 } ⊢ ec0 
							iso_file { { rsp rl ns_r } { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } { hpv hpv_n rv rv_n ev ev_n tv tv_n irv tav evv } { eds dd ep0 ec0 rtm_n lb_n } } ⊢ { RTM_ST MV NS LCV EC }
							slv_file_lp { RTM_ST i il MV LCV tx_n NS gel gfl EC } ⊢|
					∐ ast.lc_qlq_etr◂q . 
						gnr.slv_lc_clq.f { { mmv mev ev ns_m ns_e il } irv tav evv rv tv tv_n ev_n rv_n q gfl { eds dd ep0 ec0 lb_n } } ⊢ { { mmv mev ev ns_m ns_e il } irv tav evv rv tv tv_n ev_n rv_n gfl { eds dd ep0 ec0 lb_n } }
						iso_file { { rsp rl ns_r } { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } { hpv hpv_n rv rv_n ev ev_n tv tv_n irv tav evv } { eds dd ep0 ec0 rtm_n lb_n } } ⊢ { RTM_ST MV NS LCV EC }
						slv_file_lp { RTM_ST i il MV LCV tx_n NS gel gfl EC } ⊢|
					∐ ast.dt_etr◂{ w e } .
						$ e ⊢ 
						∐ ast.dt_def◂{ as dl } .
							$ tx_n ⊢ tx_n,x 
							$ x ⊢ x,x0 
							_inc tx_n ⊢ tx_n
							$ w ⊢ w,w0 
							iso { mmv mev ev ns_m ns_e il } ⊢ env 
							slv_args_def { mtv tv_n tv ns_t as x dl } ⊢ { mtv tv_n tv ns_t al k yx dl ql } 
							inv env ⊢ { mmv mev ev ns_m ns_e il } 
							add_t { tv_n tv ns_t w k } ⊢ { tv_n tv ns_t }
							» 0r _ ⊢ an 
							slv_dt_def { { mmv mev ns_m il } { tav evv } an mtv al yx tv tv_n ns_t ev ev_n ns_e dl { dd ep0 ec0 } } ⊢ { { mmv mev ns_m il } { tav evv } an mtv al yx tv tv_n ns_t ev ev_n ns_e { dd ep0 ec0 } ac kl }
							gnr.mk_t_aux_f { tv_n tv ql kl } ⊢ { tv_n tv ql kl }
							$ kl ⊢ kl,kl0 
							» 0r _ ⊢ pv_n 
							$ _nil◂{} ⊢ alp 
							alc_type_k.hp_lst { pv_n alp tav tv_n tv kl0 } ⊢ { pv_n alp tav tv_n tv hl }
							$ ql ⊢ ql,ql0 
							subst_lst { alp ql0 } ⊢ { alp ql0 } 
							_some { ql kl ql0 hl } ⊢ o 
							set_tv { tav x0 { w0 o } } ⊢ { tav x } 
							iso_file { { rsp rl ns_r } { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } { hpv hpv_n rv rv_n ev ev_n tv tv_n irv tav evv } { eds dd ep0 ec0 rtm_n lb_n } } ⊢ { RTM_ST MV NS LCV EC }
							slv_file_lp { RTM_ST i il MV LCV tx_n NS gel gfl EC } ⊢|
						∐. ast.dt_ln◂{ as y } . 
							$ _nil◂{} ⊢ al
							slv_args_ln { { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t as al } y } ⊢ { { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t al l2 } k } 
							$ k ⊢ k,k0 
							pnt_type_k { tv k0 } ⊢ { tv sk } 
							» _^ dd,w,tv_n,sk ⊢ dd,w,tv_n,sk,ep1 
								0'*"\t" "¶ " 1' "(" 2d' ") ~ " 3' // 
							_cns { ep1 ep0 } ⊢ ep0 
							add_t { tv_n tv ns_t w k } ⊢ { tv_n tv ns_t } 
							iso_file { { rsp rl ns_r } { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } { hpv hpv_n rv rv_n ev ev_n tv tv_n irv tav evv } { eds dd ep0 ec0 rtm_n lb_n } } ⊢ { RTM_ST MV NS LCV EC }
							slv_file_lp { RTM_ST i il MV LCV tx_n NS gel gfl EC } ⊢|
					∐. ast.dt_qlq_etr◂q .
						» "dt_clq_etr" _ ⊢ sec0 
						_emt sec0 ⊢ sec0
						gnr.slv_dt_clq.f { q { mmv mev ev ns_m ns_e il } tav evv ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } } ⊢ { { mmv mev ev ns_m ns_e il } tav evv ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } }
						iso_file { { rsp rl ns_r } { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } { hpv hpv_n rv rv_n ev ev_n tv tv_n irv tav evv } { eds dd ep0 ec0 rtm_n lb_n } } ⊢ { RTM_ST MV NS LCV EC }
						slv_file_lp { RTM_ST i il MV LCV tx_n NS gel gfl EC } ⊢|
				∐. _nil◂{} . 
					iso_file { { rsp rl ns_r } { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } { hpv hpv_n rv rv_n ev ev_n tv tv_n irv tav evv } { eds dd ep0 ec0 rtm_n lb_n } } ⊢ { RTM_ST MV NS LCV EC }
					∎ { RTM_ST i il MV LCV tx_n NS gfl EC }
		§
			@.slv_file gel
				» TX.N0 _ ⊢ tx_n 
				$ _nil◂{} ⊢ ns_m 
				$ _nil◂{} ⊢ ns_t 
				$ _nil◂{} ⊢ ns_e 
				» 3200r _ ⊢ max
				mk_nil_arr max ⊢ { max mmv }
				mk_nil_arr max ⊢ { max mev }
				mk_nil_arr max ⊢ { max mtv }				
				ini_tv_n max ⊢ { max mfv } 
				ini_tv {} ⊢ rv 
				ini_tv {} ⊢ irv 
				ini_tv {} ⊢ ev 
				ini_tv {} ⊢ evv 
				ini_tv {} ⊢ tv 
				ini_tv {} ⊢ tav
				ini_tv {} ⊢ hpv
				» 0r _ ⊢ hpv_n  
				» 1r _ ⊢ mv_n
				» 0r _ ⊢ rv_n
				» 0r _ ⊢ ev_n
				» 0r _ ⊢ tv_n
				» 0r _ ⊢ i 
				» 0r _ ⊢ lv 

				
				add_t { tv_n tv ns_t %[ "_r64" ] TX.r64◂{} } ⊢ { tv_n tv ns_t }
				set_tv { tav %[ TX.id.r64 ] { %[ "_r64" ] _none◂{} } } ⊢ { tav ix }
				_inc ix ⊢ ix 

				add_t { tv_n tv ns_t %[ "_s8" ] TX.s8◂{} } ⊢ { tv_n tv ns_t }
				set_tv { tav ix { %[ "_s8" ] _none◂{} } } ⊢ { tav ix }
				_inc ix ⊢ ix 

				lst_v { tv_n tv } ⊢ { tv_n tv y0 }  
				add_t { tv_n tv ns_t %[ "_lst" ] y0 } ⊢ { tv_n tv ns_t }
				newvar_i { tv_n tv } ⊢ { tv_n tv ia } 
				$ ia ⊢ ia,ia0 
				$ RP.atm◂var◂ia ⊢ v,v0 
				$ ⟦ ast.hp_rcd◂⟦ ast.hp.pv◂%[ 0r ] ast.hp.adt◂{ %[ TX.id.lst ] ⟦ ast.hp.pv◂%[ 0r ] ⟧ } ⟧ ast.hp_rcd◂⟦⟧ ⟧ ⊢ hl 
				set_tv { tav ix { %[ "_lst" ] _some◂{ ⟦ ia0 ⟧ ⟦ RP.cns2◂{ v0 TX.lst◂v } TX.unt◂{} ⟧ ⟦ %[ 0r ] ⟧ hl } } } ⊢ { tav ix }
				_inc ix ⊢ ix 

				opn_v { tv_n tv } ⊢ { tv_n tv y0 }  
				add_t { tv_n tv ns_t %[ "_opn" ] y0 } ⊢ { tv_n tv ns_t }
				newvar_i { tv_n tv } ⊢ { tv_n tv ia } 
				$ ia ⊢ ia,ia0 
				set_tv { tav ix { %[ "_opn" ] _some◂{ ⟦ ia0 ⟧ ⟦ RP.atm◂var◂ia TX.unt◂{} ⟧ ⟦ %[ 0r ] ⟧ ⟦ ast.hp.pv◂%[ 0r ] ast.hp_rcd◂⟦⟧ ⟧ } } } ⊢ { tav ix }
				_inc ix ⊢ ix 
				
				arr_v { tv_n tv } ⊢ { tv_n tv y0 }  
				» "_arr" _ ⊢ t0
				$ t0 ⊢ t0,t00 
				add_t { tv_n tv ns_t t0 y0 } ⊢ { tv_n tv ns_t }
				_none {} ⊢ o 
				set_tv { tav ix { t00 o } } ⊢ { tav ix }
				_inc ix ⊢ ix 

				$ _nil◂{} ⊢ il 
				
				newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
				$ yv ⊢ yv,yv0
				TX.arr yv0 ⊢ ya
				$ yv ⊢ yv,yv0 
				$ TX.t_imp◂{ RP.cns2◂{ TX.r64◂{} %yv0 } RP.cns3◂{ TX.r64◂{} %yv %ya } } ⊢ yx,yx0 
				k_op_axm { tv_n tv %[ EX.mk_arr ] yx0 } ⊢ { tv_n tv k }
				add_e { tv_n tv evv ev ev_n ns_e %[ "_mk_arr" ] k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
				
				$ TX.r64◂{} ⊢ y0 
				$ TX.r64◂{} ⊢ y1 
				newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
				$ yv ⊢ yv,yv0 
				TX.arr yv0 ⊢ ya
				$ ya ⊢ ya,ya0 
				$ yv ⊢ yv,yv0
				$ RP.atm◂imp◂{ RP.rcd◂_cns◂{ ya _cns◂{ y0 _cns◂{ yv0 _nil◂{} } } } RP.rcd◂_cns◂{ ya0 _cns◂{ y1 _cns◂{ yv _nil◂{} } } } } ⊢ yx,yx0 
				k_op_axm { tv_n tv %[ EX.exc_q ] yx0 } ⊢ { tv_n tv k }
				add_e { tv_n tv evv ev ev_n ns_e %[ "_exc_q" ] k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
						
				» "_set_q" _ ⊢ se
				$ TX.r64◂{} ⊢ y0 
				$ TX.r64◂{} ⊢ y1 
				newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
				$ yv ⊢ yv,yv0 
				TX.arr yv ⊢ ya
				$ ya ⊢ ya,ya0 
				$ RP.cns3◂{ ya y0 yv0 } ⊢ y_s 
				$ RP.cns2◂{ ya0 y1 } ⊢ y_d 
				imp { y_s y_d } ⊢ yx 
				RP.atm yx ⊢ yx 
				» EX.set_q _ ⊢ k0 
				$ yx ⊢ yx,yx0 
				k_op_axm { tv_n tv k0 yx0 } ⊢ { tv_n tv k }
				add_e { tv_n tv evv ev ev_n ns_e se k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
							
				newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
				$ yv ⊢ yv,yv0 
				TX.arr yv ⊢ ya
				$ ya ⊢ ya,ya0 
				##$ RP.atm◂imp◂{ RP.rcd◂⟦ ya0 TX.r64◂{} ⟧ RP.rcd◂⟦ ya TX.r64◂{} yv0 ⟧ } ⊢ yx,yx0 
				$ RP.atm◂imp◂{ RP.rcd◂_cns◂{ ya0 _cns◂{ TX.r64◂{} _nil◂{} } } RP.rcd◂_cns◂{ ya _cns◂{ TX.r64◂{} _cns◂{ yv0 _nil◂{} } } } } ⊢ yx,yx0 
				k_op_axm { tv_n tv %[ EX.get_q ] yx0 } ⊢ { tv_n tv k }
				add_e { tv_n tv evv ev ev_n ns_e %[ "_get_q" ] k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
							
				» "_lod_q" _ ⊢ se
				$ TX.r64◂{} ⊢ y0 
				$ TX.r64◂{} ⊢ y1 
				newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
				$ yv ⊢ yv,yv0 
				TX.arr yv ⊢ ya
				$ ya ⊢ ya,ya0 
				$ RP.cns3◂{ ya y0 yv0 } ⊢ y_d 
				$ RP.cns2◂{ ya0 y1 } ⊢ y_s 
				imp { y_s y_d } ⊢ yx
				RP.atm yx ⊢ yx 
				» EX.lod_q _ ⊢ k0 
				$ yx ⊢ yx,yx0 
				k_op_axm { tv_n tv k0 yx0 } ⊢ { tv_n tv k }
				add_e { tv_n tv evv ev ev_n ns_e se k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
								
				» "_arr_of_lst" _ ⊢ se 
				newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
				$ yv ⊢ yv,yv0 				
				TX.arr yv0 ⊢ ya
				$ TX.lst◂yv ⊢ ys
				imp { ys ya } ⊢ yx  
				RP.atm yx ⊢ yx 
				» EX.arr_of_lst _ ⊢ k	
				$ yx ⊢ yx,yx0 
				k_op_axm { tv_n tv k yx0 } ⊢ { tv_n tv k }
				add_e { tv_n tv evv ev ev_n ns_e se k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
				
				» "_arr_len" _ ⊢ se
				newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
				TX.arr yv ⊢ ya
				$ ya ⊢ ya,ya0 
				$ TX.r64◂{} ⊢ y0 
				$ RP.cns2◂{ ya0 y0 } ⊢ y_d 
				imp { ya y_d } ⊢ yx 
				RP.atm yx ⊢ yx 
				» EX.arr_len _ ⊢ k0 
				$ yx ⊢ yx,yx0 
				k_op_axm { tv_n tv k0 yx0 } ⊢ { tv_n tv k }
				add_e { tv_n tv evv ev ev_n ns_e se k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
						
				$ TX.s8◂{} ⊢ ys 
				$ TX.lst◂ys ⊢ yx 
				» "_args" _ ⊢ se
				» 11111111r _ ⊢ k0 
				$ yx ⊢ yx,yx0 
				k_op_axm { tv_n tv k0 yx0 } ⊢ { tv_n tv k }
				add_e { tv_n tv evv ev ev_n ns_e se k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
					
				$ TX.t_imp◂{ TX.r64◂{} RP.cns2◂{ TX.r64◂{} TX.s8◂{} } } ⊢ yx,yx0 
				k_op_axm { tv_n tv %[ EX.mlc_s8 ] yx0 } ⊢ { tv_n tv k }
				add_e { tv_n tv evv ev ev_n ns_e %[ "_mlc_s8" ] k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
					
				$ TX.r64◂{} ⊢ yl0 
				$ TX.s8◂{} ⊢ ys
				$ ys ⊢ ys,ys0  
				$ RP.cns2◂{ ys0 yl0 } ⊢ y_d 
				imp { ys y_d } ⊢ yx  
				RP.atm yx ⊢ yx 
				$ yx ⊢ yx,yx0 
				k_op_axm { tv_n tv %[ EX.s8_len ] yx0 } ⊢ { tv_n tv k }
				add_e { tv_n tv evv ev ev_n ns_e %[ "_s8_len" ] k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
						
				newvar_q { tv_n tv lv } ⊢ { tv_n tv lv v0 } 
				$ v0 ⊢ v0,v1 
				$ RP.atm◂ct_imp◂{ TX.grm◂%v0 TX.prs_opn◂%v1 } ⊢ yx,yx0 
				k_op_axm { tv_n tv %[ EX.prs ] yx0 } ⊢ { tv_n tv k }
				add_e { tv_n tv evv ev ev_n ns_e %[ "_prs" ] k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
					
				newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
				$ yv ⊢ yv,yv0 
				$ TX.t_imp◂{ yv yv0 } ⊢ yx,yx0 
				k_op_axm { tv_n tv %[ EX.emt ] yx0 } ⊢ { tv_n tv k }
				add_e { tv_n tv evv ev ev_n ns_e %[ "_emt" ] k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
					
				k_op_axm { tv_n tv %[ EX.inc ] TX.r64_op1◂{} } ⊢ { tv_n tv k }
				add_e { tv_n tv evv ev ev_n ns_e %[ "_inc" ] k TX.r64_op1◂{} } ⊢ { tv_n tv evv ev ev_n ns_e } 
				
				k_op_axm { tv_n tv %[ EX.dec ] TX.r64_op1◂{} } ⊢ { tv_n tv k }
				add_e { tv_n tv evv ev ev_n ns_e %[ "_dec" ] k TX.r64_op1◂{} } ⊢ { tv_n tv evv ev ev_n ns_e } 
					
				k_op_axm { tv_n tv %[ EX.add ] TX.r64_op2◂{} } ⊢ { tv_n tv k }				
				add_e { tv_n tv evv ev ev_n ns_e %[ "_add" ] k TX.r64_op2◂{} } ⊢ { tv_n tv evv ev ev_n ns_e } 						
				
				k_op_axm { tv_n tv %[ EX.sub ] TX.r64_op2◂{} } ⊢ { tv_n tv k }
				add_e { tv_n tv evv ev ev_n ns_e %[ "_sub" ] k TX.r64_op2◂{} } ⊢ { tv_n tv evv ev ev_n ns_e } 
			
				k_op_axm { tv_n tv %[ EX.imul ] TX.r64_op2◂{} } ⊢ { tv_n tv k }
				add_e { tv_n tv evv ev ev_n ns_e %[ "_imul" ] k TX.r64_op2◂{} } ⊢ { tv_n tv evv ev ev_n ns_e } 
					
				k_op_axm { tv_n tv %[ EX.shl ] TX.r64_op2◂{} } ⊢ { tv_n tv k }
				add_e { tv_n tv evv ev ev_n ns_e %[ "_shl" ] k TX.r64_op2◂{} } ⊢ { tv_n tv evv ev ev_n ns_e } 
					
				k_op_axm { tv_n tv %[ EX.shr ] TX.r64_op2◂{} } ⊢ { tv_n tv k }
				add_e { tv_n tv evv ev ev_n ns_e %[ "_shr" ] k TX.r64_op2◂{} } ⊢ { tv_n tv evv ev ev_n ns_e } 
					
				k_op_axm { tv_n tv %[ EX.and ] TX.r64_op2◂{} } ⊢ { tv_n tv k }
				add_e { tv_n tv evv ev ev_n ns_e %[ "_and" ] k TX.r64_op2◂{} } ⊢ { tv_n tv evv ev ev_n ns_e } 						
				
				$ TX.t_imp◂{ RP.cns3◂{ TX.s8◂{} TX.r64◂{} TX.r64◂{} } RP.cns3◂{ TX.s8◂{} TX.r64◂{} TX.r64◂{} } } ⊢ yx,yx0 
				k_op_axm { tv_n tv %[ EX.sts ] yx0 } ⊢ { tv_n tv k }
				add_e { tv_n tv evv ev ev_n ns_e %[ "_sts" ] k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
						
				$ TX.t_imp◂{ RP.cns2◂{ TX.s8◂{} TX.r64◂{} } RP.cns3◂{ TX.s8◂{} TX.r64◂{} TX.r64◂{} } } ⊢ yx,yx0
				k_op_axm { tv_n tv %[ EX.lds ] yx0 } ⊢ { tv_n tv k }
				add_e { tv_n tv evv ev ev_n ns_e %[ "_lds" ] k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
					
				$ TX.t_imp◂{ RP.cns2◂{ TX.r64◂{} TX.r64◂{} } RP.cns3◂{ TX.r64◂{} TX.r64◂{} TX.r64◂{} } } ⊢ yx,yx0 
				k_op_axm { tv_n tv %[ EX.setge ] yx0 } ⊢ { tv_n tv k }
				add_e { tv_n tv evv ev ev_n ns_e %[ "_setge" ] k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
						
				$ RP.cns5◂{ TX.r64◂{} TX.s8◂{} TX.r64◂{} TX.s8◂{} TX.r64◂{} } ⊢ y_s
				$ y_s ⊢ y_s,y_d 
				$ RP.atm◂imp◂{ %y_s %y_d } ⊢ yx,yx0 
				k_op_axm { tv_n tv %[ EX.rep_movsb ] yx0 } ⊢ { tv_n tv k }
				add_e { tv_n tv evv ev ev_n ns_e %[ "_rep_movsb" ] k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
						
				imp { RP.unt◂{} RP.unt◂{} } ⊢ yx 
				RP.atm yx ⊢ yx 
				» "_info" _ ⊢ se 
				» EX.info _ ⊢ k0 
				$ yx ⊢ yx,yx0 
				k_op_axm { tv_n tv k0 yx0 } ⊢ { tv_n tv k }
				add_e { tv_n tv evv ev ev_n ns_e se k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
							
				imp { RP.rcd◂_nil◂{} TX.r64◂{} } ⊢ yx 
				RP.atm yx ⊢ yx 
				$ yx ⊢ yx,yx0 
				k_op_axm { tv_n tv %[ EX.getchar ] yx0 } ⊢ { tv_n tv k }
				add_e { tv_n tv evv ev ev_n ns_e %[ "_getchar" ] k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
					
				newvar_q { tv_n tv lv } ⊢ { tv_n tv lv y0 }
				$ TX.lst◂y0 ⊢ y0  
				$ RP.atm◂imp◂{ RP.rcd◂_nil◂{} %y0 } ⊢ yx,yx0 
				k_ctr { tv_n tv %[ 1r ] %[ 2r ] yx0 } ⊢ { tv_n tv k } 
				add_e { tv_n tv evv ev ev_n ns_e %[ "_nil" ] k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
						
				newvar_q { tv_n tv lv } ⊢ { tv_n tv lv y0 }
				$ y0 ⊢ y0,y1 
				$ TX.lst◂y0 ⊢ y0 
				$ y0 ⊢ y0,y2 
				$ RP.cns2◂{ y1 y0 } ⊢ y0
				$ RP.atm◂imp◂{ %y0 %y2 } ⊢ yx,yx0 
				k_ctr { tv_n tv %[ 0r ] %[ 2r ] yx0 } ⊢ { tv_n tv k } 
				add_e { tv_n tv evv ev ev_n ns_e %[ "_cns" ] k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
					
				newvar_q { tv_n tv lv } ⊢ { tv_n tv lv y0 } 
				$ y0 ⊢ y0,y1 
				$ TX.opn◂y1 ⊢ y1  
				imp { y0 y1 } ⊢ yx 				
				RP.atm yx ⊢ yx 
				» "_some" _ ⊢ se
				» 0r _ ⊢ ia0 
				» 2r _ ⊢ in 
				$ yx ⊢ yx,yx0 
				k_ctr { tv_n tv ia0 in yx0 } ⊢ { tv_n tv k } 
				add_e { tv_n tv evv ev ev_n ns_e se k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
					
				newvar_q { tv_n tv lv } ⊢ { tv_n tv lv y0 }
				$ TX.opn◂y0 ⊢ y0 
				$ RP.atm◂imp◂{ RP.rcd◂_nil◂{} %y0 } ⊢ yx,yx0
				k_ctr { tv_n tv %[ 1r ] %[ 2r ] yx0 } ⊢ { tv_n tv k } 
				add_e { tv_n tv evv ev ev_n ns_e %[ "_none" ] k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
					
				$ TX.s8◂{} ⊢ y0 
				$ TX.s8◂{} ⊢ y1 
				$ TX.s8◂{} ⊢ y2 
				$ RP.atm◂imp◂{ %y2 RP.rcd◂_cns◂{ %y1 _cns◂{ %y0 _nil◂{} } } } ⊢ yx,yx0
				k_op_axm { tv_n tv %[ EX.in_fn ] yx0 } ⊢ { tv_n tv k }  
				add_e { tv_n tv evv ev ev_n ns_e %[ "_in_fn" ] k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
				
				$ TX.s8◂{} ⊢ y0 
				$ y0 ⊢ y0,y1 
				$ RP.cns2◂{ y1 y0 } ⊢ y0 
				$ y0 ⊢ y0,y1 
				$ RP.atm◂imp◂{ %y1 %y0 } ⊢ yx,yx0
				k_op_axm { tv_n tv %[ EX.emt_s8_to ] yx0 } ⊢ { tv_n tv k } 
				add_e { tv_n tv evv ev ev_n ns_e %[ "_emt_s8_to" ] k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
				
				$ TX.s8◂{} ⊢ y0 
				$ y0 ⊢ y0,y1 
				imp { y1 y0 } ⊢ yx 
				RP.atm yx ⊢ yx 
				» "_cd" _ ⊢ se
				» EX.cd _ ⊢ k0 
				$ yx ⊢ yx,yx0
				k_op_axm { tv_n tv k0 yx0 } ⊢ { tv_n tv k } 
				add_e { tv_n tv evv ev ev_n ns_e se k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
				
				
				$ _nil◂{} ⊢ ep
				rp8.e {} ⊢ ec 
				» 0r _ ⊢ dd 
				» 0r _ ⊢ rtm_n 

				» _^ _ ⊢ eds 
					`section .data
					`	GRM_DT: 
					`		dq 0 
					`		dq 0 
					`		dq 0 
					`		dq 0 
					`		dq 0 
					`	err_n: dq 0
					` SS_LN_C: dq 0
					`	S8_N: dq 0 
					`	fmt_err_line: db "err:%x",10,0
					`	fmt_r64: db "%dr",0
					`	fmt_s8: db 34,"%s",34,0
					`	fmt_d: db "%d",0
					`	fmt_x: db "%x",0
					`	fmt_arr_l: db "{| ",0
					`	fmt_arr_r: db "|}",0
					`	fmt_rcd_l: db "{ ",0
					`	fmt_rcd_r: db "} ",0
					`	fmt_rcd_box_l: db "*{ "
					`	fmt_nl: db 10,0
					`	fmt_spc: db " ",0
					`	fmt_emt: db "_emt:",0
					`	fmt_getchar: db "_getchar:",0
					`	rt_err0: db "rt_err 0:",10,0 
					` s8_e: dq 0,0
					`
					`	fmt_info:
					`		db "info:",10
					`		db "S8_N=%d",10
					`		db "SS_LN_C=%d",10
					`		db "SS_LN_N=%d",10
					`		db 0
					`	fmt_info_rcd:
					`		db "rcd %d",10
					`		db "SS_RCD_C=%d",10
					`		db "SS_RCD_N=%d",10
					`		db 0
					`
					`fmt_sig_hdl:
					`	db "sig_hdl:",10
					`	db "signal number=%d",10
					`	db 0
					`
					
					//
				rp8.of_s8 eds ⊢ eds 
				rp8.e {} ⊢ ue 
				unt_N { ue %[ 13r ] %[ 1r ] } ⊢ { ue _ }  
				rp8.to_s8 ue ⊢ ue 
				^ ue ⊢ _,sc1 
					`section .text
					`	unt: dq 0x0
					`
					`	unt_0: dq 0x0 
					0'
					`
					`global _start
					`
					`info:
					`	C_PUSH_REGS
					`	mov rdi,fmt_info 
					`	mov rsi,QWORD [S8_N]
					`	mov rdx,QWORD [SS_LN_C]
					`	mov rcx,SS_LN_N 
					`	xor rax,rax 
					`	C_CALL printf
					`	mov rax,0
					`info_rcd:
					`	push rax 
					`	mov rdi,fmt_info_rcd
					`	mov rsi,rax 
					`	mov rdx,QWORD [SS_RCD_C+8*rax]
					`	mov rcx,QWORD [SS_RCD_N+8*rax]
					`	xor rax,rax
					`	C_CALL printf 
					`	pop rax 
					`	cmp rax,RCD_N 
					`	jz info_rcd_end 
					`	add rax,1 
					`	jmp info_rcd 
					`info_rcd_end:
					`	C_POP_REGS 
					`	ret
					`;getchar:
					`;	xor rax,rax 
					`;	C_CALL_SF getchar 
					`;	ret
					`
					`sig_hdl: ; rdi=sig_n rsi=siginfo_t* rdx=void*
					`	push rdi 
					`	push rsi 
					`	push rdx 
					`	xor rax,rax 
					`	mov rsi,rdi 
					`	mov rdi,fmt_sig_hdl
					`	C_CALL printf 
					`	call info 
					`	call exit 
					`	mov QWORD [err_n],0xfff
					`	jmp err
					`
					`eq_s8: ;rdi,rsi
					`	push rdx
					`	mov rax,0x0000_ffff_ffff_ffff 
					`	and rax,QWORD [rdi]
					`	mov rdx,0x0000_ffff_ffff_ffff
					`	and rdx,QWORD [rsi]
					`	cmp rax,rdx
					`	jnz eq_s8_f 
					`eq_s8_lp:
					`	cmp rax,0
					`	jz eq_s8_t
					`	movzx rdx,BYTE [rdi+7+rax]
					`	cmp BYTE [rsi+7+rax],dl 
					`	jnz eq_s8_f 
					`	sub rax,1 
					`	jmp eq_s8_lp 
					`eq_s8_f:
					`	pop rdx 
					`	mov rax,0 
					`	stz
					`	ret 
					`eq_s8_t:
					`	pop rdx 
					`	mov rax,1 
					`	ret
					`
					`rpc_s8: ; rdi ⊢ rax
					`	push rdi 
					`	mov rsi,0x0000_ffff_ffff_ffff
					`	and rsi,QWORD [rdi]  
					`	push rsi
					`	mov rdi,rsi 
					`	call mlc_s8
					`	pop rcx 
					`	pop rsi 
					`	add rsi,8
					`	lea rdi,[rax+8]
					`	cld 
					`	rep movsb
					`	ret
					`     
					`esc_s8: ; rdi ⊢ rax 
					`	mov rsi,0x0000_ffff_ffff_ffff
					`	and rsi,QWORD [rdi] 
					`	mov rax,rsi 
					`	shl rax,1 
					`	sub rsp,rax 
					`esc_s8_lp0: 
					`
					`arr_of_lst: 
					`	mov rsi,0 
					`arr_of_lst_r:
					`	cmp BYTE [rdi+6],1
					`	jz arr_of_lst_end 
					`	push QWORD [rdi+8]
					`	mov rax,rdi
					`	FREE_RCD 2,rax 
					`	mov rdi,QWORD [rdi+16]
					`	add rsi,1 
					`	call arr_of_lst_r
					`	sub rsi,1 
					`	pop QWORD [rax+8+8*rsi]
					`	ret 
					`arr_of_lst_end: 
					`	push rsi 
					`	xor rax,rax
					`	mov rdi,8
					`	add rsi,1 
					`	C_CALL calloc
					`	pop rsi 
					`	mov QWORD [rax],rsi
					`	ret 
					`
					`scf_d: ; rdi=src ⊢ rax=flg rdi=dst rsi=n
					`	scf_F 10
					`scf_x: ; rdi=src ⊢ rax=flg rdi=dst rsi=n
					`	scf_F 16
					`
					`mlc_s8: ; rdi=len  
					`	push rdi 
					`	and rdi,~111b
					`	lea rdi,[rdi+16] 
					`	mov rsi,1 
					`	xor rax,rax 
					`	C_CALL_SF calloc
					`	pop QWORD [rax] 
					`	ret
					`
					`s8_of_c_stg: 
					`	push rdi
  				`	xor rax,rax
					`	C_CALL strlen
  				`	push rax
  				`	mov rdi,rax
  				`	call mlc_s8
  				`	pop rcx
  				`	pop rsi
  				`	mov rdi,rax
  				`	add rdi,8
  				`	cld
  				`	rep movsb
  				`	ret
					`
					`free_s8: ;rdi=ptr
					`	C_CALL_SF free
					`	ret 
					`
					`in_fn: 
					`	mov rax,2
					`	mov rsi,2
  				`	syscall
  				`	push rax ; [rsp]=fd
  				`	mov rdi,rax
  				`	mov rax,5
  				`	mov rsi,stat
  				`	syscall
  				`	mov rdi,[stat + STAT.st_size]
  				`	call mlc_s8
  				`	mov rdi,QWORD [rsp]
					`	push rax ; [rsp]=buf
  				`	mov rsi,rax
					`	add rsi,8
  				`	mov rax,0
 				 	`	mov rdx,[stat+STAT.st_size]
  				`	syscall
  				`	mov rax,3
  				`	mov rdi,QWORD [rsp+8]
  				`	syscall
					`	mov rax,QWORD [rsp]	
					`	add rsp,16
					`	ret 
					`
					`emt_stg: ; rdi=stg 
					`	xor rax,rax 
					`	C_CALL_SF printf
					`	ret
					`
					`emt_r64: ;rdi=r64
					`	xor rax,rax 
					`	mov rsi,rdi
					`	mov rdi,fmt_r64
					`	C_CALL_SF printf
					`	ret
					`
					`emt_s8: ;rdi=s8
					`	xor rax,rax 
					`	lea rsi,[rdi+8]
					`	mov rdi,fmt_s8
					`	C_CALL_SF printf
					`	ret
					`
					`emt_add: ; rdi=len rsi=stg
					`	cld 
					`	push rcx 
					`	mov rcx,rdi 
					`	mov rax,QWORD [EMT_BUF_OFS]
					`	add rdi,rax
					`	cmp rdi,EMT_BUF_MAX 
					`	jge emt_add_buf 
					`	mov BYTE [EMT_BUF+rdi],0
					`	mov QWORD [EMT_BUF_OFS],rdi
					`	lea rdi,[EMT_BUF+rax]
					`	jmp emt_add_end 
					`emt_add_buf:
					`	push rsi 
					`	call emt_buf 
					`	pop rsi 
					`	cmp rcx,EMT_BUF_MAX
					`	jge emt_add_stg 
					`	mov BYTE [EMT_BUF+rcx],0
					`	mov QWORD [EMT_BUF_OFS],rcx 
					`	mov rdi,EMT_BUF
					`emt_add_end:
					`	rep movsb 
					`	pop rcx 
					`	ret 
					`emt_add_stg 
					`	mov QWORD [EMT_BUF],0
					`	mov QWORD [EMT_BUF_OFS],0
					`	mov rdi,rsi 
					`	call emt_stg 
					`	pop rcx 
					`	ret 
					`
					`emt_buf:
					`	xor rax,rax 
					`	mov rdi,EMT_BUF 
					`	C_CALL printf 
					`	mov QWORD [EMT_BUF_OFS],0
					`	mov BYTE [EMT_BUF],0
					`	ret 
					`	 
					`_start:
					`; set signal handler 
					`	mov rdi,SIG_SEGV 
					`	mov rsi,sig_hdl 
					`	C_CALL set_handler 
					`
					`SS_LN_init:
					`	mov SS_LN_N,0
					`	mov QWORD [SS_LN_TOP],SS_LN_VCT
					`	mov r15,SS_LN_VCT 
					`	mov rdi,0 
					`	mov rax,SS_LN_VCT 
					`SS_LN_lp: 
					`	cmp rdi,SS_LN_MAX 
					`	jz SS_LN_end 
					`	add rdi,1 
					`	lea rsi,[rax+8*2] 
					`	mov QWORD [rax],rsi 
					`	mov rax,rsi 
					`	jmp SS_LN_lp 
					`SS_LN_end:
					`	mov rsi,0xffff_ffff_ffff_0100 
					`	mov [rax],rsi
					`
					`SS_PT_init:
					`	mov QWORD [SS_PT_TOP],SS_PT_VCT
					`	mov rdi,0 
					`	mov rax,SS_PT_VCT 
					`SS_PT_lp: 
					`	cmp rdi,SS_MAX 
					`	jz SS_PT_end 
					`	add rdi,1 
					`	lea rsi,[rax+8*3] 
					`	mov QWORD [rax],rsi 
					`	mov rax,rsi 
					`	jmp SS_PT_lp 
					`SS_PT_end:
					`	mov rsi,0xffff_ffff_ffff_0200 
					`	mov [rax],rsi
					`
					`	mov rdi,0
					`	mov QWORD [EMT_BUF],0
					`	mov QWORD [EMT_BUF_OFS],0
					`
					`; _args 
					`	mov rdi,QWORD [rsp]
					` lea rdi,[rdi+1]
					`	mov rsi,8 
					`	xor rax,rax 
					`	C_CALL calloc
					`	pop r13
					`	mov QWORD [rax],r13
					`	xor r14,r14
					`	mov rbx,rax
					`args_lp:
					`	cmp r14,r13
					`	jz args_lp_end
					`	pop rdi
					`	call s8_of_c_stg 
					`	mov QWORD [rbx+8+8*r14],rax
					`	add r14,1 
					`	jmp args_lp 
					`args_lp_end:
					`	mov r13,rbx
					`	
					//
				rp8.add_s8 { ec sc1 } ⊢ ec
				» 1r _ ⊢ ssn0 
				» "SS_MAX" _ ⊢ rmx 
				» RCD_N _ ⊢ ssN 
				ss_init_rcd_lp { ssn0 rmx ssN ec } ⊢ { rmx ssN ec } 
	
				» "\tjmp RTM_0\n" _ ⊢ sc1 
				rp8.add_s8 { ec sc1 } ⊢ ec 
				» 0r _ ⊢ lb_n 
				
				\\k_op_axm { tv_n tv %[ EX.byt ] TX.prs◂TX.r64◂{} } ⊢ { tv_n tv k }
				gnr.add_grm { { %[ "_byt" ] %[ EX.byt ] TX.r64◂{} } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep ec rtm_n lb_n } } ⊢ { i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep ec rtm_n lb_n } }
				gnr.add_grm { { %[ "_scf_d" ] %[ EX.scf_d ] TX.r64◂{} } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep ec rtm_n lb_n } } ⊢ { i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep ec rtm_n lb_n } }
				gnr.add_grm { { %[ "_scf_x" ] %[ EX.scf_x ] TX.r64◂{} } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep ec rtm_n lb_n } } ⊢ { i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep ec rtm_n lb_n } }

				$ _nil◂{} ⊢ gfl
				$ _nil◂{} ⊢ ns_r 
				» 0r _ ⊢ rsp 
				$ _nil◂{} ⊢ rl

				» "_args" _ ⊢ nx0 
				ast.dst_reg nx0 ⊢ dx0 
				$ _nil◂{} ⊢ rs_n 
				_cns { dx0 rs_n } ⊢ rs_n 

				$ TX.s8◂{} ⊢ y0 
				TX.arr y0 ⊢ y0 
				$ _nil◂{} ⊢ rs_t 
				_cns { y0 rs_t } ⊢ rs_t 
				
				slv_n.crt_dst_lst { { rv tv tv_n rv_n ns_r } rs_n } ⊢ { { rv tv tv_n rv_n ns_r } rs_n }
				slv.crt_dst_lst { { %[ 1r ] rv tv tv_n } rs_n } ⊢ { { lvx rv tv tv_n } rs_n rs_t0 }
				unify.f_lst { tv rs_t0 rs_t } ⊢ tv 
				_dec lvx ⊢ lvx 
						
				ast.hp { %[ 0r ] ast.hp.ref◂ast.hp.arr◂ast.hp.ref◂ast.hp.opq◂{} } ⊢ ax0 
				_cns { RP.atm◂%ax0 _nil◂{} } ⊢ rs_i 
				gnr.idx.crt_lst { irv rs_n rs_i rl _nil◂{} } ⊢ { irv rl dl } 
				
				iso { rsp rl ns_r } ⊢ RTM_ST 
				iso { mmv mev mtv mfv mv_n } ⊢ MV 
				iso { ns_m ns_e ns_t } ⊢ NS
				iso { hpv hpv_n rv rv_n ev ev_n tv tv_n irv tav evv } ⊢ LCV 
				iso { eds dd ep ec rtm_n lb_n } ⊢ EC
				slv_file_lp { RTM_ST i il MV LCV tx_n NS gel gfl EC } ⊢| 
		§ emt_rtm a0 
			slv_file a0 ⊢ { RTM_ST i il MV LCV tx_n NS gfl EC }
			
			inv RTM_ST ⊢ { rsp rl ns_r } 
			inv MV ⊢ { mmv mev mtv mfv mv_n } 
			inv NS ⊢ { ns_m ns_e ns_t }
			inv LCV ⊢ { hpv hpv_n rv rv_n ev ev_n tv tv_n irv tav evv }
			inv EC ⊢ { eds dd ep0 ec0 rtm_n lb_n }
			
			» RCD_N _ ⊢ ssN 
			» _^ ssN ⊢ ssN,eh 
				`bits 64 
				`; macros 
				`%macro RT_ERR 1 
				`	mov rdi,rt_err0 
				`	call emt_stg 
				`	mov QWORD [err_n],%1 
				`	jmp err 
				`%endmacro
				`
				`%macro C_PUSH_REGS 0 
				`	push rdx
				`	push rcx
				`	push r8
				`	push r9
				`	push r10
				`	push r11
				`%endmacro
				`
				`%macro C_POP_REGS 0 
				`	pop r11 
				`	pop r10 
				`	pop r9 
				`	pop r8 
				`	pop rcx 
				`	pop rdx 
				`%endmacro
				`
				`%macro CALL_SF 1 
				`	C_PUSH_REGS 
				`	call %1 
				`	C_POP_REGS
				`%endmacro
				`
				`%macro C_CALL_SF 1 
				`	C_PUSH_REGS
				`	mov QWORD [rsp_tmp],rsp 
				`	and rsp,~0xf 
				`	call %1 
				`	mov rsp,QWORD [rsp_tmp]
				`	C_POP_REGS
				`%endmacro 
				`
				`%macro C_CALL 1 
				`	mov QWORD [rsp_tmp],rsp 
				`	and rsp,~0xf 
				`	call %1 
				`	mov rsp,QWORD [rsp_tmp]
				`%endmacro 
				`
				`%macro JZ_SPC 2
				`	movzx MCR_REG,%1
				`	cmp MCR_REG,9 
				`	jz %2
				`	cmp MCR_REG,10 
				`	jz %2
				`	cmp MCR_REG,32 
				`	jz %2
				`%endmacro
				` 
				`%macro JZ_LINE_SPC 2
				`	movzx MCR_REG,%1 
				`	cmp MCR_REG,9 
				`	jz %2
				`	cmp MCR_REG,32 
				`	jz %2
				`%endmacro
				` 
				`%macro ALC_RCD 2 ; n,reg-name!=rbx 
				`	add QWORD [SS_RCD_C+8*%1],1
				`	add QWORD [SS_RCD_N+8*%1],1 
				`	mov %2,[SS_RCD_%1_TOP]
				`	mov MCR_REG,[%2]
				`	mov QWORD [SS_RCD_%1_TOP],MCR_REG
				`%endmacro 
				`
				`%macro FREE_RCD 2 ; n,reg-name!=rbx 
				`	sub QWORD [SS_RCD_N+8*%1],1
				`	mov rbx,QWORD [SS_RCD_%1_TOP] 
				`	mov QWORD [%2],rbx
				`	mov QWORD [SS_RCD_%1_TOP],%2
				`%endmacro
				`
				`%macro FREE_PT 1 
				`	mov rbx,[SS_PT_TOP]
				`	mov QWORD [%1],rbx
				`	mov [SS_PT_TOP],%1
				`%endmacro
				`
				`%macro ALC_PT 1 
				`	mov %1,[SS_PT_TOP] 
				`	mov rbx,[%1]
				`	mov QWORD [SS_PT_TOP],rbx 
				`%endmacro
				`				
				`%macro FREE_LN 1 
				`	sub SS_LN_N,1 
				`	mov QWORD [%1],SS_LN_REG
				`	mov SS_LN_REG,%1
				`%endmacro
				`
				`%macro ALC_LN 1 
				`	add QWORD [SS_LN_C],1 
				`	add SS_LN_N,1 
				`	mov %1,SS_LN_REG 
				`	mov SS_LN_REG,QWORD [SS_LN_REG]
				`%endmacro
				`
				`%macro FREE_S8 1 
				` mov rbx,0x0000_ffff_ffff_ffff 
				`	and rbx,QWORD [%1]
				`	sub QWORD [S8_N],rbx
				`	mov rdi,%1
				`	call free_s8
				`%endmacro 
				`
				`%macro PUSH_GRM_DT 0
				`	mov r9,0x0000_ffff_ffff_ffff
				`	and r9,[r13]
				`	sub rsp,32 
				`	mov rax,QWORD [GRM_DT]
				`	mov QWORD [rsp],rax 
				`	mov rax,QWORD [GRM_DT+8]
				`	mov QWORD [rsp+8],rax 
				`	mov rax,QWORD [GRM_DT+16]
				`	mov QWORD [rsp+16],rax 
				`	mov rax,QWORD [GRM_DT+24]
				`	mov QWORD [rsp+24],rax 
				`	mov QWORD [GRM_DT],r13
				`	mov QWORD [GRM_DT+8],r9
				`	mov QWORD [GRM_DT+16],r14
				`	mov QWORD [GRM_DT+24],r14
				`%endmacro
				`
				`%macro POP_GRM_DT 0 
				`	mov rax,QWORD [rsp] 
				`	mov QWORD [GRM_DT],rax
				`	mov rax,QWORD [rsp+8] 
				`	mov QWORD [GRM_DT+8],rax
				`	mov rax,QWORD [rsp+16] 
				`	mov QWORD [GRM_DT+16],rax
				`	mov rax,QWORD [rsp+24] 
				`	mov QWORD [GRM_DT+24],rax
				`	add rsp,32 
				`%endmacro
				`
				`%macro RET_GRM_DT 0 
				`	mov r13,QWORD [GRM_DT] 
				`	mov r9,QWORD [GRM_DT+8] 
				`	mov r14,QWORD [GRM_DT+24]
				`%endmacro
				`			
				`%macro GET_LEN 2 
				`	mov %1,0x0000_ffff_ffff_ffff
				`	and %1,QWORD [%2]
				`%endmacro
				`
				`%macro MOV_RAX 2 
				`	mov rax,%2 
				`	mov %1,rax
				`	%endmacro
				`
				`%macro MOV_RDI 2 
				`	mov rdi,%2 
				`	mov %1,rdi
				`%endmacro
				`
				`%macro MOV_RBX 2 
				`	mov rbx,%2
				`	mov %1,rbx
				`%endmacro
				`
				`%macro scf_F 1 
				`	push rdi
				`	movzx rdi,BYTE [rdi]
				`	xor rax,rax 
				`	C_CALL isspace
				`	cmp rax,0
				`	jnz scf_F_err0_%1 
				`	jmp scf_F_scf_%1 
				`scf_F_err0_%1: 
				`	add rsp,8
				`	mov rax,0
				`	ret
				`	scf_F_scf_%1:
				`	mov rdi,QWORD [rsp]
				`	sub rsp,8
				`	mov rsi,rsp
				`	mov rdx,%1
				`	mov rax,0
				`	C_CALL strtoul
				`	pop rsi
				`	pop rdi
				`	sub rsi,rdi
				`	jz scf_F_err1_%1
				`	mov rdi,rax
				`	mov rax,1 
				`	ret
				`scf_F_err1_%1:
				`	mov rax,0 
				`	ret
				`%endmacro
				`
				`%macro BSS_SS_RCD 2 
				`	SS_RCD_%1_TOP: resq 1 
				`	SS_RCD_%1_VCT: resq (%1+1)*(%2+4)
				`	SS_RCD_%1_BTM: resq 1
				`%endmacro 
				`
				`%define KB 1024
				`%define MB KB*KB 
				`%define GB MB*MB
				`%define SIG_INT 2
				`%define SIG_SEGV 11
				`%define SS_MAX 4000
				`%define SS_LN_MAX 1<<20
				"%define RCD_N " 0d' "\n"
				`%define SS_NULL 0xffff_ffff_ffff_0000
				`%define EMT_BUF_MAX (KB<<1)
				`%define SS_LN_REG r15
				`%define MCR_REG rbx
				`%define SS_LN_N r12
				`
				`%define RX0 r13
				`%define RX1 r14
				`%define RX2 r8
				`%define RX3 r9 
				`%define RX4 r10 
				`%define RX5 r11 
				`%define RX6 rcx 
				`%define RX7 rdx
				` 
				`extern exit 
				`extern printf 
				`extern sprintf
				`extern malloc 
				`extern calloc
				`extern free 
				`extern isspace 
				`extern strtoul
				`extern strlen
				`extern getchar
				`extern system
				`extern set_handler
				`extern emt_s8_to
				`section .bss
				`	tmp: resq 64
				`	ret_vct: resq 64
				` rsp_tmp: resq 1
				`	RB: resq 1 
				`
				`; emt buffer 
				`	EMT_BUF_OFS: resq 1 
				` EMT_BUF: resb EMT_BUF_MAX 
				`	EMT_BUF_END: resb 1
				` 
				`; garbage vector 
				`	GBG_VCT: resq 252
				`
				`; exp_s8 
				`	EXP_S8_VCT: resb 2048
				`
				`;rep_movsb 
				`	REP_MOVSB_VCT: resq 4
				`
				`	SS_LN_TOP: resq 1
								`	SS_LN_VCT: resq 2*SS_LN_MAX
				`	SS_LN_BTM: resq 1  
				`
				`	SS_PT_TOP: resq 1
				`	SS_PT_VCT: resq 3*SS_MAX
				`	SS_PT_BTM: resq 1 
				`
				`	SS_RCD_N: resq (RCD_N+1) 
				`	SS_RCD_C: resq (RCD_N+1)
				`
				`stat: resb 144
  			`struc STAT
  			`	.st_dev         resq 1
    		`	.st_ino         resq 1
    		`	.st_mode        resd 1
    		`	.st_nlink       resd 1
  			`	.st_uid         resd 1
  			`	.st_gid         resd 1
    		`	.st_rdev        resq 1
    		`	.pad1           resq 1
    		`	.st_size        resq 1
  			`	.st_blksize     resd 1
  			`	.pad2 resd 1
    		`	.st_blocks      resq 1
    		`	.st_atime       resq 1
    		`	.st_atime_nsec  resq 1
  			`	.st_mtime       resq 1
  			`	.st_mtime_nsec  resq 1
    		`	.st_ctime       resq 1
    		`	.st_ctime_nsec  resq 1
    		`	.__unused4  resd 1
  			`	.__unused5  resd 1
				`endstruc
				`
				//
			rp8.of_s8 eh ⊢ eh 
			
			» 1r _ ⊢ rnx 
			» "SS_MAX" _ ⊢ rmx 
			ss_rcd_n_lp { rnx ssN rmx eh } ⊢ { ssN rmx eh }
			
			rp8.cct { eh eds } ⊢ eds 
			rp8.cct { eds ec0 } ⊢ ec0
			» _^ rtm_n ⊢ rtm_n,ec1 
				"RTM_" 0d' ":\n" 	
				`	C_CALL exit
				`
				`err_bc: 
				`	mov QWORD [err_n],0xff
				`err: 
				`	mov rdi,fmt_err_line
				`	mov rsi,QWORD [err_n]
				`	xor rax,rax
				`	C_CALL printf
  			`	mov rax,1
  			`	mov rbx,0
  			`	int 0x80
				//
			rp8.add_s8 { ec0 ec1 } ⊢ ec0 
			∎ { i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t { dd ep0 ec0 rtm_n lb_n } }		
		∎∎
∎∎
§ @.cat_to { o l } 
	$ l ⊢ 
	∐ _cns◂{ i l } . 
		» _^ i,o ⊢ i,o,s 
			"cat " 0' "  >> " 1' "\n" // 
		_cd s ⊢ _ 
		cat_to { o l } ⊢| 
	∐. _nil◂{} . 
		∎ o 

§ @.L0 { a l i } 
	∐ l'=i' . 
		∎ { a l } 
	∐. . 
		_lod_q { a i } ⊢ { a i fn } 
		^ fn ⊢ _,xc0 
			"cat " 0' " >> SH.mdls\n" // 
		_cd xc0 ⊢ _ 
		_inc i ⊢ i 
		L0 { a l i } ⊢| 
§ E fn0
	_in_fn fn0 ⊢ { _ sf1 } 
	##_emt sf1 ⊢ sf1 
	_prs◂◂OpADL.syntax.file { sf1 %[ 0r ] } ⊢ { _ r0 a0 } 
	\\OpADL.syntax.file.prs { sf1 %[ 0r ] } ⊢ { _ r0 a0 } 
	_emt r0 ⊢ _ 
	##_emt a0 ⊢ a0  
	$ a0 ⊢ 
	∐ _some◂a0 . 
		$ a0 ⊢ 
		∐ OpADL.syntax.prs_vld◂a0 . 
			_emt %[ "D1" ] ⊢ _ 
			$ a0 ⊢ a0,a1 
			ini_tv {} ⊢ evv0 
			rp8.e {} ⊢ ep0 
			set_tv { evv0 %[ 0r ] %[ 1r ] } ⊢ { evv0 _ } 
			OpADL.ast.pnt_file.f { evv0 %[ 0r ] a1 ep0 } ⊢ { _ _ ep0 } 
			rp8.to_s8 ep0 ⊢ sp0 
			_emt_s8_to { %[ "SH.pp.mdls" ] sp0 }  ⊢ _ 
			OpADL.ns.emt_rtm a0 ⊢ { i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t { dd ep0 ec0 rtm_n lb_n } }		
			s8_of_s8_lst ep0 ⊢ sep0 
			rp8.to_s8 ec0 ⊢ sec0
			» "SH.mdls.s" _ ⊢ ff0 
			_emt_s8_to { ff0 sec0 } ⊢ _
			» "SGN_SH.txt" _ ⊢ ff1 
			_emt_s8_to { ff1 sep0 } ⊢ { _ sep0 }
			» _^ _ ⊢ sx0 
				`yasm -g dwarf2 -f elf64 SH.mdls.s -o out.o
    		`gcc -Wall stub.c out.o -nostartfiles -no-pie -pg -g -O0 -o out.exe 
				//
			_cd sx0 ⊢ sx0  
			_info {} ⊢ {} 
			_emt sep0 ⊢ _ 
			∎ {} 
		∐. OpADL.syntax.prs_err◂e0 .
			∎|
	∐. _none◂{} . 
		∎| 

§% 
	_emt _args ⊢ args
	\\_lod_q { args %[ 1r ] } ⊢ { _ _ fn0 } 
	_arr_len args ⊢ { args l } 
	» "rm -f SH.mdls\n" _ ⊢ xc0 
	_cd xc0 ⊢ _ 
	L0 { args l %[ 1r ] } ⊢ _
	E %[ "SH.mdls" ] ⊢ _
	\\_info {} ⊢ {}
	
	∎ 
