\[
¶ @.btree ◂ a',w' 
	∐ nd : { btree◂a'◂w' w' btree◂a'◂w' }
	∐ lf : a' 
§§ btree 
	¶ t a',w' = btree◂a'◂w' 
	§ to_lst b 
		∎| 
	∎∎
\]
§ inc_x x 
	$ x ⊢ x,x0 
	_inc x0 ⊢ x0 
	∎ { x x0 } 
§ max { x y } 
	_setge { y x } ⊢ { y x b } 
	∐ b'=1r . 
		$ y ⊢ y,y0 
		∎ { x y y0 } 
	∐. . 
		$ x ⊢ x,x0 
		∎ { x y x0 } 
§§ rp8 
	¶ @.t 
		∐ nd : { t _r64 t } 
		∐ lf : _s8 
		∐ e : {} 
		∐ chr : _r64 
	
	§ of_s8 s 
		lf s ⊢ a 
		∎ a 
	§ len r 
		$ r ⊢ 
		∐ nd◂{ r0 l r1 } .
			$ l ⊢ l,l0 
			nd { r0 l0 r1 } ⊢ r 
			∎ { r l }
		∐ chr◂c .
			» 1r _ ⊢ l 
			chr c ⊢ r 
			∎ { r l }  
    ∐ e◂{} . 
			e {} ⊢ r
			» 0r _ ⊢ l  
      ∎ { r l } 
		∐. lf◂s . 
			_s8_len s ⊢ { s l } 
			lf s ⊢ r 
			∎ { r l }
	§ add_s8 { e s } 
		_s8_len s ⊢ { s l } 
		len e ⊢ { e le } 
		_add { l le } ⊢ { l le } 
		lf s ⊢ s 
		nd { e l s } ⊢ e 
		∎ e 
	§ pfx_s8 { s e } 
		_s8_len s ⊢ { s l } 
		len e ⊢ { e le } 
		_add { l le } ⊢ { l le } 
		lf s ⊢ s 
		nd { s l e } ⊢ e 
		∎ e
	§ add_chr { e c } 
		len e ⊢ { e le } 
		_inc le ⊢ le 
		chr c ⊢ c 
		nd { e le c } ⊢ e 
		∎ e 
	§ pfx_chr { c e } 
		len e ⊢ { e le } 
		_inc le ⊢ le 
		chr c ⊢ c 
		nd { c le e } ⊢ e 
		∎ e
	§ cct { r0 r1 }
		len r0 ⊢ { r0 l0 } 
		len r1 ⊢ { r1 l1 } 
		_add { l0 l1 } ⊢ { l0 l1 } 
		nd { r0 l0 r1 } ⊢ r 
		∎ r 
	§ @.mk_s8_i { r s i }
		$ r ⊢ 
		∐ nd◂{ r0 l r1 } .
			mk_s8_i { r0 s i } ⊢ { r0 s i } 
			mk_s8_i { r1 s i } ⊢ { r1 s i }
			nd { r0 l r1 } ⊢ r 
			∎ { r s i }
		∐ e◂{} . 
			e {} ⊢ r 
			∎ { r s i } 
		∐ chr◂c . 
			_sts { s i c } ⊢ { s i c }
			_inc i ⊢ i
			chr c ⊢ r  
			∎ { r s i }
		∐. lf◂s0 . 
			_s8_len s0 ⊢ { s0 l0 } 
			» 0r _ ⊢ i0 
			_rep_movsb { l0 s0 i0 s i } ⊢ { l0 s0 i0 s i }
			lf s0 ⊢ r 
			∎ { r s i } 
	§ mk_s8 r 
		len r ⊢ { r l }
		_mlc_s8 l ⊢ { l s }
		» 0r _ ⊢ i 
		mk_s8_i { r s i } ⊢ { r s i }
		∎ { r s }
	∎∎
§ dbg {} 
	» "DBG" _ ⊢ s 
	_emt s ⊢ s 
	∎ {} 
§ exc_q { a i v } 
	_get_q { a i } ⊢ { a i w } 
	_set_q { a i v } ⊢ { a i } 
	∎ { a i w }
§ @.arr_of_lst_i { l i } 
	$ l ⊢ 
	∐ _cns◂{ hd l } . 
		_inc i ⊢ i 
		arr_of_lst_i { l i } ⊢ { a i }
		_dec i ⊢ i 
		_set_q { a i hd } ⊢ { a i } 
		∎ { a i }
	∐. _nil◂{} . 
		_mk_arr i ⊢ { i a } 
		∎ { a i } 
§ arr_of_lst l 
	» 0r _ ⊢ i 
	arr_of_lst_i { l i } ⊢ { a i } 
	∎ a  
§ @.arr_of_lst_len_i { l i } 
	$ l ⊢ 
	∐ _cns◂{ hd l } . 
		_inc i ⊢ i 
		arr_of_lst_len_i { l i } ⊢ { a i n }
		_dec i ⊢ i 
		_set_q { a i hd } ⊢ { a i } 
		∎ { a i n }
	∐. _nil◂{} . 
		_mk_arr i ⊢ { i a } 
		$ i ⊢ i,n 
		∎ { a i n } 
§ arr_of_lst_len l 
	» 0r _ ⊢ i 
	arr_of_lst_len_i { l i } ⊢ { a i n } 
	∎ { a n }   
§§ bl 
	¶ t 
		∐ t : {} 
		∐ f : {}
	§ and { b0 b1 } 
		∐ b0 ⊢ t◂{}; b1 ⊢ t◂{} . 
			t {} ⊢ b 
			∎ b 
		∐. . 
			f {} ⊢ b 
			∎ b
	§ or { b0 b1 } 
		∐ b0 ⊢ f◂{}; b1 ⊢ f◂{} . 
			f {} ⊢ b 
			∎ b 
		∐. . 
			t {} ⊢ b 
			∎ b
	§ sub { b0 b1 } 
		∐ b1 ⊢ f◂{} . 
			∎ b0 
		∐. b1 ⊢ t◂{} . 
			f {} ⊢ b 
			∎ b 
	∎∎
¶ @.p_lst ◂ a'
 	∐ p_cns : { a' p_lst◂a' }
	∐ p_end : a'

§ @.rev_i { l0 l1 }
	∐ l1 ⊢ _nil◂{} .
		∎ l0
	∐. l1 ⊢ _cns◂{ hd tl } .
		_cns { hd l0 } ⊢ l0
		rev_i { l0 tl } ⊢ l0
		∎ l0
§ rev l
	_nil {} ⊢ l0
	rev_i { l0 l } ⊢ l0
	∎ l0
§ @.apnd { l0 l1 }
	$ l0 ⊢ 
	∐ _cns◂{ hd l0 } . 
		apnd { l0 l1 } ⊢ l 
		_cns { hd l } ⊢ l 
		∎ l 
	∐. _nil◂{} . 
		∎ l1 
§ @.s8_of_r64_lst_i { i rl }
	∐ rl ⊢ _cns◂{ ri rl_tl } .
		_inc i ⊢ i
		s8_of_r64_lst_i { i rl_tl } ⊢ { i s0 }
		_dec i ⊢ i
		_sts { s0 i ri } ⊢ { s0 i ri }
		∎ { i s0 }
	∐. rl ⊢ _nil◂{} .
		_mlc_s8 i ⊢ { i s0 }
		∎ { i s0 }
§ s8_of_r64_lst cl
	» 0r _ ⊢ i
	s8_of_r64_lst_i { i cl } ⊢ { i s }
	∎ s
§ @.s8_of_s8_lst_i { l sl }
	$ sl ⊢ 
	∐ _cns◂{ s sl } . 
		_s8_len s ⊢ { s b }
		_add { l b } ⊢ { l b } 
		s8_of_s8_lst_i { l sl } ⊢ { sr n } 
		» 0r _ ⊢ o0 
		$ b ⊢ b,b0 
		_rep_movsb { b s o0 sr n } ⊢ { b s o0 sr n } 
		∎ { sr n } 
	∐. _nil◂{} . 
		_mlc_s8 l ⊢ { l sr } 
		» 0r _ ⊢ o 
		∎ { sr o }
§ s8_of_s8_lst l 
	» 0r _ ⊢ i 
	s8_of_s8_lst_i { i l } ⊢ { s n } 
	∎ s 
\[
§ A « 
	_nil {} ⊢ l 
	» "HELLO " _ ⊢ s0 
	_cns { s0 l } ⊢ l 
	» "HOO ooo" _ ⊢ s0 
	_cns { s0 l } ⊢ l 
	» "world!!" _ ⊢ s 
	_cns { s l } ⊢ l 
	s8_of_s8_lst l ⊢ s 
	_emt s ⊢ s 
	∎|  
\]

§ @.assoc { l k }
	∐ l ⊢ _cns◂{ { k0 o0 } l } .
		∐ k'=k0' .
			∐ o0 ⊢ _some◂v0 .
				$ v0 ⊢ v0,v1
				_some v0 ⊢ o0
				_cns { { k0 o0 } l } ⊢ l
				_some v1 ⊢ r1
				∎ { l k r1 }
			∐. .
				_cns { { k0 o0 } l } ⊢ l
				_none {} ⊢ r1
				∎ { l k r1 }
		∐. .
			assoc { l k } ⊢ { l k r0 }
			_cns { { k0 o0 } l } ⊢ l
			∎ { l k r0 }
	∐. .
		_none {} ⊢ r1
		∎ { l k r1 }	
§ subst { r0 sl } 
	assoc { sl r0 } ⊢ { sl r0 o } 
	$ o ⊢ 
	∐ _some◂r1 . 
		∎ { r1 sl } 
	∐. _none◂{} . 
		∎ { r0 sl } 
§ @.subst_lst { l sl } 
	$ l ⊢ 
	∐ _cns◂{ a l } .
		subst { a sl } ⊢ { a sl } 
		subst_lst { l sl } ⊢ { l sl } 
		_cns { a l } ⊢ l 
		∎ { l sl }
	∐. _nil◂{} . 
		_nil {} ⊢ l 
		∎ { l sl }
§§ lst
	¶ t a' = _lst◂a' 
	§ assoc = assoc 
	§ rev = rev 
	§ apnd = apnd 
	§ @.len l 
		$ l ⊢ 
		∐ _cns◂{ a l } . 
			len l ⊢ { l n } 
			_cns { a l } ⊢ l 
			_inc n ⊢ n 
			∎ { l n } 
		∐. _nil◂{} . 
			» 0r _ ⊢ n 
			_nil {} ⊢ l 
			∎ { l n }
	§ @.csm { l a } 
		$ l ⊢ 
		∐ _cns◂{ x l } . 	
			∐ x'=a' . 
				csm { l a } ⊢| 
			∐. . 
				csm { l a } ⊢ { l a } 
				_cns { x l } ⊢ l 
				∎ { l a }
		∐. _nil◂{} . 
			_nil {} ⊢ l 
			∎ { l a }
	§ @.nth { l i } 
		$ l ⊢ 
		∐ _cns◂{ a l } . 
			∐ i'=0r . 
				∎ { a l } 
			∐. . 
				_dec i ⊢ i 
				nth { l i } ⊢ { b l } 
				_cns { a l } ⊢ l 
				∎ { b l } 
		∐. _nil◂{} . 
			» "nth 0" _ ⊢ se 
			_emt se ⊢ se 
			∎| 
	§ @.add { l a } 
		$ l ⊢ 
		∐ _cns◂{ b l } . 
			∐ a'=b' . 
				_cns { b l } ⊢ l 
				∎ l 
			∐. . 
				add { l a } ⊢ l 
				_cns { b l } ⊢ l 
				∎ l 
		∐. _nil◂{} . 
			_nil {} ⊢ l 
			_cns { a l } ⊢ l 
			∎ l 
	∎∎
§§+s8 
	@.esc_s8 
		∐ "\n" esc_s8 ⊢ { {} e0 }
			» "\\n" _ ⊢ s0 
			rp8.pfx_s8 { s0 e0 } ⊢ e0 
			_some e0 ⊢ e0
			∎ e0 
		∐ "\t" esc_s8 ⊢ { {} e0 }
			» "\\t" _ ⊢ s0 
			rp8.pfx_s8 { s0 e0 } ⊢ e0 
			_some e0 ⊢ e0
			∎ e0 		
		∐ "\\" esc_s8 ⊢ { {} e0 }
			» "\\\\" _ ⊢ s0 
			rp8.pfx_s8 { s0 e0 } ⊢ e0 
			_some e0 ⊢ e0
			∎ e0
		∐ "\"" esc_s8 ⊢ { {} e0 }
			» "\\\"" _ ⊢ s0 
			rp8.pfx_s8 { s0 e0 } ⊢ e0 
			_some e0 ⊢ e0
			∎ e0
		∐ _byt esc_s8 ⊢ { b e0 }
			∐ b'=0r . 
				» "\\0" _ ⊢ s0 
				rp8.pfx_s8 { s0 e0 } ⊢ e0 
				_some e0 ⊢ e0
				∎ e0
			∐. . 
				rp8.pfx_chr { b e0 } ⊢ e0 
				_some e0 ⊢ e0
				∎ e0
		∐. ⊢ { } 
			rp8.e {} ⊢ e0 
			_some e0 ⊢ e0
			∎ e0
§ mk_esc_s8 s 
	» 0r _ ⊢ x0 
	esc_s8.prs { s x0 } ⊢ { s x0 es } 
	∐ es ⊢ _some◂es . 
		rp8.mk_s8 es ⊢ { es ss } 
		∎ { s ss }
	∐. . 
		» "esc_stg_ltr" _ ⊢ ee 
		_emt ee ⊢ ee 
		∎| 
§§+s8
	@.stg_ltr
	∐. "\"" stg_ltr_seq ⊢ { {} cl }
		##s8_of_r64_lst cl ⊢ s
		rp8.mk_s8 cl ⊢ { cl s }
		_some s ⊢ a
		∎ a
	@.stg_ltr_seq
	∐ "\n" !| ⊢ { xx } 
		_none {} ⊢ a 
		∎ a 
	∐ "\\" stg_ltr_sp stg_ltr_seq ⊢ { {} c0 cl }
		##_cns { c0 cl } ⊢ cl
		rp8.pfx_chr { c0 cl } ⊢ cl 
		_some cl ⊢ a
		∎ a
	∐ "\"" ⊢ { {} }
		##_nil {} ⊢ cl
		rp8.e {} ⊢ cl 
		_some cl ⊢ a
		∎ a
	∐. _byt stg_ltr_seq ⊢ { c0 cl }
		rp8.pfx_chr { c0 cl } ⊢ cl 
		##_cns { c0 cl } ⊢ cl
		_some cl ⊢ a
		∎ a
	@.stg_ltr_sp
	∐ "\\" ⊢ { {} }
		» 92r _ ⊢ c0
		_some c0 ⊢ a0
		∎ a0
	∐ "\"" ⊢ { {} }
		» 34r _ ⊢ c0
		_some c0 ⊢ a0
		∎ a0
	∐ "n" ⊢ { {} }
		» 10r _ ⊢ c0
		_some c0 ⊢ a0
		∎ a0
	∐ "t" ⊢ { {} }
		» 9r _ ⊢ c0
		_some c0 ⊢ a0
		∎ a0
	∐. "0" ⊢ { {} }
		» 0r _ ⊢ c0
		_some c0 ⊢ a0
		∎ a0

§§+s8
	@.dgt
	∐. _byt ⊢ { c }
		» 48r _ ⊢ c0
		» 57r _ ⊢ c1
		_setge { c c0 } ⊢ { c c0 b0 }
		_setge { c1 c } ⊢ { c1 c b1 }
		∐ b0'=1r; b1'=1r .
			_some c ⊢ a
			∎ a
		∐. .
			_none {} ⊢ a
			∎ a
§§+s8
	@.ch_l
	∐. _byt ⊢ { c }
		» 97r _ ⊢ c0
		» 122r _ ⊢ c1
		_setge { c c0 } ⊢ { c c0 b0 }
		_setge { c1 c } ⊢ { c1 c b1 }
		∐ b0'=1r; b1'=1r .
			_some c ⊢ a
			∎ a
		∐. .
			_none {} ⊢ a
			∎ a

§§+s8
	@.ch_u
	∐. _byt ⊢ { c }
		» 65r _ ⊢ c0
		» 90r _ ⊢ c1
		_setge { c c0 } ⊢ { c c0 b0 }
		_setge { c1 c } ⊢ { c1 c b1 }
		∐ b0'=1r; b1'=1r .
			_some c ⊢ a
			∎ a
		∐. .
			_none {} ⊢ a
			∎ a

§§+s8
	@.ch_a
	∐ ch_u ⊢ { c }
		_some c ⊢ a
		∎ a 
	∐. ch_l ⊢ { c }
		_some c ⊢ a
		∎ a

§§+s8
	@.word
	∐. ch_a word_tl ⊢ { c0 cl }
		##_cns { c0 cl } ⊢ cl
		rp8.pfx_chr { c0 cl } ⊢ cl 
		##s8_of_r64_lst cl ⊢ s
		rp8.mk_s8 cl ⊢ { cl s } 
		_some s ⊢ a
		∎ a
	@.word_tl
	∐ word_hd word_tl ⊢ { c tl }
		##_cns { c tl } ⊢ l
		rp8.pfx_chr { c tl } ⊢ l 
		_some l ⊢ a
		∎ a
	∐. ⊢ { }
		##_nil {} ⊢ l
		rp8.e {} ⊢ l 
		_some l ⊢ a 
		∎ a
	@.word_hd
	∐ ch_a ⊢ { c }
		_some c ⊢ a
		∎ a
	∐ dgt ⊢ { c }
		_some c ⊢ a
		∎ a
	∐. "_" ⊢ { {} }
		» 95r _ ⊢ c
		_some c ⊢ a
		∎ a

§§+s8
	@.prm_word
	∐ "_" word_tl ⊢ { {} cl }
		##s8_of_r64_lst cl ⊢ s
		rp8.mk_s8 cl ⊢ { cl s } 
		» _^ s ⊢ s,sr 
			"_" 0' // 
		_some sr ⊢ a 
		∎ a
	∐. word ⊢ { s }
		_some s ⊢ a
		∎ a
§§ OpADL
	§§ reg_ptn
		¶ @.t ◂ a'
			∐ rcd : _lst◂(t◂a')
			∐ atm : a'
		∎∎
	§§ RP = reg_ptn
	§§ ast
		¶ @.name
			∐ mdl_n : { _s8 name }
			∐ fst_n : _s8
		§ @.pnt_name n
			∐ n ⊢ mdl_n◂{ w n } .
				pnt_name n ⊢ s
				» _^ w,s ⊢ w,s,sr
					0' "." 1' //
				∎ sr
			∐. n ⊢ fst_n◂w .
				∎ w
		¶ cst_v 
			∐ r64 : _r64 
			∐ s8 : _s8 
		¶ cst◂e'
			∐ cst_v : cst_v
			∐ cst_name : e'
		§ pnt_cst_v v 
			$ v ⊢
			∐ r64◂x .
				» _^ x ⊢ x,sr
				0d' "r" //
				∎ sr
			∐. s8◂s .
				mk_esc_s8 s ⊢ { s ss } 
				» _^ ss ⊢ ss,sr
				"\"" 0' "\"" // 
				∎ sr
		§ pnt_cst c
			$ c ⊢
			∐ cst_v◂v .
				pnt_cst_v v ⊢|  
			∐. cst_name◂n .
				pnt_name n ⊢ sr
				∎ sr
		¶
			@.src r',e'
				∐ im_reg : cst◂e'
				∐ src_reg : r'
			@.dst r'
				∐ wc : _opn◂r'
				∐ dst_reg : r'
		¶	src_ptn r',e' = RP.t◂(src◂r'◂e')
		¶ dst_ptn r' = RP.t◂(dst◂r')
		¶ SP r',e' = src_ptn◂r'◂e'
		¶ DP r' = dst_ptn◂r'
		¶
			@.mtc_atm r',e'
				∐ mtc_agl : { e' MP◂r'◂e' }
				∐ mtc_cst : cst◂e'
				∐ mtc_wc : _opn◂r' 
				∐ mtc_reg : r' 
			@.MP r',e' = reg_ptn.t◂(mtc_atm◂r'◂e')
		§ 
			@.pnt_src_ptn sp
				∐ sp ⊢ RP.rcd◂l .
					pnt_src_ptn_lst l ⊢ sl
					» _^ sl ⊢ sl,sr
						"{ " 0' "}" //
					∎ sr
				∐. sp ⊢ RP.atm◂a .
					∐ a ⊢ im_reg◂c .
						pnt_cst c ⊢ sc
						» _^ sc ⊢ sc,sr
							"%[ " 0' " ] " // 
						∎ sr
					∐. a ⊢ src_reg◂w .
						∎ w
			@.pnt_src_ptn_lst l
				∐ l ⊢ _cns◂{ hd l } .
					pnt_src_ptn hd ⊢ shd 
					pnt_src_ptn_lst l ⊢ sl
					» _^ shd,sl ⊢ shd,sl,sr 
						0' " " 1' //
					∎ sr
				∐. l ⊢ _nil◂{} .
					» "" _ ⊢ sr
					∎ sr
			@.pnt_dst_ptn p
				∐ p ⊢ RP.rcd◂l .
					pnt_dst_ptn_lst l ⊢ sl
					» _^ sl ⊢ sl,sr
						"{ " 0' "}" //
					∎ sr
				∐. p ⊢ RP.atm◂a .
					∐ a ⊢ wc◂o .
						» "_ " _ ⊢ sr
						∎ sr
					∐. a ⊢ dst_reg◂w .
						∎ w
			@.pnt_dst_ptn_lst l
				∐ l ⊢ _cns◂{ hd l } .
					pnt_dst_ptn hd ⊢ shd
					pnt_dst_ptn_lst l ⊢ sl
					» _^ shd,sl ⊢ shd,sl,sr
						0' " " 1' //
					∎ sr
				∐. l ⊢ _nil◂{} .
					» "" _ ⊢ sr
					∎ sr
		§ @.pnt_mtc_ptn mp 
			$ mp ⊢
			∐ RP.rcd◂l . 
				$ l ⊢ l,l0 
				RP.rcd l0 ⊢ r0 
				pnt_mtc_ptn_lst l ⊢ sl 
				» _^ sl ⊢ sl,sr
					"{ " 0' "}" //
				∎ sr
			∐. RP.atm◂a .
				$ a ⊢ 
				∐ mtc_cst◂c .
					pnt_cst c ⊢ sc
					» _^ sc ⊢ sc,sr
						"%[ " 0' " ] " // 
					∎ sr
				∐ mtc_agl◂{ n mp } .
					pnt_mtc_ptn mp ⊢ smp 
					pnt_name n ⊢ sn 
					» _^ sn,smp ⊢ sn,smp,sr
						0' "◂" 1' // 
					∎ sr
				∐ mtc_reg◂w . 
					» _^ w ⊢ w,sr
						"%" 0' // 
					∎ sr 
				∐. mtc_wc◂o . 
					» "_" _ ⊢ sr
					∎ sr 
			@.pnt_mtc_ptn_lst l
				$ l ⊢
				∐ _cns◂{ hd l } .
					pnt_mtc_ptn hd ⊢ shd 
					pnt_mtc_ptn_lst l ⊢ sl
					» _^ shd,sl ⊢ shd,sl,sr 
						0' " " 1' //
					∎ sr
				∐. _nil◂{} .
						» "" _ ⊢ sr
				∎ sr
		§§ exp_s8 
			¶ fmt
				∐ s : {}
				∐ d : {}
				∐ x : {}
				∐ p : {}
			¶ t◂e' 
				∐ s8 : _s8
				∐ cst : cst◂e'
				∐ idx : { fmt _r64 }
				∐ for : { _r64 _s8 }
			∎∎
		¶
			@.lc_code r',e'
				∐ jmp : { e' SP◂r'◂e' }
				∐ app_jmp : { src◂r'◂e' SP◂r'◂e' }
				∐ seq : { lc_line◂r'◂e' lc_code◂r'◂e' }
				∐ mtc : lc_mtc◂r'◂e'
				∐ op_id : { SP◂r'◂e' lc_id_line◂r'◂e' }
				∐ ret : _opn◂(SP◂r'◂e')
				∐ exn : exn◂r'◂e' 
			@.exn r',e' = _r64 
			@.lc_mtc r',e' = p_lst◂{ _lst◂(mtc_op◂r'◂e') mtc_etr◂r'◂e' }
			@.lc_id_mtc r',e' = p_lst◂{ MP◂r'◂e' _lst◂(mtc_op◂r'◂e') mtc_etr◂r'◂e' }
			@.lc_id_line r',e'
				∐ id_mtc : lc_id_mtc◂r'◂e'
				∐ id_line : { _lst◂(DP◂r') lc_code◂r'◂e' }
			@.lc_line r',e'
				∐ op_name : { e' SP◂r'◂e' DP◂r' }
				∐ op_app : { src◂r'◂e' SP◂r'◂e' DP◂r' }
				∐ op_exp_cst : { cst◂e' SP◂r'◂e' DP◂r' }
				∐ op_exp_s8 : { _lst◂(op_exp_s8◂e') _lst◂(src◂r'◂e') _lst◂(dst◂r') }
			@.mtc_etr r',e'
				∐ mtc_rmf : lc_mtc◂r'◂e'
				∐ mtc_id_rmf : { SP◂r'◂e' lc_id_mtc◂r'◂e' }
				∐ mtc_code : lc_code◂r'◂e'
			@.mtc_op r',e'
				∐ mtc_id : { SP◂r'◂e' MP◂r'◂e' }
				∐ mtc_test : { test_var◂r'◂e' test_var◂r'◂e' }
				∐ mtc_cmp_test : { test_var◂r'◂e' test_var◂r'◂e' } 
			@.test_var r',e'
				∐ test_cst : cst◂e'
				∐ test_var : r'
			@.op_exp_s8 e' = exp_s8.t◂e' 
		 
		§ @.pnt_lc_code { dn lc }
			$ lc ⊢ 
			∐ jmp◂{ n s } . 
				pnt_name n ⊢ sn 
				pnt_src_ptn s ⊢ ss 
				» _^ dn,sn,ss ⊢ dn,sn,ss,sr 
					0'*"\t" 1' " " 2' " ⊢|\n" // 
				∎ { dn sr } 
			∐ app_jmp◂{ f x } . 
				RP.atm f ⊢ f 
				pnt_src_ptn f ⊢ sf 
				pnt_src_ptn x ⊢ sx 
				» _^ dn,sf,sx ⊢ dn,sf,sx,sr 
					0'*"\t" "◂" 1' "," 2' " ⊢|\n" // 
					∎ { dn sr } 
			∐ seq◂{ ll lc } .
				pnt_lc_line { dn ll } ⊢ { dn sll }
				pnt_lc_code { dn lc } ⊢ { dn slc }
				» _^ sll,slc ⊢ sll,slc,sr
					0'
					1' //
				∎ { dn sr }
			∐ mtc◂m .
				pnt_lc_mtc { dn m } ⊢ { dn sm }
				∎ { dn sm }
			∐ op_id◂{ s m } . 
				pnt_src_ptn s ⊢ ss 
				$ m ⊢ 
				∐ id_line◂{ d lc } . 
					pnt_dst_ptn_lst d ⊢ sd 
					pnt_lc_code { dn lc } ⊢ { dn slc }
					» _^ dn,ss,sd,slc ⊢ dn,ss,sd,slc,sr 
						0'*"\t" "$ " 1' " ⊢ " 2' "\n" 
						3' // 
					∎ { dn sr } 
				∐. id_mtc◂m . 
					pnt_lc_id_mtc { dn m } ⊢ { dn sm } 
					» _^ dn,ss,sm ⊢ dn,ss,sm,sr 
						0'*"\t" "$ " 1' " ⊢\n" 
						2' //
					∎ { dn sr } 
			∐ ret◂sp .
				» _^ dn ⊢ dn,s
					0'*"\t" "∎ ..\n" //
				∎ { dn s }
			∐. exn◂ne .
				» _^ dn ⊢ dn,sr
					0'*"\t" "∎|\n" //
				∎ { dn sr }
		@.pnt_lc_line { dn o }
			∐ o ⊢ op_name◂{ n s d } .
				pnt_src_ptn s ⊢ ss
				pnt_dst_ptn d ⊢ sd
				pnt_name n ⊢ sn
				» _^ dn,sn,ss,sd ⊢ dn,sn,ss,sd,sr
					0'*"\t" 1' " " 2' " ⊢ " 3' "\n" //
				∎ { dn sr }
			∐ o ⊢ op_app◂{ f x y } .
				RP.atm f ⊢ fr
				pnt_src_ptn fr ⊢ sf
				pnt_src_ptn x ⊢ ss
				pnt_dst_ptn y ⊢ sd
				» _^ dn,sf,ss,sd ⊢ dn,sf,ss,sd,sr 
					0'*"\t" "◂ " 1' "," 2' " ⊢ " 3' "\n" //
				∎ { dn sr }
			∐ o ⊢ op_exp_cst◂{ c s d } .
				pnt_src_ptn s ⊢ ss
				pnt_dst_ptn d ⊢ sd
				pnt_cst c ⊢ sc
				» _^ dn,sc,ss,sd ⊢ dn,sc,ss,sd,sr
					0'*"\t" "» " 1' " " 2' " ⊢ " 3' "\n" //
				∎ { dn sr }
			∐. o ⊢ op_exp_s8◂{ l sl dl } .
				» _^ dn ⊢ dn,sr
					0'*"\t" "» _^ .." " ⊢ .." "\n"
					" .. //\n" //
				∎ { dn sr }
		@.pnt_lc_mtc { dn m }
			∐ m ⊢ p_cns◂{ { l e } m } .
				pnt_lc_mtc { dn m } ⊢ { dn sm }
				$ e ⊢ 
				∐ mtc_rmf◂m0 .
					pnt_lc_mtc { dn m0 } ⊢ { dn sm0 }
					» _^ dn,sm,sm0 ⊢ dn,sm,sm0,sr
						0'*"\t" "∐ .. ;\n"
						2'
						1' //
					∎ { dn sr }
				∐ mtc_id_rmf◂{ sp m0 } . 
					pnt_src_ptn sp ⊢ ssp 
					pnt_lc_id_mtc { dn m0 } ⊢ { dn sm0 }
					» _^ dn,ssp,sm,sm0 ⊢ dn,ssp,sm,sm0,sr
						0'*"\t" "∐ .. ; " 1' "⊢ \n"
						3'
						2' //
					∎ { dn sr }
				∐. mtc_code◂lc .
					_inc dn ⊢ dn
					pnt_lc_code { dn lc } ⊢ { dn slc }
					_dec dn ⊢ dn
					» _^ dn,sm,slc ⊢ dn,sm,slc,sr
						0'*"\t" "∐ .. .\n"
						2'
						1' //
					∎ { dn sr }
			∐. m ⊢ p_end◂{ l e } .
			  ∐ e ⊢ mtc_rmf◂m0 .
					pnt_lc_mtc { dn m0 } ⊢ { dn sm0 }
					» _^ dn,sm0 ⊢ dn,sm0,sr
						0'*"\t" "∐. .. .\n"
						1' //
					∎ { dn sr }
				∐ e ⊢ mtc_id_rmf◂{ sp m0 } . 
					pnt_src_ptn sp ⊢ ssp 
					pnt_lc_id_mtc { dn m0 } ⊢ { dn sm0 }
					» _^ dn,ssp,sm0 ⊢ dn,ssp,sm0,sr
						0'*"\t" "∐ .. ; " 1' "⊢ \n"
						2'
						//
					∎ { dn sr }
				∐. e ⊢ mtc_code◂lc .
					_inc dn ⊢ dn
					pnt_lc_code { dn lc } ⊢ { dn slc }
					_dec dn ⊢ dn
					» _^ dn,slc ⊢ dn,slc,sr
						0'*"\t" "∐. .. .\n"
						1' //
					∎ { dn sr }
		@.pnt_lc_id_mtc { dn m }
			∐ m ⊢ p_cns◂{ { mp l e } m } .
				pnt_mtc_ptn mp ⊢ smp 
				pnt_lc_id_mtc { dn m } ⊢ { dn sm }
				$ e ⊢ 
				∐ mtc_rmf◂m0 .
					pnt_lc_mtc { dn m0 } ⊢ { dn sm0 }
					» _^ dn,smp,sm,sm0 ⊢ dn,smp,sm,sm0,sr
						0'*"\t" "∐ " 1' ".. ;\n"
						3'
						2' //
					∎ { dn sr }
				∐ mtc_id_rmf◂{ sp m0 } . 
					pnt_src_ptn sp ⊢ ssp 
					pnt_lc_id_mtc { dn m0 } ⊢ { dn sm0 }
					» _^ dn,ssp,sm,sm0 ⊢ dn,ssp,sm,sm0,sr
						0'*"\t" "∐ .. ; " 1' "⊢ \n"
						3'
						2' //
					∎ { dn sr }
				∐. mtc_code◂lc .
					_inc dn ⊢ dn
					pnt_lc_code { dn lc } ⊢ { dn slc }
					_dec dn ⊢ dn
					» _^ dn,sm,slc ⊢ dn,sm,slc,sr
						0'*"\t" "∐ .. .\n"
						2'
						1' //
					∎ { dn sr }
			∐. m ⊢ p_end◂{ mp l e } .
			  ∐ e ⊢ mtc_rmf◂m0 .
					pnt_mtc_ptn mp ⊢ smp 
					pnt_lc_mtc { dn m0 } ⊢ { dn sm0 }
					» _^ dn,sm0 ⊢ dn,sm0,sr
						0'*"\t" "∐. .. ;\n"
						1' //
					∎ { dn sr }
				∐ e ⊢ mtc_id_rmf◂{ sp m0 } .
					pnt_src_ptn sp ⊢ ssp 
					pnt_lc_id_mtc { dn m0 } ⊢ { dn sm0 }
					» _^ dn,ssp,sm0 ⊢ dn,ssp,sm0,sr
						0'*"\t" "∐ .. ; " 1' "⊢ \n"
						2' //
					∎ { dn sr }
				∐. e ⊢ mtc_code◂lc .
					_inc dn ⊢ dn
					pnt_lc_code { dn lc } ⊢ { dn slc }
					_dec dn ⊢ dn
					» _^ dn,slc ⊢ dn,slc,sr
						0'*"\t" "∐. .. .\n"
						1' //		
					∎ { dn sr }
		¶ @.type
			∐ type_rcd : _lst◂type
			∐ imp : { type type }
			∐ app : { type type }
			∐ type_name : name
			∐ type_var : _s8
		§§ grm 
			¶ 
				@.t r',e' = _lst◂{ _s8 etr◂r'◂e' }
				@.etr r',e' 
					∐ cnc : cnc◂r'◂e'
					∐ act : act◂r'◂e' 
				@.cnc r',e'  
					∐ cnc_cns : { _opn◂_s8 rle_flg rle◂e' _opn◂(cnc◂r'◂e') cnc◂r'◂e' }
					∐ cnc_end : { _opn◂_s8 rle_flg rle◂e' _opn◂(cnc◂r'◂e') }
				@.act r',e' 
					∐ act_cns : { _lst◂(dst◂r') DP◂r' lc_code◂r'◂e' rle_flg rle◂e' _opn◂{ DP◂r' act◂r'◂e' } act◂r'◂e' }
					∐ act_end : { _lst◂(dst◂r') DP◂r' lc_code◂r'◂e' rle_flg rle◂e' _opn◂{ DP◂r' act◂r'◂e' } }
				@.rle_flg
					∐ lex : {}
					∐ synt : {}
					∐ line : {}
				@.rle e'
					∐ ptn_cut : rle_cut◂e'
					∐ ptn_seq : { ptn◂e' rle◂e' }
					∐ ptn_end : {}
				@.rle_cut e' = _lst◂(ptn◂e')
				@.ptn e'
					∐ lst : atm◂e'
					∐ atm : atm◂e'
				@.atm e'
					∐ name : e'
					∐ s8 : _s8
			§ 
				@.pnt { dn q }
					∐ q ⊢ _cns◂{ { w g } q } .
						_inc dn ⊢ dn
						pnt_etr { dn g } ⊢ { dn sg }
						_dec dn ⊢ dn
						pnt { dn q } ⊢ { dn sq }
						» _^ dn,w,sg,sq ⊢ dn,w,sg,sq,sr
							0'*"\t" "@." 1' "\n" 2'
							3' //
						∎ { dn sr }
					∐. q ⊢ _nil◂{} .
						» "" _ ⊢ sr
						∎ { dn sr }
				@.pnt_etr { dn g }
					∐ g ⊢ cnc◂g .
					 pnt_cnc { dn g } ⊢ { dn sr }
					 ∎ { dn sr }
					∐. g ⊢ act◂g .
						pnt_act { dn g } ⊢ { dn sr }
						∎ { dn sr }
				@.pnt_cnc { dn g }
					∐ g ⊢ cnc_cns◂{ cn o ps gc g } .
						pnt_cnc { dn g } ⊢ { dn sg }
						» _^ dn,sg ⊢ dn,sg,sr
							0'*"\t" "∐ ..\n"
							1' //
						∎ { dn sr }
					∐. g ⊢ cnc_end◂{ cn o ps gc } .
						» _^ dn ⊢ dn,sr
							0'*"\t" "∐. .. \n" //
						∎ { dn sr }
				@.pnt_act { dn g }
					∐ g ⊢ act_cns◂{ dl dp lc o ps gc g } .
						pnt_dst_ptn dp ⊢ sdp
						_inc dn ⊢ dn
						pnt_lc_code { dn lc } ⊢ { dn slc }
						_dec dn ⊢ dn
						pnt_act { dn g } ⊢ { dn sg }
						» _^ dn,sdp,slc,sg ⊢ dn,sdp,slc,sg,sr
							0'*"\t" "∐ .. ⊢ " 1' "\n"
							2'
							3' //
						∎ { dn sr }
					∐. g ⊢ act_end◂{ drl dp lc o ps gc } .
						pnt_dst_ptn dp ⊢ sdp
						_inc dn ⊢ dn
						pnt_lc_code { dn lc } ⊢ { dn slc }
						_dec dn ⊢ dn
						» _^ dn,sdp,slc ⊢ dn,sdp,slc,sr
							0'*"\t" "∐. .. ⊢ " 1' "\n"
							2' //
						∎ { dn sr }
				@.pnt_rle { dn ps }
					∐ ps ⊢ ptn_cut◂cps .
						pnt_rle_cut cps ⊢ scps
						» _^ scps ⊢ scps,sr
							" !| " 0' //
						∎ { dn sr }
					∐ ps ⊢ ptn_seq◂{ p ps } .
						pnt_rle { dn ps } ⊢ { dn sps }
						» _^ sps ⊢ sps,sr
							" .. " 0' //
						∎ { dn sr }
					∐. ps ⊢ ptn_end◂{} .
						» "" _ ⊢ sr
						∎ { dn sr }
				@.pnt_rle_cut ps
					∐ ps ⊢ _cns◂{ p ps } .
						pnt_rle_cut ps ⊢ sps
						» _^ sps ⊢ sps,sr
							" .. " 0' //
						∎ sr
					∐. ps ⊢ _nil◂{} .
						» "" _ ⊢ sr
						∎ sr
			§ act_regs {} 
				» "_r" _ ⊢ r0 
				» "_n" _ ⊢ r1 
				dst_reg r0 ⊢ d0 
				dst_reg r1 ⊢ d1 
				_nil {} ⊢ l0 
				_cns { d0 l0 } ⊢ l0 
				_cns { d1 l0 } ⊢ l0 
				∎ l0 
			∎∎
		¶
			@.file = _lst◂glb_etr
			@.glb_etr
				∐ mdl_etr : { _s8 mdl_etr }
				∐ grm_etr : grm.t◂_s8◂name
				∐ lc_etr : { _s8 lc_etr }
				∐ lc_qlq_etr : _lst◂{ _s8 DP◂_s8 _opn◂type lc_code◂_s8◂name }
				∐ dt_etr : { _s8 dt_etr }
				∐ dt_qlq_etr : _lst◂{ _s8 dt_etr }
			@.mdl_etr
				∐ mdl_def : _lst◂glb_etr
				∐ mdl_ln : name
			@.lc_etr
				∐ lc_def : { DP◂_s8 _opn◂type lc_code◂_s8◂name }
				∐ lc_ln : cst◂name
				∐ lc_cst : lc_code◂_s8◂name
			@.dt_etr
				∐ dt_def : { _lst◂_s8 _lst◂{ _s8 type } }
				∐ dt_ln : { _lst◂_s8 type }
	§ 
		@.pnt { dn f } 
		∐ f ⊢ _nil◂{} .
			» "" _ ⊢ s
			∎ { dn s }
		∐. f ⊢ _cns◂{ hd tl } .
			pnt_glb_etr { dn hd } ⊢ { dn s0 }
			pnt { dn tl } ⊢ { dn s1 }
			» _^ s0,s1 ⊢ s0,s1,sr
				0'
				1' //
			∎ { dn sr }
		@.pnt_glb_etr { dn e }
			∐ e ⊢ mdl_etr◂{ w me } .
				∐ me ⊢ mdl_def◂el .
					_inc dn ⊢ dn
					pnt { dn el } ⊢ { dn sl }
					_dec dn ⊢ dn
					» _^ dn,w,sl ⊢ dn,w,sl,sr
						0'*"\t" "§§ " 1' "\n"
							2'
						0'*"\t" "\t" "∎∎\n"
						//
					∎ { dn sr }
				∐. me ⊢ mdl_ln◂n .
					pnt_name n ⊢ sn
					» _^ dn,w,sn ⊢ dn,w,sn,sr
						0'*"\t" "§§ " 1' " = " 2' "\n"
						//
					∎ { dn sr }
			∐ e ⊢ grm_etr◂l .
				_inc dn ⊢ dn
				grm.pnt { dn l } ⊢ { dn sl }
				_dec dn ⊢ dn
				» _^ dn,sl ⊢ dn,sl,sr
					0'*"\t" "§§+s8\n"
						1'
					//
				∎ { dn sr }
			∐ e ⊢ lc_etr◂{ w lce } .
				_inc dn ⊢ dn
				pnt_lc_etr { dn lce } ⊢ { dn se }
				_dec dn ⊢ dn
				» _^ dn,w,se ⊢ dn,w,se,sr
					0'*"\t" "§ " 1' 2'
					//
				∎ { dn sr }
			∐ e ⊢ lc_qlq_etr◂q .
				_inc dn ⊢ dn
				pnt_lc_qlq_etr { dn q } ⊢ { dn sq }
				_dec dn ⊢ dn
				» _^ dn,sq ⊢ dn,sq,sr
					0'*"\t" "§ \n"
						1'
					//
				∎ { dn sr }
			∐ e ⊢ dt_etr◂{ w d } .
				∐ d ⊢ dt_def◂{ as l } .
					_inc dn ⊢ dn
					pnt_dt_def { dn l } ⊢ { dn sl }
					_dec dn ⊢ dn
					» _^ dn,w,sl ⊢ dn,w,sl,sr
						0'*"\t" "¶ " 1' "\n"
							2' //
					∎ { dn sr }
				∐. d ⊢ dt_ln◂{ as t } .
					» _^ dn,w ⊢ dn,w,sr
						0'*"\t" "¶ " 1' " = .. \n" //
					∎ { dn sr }
			∐. e ⊢ dt_qlq_etr◂q .
				_inc dn ⊢ dn
				pnt_dt_qlq_etr { dn q } ⊢ { dn sq }
				_dec dn ⊢ dn
				» _^ dn,sq ⊢ dn,sq,sr
					0'*"\t" "¶\n"
						1'
					//
				∎ { dn sr }
		@.pnt_dt_qlq_etr { dn q }
			∐ q ⊢ _cns◂{ { w d } q } .
				##_emt dn ⊢ dn
				pnt_dt_qlq_etr { dn q } ⊢ { dn sq }
				∐ d ⊢ dt_def◂{ as l } .
					_inc dn ⊢ dn
					pnt_dt_def { dn l } ⊢ { dn sl }
					_dec dn ⊢ dn
					» _^ dn,w,sl,sq ⊢ dn,w,sl,sq,sr
						0'*"\t" "@." 1' "\n"
							2'
						3' //
					∎ { dn sr }
				∐. d ⊢ dt_ln◂{ as t } .
					» _^ dn,w,sq ⊢ dn,w,sq,sr
						0'*"\t" "@." 1' " = .. \n"
						2' //
					∎ { dn sr }
			∐. q ⊢ _nil◂{} .
				» "" _ ⊢ sr
				∎ { dn sr }
		@.pnt_dt_etr { dn e }
			∐ e ⊢ dt_def◂{ a l } .
				_inc dn ⊢ dn
				pnt_dt_def { dn l } ⊢ { dn sl }
				_dec dn ⊢ dn
				» _^ sl ⊢ sl,sr
					"\n"
					0' //
				∎ { dn sl }
			∐. e ⊢ dt_ln◂{ a t } .
				pnt_type t ⊢ st
				» _^ st ⊢ st,sr
					" = " 0' "\n" //
				∎ { dn sr }
		@.pnt_dt_def { dn l }
			∐ l ⊢ _cns◂{ { w t } l } .
				pnt_dt_def { dn l } ⊢ { dn sl }
				pnt_type t ⊢ st
				» _^ dn,w,st,sl ⊢ dn,w,st,sl,sr
					0'*"\t" "∐ " 1' " : " 2' "\n"
					3' //
				∎ { dn sr }
			∐. l ⊢ _nil◂{} .
				» "" _ ⊢ sr
				∎ { dn sr }
		@.pnt_type t
			∐ t ⊢ type_rcd◂l .
				pnt_type_rcd l ⊢ sl
				» _^ sl ⊢ sl,sr
					"{ " 0' "}" //
				∎ sr
			∐ t ⊢ imp◂{ t0 t1 } .
				pnt_type t0 ⊢ st0
				pnt_type t1 ⊢ st1
				» _^ st0,st1 ⊢ st0,st1,sr
					0' " → " 1' //
				∎ sr
			∐ t ⊢ app◂{ t0 t1 } .
				pnt_type t0 ⊢ st0
				pnt_type t1 ⊢ st1
				» _^ st0,st1 ⊢ st0,st1,sr
					0' "◂" 1' //
				∎ sr
			∐ t ⊢ type_name◂n .
				pnt_name n ⊢ sn
				∎ sn
			∐. t ⊢ type_var◂v .
				» _^ v ⊢ v,sr
					0' "'" //
				∎ sr
		@.pnt_type_rcd l
			∐ l ⊢ _cns◂{ t l } .
				pnt_type t ⊢ st
				pnt_type_rcd l ⊢ sl
				» _^ st,sl ⊢ st,sl,sr
					0' " " 1' //
				∎ sr
			∐. l ⊢ _nil◂{} .
				» "" _ ⊢ sr
				∎ sr
		@.pnt_lc_etr { dn e }
			∐ e ⊢ lc_def◂{ dp dt lc } .
				∐ dt ⊢ _some◂dt . 
					pnt_type dt ⊢ sdt 
					pnt_dst_ptn dp ⊢ sdp
					_inc dn ⊢ dn
					pnt_lc_code { dn lc } ⊢ { dn slc }
					_dec dn ⊢ dn
					» _^ sdp,slc,sdt ⊢ sdp,slc,sdt,sr
						" " 0' " : " 2' "\n"
						1' //
					∎ { dn sr }
				∐. . 
					pnt_dst_ptn dp ⊢ sdp
					_inc dn ⊢ dn
					pnt_lc_code { dn lc } ⊢ { dn slc }
					_dec dn ⊢ dn
					» _^ sdp,slc ⊢ sdp,slc,sr
						" " 0' "\n"
						1' //
					∎ { dn sr }
			∐ e ⊢ lc_ln◂c .
				pnt_cst c ⊢ sc
				» _^ sc ⊢ sc,sr
					" = " 0' "\n" //
				∎ { dn sr }
			∐. e ⊢ lc_cst◂lc .
				_inc dn ⊢ dn
				pnt_lc_code { dn lc } ⊢ { dn slc }
				_dec dn ⊢ dn
				» _^ slc ⊢ slc,sr
					" « \n"
					0'
					//
				∎ { dn sr }
		@.pnt_lc_qlq_etr { dn q }
			∐ q ⊢ _cns◂{ { w dp dt lc } q } .  
				∐ dt ⊢ _some◂dt . 
					pnt_type dt ⊢ sdt 
					pnt_dst_ptn dp ⊢ sdp
					pnt_lc_qlq_etr { dn q } ⊢ { dn sq }
					_inc dn ⊢ dn
					pnt_lc_code { dn lc } ⊢ { dn slc }
					_dec dn ⊢ dn
					» _^ dn,w,sdp,slc,sq,sdt ⊢ dn,w,sdp,slc,sq,sdt,sr
						0'*"\t" "@." 1' " " 2' " : " 5' "\n"
							3'
						4'
						//
					∎ { dn sr } 
				∐. . 
					pnt_dst_ptn dp ⊢ sdp
					pnt_lc_qlq_etr { dn q } ⊢ { dn sq }
					_inc dn ⊢ dn
					pnt_lc_code { dn lc } ⊢ { dn slc }
					_dec dn ⊢ dn
					» _^ dn,w,sdp,slc,sq ⊢ dn,w,sdp,slc,sq,sr
						0'*"\t" "@." 1' " " 2' "\n"
							3'
						4'
						//
					∎ { dn sr } 
			∐. q ⊢ _nil◂{} .
				» "" _ ⊢ sr
				∎ { dn sr }
				
	∎∎
	§ @.mk_app { a l }
		∐ l ⊢ _cns◂{ hd tl } .
			ast.app { a hd } ⊢ a
			mk_app { a tl } ⊢ a
			∎ a
		∐. l ⊢ _nil◂{} .
			∎ a
	§§ syntax
	§§+s8 
		@.wc 
			∐. "_" !| ; ⊢ { {} },p 
				_some {} ⊢ a 
				∎ a
				∐ " " ⊢ { {} } 
					_some {} ⊢ a 
					∎ a
				∐ "\t" ⊢ { {} } 
					_some {} ⊢ a 
					∎ a 
				∐ wc_tl !| ⊢ { xx }
					_none {} ⊢ a 
					∎ a
				∐. ⊢ { } 
					_some {} ⊢ a 
					∎ a 
		@.wc_tl 
			∐ "," !| ⊢ { {} }
				_none {} ⊢ a 
				∎ a 
			∐. ⊢ { }
				_some {} ⊢ a  
				∎ a
	§§+s8
		@.name
			∐# prm_word "." name ⊢ { w {} n }
				ast.mdl_n { w n } ⊢ r
				_some r ⊢ a
				∎ a
			∐.# prm_word ⊢ { w }
				ast.fst_n w ⊢ r
				_some r ⊢ a
				∎ a
	§§+s8
		@.cst
			∐ _scf_d "r" ⊢ { x {} }
				ast.r64 x ⊢ r
				ast.cst_v r ⊢ r 
				_some r ⊢ a
				∎ a
			∐ "0x" _scf_x "r" ⊢ { {} x {} }
				ast.r64 x ⊢ r 
				ast.cst_v r ⊢ r 
				_some r ⊢ a 
				∎ a  
			∐ stg_ltr ⊢ { s }
				ast.s8 s ⊢ r
				ast.cst_v r ⊢ r 
				_some r ⊢ a
				∎ a
			∐. name ⊢ { n }
				ast.cst_name n ⊢ r
				_some r ⊢ a
				∎ a
	§§+s8
		@.nl
			∐.# "\n" ⟦"\n"⟧
	¶ prs_rslt◂a'
		∐ prs_vld : a'
		∐ prs_err : _lst◂{ _r64 _r64 _s8 }  
	§ prs_cct { e0 e1 } 
		$ e0 ⊢
		∐ prs_vld◂a0 . 
			$ e1 ⊢ 
			∐ prs_vld◂a1 . 
				prs_vld { a0 a1 } ⊢ e 
				∎ e 
			∐. prs_err◂l1 . 
				prs_err l1 ⊢ e 
				∎ e 
		∐. prs_err◂l0 .
			$ e1 ⊢ 
			∐ prs_vld◂a1  . 
				prs_err l0 ⊢ e 
				∎ e 
			∐. prs_err◂l1 . 
				apnd { l0 l1 } ⊢ l
				prs_err l ⊢ e 
				∎ e  
	§ prs_cct2 { e0 e1 e2 } 
		prs_cct { e0 e1 } ⊢ e 
		prs_cct { e e2 } ⊢ e 
		$ e ⊢ 
		∐ prs_vld◂{ { e0 e1 } e2 } .
			prs_vld { e0 e1 e2 } ⊢ e 
			∎ e 
		∐. prs_err◂e .
			prs_err e ⊢ e  
			∎ e 
	§ mk_prs_err { n r s } 
		_nil {} ⊢ l 
		_cns { { n r s } l } ⊢ l 
		prs_err l ⊢ e  
		∎ e 
	§ @.pnt_prs_err el 
		$ el ⊢ 
		∐ _cns◂{ { n0 n1 em } el } . 
			pnt_prs_err el ⊢ sel 
			» _^ n0,n1,em,sel ⊢ n0,n1,em,sel,sr 
				"prs_err " 0d' "-" 1d' ":" 2' "\n" 
				3' // 
			∎ sr   
		∐. _nil◂{} . 
			» "" _ ⊢ sr 
			∎ sr 
			

	§§+s8
		@.mtc_ptn
			∐# "{" mtc_ptn_lst "}" ⊢ { {} l {} }
				RP.rcd l ⊢ r
				_some r ⊢ a
				∎ a
			∐.# mtc ⊢ { s }
				RP.atm s ⊢ r
				_some r ⊢ a
				∎ a
		@.mtc_ptn_lst
			∐# mtc_ptn mtc_ptn_lst ⊢ { hd tl }
				_cns { hd tl } ⊢ l
				_some l ⊢ a
				∎ a
			∐.# ⊢ {}
				_nil {} ⊢ l
				_some l ⊢ a
				∎ a
		@.mtc_tl
			∐# "," !| mtc mtc_tl ⊢ { {} r rs }
				##RP.atm r ⊢ r
				_cns { r rs } ⊢ rs
				_some rs ⊢ a
				∎ a
			∐.# ⊢ { }
				_nil {} ⊢ rs
				_some rs ⊢ a
				∎ a
		@.mtc
			∐# name "◂" mtc_ptn ⊢ { n {} mp } 
				ast.mtc_agl { n mp } ⊢ p 
				_some p ⊢ a 
				∎ a
			∐# "%[" !| cst "]" ⊢ { {} c {} }
				ast.mtc_cst c ⊢ r
				_some r ⊢ a
				∎ a
			∐# "%" !| prm_word ⊢ { {} w }
				ast.mtc_reg w ⊢ r
				_some r ⊢ a
				∎ a
			∐# prm_word ⊢ { w }
				ast.mtc_reg w ⊢ r
				_some r ⊢ a
				∎ a
			∐.# "_" ⊢ { {} }
				_none {} ⊢ o 
				ast.mtc_wc o ⊢ r 
				_some r ⊢ a 
				∎ a
	§§+s8
		@.src_ptn
			∐# "{" src_ptn_lst "}" ⊢ { {} l {} }
				RP.rcd l ⊢ r
				_some r ⊢ a
				∎ a
			∐.# src ⊢ { s }
				RP.atm s ⊢ r
				_some r ⊢ a
				∎ a
		@.src_ptn_lst
			∐# src_ptn src_ptn_lst ⊢ { hd tl }
				_cns { hd tl } ⊢ l
				_some l ⊢ a
				∎ a
			∐.# ⊢ {}
				_nil {} ⊢ l
				_some l ⊢ a
				∎ a
		@.src_tl
			∐# "," !| src src_tl ⊢ { {} r rs }
				##RP.atm r ⊢ r
				_cns { r rs } ⊢ rs
				_some rs ⊢ a
				∎ a
			∐.# ⊢ { }
				_nil {} ⊢ rs
				_some rs ⊢ a
				∎ a
		@.src
			∐# "%[" cst "]" ⊢ { {} c {} }
				ast.im_reg c ⊢ r
				_some r ⊢ a
				∎ a
			∐ "%" !| prm_word ⊢ { {} w }
				ast.src_reg w ⊢ r
				_some r ⊢ a
				∎ a
			∐.# prm_word ⊢ { w }
				ast.src_reg w ⊢ r
				_some r ⊢ a
				∎ a
	§§+s8
		@.dst_ptn
			∐# "{" dst_ptn_lst "}" ⊢ { {} l {} }
				RP.rcd l ⊢ r
				_some r ⊢ a
				∎ a
			∐.# dst ⊢ { s }
				RP.atm s ⊢ r
				_some r ⊢ a
				∎ a
		@.dst_ptn_lst
			∐# dst_ptn dst_ptn_lst ⊢ { hd tl }
				_cns { hd tl } ⊢ l
				_some l ⊢ a
				∎ a
			∐.# ⊢ {}
				_nil {} ⊢ l
				_some l ⊢ a
				∎ a
		@.dst_ptn_tl
			∐# "," !| dst_ptn dst_ptn_tl ⊢ { {} d ds }
				_cns { d ds } ⊢ ds
				_some ds ⊢ a
				∎ a
			∐.# ⊢ { }
				_nil {} ⊢ ds
				_some ds ⊢ a
				∎ a
		@.dst_tl
			∐# "," !| dst dst_tl ⊢ { {} r rs }
				##RP.atm r ⊢ r
				_cns { r rs } ⊢ rs
				_some rs ⊢ a
				∎ a
			∐.# ⊢ { }
				_nil {} ⊢ rs
				_some rs ⊢ a
				∎ a
		@.dst
			∐ "%" !| word ⊢ { {} w }
				ast.dst_reg w ⊢ r
				_some r ⊢ a
				∎ a
			∐ word ⊢ { w }
				ast.dst_reg w ⊢ r
				_some r ⊢ a
				∎ a
			∐. "_" ⊢ { {} }
				_none {} ⊢ o 
				ast.wc o ⊢ r
				_some r ⊢ a
				∎ a
	§§+s8
		@.type
			∐.# type_atm type_app_tl type_tl ⊢ { t0 t1 t2 }
				mk_app { t0 t1 } ⊢ t
				∐ t2 ⊢ _some◂t2 .
					ast.imp { t t2 } ⊢ t
					_some t ⊢ a
					∎ a
				∐. t2 ⊢ _none◂{} .
					_some t ⊢ a
					∎ a
		@.type_tl
			∐# "→" type ⊢ { {} t }
				_some t ⊢ a
				_some a ⊢ a
				∎ a
			∐.# ⊢ { }
				_none {} ⊢ r
				_some r ⊢ a
				∎ a
		@.type_app_tl
			∐# "◂" type_atm type_app_tl ⊢ { {} t0 t1 }
				_cns { t0 t1 } ⊢ r
				_some r ⊢ a
				∎ a
			∐.# ⊢ { }
				_nil {} ⊢ r
				_some r ⊢ a
				∎ a
		@.type_atm
			∐# "{" ⟦type⟧ "}" ⊢ { {} l {} }
				rev l ⊢ l
				ast.type_rcd l ⊢ t
				_some t ⊢ a
				∎ a
			∐# "(" type ")" ⊢ { {} t {} }
				_some t ⊢ a
				∎ a
			∐# var ⊢ { v }
				ast.type_var v ⊢ r
				_some r ⊢ a
				∎ a
			∐.# name ⊢ { n }
				ast.type_name n ⊢ r
				_some r ⊢ a
				∎ a
		@.var
			∐. word "'" ⊢ { w {} }
				_some w ⊢ a
				∎ a
			
	§§+s8 
		@.nls_p 
			∐# "\n" !| nls 
			∐# _byt !| "\\F\\" 
			∐.# 
		@.nls 
			∐# "\n" !| nls ⊢ { {} xx }
				prs_vld {} ⊢ p 
				_some p ⊢ a 
				∎ a 
			∐# "##" !| line_res nls ⊢ { {} xx yy } 
				prs_vld {} ⊢ p 
				_some p ⊢ a 
				∎ a
			∐# "\\\\" !| line_res nls ⊢ { {} xx yy } 
				prs_vld {} ⊢ p 
				_some p ⊢ a 
				∎ a
			∐# "\\[" !| ; ⊢ { {} },p
				_some p ⊢ a 
				∎ a
				∐# "\n" cmt_in nls ⊢ { {} p0 p1 }
					prs_cct { p0 p1 } ⊢ pr 
					$ pr ⊢ 
					∐ prs_vld◂{ p0 p1 } . 
						prs_vld {} ⊢ p 
						_some p ⊢ a 
						∎ a 
					∐. prs_err◂e . 
						pnt_prs_err e ⊢ s 
						_emt s ⊢ s 
						∎| 		
				∐.# ⊢ { } 
					##» _^ n,r ⊢ n,r,sr 
					» _^ _n,_r ⊢ n,r,sr 
						"nls_err " 0d' "-" 1d' ":\n" //
					_emt sr ⊢ sr 
					∎|   
			∐.# ⊢ { } 
				prs_vld {} ⊢ p 
				_some p ⊢ a 
				∎ a
		@.cmt_in 
			∐# "\\[" !| ; ⊢ { {} },p
				_some p ⊢ a 
				∎ a 
				∐# "\n" cmt_in cmt_in ⊢ { {} p0 p1 }
					prs_cct { p0 p1 } ⊢ pr 
					$ pr ⊢ 
					∐ prs_vld◂{ p0 p1 } . 
						prs_vld {} ⊢ p 
						_some p ⊢ a 
						∎ a 
					∐. prs_err◂e . 
						pnt_prs_err e ⊢ s 
						_emt s ⊢ s 
						∎| 		
					∐.# ⊢ { } 
						_nil {} ⊢ l 
						» "blk_cmt 0" _ ⊢ s
						_cns { { _n _r s } l } ⊢ l 
						prs_err l ⊢ l 
						_some l ⊢ a 
						∎ a 
			∐# "\\]" !| ; ⊢ { {} },pe
				prs_vld {} ⊢ p 
				_some p ⊢ a 
				∎ a  
				∐# "\n" ⊢ { {} }
					_some {} ⊢ a 
					∎ a  
				∐# !| _byt ⊢ { b } 
					_none {} ⊢ a 
					∎ a 
				∐.# ⊢ { } 
					_some {} ⊢ a 
					∎ a   
			∐# line_res_c ⊢ { c }
				_some c ⊢ a 
				∎ a
			∐.# ⊢ { } 
				_nil {} ⊢ l 
				» "blk_cmt 1" _ ⊢ s
				_cns { { _n _r s } l } ⊢ l 
				prs_err l ⊢ l 
				_some l ⊢ a 
				∎ a
		@.line_res_c 
			∐# "\n" cmt_in ⊢ { {} c }
				_some c ⊢ a 
				∎ a 
			∐# _byt line_res_c ⊢ { b l }  
				_some l ⊢ a 
				∎ a 
			∐.# ⊢ { } 
				» "line_res_c 0" _ ⊢ se 
				_emt se ⊢ se 
				∎| 
		@.line_res 
			∐# "\n" ⊢ { {} }
				_some { _n _r } ⊢ a 
				∎ a 
			∐# _byt line_res ⊢ { b { n0 r0 } }
				_some { _n r0 } ⊢ a
				∎ a  
			∐.# ⊢ { }
				_some { _n _r } ⊢ a 
				∎ a
	§§+s8 
		@.glb_etr_ch 
			∐* "§§+s8" ⊢ { {} }
				_some {} ⊢ a 
				∎ a
			∐* "§§" ⊢ { {} }
				_some {} ⊢ a 
				∎ a
			∐* "§" ⊢ { {} }
				_some {} ⊢ a 
				∎ a
			∐* "¶" ⊢ { {} }
				_some {} ⊢ a 
				∎ a
			∐.* "∎∎" ⊢ { {} }
				_some {} ⊢ a 
				∎ a
		@.glb_etr_res_ch 
			∐* glb_etr_ch !| ⊢ { g }
				_none {} ⊢ a 
				∎ a  
			∐.* _byt ⊢ { b } 
				_some {} ⊢ a 
				∎ a
		@.glb_etr_clq_ch 
			∐* "@" !| ⊢ { q } 
				_none {} ⊢ a 
				∎ a 
			∐* glb_etr_ch !| ⊢ { c } 
				_none {} ⊢ a
				∎ a  
			∐.* _byt ⊢ { b } 
				_some {} ⊢ a 
				∎ a
		@.glb_etr_res_clq 
			∐* glb_etr_clq_ch glb_etr_res_clq ⊢ { c r }
				_some {} ⊢ a 
				∎ a 
			∐.* ⊢ { } 
				_some {} ⊢ a 
				∎ a   
		@.glb_etr_res_line 
			∐# "\n" ⊢ { n } 
				_some {} ⊢ a 
				∎ a 
			∐# glb_etr_ch !| ⊢ { g } 
				_none {} ⊢ a 
				∎ a 
			∐# "@" !| ⊢ { q } 
				_none {} ⊢ a 
				∎ a 
			∐# _byt glb_etr_res_line ⊢ { b r } 
				_some {} ⊢ a 
				∎ a 
			∐# _byt ⊢ { b } 
				_some {} ⊢ a 
				∎ a 
			∐.# ⊢ { } 
				_some {} ⊢ a 
				∎ a
	§§+s8 @.rtm_sbl 
		∐ "§~" ⊢ { {} } 
			_some {} ⊢ a 
			∎ a 
		∐. "§%" ⊢ { {} } 
			_some {} ⊢ a 
			∎ a  
	§§+s8 
		@.lc_code
			∐* nls "∎|" ⊢ { nn {} }
				ast.exn _n ⊢ c
				prs_vld c ⊢ c 
				_some c ⊢ a
				∎ a
			∐# nls "∎" !| ; ⊢ { nn {} },r
				_some r ⊢ r 
				∎ r  

				∐# src_ptn "\n" ⊢ { r {} }
					_some r ⊢ r 
					ast.ret r ⊢ c
					prs_vld c ⊢ c 
					_some c ⊢ a
					∎ a
				∐# "\n" ⊢ { {} } 
					_none {} ⊢ r 
					ast.ret r ⊢ c 
					prs_vld c ⊢ c 
					_some c ⊢ a 
					∎ a 
				∐.# line_res ⊢ { b } 
					» "lc_code ∎ .. " _ ⊢ se
					_nil {} ⊢ l 
					_cns { { _n _r se } l } ⊢ l 
					prs_err l ⊢ e 
					_some e ⊢ a 
					∎ a 
			∐* lc_mtc ⊢ { m }
				$ m ⊢ 
				∐ prs_vld◂m . 
					ast.mtc m ⊢ m
					prs_vld m ⊢ m 
					_some m ⊢ a
					∎ a
				∐. prs_err◂e . 
					prs_err e ⊢ e 
					_some e ⊢ a 
					∎ a 
			∐# nls "$" !| ; ⊢ { nn {} },rr
				$ rr ⊢ 
				∐ prs_vld◂{ s il } .  
					$ il ⊢ 
					∐ prs_vld◂il . 
						ast.op_id { s il } ⊢ l 
						prs_vld l ⊢ l 
						_some l ⊢ a 
						∎ a
					∐. prs_err◂e . 
						prs_err e ⊢ e 
						_some e ⊢ a 
						∎ a 
				∐. prs_err◂l . 
					prs_err l ⊢ e 
					_some e ⊢ a 
					∎ a 

				∐# src_ptn "⊢" !| ; ⊢ { s {} },il 
					prs_vld { s il } ⊢ a 
					_some a ⊢ a 
					∎ a 
					∐# "\n" lc_id_mtc ⊢ { {} m }
						$ m ⊢ 
						∐ prs_vld◂m . 
							ast.id_mtc m ⊢ m 
							prs_vld m ⊢ m 
							_some m ⊢ a 
							∎ a
						∐. prs_err◂e . 
							prs_err e ⊢ e 
							_some e ⊢ a 
							∎ a  
					∐.# dst_ptn dst_ptn_tl "\n" lc_code ⊢ { r1 rs {} lc }
						$ lc ⊢ 
						∐ prs_vld◂lc . 
							_cns { r1 rs } ⊢ rs
							ast.id_line { rs lc } ⊢ e
							prs_vld e ⊢ e 
							_some e ⊢ a
							∎ a
						∐. prs_err◂e . 
							prs_err e ⊢ e 
							_some e ⊢ a 
							∎ a 
				∐# line_res lc_id_mtc ⊢ { { n r } lc }
					$ lc ⊢ 
					∐ prs_vld◂x . 
						_nil {} ⊢ l 
						» "glb_etr id_line line_res 0" _ ⊢ s
						_cns { { n r s } l } ⊢ l 
						prs_err l ⊢ l 
						_some l ⊢ a 
						∎ a
					∐. prs_err◂l . 
						» "glb_etr id_line line_res 1" _ ⊢ s
						_cns { { n r s } l } ⊢ l 
						prs_err l ⊢ l 
						_some l ⊢ a 
						∎ a
				∐.# line_res lc_code ⊢ { { n r } lc } 
					$ lc ⊢ 
					∐ prs_vld◂x . 
						_nil {} ⊢ l 
						» "glb_etr id_line line_res 2" _ ⊢ s
						_cns { { n r s } l } ⊢ l 
						prs_err l ⊢ l 
						_some l ⊢ a 
						∎ a
					∐. prs_err◂l . 
						» "glb_etr id_line line_res 3" _ ⊢ s
						_cns { { n r s } l } ⊢ l 
						prs_err l ⊢ l 
						_some l ⊢ a 
						∎ a
			∐# nls "^" !| lc_exp_s8_sd "\n" ⟦s8_ptn⟧ "//" lc_code ⊢ { nn {} { s d } {} ps {} lc }
				rev ps ⊢ ps 
				ast.op_exp_s8 { ps s d } ⊢ l 
				$ lc ⊢ 
				∐ prs_vld◂lc . 
					ast.seq { l lc } ⊢ lc 
					prs_vld lc ⊢ lc 
					_some lc ⊢ a
					∎ a
				∐. prs_err◂e . 
					prs_err e ⊢ e 
					_some e ⊢ a 
					∎ a 
			∐* nls "»" !| lc_exp_line lc_code ⊢ { nn {} l lc } 
				$ lc ⊢ 
				∐ prs_vld◂lc . 
					∐ l ⊢ ast.op_exp_cst◂{ c sp dp } . 
						ast.im_reg c ⊢ s 
						RP.atm s ⊢ s 
						_nil {} ⊢ l 
						_cns { dp l } ⊢ l 
						ast.id_line { l lc } ⊢ il 
						ast.op_id { s il } ⊢ lc 
						prs_vld lc ⊢ lc 
						_some lc ⊢ a 
						∎ a 
					∐. . 
						ast.seq { l lc } ⊢ lc 
						prs_vld lc ⊢ lc 
						_some lc ⊢ a
						∎ a
				∐. prs_err◂e . 
					prs_err e ⊢ e 
					_some e ⊢ a 
					∎ a 
			∐* nls "◂" !| src "," src_ptn ; ⊢ { nn {} r0 {} r1},o
				$ o ⊢ 
				∐ prs_vld◂o . 
					$ o ⊢ 
					∐ _some◂{ d lc } . 
						ast.op_app { r0 r1 d } ⊢ e
						ast.seq { e lc } ⊢ c
						prs_vld c ⊢ c 
						_some c ⊢ a 
						∎ a 
					∐. _none◂{} . 
						ast.app_jmp { r0 r1 } ⊢ c 
						prs_vld c ⊢ c 
						_some c ⊢ a 
						∎ a
				∐. prs_err◂e . 
					prs_err e ⊢ e 
					_some e ⊢ a 
					∎ a   
				
				∐* "⊢|" !| ⊢ { {} } 
					_none {} ⊢ o 
					prs_vld o ⊢ o 
					_some o ⊢ a 
					∎ a  
				∐.* "⊢" dst_ptn lc_code ⊢ { {} r2 lc }
					$ lc ⊢ 
					∐ prs_vld◂lc . 
						_some { r2 lc } ⊢ a 
						prs_vld a ⊢ a 
						_some a ⊢ a 
						∎ a
					∐. prs_err◂e . 
						prs_err e ⊢ e 
						_some e ⊢ a 
						∎ a  
			∐# nls name src_ptn ; ⊢ { nn n r0 },o 
				$ o ⊢ 
				∐ prs_vld◂o . 
					$ o ⊢ 
					∐ _some◂{ y lc } .
						ast.op_name { n r0 y } ⊢ e
						ast.seq { e lc } ⊢ e 
						prs_vld e ⊢ e 
						_some e ⊢ a
						∎ a	
					∐. _none◂{} . 
						ast.jmp { n r0 } ⊢ lc 
						prs_vld lc ⊢ lc 
						_some lc ⊢ a 
						∎ a
				∐. prs_err◂e . 
					prs_err e ⊢ e 
					_some e ⊢ a 
					∎ a  
				
				∐* "⊢|" !| ⊢ { {} }
					_none {} ⊢ o 
					prs_vld o ⊢ o 
					_some o ⊢ a 
					∎ a  
				∐# "⊢" !| dst_ptn "\n" lc_code ⊢ { {} r1 {} lc }
					$ lc ⊢ 
					∐ prs_vld◂lc . 
						_some { r1 lc } ⊢ o
						prs_vld o ⊢ o 
						_some o ⊢ a 
						∎ a
					∐. prs_err◂e . 
						prs_err e ⊢ e 
						_some e ⊢ a 
						∎ a 
				∐.# line_res lc_code ⊢ { { nn rr } lc }
					$ lc ⊢ 
					∐ prs_vld◂lc . 
						» "lc_code 20" _ ⊢ se 
						_nil {} ⊢ e
						_cns { { nn rr se } e } ⊢ e 
						prs_err e ⊢ e 
						_some e ⊢ a 
						∎ a
					∐. prs_err◂e . 
						» "lc_code 21" _ ⊢ se 
						_cns { { nn rr se } e } ⊢ e 
						prs_err e ⊢ e 
						_some e ⊢ a 
						∎ a 
			∐.* glb_etr_res_line ; ⊢ { r },lc
				$ lc ⊢ 
				∐ prs_vld◂lc . 			 
					» "lc_code 9" _ ⊢ se 
					mk_prs_err { _n _r se } ⊢ e
					_some e ⊢ a 
					∎ a
				∐. prs_err◂e . 
					» "lc_code 10" _ ⊢ se  
					_cns { { _n _r se } e } ⊢ e
					prs_err e ⊢ e 
					_some e ⊢ a 
					∎ a 
				
				∐* lc_code ⊢ { lc } 
					_some lc ⊢ a 
					∎ a
				∐.* glb_etr_res_clq ⊢ { r } 
					» "lc_code 11" _ ⊢ se 
					_nil {} ⊢ l 
					_cns { { _n _r se } l } ⊢ l 
					prs_err l ⊢ e 
					_some e ⊢ a 
					∎ a  
		@.id_line
			∐* lc_id_mtc ⊢ { m }
				$ m ⊢ 
				∐ prs_vld◂m . 
					ast.id_mtc m ⊢ m 
					prs_vld m ⊢ m 
					_some m ⊢ a 
					∎ a
				∐. prs_err◂e . 
					prs_err e ⊢ e 
					_some e ⊢ a 
					∎ a 
			∐.* dst_ptn dst_ptn_tl lc_code ⊢ { r1 rs lc }
				$ lc ⊢ 
				∐ prs_vld◂lc . 
					_cns { r1 rs } ⊢ rs
					ast.id_line { rs lc } ⊢ e
					prs_vld e ⊢ e 
					_some e ⊢ a
					∎ a
				∐. prs_err◂e . 
					prs_err e ⊢ e 
					_some e ⊢ a 
					∎ a 
		@.lc_exp_line
			∐* "_^" !| lc_exp_s8_sd ⟦s8_ptn⟧ "//" ⊢ { {} { s d } ps {} }
				ast.op_exp_s8 { ps s d } ⊢ e
				_some e ⊢ a
				∎ a
			∐.* cst "_" "⊢" dst_ptn ⊢ { c {} {} r }
				_nil {} ⊢ l
				RP.rcd l ⊢ s
				ast.op_exp_cst { c s r } ⊢ e
				_some e ⊢ a
				∎ a
		@.lc_exp_s8_sd
			∐* wc !| "⊢" dst ⊢ { xx {} r }
				_nil {} ⊢ l0
				_nil {} ⊢ l1
				_cns { r l1 } ⊢ l1
				_some { l0 l1 } ⊢ a
				∎ a
			∐.* src src_tl "⊢" dst dst_tl ⊢ { r0 rs0 {} r1 rs1 }
				_cns { r0 rs0 } ⊢ rs0
				_cns { r1 rs1 } ⊢ rs1
				_some { rs0 rs1 } ⊢ a
				∎ a
	
		@.s8_ptn
			∐* var_idx "*" !| stg_ltr ⊢ { i {} s }
				ast.exp_s8.for { i s } ⊢ r
				_some r ⊢ a
				∎ a
			∐* s8_ptn_line ⊢ { s }
				ast.exp_s8.s8 s ⊢ r
				_some r ⊢ a
				∎ a
			∐* stg_ltr ⊢ { s }
				ast.exp_s8.s8 s ⊢ s
				_some s ⊢ a
				∎ a
			∐* name ⊢ { n }
				ast.cst_name n ⊢ c 
				ast.exp_s8.cst c ⊢ n
				_some n ⊢ a
				∎ a
			∐.* s8_fmt ⊢ { f }
				ast.exp_s8.idx f ⊢ r
				_some r ⊢ a
				∎ a
		@.var_idx
			∐. _scf_d "'" ⊢ { x {} }
				_some x ⊢ a
				∎ a
		@.s8_fmt
			∐ _scf_d "d'" ⊢ { d {} }
				ast.exp_s8.d {} ⊢ f
				_some { f d } ⊢ a
				∎ a
			∐ _scf_d "x'" ⊢ { d {} }
				ast.exp_s8.x {} ⊢ f
				_some { f d } ⊢ a
				∎ a
			∐. _scf_d "'" ⊢ { d {} }
				ast.exp_s8.s {} ⊢ f
				_some { f d } ⊢ a
				∎ a
		@.s8_ptn_line
			∐. "`" line ⊢ { {} l }
				##s8_of_r64_lst l ⊢ s
				rp8.mk_s8 l ⊢ { l s } 
				_some s ⊢ a
				∎ a
		@.line
			∐ "\n" ⊢ { {} }
				» 10r _ ⊢ s
				##_nil {} ⊢ l
				##_cns { s l } ⊢ l
				rp8.e {} ⊢ l 
				rp8.pfx_chr { s l } ⊢ l 
				_some l ⊢ a
				∎ a
			∐. _byt line ⊢ { b l }
				##_cns { b l } ⊢ l
				rp8.pfx_chr { b l } ⊢ l 
				_some l ⊢ a
				∎ a
		@.lc_mtc
			∐* nls "∐." !| mtc_line lc_code ⊢ { nn {} l c0 }
				$ l ⊢ 
				∐ prs_vld◂l . 
					$ c0 ⊢ 
					∐ prs_vld◂c0 . 
						ast.mtc_code c0 ⊢ c1
						p_end { l c1 } ⊢ m
						prs_vld m ⊢ m 
						_some m ⊢ a
						∎ a
					∐. prs_err◂e . 
						prs_err e ⊢ a 
						_some a ⊢ a 
						∎ a
				∐. prs_err◂pel . 
					$ c0 ⊢ 
					∐ prs_vld◂c0 . 
						prs_err pel ⊢ m 
						_some m ⊢ a
						∎ a
					∐. prs_err◂e . 
						apnd { pel e } ⊢ e 
						prs_err e ⊢ a 
						_some a ⊢ a 
						∎ a 
			∐.* nls "∐" mtc_line lc_code lc_mtc ⊢ { nn {} l c m }
				$ l ⊢ 
				∐ prs_vld◂l . 
					$ c ⊢ 
					∐ prs_vld◂c . 
						$ m ⊢ 
						∐ prs_vld◂m . 
							ast.mtc_code c ⊢ c
							p_cns { { l c } m } ⊢ m
							prs_vld m ⊢ m 
							_some m ⊢ a
							∎ a
						∐. prs_err◂e . 
							prs_err e ⊢ e 
							_some e ⊢ a 
							∎ a 
					∐. prs_err◂e .
						$ m ⊢ 
						∐ prs_vld◂m .
							prs_err e ⊢ e 
							_some e ⊢ a 
							∎ a
						∐. prs_err◂em . 
							apnd { e em } ⊢ e 
							prs_err e ⊢ e 
							_some e ⊢ a
							∎ a 
				∐. prs_err◂el . 
					$ c ⊢ 
					∐ prs_vld◂c . 
						$ m ⊢ 
						∐ prs_vld◂m . 
							prs_err el ⊢ el 
							_some el ⊢ a
							∎ a
						∐. prs_err◂e . 
							apnd { el e } ⊢ e 
							prs_err e ⊢ e 
							_some e ⊢ a 
							∎ a 
					∐. prs_err◂e .
						$ m ⊢ 
						∐ prs_vld◂m .
							apnd { el e } ⊢ e
							prs_err e ⊢ e 
							_some e ⊢ a 
							∎ a
						∐. prs_err◂em . 
							apnd { el e } ⊢ e 
							apnd { e em } ⊢ e 
							prs_err e ⊢ e 
							_some e ⊢ a
							∎ a 
		@.lc_id_mtc
			∐# nls "∐." !| mtc_ptn mtc_line_tl lc_code ⊢ { nn {} mp l c }
				$ l ⊢ 
				∐ prs_vld◂l .
					$ c ⊢ 
					∐ prs_vld◂c .
						ast.mtc_code c ⊢ c
						p_end { mp l c } ⊢ m
						prs_vld m ⊢ m 
						_some m ⊢ a
						∎ a
					∐. prs_err◂e . 
						prs_err e ⊢ e 
						_some e ⊢ a 
						∎ a
				∐. prs_err◂el . 
					$ c ⊢ 
					∐ prs_vld◂c .
						prs_err el ⊢ el 
						_some el ⊢ a
						∎ a
					∐. prs_err◂e . 
						apnd { el e } ⊢ e 
						prs_err e ⊢ e 
						_some e ⊢ a 
						∎ a
			∐.# nls "∐" mtc_ptn mtc_line_tl lc_code lc_id_mtc ⊢ { nn {} mp l c m }
				$ l ⊢ 
				∐ prs_vld◂l . 
					$ c ⊢ 
					∐ prs_vld◂c . 
						$ m ⊢ 
						∐ prs_vld◂m . 
							ast.mtc_code c ⊢ c
							p_cns { { mp l c } m } ⊢ m
							prs_vld m ⊢ m 
							_some m ⊢ a
							∎	a
						∐. prs_err◂e . 
							prs_err e ⊢ e 
							_some e ⊢ a 
							∎ a 
					∐. prs_err◂ec . 
						$ m ⊢ 
						∐ prs_vld◂m . 
							prs_err ec ⊢ e 
							_some e ⊢ a 
							∎ a
						∐. prs_err◂em . 
							apnd { ec em } ⊢ e 
							prs_err e ⊢ e 
							_some e ⊢ a 
							∎ a
				∐. prs_err◂el . 
					$ c ⊢ 
					∐ prs_vld◂c . 
						$ m ⊢ 
						∐ prs_vld◂m . 
							prs_err el ⊢ a 
							_some a ⊢ a 
							∎	a
						∐. prs_err◂e . 
							apnd { el e } ⊢ e 
							prs_err e ⊢ e 
							_some e ⊢ a 
							∎ a 
					∐. prs_err◂ec . 
						$ m ⊢ 
						∐ prs_vld◂m . 
							apnd { el ec } ⊢ ec 
							prs_err ec ⊢ e 
							_some e ⊢ a 
							∎ a
						∐. prs_err◂em . 
							apnd { el ec } ⊢ ec 
							apnd { ec em } ⊢ e 
							prs_err e ⊢ e 
							_some e ⊢ a 
							∎ a  
		@.mtc_line
			∐# mtc_test mtc_test_tl ⊢ { e0 l }
				_cns { e0 l } ⊢ l
				prs_vld l ⊢ l 
				_some l ⊢ a
				∎ a
			∐# "." "\n" ⊢ { {} {} }
				_nil {} ⊢ l
				prs_vld l ⊢ l 
				_some l ⊢ a
				∎ a
			∐.# line_res ⊢ { bb } 
				» "mtc_line 0" _ ⊢ se 
				_nil {} ⊢ pe 
				_cns { { _n _r se } pe } ⊢ pe 
				prs_err pe ⊢ pe 
				_some pe ⊢ a 
				∎ a  
		@.mtc_test
			∐# src_ptn "⊢" !| name "◂" mtc_ptn ⊢ { r0 {} n {} r1 }
				ast.mtc_agl { n r1 } ⊢ mp 
				RP.atm mp ⊢ mp 
				ast.mtc_id { r0 mp } ⊢ r
				_some r ⊢ a
				∎ a
			∐# mtc_val "=<" mtc_val ⊢ { v0 {} v1 }
				ast.mtc_cmp_test { v0 v1 } ⊢ r 
				_some r ⊢ a 
				∎ a  
			∐.# mtc_val "=" mtc_val ⊢ { v0 {} v1 }
				ast.mtc_test { v0 v1 } ⊢ r
				_some r ⊢ a
				∎ a
		@.mtc_test_tl
			∐# ";" !| mtc_test mtc_test_tl ⊢ { {} e l }
				_cns { e l } ⊢ l
				_some l ⊢ a
				∎ a
			∐.# "." "\n" ⊢ { {} {} }
				_nil {} ⊢ l
				_some l ⊢ a
				∎ a
		@.mtc_line_tl
			∐# ";" !| mtc_test mtc_test_tl ⊢ { {} e l }
				_cns { e l } ⊢ l
				prs_vld l ⊢ l
				_some l ⊢ a
				∎ a
			∐# "." "\n" ⊢ { {} {} }
				_nil {} ⊢ l
				prs_vld l ⊢ l 
				_some l ⊢ a
				∎ a
			∐.# line_res ⊢ { bb } 
				» "mtc_line_tl 0" _ ⊢ se 
				_nil {} ⊢ pe 
				_cns { { _n _r se } pe } ⊢ pe 
				prs_err pe ⊢ pe 
				_some pe ⊢ a 
				∎ a 
		@.mtc_val
			∐ word "'" ⊢ { w {} }
				ast.test_var w ⊢ v
				_some v ⊢ a
				∎ a
			∐. cst ⊢ { c }
				ast.test_cst c ⊢ v
				_some v ⊢ a
				∎ a
	§§+s8
		@.file
			∐* nls glb_etr file ⊢ { nn e gl }
				prs_cct { e gl } ⊢ e0 
				$ e0 ⊢ 
				∐ prs_vld◂{ e gl } . 
					_cns { e gl } ⊢ gl
					prs_vld gl ⊢ gl 
					_some gl ⊢ a
					∎ a
				∐. prs_err◂err . 
					prs_err err ⊢ e 
					_some e ⊢ a 
					∎ a 
			∐.* nls ; ⊢ { nn },p 
				_nil {} ⊢ gl
				prs_vld gl ⊢ gl  
				_some gl ⊢ a
				∎ a
				∐* _byt !| ⊢ { b }
					» "!!!" _ ⊢ xx 
					_emt xx ⊢ xx 
					_none {} ⊢ a 
					∎ a   
				∐.* ⊢ { } 
					» "???" _ ⊢ xx 
					_emt xx ⊢ xx 
					_some {} ⊢ a 
					∎ a 
		@.glb_etr
			∐* "§§+s8" !| ; ⊢ { {} },p 
				_some p ⊢ a
				∎ a 

				∐* grm_etr grm_etr_lst ⊢ { e l }
					##rev l ⊢ l
					_cns { e l } ⊢ l
					ast.grm_etr l ⊢ l
					prs_vld l ⊢ l 
					_some l ⊢ a
					∎ a
				∐.* glb_etr_res ⊢ { bs }
					_nil {} ⊢ l 
					» "grb_etr 1" _ ⊢ s 
					_cns { { _n _r s } l } ⊢ l 
					prs_err l ⊢ e 
					_some e ⊢ a
					∎ a
			∐* nls "§§" !| ; ⊢ { nn {} },p 
				_some p ⊢ a 
				∎ a
				∐* word mdl_etr_def ⊢ { n d }
					$ d ⊢ 
					∐ prs_vld◂d . 
						ast.mdl_etr { n d } ⊢ r
						prs_vld r ⊢ r 
						_some r ⊢ a
						∎ a 
					∐. prs_err◂err . 
						prs_err err ⊢ err 
						_some err ⊢ a 
						∎ a 
				∐.* mdl_etr_res ⊢ { r } 
					_nil {} ⊢ l 
					» "glb_etr 0.1" _ ⊢ s
					_cns { { _n _r s } l } ⊢ l
					prs_err l ⊢ e 
					_some e ⊢ a 
					∎ a
			∐# rtm_sbl "\n" lc_code ⊢ { {} {} lc }
				$ lc ⊢ 
				∐ prs_vld◂lc . 
					ast.lc_cst lc ⊢ r
					» "" _ ⊢ n 
					ast.lc_etr { n r } ⊢ r 
					prs_vld r ⊢ r 
					_some r ⊢ a
					∎ a
				∐. prs_err◂e .	
					prs_err e ⊢ e 
					_some e ⊢ a 
					∎ a  
			∐* "§" !| ; ⊢ { {} },p 
				_some p ⊢ a 
				∎ a
				∐* lc_etr_body ⊢ { le }
					##prs_vld le ⊢ le 
					_some le ⊢ a
					∎ a
				∐.* glb_etr_res ⊢ { bs }
					_nil {} ⊢ l 
					» "glb_etr 3" _ ⊢ s 
					_cns { { _n _r s } l } ⊢ l 
					prs_err l ⊢ e 
					_some e ⊢ a
					∎ a
			∐.* "¶" !| ; ⊢ { {} },p 
				_some p ⊢ a
				∎ a 
				∐* dt_etr ⊢ { de }
					prs_vld de ⊢ de 
					_some de ⊢ a
					∎ a
				∐.* glb_etr_res ⊢ { bs }
					_nil {} ⊢ l 
					» "glb_etr 4" _ ⊢ s 
					_cns { { _n _r s } l } ⊢ l 
					prs_err l ⊢ e 
					_some e ⊢ a
					∎ a
		@.glb_etr_res 
			∐* glb_etr_res_ch glb_etr_res ⊢ { c r }
				_some {} ⊢ a 
				∎ a
			∐.* ⊢ { }
				_some {} ⊢ a 
				∎ a
		@.mdl_etr_res 
			∐* "∎∎" ⊢ { {} } 
				_some {} ⊢ a
				∎ a 
			∐* "§§" ; ⊢ { {} },p
				_some {} ⊢ a 
				∎ a 
				∐* word "=" name mdl_etr_res ⊢ { w {} n r }
					_some {} ⊢ a 
					∎ a 
				∐.* mdl_etr_res mdl_etr_res ⊢ { r0 r1 } 
					_some {} ⊢ a 
					∎ a 
			∐* _byt mdl_etr_res ⊢ { b r } 
				_some {} ⊢ a 
				∎ a
			∐.* ⊢ { } 
				_some {} ⊢ a   
				∎ a 
		
		@.mdl_etr_def
			∐* "=" !| name nls ⊢ { {} n nn }
				ast.mdl_ln n ⊢ r
				prs_vld r ⊢ r 
				_some r ⊢ a
				∎ a
			∐.* nls mdl_glb_etr ⊢ { nn m }
				$ m ⊢ 
				∐ prs_vld◂m . 
					ast.mdl_def m ⊢ r
					prs_vld r ⊢ r 
					_some r ⊢ a
					∎ a
				∐. prs_err◂err . 
					prs_err err ⊢ err 
					_some err ⊢ a 
					∎ a
		@.mdl_glb_etr
			∐* nls "∎∎" nls ⊢ { nn0 {} nn }
				_nil {} ⊢ l
				prs_vld l ⊢ l 
				_some l ⊢ a
				∎ a
			∐* nls glb_etr mdl_glb_etr ⊢ { nn e gl }
				prs_cct { e gl } ⊢ e0 
				$ e0 ⊢ 
				∐ prs_vld◂{ e gl } . 
					_cns { e gl } ⊢ gl
					prs_vld gl ⊢ gl 
					_some gl ⊢ a
					∎ a
				∐. prs_err◂err . 
					prs_err err ⊢ e 
					_some e ⊢ a 
					∎ a 
			∐. mdl_etr_res ⊢ { r }
				_nil {} ⊢ l 
				» "glb_etr 7" _ ⊢ s 
				_cns { { _n _r s } l } ⊢ l 
				prs_err l ⊢ e 
				_some e ⊢ a
				∎ a
		@.dt_etr
			∐* "@" !| "." dt_etr_body qlq_dt_etr ⊢ { {} {} e q }
				_cns { e q } ⊢ q
				ast.dt_qlq_etr q ⊢ r
				_some r ⊢ a
				∎ a
			∐* dt_etr_body ⊢ { e }
				ast.dt_etr e ⊢ r
				_some r ⊢ a
				∎ a
			∐. ⊢ { }
				» "dt_etr 0" _ ⊢ s
				_emt s ⊢ s
				_none {} ⊢ a
				∎ a
		@.dt_etr_body
			∐* word dt_args "=" !| type ⊢ { w as {} n }
				ast.dt_ln { as n } ⊢ r
				_some { w r } ⊢ a 
				∎ a
			∐.* word dt_args nls "∐" word ":" type dt_etr_coprd ⊢ { w as nn {} wc {} t d }
				_cns { { wc t } d } ⊢ c
				ast.dt_def { as c } ⊢ r
				_some { w r } ⊢ a
				∎ a
		@.dt_args
			∐* "◂" !| var args_tl ⊢ { {} v as }
				_cns { v as } ⊢ as 
				_some as ⊢ o 
				∎ o  
			∐* var !| args_tl ⊢ { v as } 
				_cns { v as } ⊢ as
				_some as ⊢ o 
				∎ o  
			∐.* ⊢ { } 
				_nil {} ⊢ as 
				_some as ⊢ o 
				∎ o
		@.args_tl 
			∐* "," !| var args_tl ⊢ { {} v as } 
				_cns { v as } ⊢ as 
				_some as ⊢ o 
				∎ o 
			∐.* ⊢ { } 
				_nil {} ⊢ as 
				_some as ⊢ o 
				∎ o
		@.qlq_dt_etr
			∐* nls "@" !| "." dt_etr_body qlq_dt_etr ⊢ { nn {} {} p q }
				_cns { p q } ⊢ l
				_some l ⊢ a
				∎ a
			∐.* ⊢ { }
				_nil {} ⊢ l
				_some l ⊢ a
				∎ a
		@.dt_etr_coprd
			∐* nls "∐" !| word ":" type dt_etr_coprd ⊢ { nn {} w {} t d }
				_cns { { w t } d } ⊢ l
				_some l ⊢ a
				∎ a
			∐.* ⊢ { }
				_nil {} ⊢ l
				_some l ⊢ a
				∎ a
		@.lc_etr_body
			∐# nls "@" !| "." word dst_ptn type_rtr "\n" lc_code qlq_etr ⊢ { nn {} {} w dp t {} lc q }
				$ q ⊢ 
				∐ prs_vld◂q . 
					$ lc ⊢ 
						∐ prs_vld◂lc . 
						##rev q ⊢ q
						_cns { { w dp t lc } q } ⊢ r
						ast.lc_qlq_etr r ⊢ r
						prs_vld r ⊢ r 
						_some r ⊢ a
						∎ a
					∐. prs_err◂e . 
						prs_err e ⊢ e 
						_some e ⊢ a 
						∎ a 
				∐. prs_err◂eq . 
					$ lc ⊢ 
						∐ prs_vld◂lc . 
						prs_err eq ⊢ e 
						_some e ⊢ a 
						∎ a 
					∐. prs_err◂e . 
						apnd { eq e } ⊢ e 
						prs_err e ⊢ e 
						_some e ⊢ a 
						∎ a 
			∐* word lc_etr_def ⊢ { n e }
				$ e ⊢ 
				∐ prs_vld◂e . 	
					ast.lc_etr { n e } ⊢ r
					prs_vld r ⊢ r 
					_some r ⊢ a
					∎ a
				∐. prs_err◂e . 
					prs_err e ⊢ e 
					_some e ⊢ a 
					∎ a 
			∐. ⊢ { }
				» "lc_etr_body 0" _ ⊢ s
				_emt s ⊢ s
				_none {} ⊢ a
				∎ a
		@.qlq_etr
			∐# nls "@" !| "." word dst_ptn type_rtr "\n" lc_code qlq_etr ⊢ { nn {} {} w dp t {} lc q }
				prs_cct { q lc } ⊢ e0 
				$ e0 ⊢ 
				∐ prs_vld◂{ q lc } . 
					_cns { { w dp t lc } q } ⊢ q 
					prs_vld q ⊢ q  
					_some q ⊢ a
					∎ a
				∐. prs_err◂e . 
					prs_err e ⊢ e 
					_some e ⊢ a 
					∎ a
			∐.* ⊢ { } 
				_nil {} ⊢ q 
				prs_vld q ⊢ q 
				_some q ⊢ a 
				∎ a 
		@.type_rtr 
			∐# ":" !| type ⊢ { {} t } 
				_some t ⊢ t 
				_some t ⊢ a
				∎ a 
			∐.# ⊢ { }
				_none {} ⊢ t 
				_some t ⊢ a 
				∎ a 
		@.lc_etr_def
			∐# "=" !| cst "\n" ⊢ { {} c {} }
				ast.lc_ln c ⊢ r
				prs_vld r ⊢ r 
				_some r ⊢ a
				∎ a
			∐# "«" !| "\n" lc_code ⊢ { {} {} x }
				$ x ⊢ 
				∐ prs_vld◂x . 
					ast.lc_cst x ⊢ r
					prs_vld r ⊢ r 
					_some r ⊢ a
					∎ a
				∐. prs_err◂e .	
					prs_err e ⊢ e 
					_some e ⊢ a 
					∎ a 
			∐.# dst_ptn type_rtr "\n" lc_code ⊢ { r0 t0 {} x0 }  
				$ x0 ⊢ 
				∐ prs_vld◂x0 . 
					ast.lc_def { r0 t0 x0 } ⊢ r
					prs_vld r ⊢ r 
					_some r ⊢ a
					∎ a
				∐. prs_err◂e . 
					prs_err e ⊢ e 
					_some e ⊢ a 
					∎ a 

		@.grm_etr
			∐.* "@" "." word grm_etr_def ⊢ { {} {} w d }
				_some { w d } ⊢ a
				∎ a 
		@.grm_etr_lst 
			∐ grm_etr grm_etr_lst ⊢ { e l } 
				_cns { e l } ⊢ l 
				_some l ⊢ a 
				∎ a 
			∐. ⊢ { } 
				_nil {} ⊢ l 
				_some l ⊢ a 
				∎ a 
		@.grm_etr_def
			∐* grm_etr_act ⊢ { g }
				ast.grm.act g ⊢ g
				_some g ⊢ a
				∎ a
			∐.* grm_etr_cnc ⊢ { g }
				ast.grm.cnc g ⊢ g
				_some g ⊢ a
				∎ a
		@.grm_etr_act
			∐* grm_ord_end !| grm_rle grm_etr_act_act	⊢ { o l { r0 lc a } }
				ast.grm.act_regs {} ⊢ dl 
				ast.grm.act_end { dl r0 lc o l a } ⊢ e
				_some e ⊢ a
				∎ a
			∐.* grm_ord grm_rle grm_etr_act_act grm_etr_act ⊢ { o l { r0 lc a } g }
				ast.grm.act_regs {} ⊢ dl 
				ast.grm.act_cns { dl r0 lc o l a g } ⊢ e
				_some e ⊢ a
				∎ a
		@.grm_etr_act_act
			∐* ";" "⊢" !| dst_ptn "," dst_ptn lc_code grm_etr_act ⊢ { {} {} r0 {} r1 lc g }
				$ lc ⊢ 
				∐ prs_vld◂lc . 
					_some { r1 g } ⊢ r
					_some { r0 lc r } ⊢ a
					∎ a
				∐. prs_err◂e .
					» "grm_etr_act_act 0" _ ⊢ se 
					_emt se ⊢ se 
					_emt { _n _r } ⊢ a 
					∎| 
			∐.* "⊢" !| dst_ptn lc_code ⊢ { {} r0 lc }
				$ lc ⊢ 
				∐ prs_vld◂lc . 
					_none {} ⊢ r
					_some { r0 lc r } ⊢ a
					∎ a
				∐. prs_err◂e .
					» "grm_etr_act_act 1" _ ⊢ se 
					_emt se ⊢ se 
					_emt { _n _r } ⊢ a 
					∎| 
		@.grm_rle
			∐* "!|" !| grm_rle_cut ⊢ { {} g }
				ast.grm.ptn_cut g ⊢ g
				_some g ⊢ r
				∎ r
			∐* grm_ptn grm_rle ⊢ { h g }
				ast.grm.ptn_seq { h g } ⊢ r
				_some r ⊢ a
				∎ a
			∐.* ⊢ { }
				ast.grm.ptn_end {} ⊢ r
				_some r ⊢ a
				∎ a
		@.grm_rle_cut
			∐* grm_ptn grm_rle_cut ⊢ { p g }
				_cns { p g } ⊢ r
				_some r ⊢ a
				∎ a
			∐.* ⊢ { }
				_nil {} ⊢ r
				_some r ⊢ a
				∎ a
		@.grm_ptn
			∐* "⟦" grm_ptn_atm "⟧" ⊢ { {} p {} }
				ast.grm.lst p ⊢ r
				_some r ⊢ a
				∎ a
			∐.* grm_ptn_atm ⊢ { a }
				ast.grm.atm a ⊢ a
				_some a ⊢ a
				∎ a
		@.grm_ptn_atm
			∐* stg_ltr ⊢ { a }
				ast.grm.s8 a ⊢ a
				_some a ⊢ a
				∎ a
			∐.* name ⊢ { n }
				ast.grm.name n ⊢ a
				_some a ⊢ a
				∎ a
		@.grm_ord
			∐* "∐*" ⊢ { {} }
				ast.grm.synt {} ⊢ r
				_some r ⊢ a
				∎ a
			∐* "∐#" ⊢ { {} }
				ast.grm.line {} ⊢ r
				_some r ⊢ a
				∎ a
			∐.* "∐" ⊢ { {} }
				ast.grm.lex {} ⊢ r
				_some r ⊢ a
				∎ a
		@.grm_ord_end
			∐* "∐.*" ⊢ { {} }
				ast.grm.synt {} ⊢ r
				_some r ⊢ a
				∎ a
			∐* "∐.#" ⊢ { {} }
				ast.grm.line {} ⊢ r
				_some r ⊢ a
				∎ a
			∐.* "∐." ⊢ { {} }
				ast.grm.lex {} ⊢ r
				_some r ⊢ a
				∎ a
		@.grm_etr_cnc
			∐* grm_ord_end !| cnc_cn grm_rle grm_etr_cnc_seq ⊢ { o cn ps g }
				ast.grm.cnc_end { cn o ps g } ⊢ r
				_some r ⊢ a
				∎ a
			∐.* grm_ord cnc_cn grm_rle grm_etr_cnc_seq grm_etr_cnc ⊢ { o cn ps g0 g1 }
				ast.grm.cnc_cns { cn o ps g0 g1 } ⊢ r
				_some r ⊢ a
				∎ a
		@.grm_etr_cnc_seq
			∐* ";" grm_etr_cnc ⊢ { {} g }
				_some g ⊢ a
				_some a ⊢ a
				∎ a
			∐.* ⊢ { }
				_none {} ⊢ r
				_some r ⊢ a
				∎ a
		@.cnc_cn
			∐* word ":" ⊢ { w {} }
				_some w ⊢ r
				_some r ⊢ a
				∎ a
			∐.* ⊢ { }
				_none {} ⊢ r
				_some r ⊢ a
				∎ a		
	∎∎
	§§ rset
			¶ t = _arr◂bl.t 
			§ @.lp0 { v i } 
				∐ i'=64r . 
					∎ v 
				∐. . 
					bl.f {} ⊢ b 
					_set_q { v i b } ⊢ { v i } 
					_inc i ⊢ i 
					lp0 { v i } ⊢| 
			§ ini {} 
				» 64r _ ⊢ n 
				_mk_arr n ⊢ { n v } 
				» 0r _ ⊢ i 
				lp0 { v i } ⊢ v 
				∎ v 
			§ set_t { v0 i } 
				bl.t {} ⊢ b 
				exc_q { v0 i b } ⊢ { v0 i b } 
				∎ { v0 i }
			§ set_f { v0 i } 
				bl.f {} ⊢ b 
				exc_q { v0 i b } ⊢ { v0 i b } 
				∎ { v0 i }
			§ @.and_lp { v0 v1 i }
				∐ i'=64r . 
					∎ { v0 v1 }  
				∐. . 
					_get_q { v0 i } ⊢ { v0 i b0 } 
					_lod_q { v1 i } ⊢ { v1 i b1 }
					bl.and { b0 b1 } ⊢ b2 
					_set_q { v0 i b2 } ⊢ { v0 i } 
					_inc i ⊢ i 
					and_lp { v0 v1 i } ⊢|  
			§ and { v0 v1 } 
				» 0r _ ⊢ i 
				and_lp { v0 v1 i } ⊢|
			§ @.or_lp { v0 v1 i }
				∐ i'=64r . 
					∎ { v0 v1 }  
				∐. . 
					_get_q { v0 i } ⊢ { v0 i b0 } 
					_lod_q { v1 i } ⊢ { v1 i b1 }
					bl.or { b0 b1 } ⊢ b2 
					_set_q { v0 i b2 } ⊢ { v0 i } 
					_inc i ⊢ i 
					or_lp { v0 v1 i } ⊢|  
			§ or { v0 v1 } 
				» 0r _ ⊢ i 
				or_lp { v0 v1 i } ⊢|
			§ @.sub_lp { v0 v1 i }
				∐ i'=64r . 
					∎ { v0 v1 }  
				∐. . 
					_get_q { v0 i } ⊢ { v0 i b0 } 
					_lod_q { v1 i } ⊢ { v1 i b1 }
					bl.sub { b0 b1 } ⊢ b2 
					_set_q { v0 i b2 } ⊢ { v0 i } 
					_inc i ⊢ i 
					sub_lp { v0 v1 i } ⊢|  
			§ sub { v0 v1 } 
				» 0r _ ⊢ i 
				sub_lp { v0 v1 i } ⊢|
			§ @.min_f v 
					» 0r _ ⊢ i 
					min_f_lp { v i } ⊢| 
				@.min_f_lp { v i } 
					∐ i'=64r . 
						∎ { v i } 
					∐. . 
						_lod_q { v i } ⊢ { v i b } 
						$ b ⊢ 
						∐ bl.f◂{} . 
							∎ { v i } 
						∐. bl.t◂{} . 
							_inc i ⊢ i 
							min_f_lp { v i } ⊢| 
			§ @.min_t v 
					» 0r _ ⊢ i 
					min_t_lp { v i } ⊢| 
				@.min_t_lp { v i } 
					∐ i'=64r . 
						∎ { v i } 
					∐. . 
						_lod_q { v i } ⊢ { v i b } 
						$ b ⊢ 
						∐ bl.t◂{} . 
							∎ { v i } 
						∐. bl.f◂{} . 
							_inc i ⊢ i 
							min_f_lp { v i } ⊢| 	
			§ @.max_t v 
					» 0r _ ⊢ i 
					» 0r _ ⊢ j 
					max_t_lp { v i j } ⊢| 
				@.max_t_lp { v i j } 
					∐ i'=64r . 
						∎ { v j } 
					∐. . 
						_lod_q { v i } ⊢ { v i b } 
						$ b ⊢ 
						∐ bl.f◂{} . 
							_inc i ⊢ i 
							max_t_lp { v i j } ⊢| 
						∐. bl.t◂{} . 
							$ i ⊢ i,i0
							_inc i ⊢ i 
							max_t_lp { v i i0 } ⊢| 
			§ @.is_zero_lp { v i }  
				∐ i'=64r .
					bl.t {} ⊢ b 
					∎ { v b } 
				∐. . 
					_lod_q { v i } ⊢ { v i b } 
					$ b ⊢ 
					∐ bl.t◂{} . 
						bl.f {} ⊢ b 
						∎ { v b } 
					∐. bl.f◂{} . 
						_inc i ⊢ i 
						is_zero_lp { v i } ⊢| 
			§ is_zero v 
				» 0r _ ⊢ i 
				is_zero_lp { v i } ⊢ { v b } 
				∎ { v b }
			∎∎
		§§ reg_vs 
			§ @.lp { vs i }  
				∐ i'=8r . 
					∎ vs 
				∐. . 
					bl.t {} ⊢ b 
					exc_q { vs i b } ⊢ { vs i b } 
					_inc i ⊢ i 
					lp { vs i } ⊢| 
			§ f {}
				» 0r _ ⊢ i0 
				rset.ini {} ⊢ vs0 
				lp { vs0 i0 } ⊢|  
			∎∎
		§ alc_vs vs 
			rset.min_f vs ⊢ { vs i0 } 
			bl.t {} ⊢ b
			exc_q { vs i0 b } ⊢ { vs i0 b }
			∎ { vs i0 }
		§§ stt_v 
			¶ @.t r' = RP.t◂(t_atm◂r') 
				@.r 
					∐ r_reg : _r64
					∐ r_stk : _r64 
					∐ r_mem : _s8  
				@.t_atm r'
					∐ hp : { r' hp }
					∐ hp_im : ast.cst_v  
					∐ hp_im_e : _r64 
					∐ stt_adt : { _r64 _r64 t◂r' } 
					∐ pt : { r' r' }
				@.agl_p
					∐ agl_unt : {} 
					∐ agl_hp : hp   
				@.hp 
					∐ ref : ref 
					∐ r64 : {} 
					∐ pv : _r64 
					∐ adt : { _r64 _lst◂hp }
				@.hp_v = _arr◂hp_k
				@.hp_k = { _r64 hp }
				@.ref 
					∐ opq : {}
					∐ arr : hp
					∐ clr : hp
					∐ pt_hp : {} 
					∐ rcd : _lst◂hp 
				@.t_agl
					∐ t_agl_t : _r64   
					∐ t_agl_f : {} 
				@.t_len = _opn◂_r64
				@.t_cf 
					∐ cf_t : {} 
					∐ cf_f : {} 
					∐ cf_p : {}
			§
				@.ptn_of_hp { v0 h0 }
					∐ h0 ⊢ ref◂q0; q0 ⊢ rcd◂l0 .
						ptn_of_hp_lst { v0 l0 } ⊢ { v0 l0 } 
						RP.rcd l0 ⊢ p0 
						∎ { v0 p0 }
					∐ h0 ⊢ ref◂q0; q0 ⊢ pt_hp◂{} . 
						alc_vs v0 ⊢ { v0 m0 } 
						alc_vs v0 ⊢ { v0 m1 }
						pt { m0 m1 } ⊢ p0 
						RP.atm p0 ⊢ p0 
						∎ { v0 p0 }
					∐. . 
						alc_vs v0 ⊢ { v0 m0 }
						hp { m0 h0 } ⊢ a0 
						RP.atm a0 ⊢ p0 
						∎ { v0 p0 } 
				@.ptn_of_hp_lst { v0 l0 } 
					$ l0 ⊢ 
					∐ _cns◂{ h0 l0 } . 
						ptn_of_hp { v0 h0 } ⊢ { v0 p0 } 
						ptn_of_hp_lst { v0 l0 } ⊢ { v0 l0 } 
						_cns { p0 l0 } ⊢ l0 
						∎ { v0 l0 }
					∐. _nil◂{} . 
						_nil {} ⊢ l0 
						∎ { v0 l0 }
			§ 
				@.eq_hp { h0 h1 } 
					∐ h0 ⊢ ref◂q0; h1 ⊢ ref◂q1 .  
						∐ q0 ⊢ opq◂{}; q1 ⊢ opq◂{} . 
							opq {} ⊢ q0 
							opq {} ⊢ q1 
							ref q0 ⊢ h0 
							ref q1 ⊢ h1 
							bl.t {} ⊢ b 
							∎ { h0 h1 b }
						∐ q0 ⊢ rcd◂l0; q1 ⊢ rcd◂l1 . 
							eq_hp_lst { l0 l1 } ⊢ { l0 l1 b } 
							rcd l0 ⊢ q0 
							rcd l1 ⊢ q1 
							ref q0 ⊢ h0 
							ref q1 ⊢ h1 
							∎ { h0 h1 b }
						∐ q0 ⊢ arr◂h0; q1 ⊢ arr◂h1 . 
							eq_hp { h0 h1 } ⊢ { h0 h1 b }
							arr h0 ⊢ q0 
							arr h1 ⊢ q1 
							ref q0 ⊢ h0 
							ref q1 ⊢ h1 
							∎ { h0 h1 b }
						∐ q0 ⊢ clr◂h0; q1 ⊢ clr◂h1 . 
							eq_hp { h0 h1 } ⊢ { h0 h1 b }
							clr h0 ⊢ q0 
							clr h1 ⊢ q1 
							ref q0 ⊢ h0 
							ref q1 ⊢ h1 
							∎ { h0 h1 b }
						∐ q0 ⊢ pt_hp◂{}; q1 ⊢ pt_hp◂{} . 
							pt_hp {} ⊢ q0 
							pt_hp {} ⊢ q1
							ref q0 ⊢ h0 
							ref q1 ⊢ h1 
							bl.t {} ⊢ b 
							∎ { h0 h1 b }
						∐. . 
							bl.f {} ⊢ b 
							ref q0 ⊢ h0 
							ref q1 ⊢ h1 
							∎ { h0 h1 b }
					∐ h0 ⊢ r64◂{}; h1 ⊢ r64◂{} . 
						r64 {} ⊢ h0 
						r64 {} ⊢ h1 
						bl.t {} ⊢ b
						∎ { h0 h1 b }
					∐ h0 ⊢ pv◂q0; h1 ⊢ pv◂q1 .  
						∐ q0'=q1' . 
							pv q0 ⊢ h0 
							pv q1 ⊢ h1 
							bl.t {} ⊢ b 
							∎ { h0 h1 b }
						∐. . 
							pv q0 ⊢ h0 
							pv q1 ⊢ h1 
							bl.f {} ⊢ b 
							∎ { h0 h1 b }
					∐ h0 ⊢ adt◂{ ax0 hl0 }; h1 ⊢ adt◂{ ax1 hl1 } . 
						eq_hp_lst { hl0 hl1 } ⊢ { hl0 hl1 bh }
						∐ ax0'=ax1'; bh ⊢ bl.t◂{} . 
							adt { ax0 hl0 } ⊢ h0 
							adt { ax1 hl1 } ⊢ h1 
							bl.t {} ⊢ b 
							∎ { h0 h1 b }
						∐. . 
							adt { ax0 hl0 } ⊢ h0 
							adt { ax1 hl1 } ⊢ h1 
							bl.f {} ⊢ b 
							∎ { h0 h1 b }
					∐. . 
						bl.f {} ⊢ b 
						∎ { h0 h1 b } 
				@.eq_hp_lst { l0 l1 }
						∐ l0 ⊢ _cns◂{ h0 l0 }; l1 ⊢ _cns◂{ h1 l1 } . 
							eq_hp { h0 h1 } ⊢ { h0 h1 b0 } 
							eq_hp_lst { l0 l1 } ⊢ { l0 l1 b1 } 
							bl.and { b0 b1 } ⊢ b 
							_cns { h0 l0 } ⊢ l0 
							_cns { h1 l1 } ⊢ l1 
							∎ { l0 l1 b }
						∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
							bl.t {} ⊢ b 
							_nil {} ⊢ l0  
							_nil {} ⊢ l1 
							∎ { l0 l1 b }
						∐. . 
							bl.f {} ⊢ b 
							∎ { l0 l1 b }
				§ cf h 
					∐ h ⊢ ref◂q . 
						cf_f {} ⊢ cf 
						ref q ⊢ h 
						∎ { h cf } 
					∐ h ⊢ r64◂{} . 
						cf_t {} ⊢ cf 
						r64 {} ⊢ h 
						∎ { h cf } 
					∐ h ⊢ pv◂ipv . 
						cf_p {} ⊢ cf 
						pv ipv ⊢ h 
						∎ { h cf }
					∐. . 
						» "cf 0" _ ⊢ se 
						_emt se ⊢ se 
						∎| 
				§§ pnt 
					§ hp0 = hp 
					§ @.f p
						$ p ⊢ 
						∐ RP.rcd◂l . 
							lst l ⊢ sl 
							» _^ sl ⊢ sl,sr 
								"{ " 0' "}" // 
							∎ sr 
						∐. RP.atm◂a . 
							$ a ⊢ 					
							∐ hp0◂{ r h } . 
								hp h ⊢ sh
								» _^ r,sh ⊢ r,sh,sr 
									0d' "'" "(= " 1' " )" // 
								∎ sr
							∐ hp_im◂v . 
								ast.pnt_cst_v v ⊢ sv 
								» _^ sv ⊢ sv,sr 
									"%[ " 0' " ]" // 
								∎ sr 
							
							∐ hp_im_e◂i . 
								» _^ i ⊢ i,sr 
									"%[ " 0d' "e' ]" // 
								∎ sr  
							∐ pt◂{ r0 r1 } .
								» _^ r0,r1 ⊢ r0,r1,sr 
									"[< " 0d' "' , " 1d' "' >]" // 
								∎ sr
							∐. stt_adt◂{ c n p } .
								f p ⊢ sp  
								» _^ c,n,sp ⊢ c,n,sp,sr 
									0d' "(<" 1d' ")◂" 2' // 
								∎ sr
						@.hp h
							$ h ⊢ 
							∐ adt◂{ ax l } . 
								hp_lst l ⊢ sl 
								» _^ ax,sl ⊢ ax,sl,sr 
									"a" 0d' "◂ [ " 1' "]" // 
								∎ sr 
							∐ r64◂{} . 
								» _^ _ ⊢ sr 
									"r" // 
								∎ sr 
							∐ ref◂q . 
								$ q ⊢ 
								∐ rcd◂l .  
									hp_lst l ⊢ s
									» _^ s ⊢ s,sr 
										"*{ " 0' "}" // 
									∎ sr 
								∐ arr◂h .
									hp h ⊢ sh 
									» _^ sh ⊢ sh,s 
										"{| " 0' "|}" // 
									∎ s 
								∐ clr◂h . 
									hp h ⊢ sh 
									» _^ sh ⊢ sh,s 
										"{< " 0' ">}" // 
									∎ s
								∐ pt_hp◂{} . 
									» "*[< _ >]" _ ⊢ s 
									∎ s 
								∐. opq◂{} . 
									» "{| l |}" _ ⊢ s 
									∎ s  
							∐. pv◂ipv . 
								» _^ ipv ⊢ ipv,s
									"q" 0d' // 
								∎ s 
					@.hp_lst l 
						$ l ⊢ 
						∐ _cns◂{ h l } . 
							hp h ⊢ sh 
							hp_lst l ⊢ sl 
							» _^ sh,sl ⊢ sh,sl,s 
								0' 1' // 
							∎ s 
						∐. _nil◂{} . 
							» "" _ ⊢ s 
							∎ s   
					@.lst l 
						$ l ⊢ 
						∐ _cns◂{ p l } . 
							f p ⊢ sp 
							lst l ⊢ sl 
							» _^ sp,sl ⊢ sp,sl,sr 
								0' " " 1' // 
							∎ sr 
						∐. _nil◂{} . 
							» "" _ ⊢ sr 
							∎ sr 							
					∎∎	 
				
				§ @.mk_rset { p v }
					$ p ⊢ 
					∐ RP.rcd◂l . 
						mk_rset_lst { l v } ⊢| 
					∐. RP.atm◂a . 
						$ a ⊢ 
						∐ hp◂{ r h } .
							rset.set_t { v r } ⊢ { v r }
							∎ v 
						∐ hp_im◂c . 
							∎ v 
						∐ hp_im_e◂i . 
							∎ v
						∐ pt◂{ r0 r1 } .
							rset.set_t { v r0 } ⊢ { v r0 } 
							rset.set_t { v r1 } ⊢ { v r1 }
							∎ v 
						∐. stt_adt◂{ i n p } . 
							mk_rset { p v } ⊢|
					@.mk_rset_lst { l v } 
						$ l ⊢ 
						∐ _cns◂{ p l } . 
							mk_rset { p v } ⊢ v 
							mk_rset_lst { l v } ⊢ v 
							∎ v 
						∐. _nil◂{} . 
							∎ v 
					@.mk_rset_env { irv l v } 
						$ l ⊢ 
						∐ _cns◂{ i l } .
							_lod_q { irv i } ⊢ { irv i p } 
							mk_rset { p v } ⊢ v 
							mk_rset_env { irv l v } ⊢| 
						∐. _nil◂{} . 
							∎ { irv v }
			§ mk_rset_env_x { irv rl } 
				rset.ini {} ⊢ v0 
				$ rl ⊢ rl,rl0 
				stt_v.mk_rset_env { irv rl0 v0 } ⊢ { irv v0 }
				∎ { irv rl v0 } 
			§ mk_rset_x p 
				$ p ⊢ p,p0
				rset.ini {} ⊢ v  
				stt_v.mk_rset { p0 v } ⊢ v
				∎ { p v } 
			§ r64_reg r
				r64 {} ⊢ h 
				hp { r h } ⊢ k 
				RP.atm k ⊢ p 
				∎ p
			§ r64_im x 
				ast.r64 x ⊢ im 
				hp_im im ⊢ k 
				RP.atm k ⊢ p 
				∎ p 
			§ s8_reg r 
				opq {} ⊢ q 
				ref q ⊢ h 
				hp { r h } ⊢ k 
				RP.atm k ⊢ p 
				∎ p  
			§ s8_im s 
				ast.s8 s ⊢ im 
				hp_im im ⊢ k 
				RP.atm k ⊢ p 
				∎ p 
			∎∎  
		§§ ns
		¶ 
			@.reg_env = _lst◂{ _s8 _opn◂_r64 }
			@.mdl_env = { _lst◂{ _s8 _opn◂_r64 } type_env etr_env reg_env }
			@.etr_env = _lst◂{ _s8 _opn◂_r64 }
			@.type_env = _lst◂{ _s8 _opn◂_r64 }
			@.mdl_vct = _arr◂mdl_k
			@.reg_vct = _arr◂reg_k
			@.etr_vct = _arr◂etr_k
			@.cst_vct = _arr◂cst_k
			@.type_vct = _arr◂var
			@.mdl_k = mdl_env
			@.reg_k = { _s8 _r64 _r64 } 
			## { name pos type-var } 
			@.etr_k
				∐ k_op : { _r64 stt_v.t◂_r64 _r64 stt_v.t◂_r64 }
				∐ k_op_gnr : { ast.DP◂_r64 ast.lc_code◂_r64◂_r64 }
				∐ k_op_axm : _r64
				∐ k_cst_v : ast.cst_v 
				∐ k_ctr : { _r64 _r64 }  
			@.cst_k = _r64
			@.type_k_atm 
				∐ dta : { _r64 _lst◂type_k }
				∐ imp : { type_k type_k }
				∐ abs : { _r64 type_k }
				∐ var : _r64
			@.type_k = RP.t◂type_k_atm
			@.type_aux = { _lst◂_r64 _lst◂type_k } 
			@.type_aux_vct = _arr◂type_aux
			@.type_exp
				∐ type_k : type_k  
				∐ app : { type_exp type_exp }
			@.var
				∐ var_l : _r64
				∐ var_q : _r64 
				∐ var_ln : type_k
				∐ var_i : {} 
		¶ f_t e'
			∐ f_etr : e'
			∐ f_rtm : {}
		§ newvar_i { tv_n tv } 
			var_i {} ⊢ v
			_set_q { tv tv_n v } ⊢ { tv tv_n } 
			$ tv_n ⊢ tv_n,tv_n0 
			_inc tv_n ⊢ tv_n 
			∎ { tv_n tv tv_n0 }
		§ newvar_l { tv_n tv lv } 
			$ lv ⊢ lv,lv0 
			var_l lv0 ⊢ v
			##_emt tv_n ⊢ tv_n 
			_set_q { tv tv_n v } ⊢ { tv tv_n } 
			##_emt tv_n ⊢ tv_n 
			$ tv_n ⊢ tv_n,tv_n0 
			_inc tv_n ⊢ tv_n 
			var tv_n0 ⊢ y 
			RP.atm y ⊢ y 
			∎ { tv_n tv lv y }
		§ newvar_q { tv_n tv lv } 
			$ lv ⊢ lv,lv0 
			var_q lv0 ⊢ v
			_set_q { tv tv_n v } ⊢ { tv tv_n } 
			$ tv_n ⊢ tv_n,tv_n0 
			_inc tv_n ⊢ tv_n 
			var tv_n0 ⊢ y  
			RP.atm y ⊢ y 
			∎ { tv_n tv lv y }
		§ newvar_ln { tv_n tv y } 
			var_ln y ⊢ v 
			_set_q { tv tv_n v } ⊢ { tv tv_n }
			$ tv_n ⊢ tv_n,tv_n0 
			_inc tv_n ⊢ tv_n 
			∎ { tv_n tv tv_n0 }
		§§ t_axm 
  		§§ id 
				§ r64 = 0r 
  			§ s8 = 1r 
  			§ lst = 2r 
  			§ opn = 3r 
				§ arr = 4r  
				§ clr = 5r 
				§ pt = 6r 
				§ r32 = 7r 
				§ r16 = 8r 
				§ r8 = 9r 
  			§ r4 = 10r 
				§ r2 = 11r 

				§ ext = 12r 
				∎∎
			§ N0 = 5r 
			§ unt {} 
				_nil {} ⊢ l 
				RP.rcd l ⊢ t 
				∎ t 
			§ r64 {} 
				_nil {} ⊢ l 
				» id.r64 _ ⊢ a 
				dta { a l } ⊢ y 
				RP.atm y ⊢ y 
				∎ y

			§ s8 {} 
				_nil {} ⊢ l
				» id.s8 _ ⊢ a  
				dta { a l } ⊢ y 
				RP.atm y ⊢ y 
				∎ y 

			§ lst y  
				» id.lst _ ⊢ a   
				_nil {} ⊢ l 
				_cns { y l } ⊢ l 
				dta { a l } ⊢ y
				RP.atm y ⊢ y 
				∎ y 
			§ opn y  
				» id.opn _ ⊢ a 
				_nil {} ⊢ l 
				_cns { y l } ⊢ l
				dta { a l } ⊢ y
				RP.atm y ⊢ y 
				∎ y
			§ arr y 
				_nil {} ⊢ l 
				_cns { y l } ⊢ l 
				» id.arr _ ⊢ a 
				dta { a l } ⊢ y 
				RP.atm y ⊢ y 
				∎ y 
			§ clr y 
				_nil {} ⊢ l 
				_cns { y l } ⊢ l 
				» id.clr _ ⊢ a 
				dta { a l } ⊢ y 
				RP.atm y ⊢ y 
				∎ y 
			§ pt y 
				_nil {} ⊢ l 
				_cns { y l } ⊢ l 
				» id.pt _ ⊢ a 
				dta { a l } ⊢ y 
				RP.atm y ⊢ y 
				∎ y
			§ ext {} 
				_nil {} ⊢ l 
				» id.ext _ ⊢ a 
				dta { a l } ⊢ y 
				RP.atm y ⊢ y 
				∎ y 
			∎∎
		§§ e_axm 
			§ mk_arr = 0r 
			§ exc_q = 1r 
			§ set_q = 2r 
			§ get_q = 3r 
			§ lod_q = 4r 
			
			§ args = 5r 
			
			§ mlc_s8 = 6r 
			§ s8_len = 7r 
			
			§ emt = 8r 
			
			§ inc = 9r 
			§ dec = 10r 
			§ add = 11r 
			§ sub = 12r 
			§ imul = 13r
			
			§ sts = 14r 
			§ lds = 15r 
			§ setge = 16r 
			§ rep_movsb = 17r 
			§ nil = 18r 
			§ cns = 19r 
			§ some = 20r 
			§ none = 21r
			§ in_fn = 22r
			§ emt_s8_to = 23r 
			§ cd = 24r  
			§ byt = 25r

			§ mk_clr = 26r 
			§ alp = 27r 
			§ frp = 28r 
			§ mkp = 29r
			§ dlp = 30r

			§ arr_len = 31r 
			§ arr_of_lst = 32r

			§ scf_d = 33r 
			§ scf_x = 34r  
			∎∎
		§ @.pnt_type_k { tv k } 
			$ k ⊢ 
			∐ RP.rcd◂l .
				pnt_type_k_lst { tv l } ⊢ { tv s } 
				» _^ s ⊢ s,sr 
					"{ " 0' "}" // 
				∎ { tv sr } 
			∐. RP.atm◂ak . 
				$ ak ⊢ 
				∐ dta◂{ a l } . 
					pnt_dta { tv l } ⊢ { tv s }
					pnt_dta_i a ⊢ sa  
					» _^ sa,s ⊢ sa,s,sr 
						0' 1' // 
					∎ { tv sr } 
				∐ imp◂{ k0 k1 } . 
					pnt_type_k { tv k0 } ⊢ { tv s0 }  
					pnt_type_k { tv k1 } ⊢ { tv s1 } 
					» _^ s0,s1 ⊢ s0,s1,sr 
						"(" 0' "→" 1' ")" // 
					∎ { tv sr } 
				∐ abs◂{ a k0 } . 
					pnt_type_k { tv k0 } ⊢ { tv s0 } 
					» _^ a,s0 ⊢ a,s0,sr 
							"\\" 0d' "' . " 1' //
					∎ { tv sr }  
				∐. var◂i . 
					_lod_q { tv i } ⊢ { tv i v } 
					$ v ⊢ 
					∐ var_l◂lv . 
						» _^ i,lv ⊢ i,lv,sr 
							0d' "''" "(" 1d' ")" // 
						∎ { tv sr } 
					∐ var_q◂lv .
						» _^ i,lv ⊢ i,lv,sr 
							0d' "'" "(" 1d' ")" // 
						∎ { tv sr }
					∐ var_i◂{} . 
						» _^ i ⊢ i,sr 
							"?" 0d' // 
						∎ { tv sr }
					∐. var_ln◂kx . 
						pnt_type_k { tv kx } ⊢ { tv sx } 
						» _^ i,sx ⊢ i,sx,sr 
							0d' "'" "(=" 1' ")" // 
						∎ { tv sr }
			@.pnt_type_k_lst { tv l } 
				$ l ⊢ 
				∐ _cns◂{ k0 l } . 
					pnt_type_k { tv k0 } ⊢ { tv s0 } 
					pnt_type_k_lst { tv l } ⊢ { tv sl } 
					» _^ s0,sl ⊢ s0,sl,sr 
						0' " " 1' // 
					∎ { tv sr }  
				∐. _nil◂{} .
					» "" _ ⊢ sr 
					∎ { tv sr }
			@.pnt_dta { tv l } 
				$ l ⊢ 
				∐ _cns◂{ k l } . 
					pnt_type_k { tv k } ⊢ { tv s } 
					pnt_dta { tv l } ⊢ { tv sl } 
					» _^ s,sl ⊢ s,sl,sr 
						1' "◂" 0' // 
					∎ { tv sr } 
				∐. _nil◂{} . 
					» "" _ ⊢ sr 
					∎ { tv sr }  
			@.pnt_dta_i a  
				∐ a'=0r . 
					» "_r64" _ ⊢ s 
					∎ s 
				∐ a'=1r . 
					» "_s8" _ ⊢ s 
					∎ s 
				∐ a'=2r . 
					» "_lst" _ ⊢ s 
					∎ s 
				∐ a'=3r . 
					» "_opn" _ ⊢ s 
					∎ s 
				∐ a'=4r . 
					» "_arr" _ ⊢ s 
					∎ s 
				∐. . 
					» _^ a ⊢ a,s 
						"_t" 0d' // 
					∎ s 
		§ 
			@.chk_pv { tv k0 pl0 } 
				$ k0 ⊢ 
				∐ RP.rcd◂l0 . 
					chk_pv_lst { tv l0 pl0 } ⊢| 
				∐. RP.atm◂a0 . 
					$ a0 ⊢ 
					∐ dta◂{ ax0 ql0 } . 
						chk_pv_lst { tv ql0 pl0 } ⊢| 
					∐ imp◂{ k0 k1 } . 
						chk_pv { tv k0 pl0 } ⊢ { tv pl0 }
						chk_pv { tv k1 pl0 } ⊢ { tv pl0 }
						∎ { tv pl0 } 
					∐ abs◂{ vv0 k0 } . 
						∎| 
					∐. var◂i0 . 
						_lod_q { tv i0 } ⊢ { tv i0 v1 } 
						$ v1 ⊢ 
						∐ var_ln◂y2 . 
							chk_pv { tv y2 pl0 } ⊢| 
						∐ var_q◂lv1 . 
							lst.add { pl0 i0 } ⊢ pl0 
							∎ { tv pl0 }
						∐ var_l◂lv1 . 
							∎| 
						∐. var_i◂{} . 
							∎| 
			@.chk_pv_lst { tv l0 pl0 } 
				$ l0 ⊢ 
				∐ _cns◂{ k0 l0 } . 
					chk_pv { tv k0 pl0 } ⊢ { tv pl0 } 
					chk_pv_lst { tv l0 pl0 } ⊢| 
				∐. _nil◂{} . 
					∎ { tv pl0 }
		§§ eq_t 
			§ 
				@.f { tv y0 y1 }
					∐ y0 ⊢ RP.atm◂ak; ak ⊢ var◂i0 . 
						_lod_q { tv i0 } ⊢ { tv i0 v0 } 
						∐ v0 ⊢ var_ln◂y2 . 
							f { tv y2 y1 } ⊢|
						∐ v0 ⊢ var_q◂lv0 . 
							l0 { tv i0 y1 } ⊢| 
						∐. .  
							bl.f {} ⊢ b 
							∎ { tv b }
					∐ y1 ⊢ RP.atm◂ak; ak ⊢ var◂i1 . 
						_lod_q { tv i1 } ⊢ { tv i1 v0 } 
						∐ v0 ⊢ var_ln◂y2 . 
							f { tv y0 y2 } ⊢|
						∐ v0 ⊢ var_q◂lv . 
							l0 { tv i1 y0 } ⊢|
						∐. .  
							bl.f {} ⊢ b 
							∎ { tv b }
					∐ y0 ⊢ RP.rcd◂r0 ; y1 ⊢ RP.rcd◂r1 . 
						f_lst { tv r0 r1 } ⊢| 
					∐ y0 ⊢ RP.atm◂ak0; ak0 ⊢ dta◂{ a0 l0 }; y1 ⊢ RP.atm◂ak1; ak1 ⊢ dta◂{ a1 l1 } . 
						∐ a0'=a1' . 
							f_lst { tv l0 l1 } ⊢|
						∐. . 
							bl.f {} ⊢ b 
							∎ { tv b }
					∐ y0 ⊢ RP.atm◂ak0; ak0 ⊢ imp◂{ y0_0 y0_1 }; y1 ⊢ RP.atm◂ak1; ak1 ⊢ imp◂{ y1_0 y1_1 } . 
						f { tv y0_0 y1_0 } ⊢ { tv b }   
						∐ b ⊢ bl.t◂{} . 
							f { tv y0_1 y1_1 } ⊢|
						∐. . 
							∎ { tv b }
					∐. . 
						bl.f {} ⊢ b 
						∎ { tv b }
			@.l0 { tv i0 y1 } 
				∐ y1 ⊢ RP.atm◂a1; a1 ⊢ var◂i1 . 
					_lod_q { tv i1 } ⊢ { tv i1 v0 } 
					∐ v0 ⊢ var_ln◂y2 . 
						l0 { tv i0 y2 } ⊢|
					∐ v0 ⊢ var_q◂lv0 . 
						∐ i0'=i1' . 
							bl.t {} ⊢ b 
							∎ { tv b }
						∐. . 
							bl.f {} ⊢ b 
							∎ { tv b }
					∐. .  
						bl.f {} ⊢ b 
						∎ { tv b }
				∐. . 
					bl.f {} ⊢ b 
					∎ { tv b }
			@.f_lst { tv l0 l1 }
				∐ l0 ⊢ _cns◂{ y0 l0 }; l1 ⊢ _cns◂{ y1 l1 } . 
					f { tv y0 y1 } ⊢ { tv b }
					∐ b ⊢ bl.t◂{} .  
						f_lst { tv l0 l1 } ⊢| 
					∐. .
						∎ { tv b }
				∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
					bl.t {} ⊢ b 
					∎ { tv b }  
				∐. . 
					bl.f {} ⊢ b 
					∎ { tv b } 		
			∎∎
		§§ cmp_t
			§ 
				@.f { tv y0 y1 cl }
					∐ y0 ⊢ RP.atm◂ak; ak ⊢ var◂i0 . 
						_lod_q { tv i0 } ⊢ { tv i0 v0 } 
						∐ v0 ⊢ var_ln◂y2 . 
							f { tv y2 y1 cl } ⊢|
						∐. .  
							bl.f {} ⊢ b 
							∎ { tv b cl }
					∐ y1 ⊢ RP.atm◂ak; ak ⊢ var◂i1 . 
						_lod_q { tv i1 } ⊢ { tv i1 v0 } 
						∐ v0 ⊢ var_ln◂y2 . 
							f { tv y0 y2 cl } ⊢|
						∐ v0 ⊢ var_q◂lv . 
							assoc { cl i1 } ⊢ { cl i1 o } 
							∐ o ⊢ _some◂yt . 
								eq_t.f { tv yt y0 } ⊢ { tv bt }  
								∎ { tv bt cl }
							∐. . 
								_some y0 ⊢ o0 
								_cns { { i1 o0 } cl } ⊢ cl 
								bl.t {} ⊢ b 
								∎ { tv b cl } 
						∐. .  
							bl.f {} ⊢ b 
							∎ { tv b cl }
					∐ y0 ⊢ RP.rcd◂r0 ; y1 ⊢ RP.rcd◂r1 . 
						f_lst { tv r0 r1 cl } ⊢| 
					∐ y0 ⊢ RP.atm◂ak0; ak0 ⊢ dta◂{ a0 l0 }; y1 ⊢ RP.atm◂ak1; ak1 ⊢ dta◂{ a1 l1 } . 
						∐ a0'=a1' . 
							f_lst { tv l0 l1 cl } ⊢|
						∐. . 
							bl.f {} ⊢ b 
							∎ { tv b cl }
					∐ y0 ⊢ RP.atm◂ak0; ak0 ⊢ imp◂{ y0_0 y0_1 }; y1 ⊢ RP.atm◂ak1; ak1 ⊢ imp◂{ y1_0 y1_1 } . 
						f { tv y0_0 y1_0 cl } ⊢ { tv b cl }   
						∐ b ⊢ bl.t◂{} . 
							f { tv y0_1 y1_1 cl } ⊢|
						∐. . 
							∎ { tv b cl }
					∐. . 
						bl.f {} ⊢ b 
						∎ { tv b cl }
			@.f_lst { tv l0 l1 cl }
				∐ l0 ⊢ _cns◂{ y0 l0 }; l1 ⊢ _cns◂{ y1 l1 } . 
					f { tv y0 y1 cl } ⊢ { tv b cl }
					∐ b ⊢ bl.t◂{} .  
						f_lst { tv l0 l1 cl } ⊢| 
					∐. .
						∎ { tv b cl }
				∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
					bl.t {} ⊢ b 
					∎ { tv b cl }  
				∐. . 
					bl.f {} ⊢ b 
					∎ { tv b cl } 				
			∎∎
		§ @.find_gf { tv gfl i0 y0 } 
			$ gfl ⊢ 
			∐ _cns◂{ { lb i1 y1 rsp_s p0 rsp_d p1 } gfl } . 
				∐ i0'=i1' . 
					##» "find_gf D0" _ ⊢ dd0
					##_emt dd0 ⊢ _ 
					$ y0 ⊢ y0,y00 
					$ y1 ⊢ y1,y10
					_nil {} ⊢ cl
					cmp_t.f { tv y00 y10 cl } ⊢ { tv b cl } 
					∐ b ⊢ bl.t◂{} . 
						$ { lb i1 y1 rsp_s p0 rsp_d p1 } ⊢ A0,A1 
						_cns { A0 gfl } ⊢ gfl 
						_some A1 ⊢ A1 
						∎ { tv gfl i0 y0 A1 }
					∐. . 
						find_gf { tv gfl i0 y0 } ⊢ { tv gfl i0 y0 o0 } 
						$ { lb i1 y1 rsp_s p0 rsp_d p1 } ⊢ A0  
						_cns { A0 gfl } ⊢ gfl 
						∎ { tv gfl i0 y0 o0 }
				∐. . 
					##	» "find_gf D1" _ ⊢ dd0
					##_emt dd0 ⊢ _ 
					find_gf { tv gfl i0 y0 } ⊢ { tv gfl i0 y0 o0 } 
					$ { lb i1 y1 rsp_s p0 rsp_d p1 } ⊢ A0  
					_cns { A0 gfl } ⊢ gfl 
					∎ { tv gfl i0 y0 o0 }
			∐. _nil◂{} . 
				_nil {} ⊢ gfl 
				_none {} ⊢ o0 
				∎ { tv gfl i0 y0 o0 }
		§ @.occurs { tv i0 lv0 y1 } 
			∐ y1 ⊢ RP.rcd◂l1 . 
				occurs_lst { tv i0 lv0 l1 } ⊢| 
			∐ y1 ⊢ RP.atm◂ak; ak ⊢ dta◂{ a1 l1 } . 
				occurs_lst { tv i0 lv0 l1 } ⊢| 
			∐ y1 ⊢ RP.atm◂ak; ak ⊢ imp◂{ y1_0 y1_1 } . 
				occurs { tv i0 lv0 y1_0 } ⊢ { tv i0 lv0 } 
				occurs { tv i0 lv0 y1_1 } ⊢ { tv i0 lv0 } 
				∎ { tv i0 lv0 } 
			∐ y1 ⊢ RP.atm◂ak; ak ⊢ var◂i1 . 
				∐ i0'=i1' . 
					_emt { i0 lv0 } ⊢ { i0 lv0 } 
					∎| 
				∐. . 
					_lod_q { tv i1 } ⊢ { tv i1 v1 } 
					$ v1 ⊢ 
					∐ var_ln◂y2 . 
						occurs { tv i0 lv0 y2 } ⊢| 
					∐ var_l◂lv1 . 
						_setge { lv0 lv1 } ⊢ { lv0 lv1 b }
						∐ b'=0r . 
							$ lv0 ⊢ lv0,lv0_0 
							_get_q { tv i1 } ⊢ { tv i1 vt } 
							var_l lv0_0 ⊢ v2 
							_set_q { tv i1 v2 } ⊢ { tv i1 } 
							∎ { tv i0 lv0 } 
						∐. . 
							∎ { tv i0 lv0 }
					∐ var_i◂{} . 
						##» "occurs 17" _ ⊢ se 
						##_emt se ⊢ se 
						##∎| 
						∎ { tv i0 lv0 } 
				
					∐. var_q◂lv1 .
						_emt { i1 lv1 } ⊢ a 
						» "occurs 0" _ ⊢ se 
						_emt se ⊢ se 
						∎| 
			∐. . 
				_emt { i0 lv0 } ⊢ { i0 lv0 } 
				» "occurs 1" _ ⊢ se 
				_emt se ⊢ se 
				∎|
			@.occurs_lst { tv i0 lv0 l1 } 
				$ l1 ⊢ 
				∐ _cns◂{ y1 l1 } . 
					occurs { tv i0 lv0 y1 } ⊢ { tv i0 lv0 } 
					occurs_lst { tv i0 lv0 l1 } ⊢| 
				∐. _nil◂{} . 
					∎ { tv i0 lv0 } 
		§§ unify 
		§ 
			@.f { tv y0 y1 }
				##$ y0 ⊢ y0,y00
				##$ y1 ⊢ y1,y10
				##pnt_type_k { tv y00 } ⊢ { tv y0s } 
				##pnt_type_k { tv y10 } ⊢ { tv y1s } 
				##_emt { y0s y1s } ⊢ _
				##» "unify d0" _ ⊢ se 
				##_emt se ⊢ _
				∐ y0 ⊢ RP.atm◂ak; ak ⊢ var◂i0 . 
					f_l0 { tv i0 y1 } ⊢| 
				∐ y1 ⊢ RP.atm◂ak; ak ⊢ var◂i1 . 
					f_l0 { tv i1 y0 } ⊢| 
				∐ y0 ⊢ RP.rcd◂r0 ; y1 ⊢ RP.rcd◂r1 . 
					f_lst { tv r0 r1 } ⊢| 
				∐ y0 ⊢ RP.atm◂ak0; ak0 ⊢ dta◂{ a0 l0 }; y1 ⊢ RP.atm◂ak1; ak1 ⊢ dta◂{ a1 l1 } . 
					∐ a0'=a1' . 
						f_lst { tv l0 l1 } ⊢|
					∐. . 
						» "unify 0" _ ⊢ se 
						pnt_type_k_lst { tv l0 } ⊢ { tv l0s } 
						pnt_type_k_lst { tv l1 } ⊢ { tv l1s } 
						pnt_dta_i a0 ⊢ a0s 
						pnt_dta_i a1 ⊢ a1s 
						_emt { a0s l0s a1s l1s } ⊢ a
						_emt se ⊢ se 
						∎| 
				∐ y0 ⊢ RP.atm◂ak0; ak0 ⊢ imp◂{ y0_0 y0_1 }; y1 ⊢ RP.atm◂ak1; ak1 ⊢ imp◂{ y1_0 y1_1 } . 
					f { tv y0_0 y1_0 } ⊢ tv  
					f { tv y0_1 y1_1 } ⊢|
				∐. . 
					pnt_type_k { tv y0 } ⊢ { tv y0s } 
					pnt_type_k { tv y1 } ⊢ { tv y1s } 
					_emt { y0s y1s } ⊢ { y0s y1s } 
					» "unify 1" _ ⊢ se 
					_emt se ⊢ se 
					∎|
			@.f_lst { tv l0 l1 }
				∐ l0 ⊢ _cns◂{ y0 l0 }; l1 ⊢ _cns◂{ y1 l1 } . 
					f { tv y0 y1 } ⊢ tv 
					f_lst { tv l0 l1 } ⊢| 
				∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
					∎ tv 
				∐. . 
					» "unify.f_lst 2" _ ⊢ se 
					_emt se ⊢ se 
					_emt { l0 l1 } ⊢ { l0 l1 }
					∎|  
				
			@.f_l0 { tv i0 y1 }   
				_lod_q { tv i0 } ⊢ { tv i0 v0 } 
				∐ v0 ⊢ var_ln◂y2 . 
					f { tv y2 y1 } ⊢|
				∐ v0 ⊢ var_l◂lv .  
					f_l1 { tv i0 lv y1 } ⊢|
				∐. . 
					» "unify 3" _ ⊢ se 
					_emt se ⊢ se 
					∎|  
			@.f_l1 { tv i0 lv y1 } 
				∐ y1 ⊢ RP.atm◂ak1; ak1 ⊢ var◂i1 . 
					∐ i0'=i1' . 
						∎ tv 
					∐. .
						_lod_q { tv i1 } ⊢ { tv i1 v1 }
						∐ v1 ⊢ var_ln◂y2 . 
							f_l1 { tv i0 lv y2 } ⊢|  
						∐ v1 ⊢ var_l◂lv1 . 
							_setge { lv lv1 } ⊢ { lv lv1 b }
							∐ b'=0r .  
								_get_q { tv i1 } ⊢ { tv i1 vt } 
								var i0 ⊢ yv 
								RP.atm yv ⊢ yv 
								var_ln yv ⊢ v2 
								_set_q { tv i1 v2 } ⊢ { tv i1 } 
								∎ tv 
							∐. . 
								_get_q { tv i0 } ⊢ { tv i0 vt } 
								var i1 ⊢ yv 
								RP.atm yv ⊢ yv 
								var_ln yv ⊢ v2 
								_set_q { tv i0 v2 } ⊢ { tv i0 } 
								∎ tv
						∐. . 
							» "unify 4" _ ⊢ se 
							_emt se ⊢ se 
							∎|  
				∐. .  
					$ y1 ⊢ y1,y1_0 
					occurs { tv i0 lv y1 } ⊢ { tv i0 lv }
					_get_q { tv i0 } ⊢ { tv i0 vt }
					var_ln y1_0 ⊢ vy 
					_set_q { tv i0 vy } ⊢ { tv i0 }  
					∎ tv
			∎∎ 
		§ @.unifys { tv y0 ys } 
			$ ys ⊢ 
			∐ _cns◂{ %y1 %ys } . 
				$ y0 ⊢ y0,y00 
				unify.f { tv y0 y1 } ⊢ tv 
				unifys { tv y00 ys } ⊢|
			∐. _nil◂{} . 
				∎ { tv y0 } 	
		§ 
			@.inst_al { tv_n tv lv y al } 
			$ y ⊢
			∐ RP.rcd◂l . 
				inst_lst { tv_n tv lv l al } ⊢ { tv_n tv lv l al } 
				RP.rcd l ⊢ y 
				∎ { tv_n tv lv y al } 
			∐. RP.atm◂ak . 
				$ ak ⊢ 
				∐ dta◂{ a l } . 
					inst_lst { tv_n tv lv l al } ⊢ { tv_n tv lv l al }
					dta { a l } ⊢ y 
					RP.atm y ⊢ y 
					∎ { tv_n tv lv y al } 
				∐ imp◂{ y0 y1 } . 
					inst_al { tv_n tv lv y0 al } ⊢ { tv_n tv lv y0 al } 
					inst_al { tv_n tv lv y1 al } ⊢ { tv_n tv lv y1 al } 
					imp { y0 y1 } ⊢ y2 
					RP.atm y2 ⊢ y2 
					∎ { tv_n tv lv y2 al } 
				∐ abs◂{ a0 y0 } . 
					assoc { al a0 } ⊢ { al a0 o } 
					$ o ⊢ 
					∐ _none◂{} . 
						$ a0 ⊢ a0,a0_0 
						newvar_i { tv_n tv } ⊢ { tv_n tv ia }
						$ ia ⊢ ia,ia0 
						_some ia ⊢ o 
						_cns { { a0 o } al } ⊢ al  
						inst_al { tv_n tv lv y0 al } ⊢ { tv_n tv lv y0 al } 
						_none {} ⊢ o 
						_cns { { a0_0 o } al } ⊢ al 
						abs { ia0 y0 } ⊢ y0 
						RP.atm y0 ⊢ y0 
						∎ { tv_n tv lv y0 al }
					∐. _some◂v . 
						» "inst 6" _ ⊢ se 
						_emt se ⊢ se 
						∎|  
				∐. var◂i0 . 
					assoc { al i0 } ⊢ { al i0 o } 
					$ o ⊢ 
					∐ _some◂i1 . 
						var i1 ⊢ y0
						RP.atm y0 ⊢ y0 
						∎ { tv_n tv lv y0 al } 
					∐. _none◂{} . 
						_lod_q { tv i0 } ⊢ { tv i0 v0 } 
						∐ v0 ⊢ var_ln◂y0 . 
							inst_al { tv_n tv lv y0 al } ⊢|
						∐ v0 ⊢ var_q◂lvq .
								##_emt tv_n ⊢ tv_n 
							$ tv_n ⊢ tv_n,tv_n_0
							newvar_l { tv_n tv lv } ⊢ { tv_n tv lv y0 } 
							_some tv_n_0 ⊢ o 
							_cns { { i0 o } al } ⊢ al  
							∎ { tv_n tv lv y0 al }  
						∐ v0 ⊢ var_i◂{} . 
							» "inst 4" _ ⊢ se 
							_emt se ⊢ se 
							∎| 
						∐. . 
							var i0 ⊢ y 
							RP.atm y ⊢ y 
							∎ { tv_n tv lv y al }
		@.inst_lst { tv_n tv lv l al } 
			$ l ⊢ 
			∐ _cns◂{ y l } . 
				inst_al { tv_n tv lv y al } ⊢ { tv_n tv lv y al } 
				inst_lst { tv_n tv lv l al } ⊢ { tv_n tv lv l al } 
				_cns { y l } ⊢ l 
				∎ { tv_n tv lv l al }
			∐. _nil◂{} . 
				_nil {} ⊢ l
				∎ { tv_n tv lv l al }
		§ inst { tv_n tv lv y } 
			_nil {} ⊢ al 
			inst_al { tv_n tv lv y al } ⊢ { tv_n tv lv y al } 
			∎ { tv_n tv lv y }   
		§ @.gen { tv_n tv lv y } 
			##_emt y ⊢ y 
			##» "enter gen" _ ⊢ sxe0 
			##_emt sxe0 ⊢ sxe0
			$ y ⊢ 
			∐ RP.rcd◂l . 
				gen_lst { tv_n tv lv l } ⊢ { tv_n tv lv l }
				RP.rcd l ⊢ y 
				∎ { tv_n tv lv y } 
			∐. RP.atm◂ak . 
				$ ak ⊢ 
				∐ dta◂{ a l } . 
					gen_lst { tv_n tv lv l } ⊢ { tv_n tv lv l }
					dta { a l } ⊢ y
					RP.atm y ⊢ y 
					∎ { tv_n tv lv y }
				∐ imp◂{ y0 y1 } . 
					gen { tv_n tv lv y0 } ⊢ { tv_n tv lv y0 } 
					gen { tv_n tv lv y1 } ⊢ { tv_n tv lv y1 } 
					imp { y0 y1 } ⊢ y 
					RP.atm y ⊢ y 
					∎ { tv_n tv lv y } 
				∐ abs◂{ a y0 } . 
					gen { tv_n tv lv y0 } ⊢ { tv_n tv lv y0 } 
					abs { a y0 } ⊢ y
					RP.atm y ⊢ y 
					∎ { tv_n tv lv y }
				∐. var◂i . 
					_lod_q { tv i } ⊢ { tv i v } 
					$ v ⊢ 
					∐ var_ln◂y1 . 
						gen { tv_n tv lv y1 } ⊢|
					∐ var_l◂lv1 .
						_setge { lv lv1 } ⊢ { lv lv1 b } 
						∐ b'=0r .
							_get_q { tv i } ⊢ { tv i vt } 
							$ lv ⊢ lv,lv_0 
							var_q lv_0 ⊢ vq 
							_set_q { tv i vq } ⊢ { tv i } 
							var i ⊢ y  
							RP.atm y ⊢ y 
							∎ { tv_n tv lv y }
						∐. . 
							var i ⊢ y 
							RP.atm y ⊢ y 
							∎ { tv_n tv lv y }
					∐ var_q◂lv1 . 
						var i ⊢ y  
						RP.atm y ⊢ y 
						∎ { tv_n tv lv y } 
					∐. var_i◂{} . 
						var i ⊢ y  
						RP.atm y ⊢ y 
						∎ { tv_n tv lv y } 
			@.gen_lst { tv_n tv lv l } 
				$ l ⊢ 
				∐ _cns◂{ y l } .
					gen { tv_n tv lv y } ⊢ { tv_n tv lv y } 
					gen_lst { tv_n tv lv l } ⊢ { tv_n tv lv l } 
					_cns { y l } ⊢ l 
					∎ { tv_n tv lv l } 
				∐. _nil◂{} . 
					_nil {} ⊢ l 
					∎ { tv_n tv lv l } 
		§ iug { tv_n tv lv y0 y1 } 
			_inc lv ⊢ lv 
			inst { tv_n tv lv y0 } ⊢ { tv_n tv lv y0 } 
			inst { tv_n tv lv y1 } ⊢ { tv_n tv lv y1 } 
			$ y0 ⊢ y0,y00 
			$ y1 ⊢ y1,y10
			unify.f { tv y00 y10 } ⊢ tv
			_dec lv ⊢ lv 
			gen { tv_n tv lv y0 } ⊢ { tv_n tv lv y0 }
			∎ { tv_n tv lv y0 y1 }  
		§ iug_imp { tv_n tv lv ys yd y1 } 
			_inc lv ⊢ lv 
			inst { tv_n tv lv ys } ⊢ { tv_n tv lv ys }
			inst { tv_n tv lv yd } ⊢ { tv_n tv lv yd } 
			inst { tv_n tv lv y1 } ⊢ { tv_n tv lv y1 }
			$ ys ⊢ ys,ys0
			$ yd ⊢ yd,yd0 
			imp { ys0 yd0 } ⊢ yi 
			RP.atm yi  ⊢ yi 
			$ y1 ⊢ y1,y10
			unify.f { tv yi y10 } ⊢ tv
			_dec lv ⊢ lv 
			gen { tv_n tv lv y1 } ⊢ { tv_n tv lv y1 }
			∎ { tv_n tv lv ys yd y1 }  
		§ 
			@.inst_cl { tv_n tv y cl } 
				$ y ⊢
				∐ RP.rcd◂l . 
					inst_cl_lst { tv_n tv l cl } ⊢ { tv_n tv l cl } 
					RP.rcd l ⊢ y 
					∎ { tv_n tv y cl } 
				∐. RP.atm◂ak . 
					$ ak ⊢ 
					∐ dta◂{ a l } . 
						inst_cl_lst { tv_n tv l cl } ⊢ { tv_n tv l cl }
						dta { a l } ⊢ y 
						RP.atm y ⊢ y 
						∎ { tv_n tv y cl } 
					∐ imp◂{ y0 y1 } . 
						inst_cl { tv_n tv y0 cl } ⊢ { tv_n tv y0 cl } 
						inst_cl { tv_n tv y1 cl } ⊢ { tv_n tv y1 cl } 
						imp { y0 y1 } ⊢ y2 
						RP.atm y2 ⊢ y2 
						∎ { tv_n tv y2 cl } 
					∐ abs◂{ a0 y0 } . 
						∎| 
					∐. var◂i0 . 
						##» "inst_cl E0" _ ⊢ ee0 
						##_emt ee0 ⊢ ee0 
						_lod_q { tv i0 } ⊢ { tv i0 v0 } 
						##» "inst_cl E1" _ ⊢ ee1 
						##_emt ee1 ⊢ ee1 
						∐ v0 ⊢ var_ln◂y0 . 
							inst_cl { tv_n tv y0 cl } ⊢|
						∐ v0 ⊢ var_q◂lvq .
							assoc { cl i0 } ⊢ { cl i0 o } 
							$ o ⊢ 
							∐ _some◂i1 . 
								var i1 ⊢ ya 
								RP.atm ya ⊢ ya 
								∎ { tv_n tv ya cl } 
							∐. _none◂{} . 
								var i0 ⊢ ya 
								RP.atm ya ⊢ ya 
								∎ { tv_n tv ya cl }  
						∐ v0 ⊢ var_i◂{} . 
							» "inst_cl 5" _ ⊢ se 
							_emt se ⊢ se 
							∎|
						∐. . 
							» "inst_cl 4" _ ⊢ se 
							_emt se ⊢ se 
							∎| 
			@.inst_cl_lst { tv_n tv l cl } 
				$ l ⊢ 
				∐ _cns◂{ y l } . 
					inst_cl { tv_n tv y cl } ⊢ { tv_n tv y cl } 
					inst_cl_lst { tv_n tv l cl } ⊢ { tv_n tv l cl } 
					_cns { y l } ⊢ l 
					∎ { tv_n tv l cl }
				∐. _nil◂{} . 
					_nil {} ⊢ l
					∎ { tv_n tv l cl }
		\[
		§ inst_gen { tv_n tv y al } 
			» 1r _ ⊢ lv 
			inst_al { tv_n tv lv y al } ⊢ { tv_n tv lv y al } 
			_dec lv ⊢ lv 
			gen { tv_n tv lv y } ⊢ { tv_n tv lv y } 
			∎ { tv_n tv y al } 
		\]
		§§ mk_t_aux 
			§ @.f { tv_n tv tav a l } 
					_lod_q { tav a } ⊢ { tav a { s o } } 
					$ o ⊢ 
					∐ _some◂{ as r pl hl } .
						_nil {} ⊢ al 
						f0 { tv_n tv l as al } ⊢ { tv_n tv al }  
						» 1r _ ⊢ lv 
						inst_lst { tv_n tv lv r al } ⊢ { tv_n tv lv r al }
						_dec lv ⊢ lv 
						gen_lst { tv_n tv lv r } ⊢ { tv_n tv lv r }
						_some r ⊢ o 
						∎ { tv_n tv tav { s o } }
					∐. _none◂{} . 
						_none {} ⊢ o 
						∎ { tv_n tv tav { s o } }
				@.f0 { tv_n tv l r al } 
					∐ l ⊢ _cns◂{ hl l }; r ⊢ _cns◂{ hr r } . 	
						newvar_ln { tv_n tv hl } ⊢ { tv_n tv t0 } 
						_some t0 ⊢ o 
						_cns { { hr o } al } ⊢ al 
						f0 { tv_n tv l r al } ⊢|
					∐ l ⊢ _nil◂{}; r ⊢ _nil◂{} . 
						∎ { tv_n tv al }
					∐. . 
						» "inst_t_aux 0" _ ⊢ se 
						_emt se ⊢ se 
						∎|  
			∎∎
		§§ alc_type_k 
			§ @.hp { pv_n al tav tv_n tv t0 }
				##» "enter hp" _ ⊢ sd0 
				##_emt sd0 ⊢ sd0 
				$ t0 ⊢ 
				∐ RP.rcd◂l . 
					∐ l ⊢ _nil◂{} . 
						_nil {} ⊢ l 
						stt_v.rcd l ⊢ h
						stt_v.ref h ⊢ h  
						∎ { pv_n al tav tv_n tv h }
					∐. . 
						hp_lst { pv_n al tav tv_n tv l } ⊢ { pv_n al tav tv_n tv l }
						stt_v.rcd l ⊢ r 
						stt_v.ref r ⊢ h 
						∎ { pv_n al tav tv_n tv h }
				∐. RP.atm◂ak . 
					$ ak ⊢ 
					∐ dta◂{ a l } . 	
						∐ a'=t_axm.id.arr; l ⊢ _cns◂{ y l }; l ⊢ _nil◂{} . 
							hp { pv_n al tav tv_n tv y } ⊢ { pv_n al tav tv_n tv ha }
							stt_v.arr ha ⊢ h0  
							stt_v.ref h0 ⊢ h0 
							∎ { pv_n al tav tv_n tv h0 }
						∐ a'=t_axm.id.s8; l ⊢ _nil◂{} . 
							stt_v.opq {} ⊢ h0 
							stt_v.ref h0 ⊢ h0 
							∎ { pv_n al tav tv_n tv h0 }
						∐ a'=t_axm.id.r64; l ⊢ _nil◂{} . 
							stt_v.r64 {} ⊢ h0 
							∎ { pv_n al tav tv_n tv h0 }    
						∐. .
							hp_lst { pv_n al tav tv_n tv l } ⊢ { pv_n al tav tv_n tv l }
							stt_v.adt { a l } ⊢ h0
							∎ { pv_n al tav tv_n tv h0 } 
					∐ var◂i . 
						_lod_q { tv i } ⊢ { tv i v }
						∐ v ⊢ var_ln◂k . 
							hp { pv_n al tav tv_n tv k } ⊢| 
						∐. .
							assoc { al i } ⊢ { al i o } 
							∐ o ⊢ _some◂pvi . 
								stt_v.pv pvi ⊢ h 
								∎ { pv_n al tav tv_n tv h } 
							∐. . 
								$ pv_n ⊢ pv_n,pvi 
								$ pvi ⊢ pvi,pvi0 
								_some pvi0 ⊢ o0 
								_cns { { i o0 } al } ⊢ al 
								_inc pv_n ⊢ pv_n 
								stt_v.pv pvi ⊢ h 
								∎ { pv_n al tav tv_n tv h } 	
					∐ abs◂{ a k0 } . 
						» "hp abs" _ ⊢ se 
						_emt se ⊢ se 
						∎|  
					∐. imp◂{ k0 k1 } .
						» "hp imp" _ ⊢ se 
						_emt se ⊢ se 
						∎|
				@.hp_lst { pv_n al tav tv_n tv l } 
					$ l ⊢ 
					∐ _cns◂{ k l } . 
						hp { pv_n al tav tv_n tv k } ⊢ { pv_n al tav tv_n tv h } 
						hp_lst { pv_n al tav tv_n tv l } ⊢ { pv_n al tav tv_n tv l } 
						_cns { h l } ⊢ l 
						∎ { pv_n al tav tv_n tv l }
					∐. _nil◂{} . 
						_nil {} ⊢ l 
						∎ { pv_n al tav tv_n tv l }
				@.f { pv_n al tav tv_n tv s0 t0 }
					$ t0 ⊢ 
					∐ RP.rcd◂l . 
						f_lst { pv_n al tav tv_n tv s0 l } ⊢ { pv_n al tav tv_n tv s0 l } 
						RP.rcd l ⊢ p0 
						∎ { pv_n al tav tv_n tv s0 p0 }
					∐. RP.atm◂ak . 
						$ ak ⊢ 
						∐ dta◂{ a l } . 	
							∐ a'=t_axm.id.arr; l ⊢ _cns◂{ y l }; l ⊢ _nil◂{} . 
								rset.min_f s0 ⊢ { s0 j0 }
								bl.t {} ⊢ b 
								exc_q { s0 j0 b } ⊢ { s0 j0 b } 
								hp { pv_n al tav tv_n tv y } ⊢ { pv_n al tav tv_n tv ha } 
								stt_v.arr ha ⊢ q 
								stt_v.ref q ⊢ h0  
								stt_v.hp { j0 h0 } ⊢ r0 
								RP.atm r0 ⊢ p0 
								∎ { pv_n al tav tv_n tv s0 p0 }
							∐ a'=t_axm.id.s8; l ⊢ _nil◂{} . 
								alc_vs s0 ⊢ { s0 j0 }
								stt_v.s8_reg j0 ⊢ p0 
								∎ { pv_n al tav tv_n tv s0 p0 }
							∐ a'=t_axm.id.r64; l ⊢ _nil◂{} . 
								alc_vs s0 ⊢ { s0 j0 } 
								stt_v.r64_reg j0 ⊢ p0 
								∎ { pv_n al tav tv_n tv s0 p0 }    
							∐. .
								hp_lst { pv_n al tav tv_n tv l } ⊢ { pv_n al tav tv_n tv hl } 
								stt_v.adt { a hl } ⊢ h0 
								alc_vs s0 ⊢ { s0 j0 } 
								stt_v.hp { j0 h0 } ⊢ r0 
								RP.atm r0 ⊢ p0 
								∎ { pv_n al tav tv_n tv s0 p0 } 
						∐ var◂i . 
							_lod_q { tv i } ⊢ { tv i v }
							∐ v ⊢ var_ln◂k . 
								f { pv_n al tav tv_n tv s0 k } ⊢| 
							∐. .
								assoc { al i } ⊢ { al i o } 
								∐ o ⊢ _some◂pvi . 
									alc_vs s0 ⊢ { s0 j0 } 
									stt_v.pv pvi ⊢ h 
									stt_v.hp { j0 h } ⊢ r0 
									RP.atm r0 ⊢ p0 
									∎ { pv_n al tav tv_n tv s0 p0 }
								∐. . 
									$ pv_n ⊢ pv_n,pvi 
									$ pvi ⊢ pvi,pvi0 
									_some pvi0 ⊢ o0 
									_cns { { i o0 } al } ⊢ al 
									_inc pv_n ⊢ pv_n 		
									alc_vs s0 ⊢ { s0 j0 } 
									stt_v.pv pvi ⊢ h 
									stt_v.hp { j0 h } ⊢ r0 
									RP.atm r0 ⊢ p0 
									∎ { pv_n al tav tv_n tv s0 p0 }
						∐ abs◂{ a k0 } . 
							» "alc_type_k.f abs" _ ⊢ se 
							_emt se ⊢ se 
							∎|  
						∐. imp◂{ k0 k1 } .
							» "alc_type_k.f imp" _ ⊢ se 
							_emt se ⊢ se 
							∎| 
			@.f_lst { pv_n al tav tv_n tv s0 l } 
				$ l ⊢ 
				∐ _cns◂{ k l } . 
					f { pv_n al tav tv_n tv s0 k } ⊢ { pv_n al tav tv_n tv s0 p }
					f_lst { pv_n al tav tv_n tv s0 l } ⊢ { pv_n al tav tv_n tv s0 l }
					_cns { p l } ⊢ l 
					∎ { pv_n al tav tv_n tv s0 l }
				∐. _nil◂{} . 
					_nil {} ⊢ l 
					∎ { pv_n al tav tv_n tv s0 l }
			∎∎
	§§ crt_type_k 
		§ 
	 		@.dst_ptn { tv rv p } 
				$ p ⊢ 
				∐ RP.rcd◂l . 
					dst_ptn_lst { tv rv l } ⊢ { tv rv l } 
					RP.rcd l ⊢ k 
					∎ { tv rv k }
				∐. RP.atm◂r . 
					$ r ⊢ 
					∐ ast.wc◂o . 
						$ o ⊢ 
						∐ _some◂r . 
							_lod_q { rv r } ⊢ { rv r v } 
							var v ⊢ y 
							RP.atm y ⊢ y 
							∎ { tv rv y } 
						∐. _none◂{} . 
							∎| 
					∐. ast.dst_reg◂r . 
						_lod_q { rv r } ⊢ { rv r v } 
						var v ⊢ y 
						RP.atm y ⊢ y 
						∎ { tv rv y } 
			@.dst_ptn_lst { tv rv l }
				$ l ⊢ 
				∐ _cns◂{ p l } . 
					dst_ptn { tv rv p } ⊢ { tv rv k } 
					dst_ptn_lst { tv rv l } ⊢ { tv rv l } 
					_cns { k l } ⊢ l 
					∎ { tv rv l }
				∐. _nil◂{} .
					_nil {} ⊢ l 
					∎ { tv rv l }
		§ cst { ev c }
			$ c ⊢ 
			∐ ast.cst_v◂v . 
				$ v ⊢ 
				∐ ast.r64◂x .
					t_axm.r64 {} ⊢ y 
					∎ { ev y }
				∐. ast.s8◂s . 
					t_axm.s8 {} ⊢ y 
					∎ { ev y }  
			∐. ast.cst_name◂i . 
				_lod_q { ev i } ⊢ { ev i vi } 
				var vi ⊢ y 
				RP.atm y ⊢ y 
				∎ { ev y }
		§ 
	 		@.src_ptn { ev tv rv p } 
				$ p ⊢ 
				∐ RP.rcd◂l . 
					src_ptn_lst { ev tv rv l } ⊢ { ev tv rv l } 
					RP.rcd l ⊢ k 
					∎ { ev tv rv k }
				∐. RP.atm◂r . 
					$ r ⊢ 
					∐ ast.im_reg◂c0 . 
						cst { ev c0 } ⊢ { ev y } 
						∎ { ev tv rv y } 
					∐. ast.src_reg◂r . 
						_lod_q { rv r } ⊢ { rv r v } 
						var v ⊢ y 
						RP.atm y ⊢ y 
						∎ { ev tv rv y } 
			@.src_ptn_lst { ev tv rv l }
				$ l ⊢ 
				∐ _cns◂{ p l } . 
					src_ptn { ev tv rv p } ⊢ { ev tv rv k } 
					src_ptn_lst { ev tv rv l } ⊢ { ev tv rv l } 
					_cns { k l } ⊢ l 
					∎ { ev tv rv l }
				∐. _nil◂{} .
					_nil {} ⊢ l 
					∎ { ev tv rv l }
		∎∎	 
	§§ mk_adt 
		§ @.inst { al h }
			∐ h ⊢ stt_v.pv◂p . 
				assoc { al p } ⊢ { al p o }
				∐ o ⊢ _some◂h . 
					∎ { al h } 
				∐. . 
					» "mk_adt.inst 0" _ ⊢ se 
					_emt se ⊢ se 
					∎| 
			∐ h ⊢ stt_v.adt◂{ ax hl } . 
				inst_lst { al hl } ⊢ { al hl } 
				stt_v.adt { ax hl } ⊢ h 
				∎ { al h } 
			∐ h ⊢ stt_v.ref◂q; q ⊢ stt_v.arr◂ha . 
				inst { al ha } ⊢ { al ha } 
				stt_v.arr ha ⊢ q 
				stt_v.ref q ⊢ h 
				∎ { al h } 
			∐ h ⊢ stt_v.ref◂q; q ⊢ stt_v.rcd◂l . 
				inst_lst { al l } ⊢ { al l } 
				stt_v.rcd l ⊢ q 
				stt_v.ref q ⊢ h 
				∎ { al h }
			∐. . 
				∎ { al h }
			@.inst_lst { al l } 
				$ l ⊢ 
				∐ _cns◂{ h l } . 
					inst { al h } ⊢ { al h } 
					inst_lst { al l } ⊢ { al l } 
					_cns { h l } ⊢ l 
					∎ { al l } 
				∐. _nil◂{} . 
					_nil {} ⊢ l 
					∎ { al l }
		§ @.lp { ql pl al } 
			∐ ql ⊢ _cns◂{ qi ql }; pl ⊢ _cns◂{ pi pl } . 
				_some qi ⊢ o 
				_cns { { pi o } al } ⊢ al 
				lp { ql pl al } ⊢| 
			∐ ql ⊢ _nil◂{}; pl ⊢ _nil◂{} . 
				∎ al 
			∐. . 
				» "mk_adt.lp 0" _ ⊢ se 
				_emt se ⊢ se 
				∎| 
		§ f { ql pl ipl }	
			_nil {} ⊢ al 
			lp { ql pl al } ⊢ al
			inst_lst { al ipl } ⊢ { al ipl }
			∎ ipl  
		∎∎ 
	
	§§ emt
		§ skip { lb_n e0 }
			rp8.e {} ⊢ e1 
			$ lb_n ⊢ lb_n,lb0 
			_inc lb_n ⊢ lb_n 
			» _^ lb0 ⊢ lb0,s0 
				"\tjmp LB_" 0d' "\n" // 
			rp8.add_s8 { e1 s0 } ⊢ e1 
			rp8.cct { e1 e0 } ⊢ e1 
			» _^ lb0 ⊢ lb0,s0 
				"LB_" 0d' ":\n" //
			rp8.add_s8 { e1 s0 } ⊢ e1 
			∎ { lb_n e1 }
		§ ret r 
			∐ r ⊢ _some◂lb . 
				» _^ lb ⊢ lb,s0 
					"\tjmp LB_" 0d' "\n" // 
				∎ s0 
			∐. . 
				» "\tret\n" _ ⊢ s0 
				∎ s0
		§ @.mk_jmp_tbl { lb_n n } 			 
			∐ n'=0r .
				rp8.e {} ⊢ e 
				_nil {} ⊢ lbl
				∎ { lb_n e lbl } 
			∐ n'=1r .
				» _^ lb_n ⊢ lb_n,s
					"LB_" 0d' // 
				rp8.of_s8 s ⊢ e 
				$ lb_n ⊢ lb_n,lb0 
				_inc lb_n ⊢ lb_n  
				_nil {} ⊢ lbl 
				_cns { lb0 lbl } ⊢ lbl
				∎ { lb_n e lbl }
			∐. . 
				» _^ lb_n ⊢ lb_n,s 
					"LB_" 0d' "," //
				rp8.of_s8 s ⊢ es  
				_dec n ⊢ n 
				$ lb_n ⊢ lb_n,lb0 
				_inc lb_n ⊢ lb_n 
				mk_jmp_tbl { lb_n n } ⊢ { lb_n e lbl } 
				rp8.cct { es e } ⊢ e 
				_cns { lb0 lbl } ⊢ lbl 
				∎ { lb_n e lbl }
		§ REG_N = 8r 
		§ mk_rbp rsp 
			» REG_N _ ⊢ rbp 
			_add { rbp rsp } ⊢ { rbp rsp } 
			∎ { rsp rbp } 
		§ mk_rsp p0 
			rset.ini {} ⊢ v0 
			stt_v.mk_rset { p0 v0 } ⊢ v0 
			rset.max_t v0 ⊢ { v0 j0 }
			» REG_N _ ⊢ n0
			_setge { j0 n0 } ⊢ { j0 n0 b }
			∐ b'=0r . 
				» 0r _ ⊢ rsp 
				∎ rsp 
			∐. .
				_sub { j0 n0 } ⊢ { j0 n0 } 
				_inc j0 ⊢ rsp 
				∎ rsp  
		§ sub_rsp n 
			∐ n'=0r . 
				» "" _ ⊢ s 
				∎ { n s } 
			∐. . 
				» _^ n ⊢ n,s 
					"\tlea rsp,[rsp-8*" 0d' "]\n" // 
				∎ { n s }
		§ add_rsp n 
			∐ n'=0r . 
				» "" _ ⊢ s 
				∎ { n s } 
			∐. . 
				» _^ n ⊢ n,s 
					"\tlea rsp,[rsp+8*" 0d' "]\n" // 
				∎ { n s }	
		§ set_rsp { rsp0 rsp1 } 
			∐ rsp0'=rsp1' .
				» "" _ ⊢ e 
				∎ { rsp0 rsp1 e } 
			∐. . 
				_setge { rsp0 rsp1 } ⊢ { rsp0 rsp1 b } 
				∐ b'=1r . 
					$ rsp0 ⊢ rsp0,n 
					_sub { n rsp1 } ⊢ { n rsp1 } 
					add_rsp n ⊢ { n e } 
					∎ { rsp0 rsp1 e } 
				∐. . 
					$ rsp1 ⊢ rsp1,n 
					_sub { n rsp0 } ⊢ { n rsp0 } 
					sub_rsp n ⊢ { n e } 
					∎ { rsp0 rsp1 e } 
		§ resize_rsp { rsp n }
			$ n ⊢ n,rsp1 
			» REG_N _ ⊢ rbp 
			_setge { n rbp } ⊢ { n rbp b } 
			∐ b'=1r . 
				_sub { rsp1 rbp } ⊢ { rsp1 rbp } 
				_inc rsp1 ⊢ rsp1 
				set_rsp { rsp rsp1 } ⊢ { rsp rsp1 e } 
				∎ { rsp1 n e }
			∐. . 
				add_rsp rsp ⊢ { rsp e } 
				» 0r _ ⊢ rsp0 
				∎ { rsp0 n e }
		§ c_call e 
			» _^ e ⊢ e,r 
				`	mov QWORD [rsp_tmp],rsp 
				`	and rsp,~0xf 
				"\tcall " 0' "\n" 
				`	mov rsp,QWORD [rsp_tmp]  
				// 
			∎ { e r }
		§ push_c_regs = "\tpush rdx\n\tpush rcx\n\tpush r8\n\tpush r9\n\tpush r10\n\tpush r11\n" 
		§ pop_c_regs = "\tpop r11\n\tpop r10\n\tpop r9\n\tpop r8\n\tpop rcx\n\tpop rdx\n" 					  
		§ mlc_s8 l 
			$ l ⊢ l,l0 
			» 3r _ ⊢ x0  
			_shr { l0 x0 } ⊢ { l0 x0 } 
			_inc l0 ⊢ l0  
			$ l0 ⊢ l0,l1 
			_inc l0 ⊢ l0 
			_shl { l0 x0 } ⊢ { l0 x0 } 
			» "calloc" _ ⊢ f 
			c_call f ⊢ { f ef } 
			» _^ l,ef,l1,l0 ⊢ l,ef,l1,l0,e 
				push_c_regs
				`	mov rdi,1  
				"\tmov rsi," 3d' "\n" 
				"\txor rax,rax\n" 
				1'  
				"\tmov rdi," 0d' "\n" 
				"\tmov rsi,0x_40_00_0000_0000_0000\n" 
				"\tor rdi,rsi\n" 
				"\tmov QWORD [rax],rdi\n"
				"\tmov QWORD [rax+8*" 2d' "],0\n"  
				pop_c_regs 
				//
			∎ { l e }   
		§ @.mk_s8_lp { s l i e } 
			∐ i'=l' . 
				∎ { s l e } 
			∐. . 
				_lds { s i } ⊢ { s i b } 
				» _^ i,b ⊢ i,b,eb 
					"\tmov BYTE [rax+8+" 0d' "]," 1d' "\n" 
					// 
				rp8.of_s8 eb ⊢ eb 
				rp8.cct { e eb } ⊢ e 
				_inc i ⊢ i 
				mk_s8_lp { s l i e } ⊢| 
		§ mk_s8 s 
			_s8_len s ⊢ { s l } 
			mlc_s8 l ⊢ { l e0 } 
			rp8.of_s8 e0 ⊢ e0 
			» 0r _ ⊢ i 	
			mk_s8_lp { s l i e0 } ⊢ { s l e0 } 
			∎ { s e0 }
		§ @.mk_db_lp { s i l r } 
			∐ i'=l' . 
				» _^ r ⊢ r,e 
					0d' // 
				rp8.of_s8 e ⊢ e 
				∎ { s i l r e } 
			∐. . 
				_lds { s i } ⊢ { s i b } 
				» _^ b ⊢ b,eb 
					0d' "," // 
				_inc i ⊢ i 
				mk_db_lp { s i l r } ⊢ { s i l r e1 } 
				rp8.of_s8 eb ⊢ eb 
				rp8.cct { eb e1 } ⊢ e 
				∎ { s i l r e }
		§ mk_db { s r }  
			» 0r _ ⊢ i 
			_s8_len s ⊢ { s l } 
			mk_db_lp { s i l r } ⊢ { s i l r e } 
			rp8.mk_s8 e ⊢ { e se } 
			∎ { s r se }
		§ reg { rsp i }  
			∐ i'=0r . 
				» "r13" _ ⊢ r 
				bl.t {} ⊢ b
				∎ { rsp i r b } 
			∐ i'=1r . 
				» "r14" _ ⊢ r 
				bl.t {} ⊢ b
				∎ { rsp i r b } 
			∐ i'=2r . 
				» "r8" _ ⊢ r 
				bl.t {} ⊢ b
				∎ { rsp i r b } 
			∐ i'=3r . 
				» "r9" _ ⊢ r 
				bl.t {} ⊢ b
				∎ { rsp i r b } 
			∐ i'=4r . 
				» "r10" _ ⊢ r 
				bl.t {} ⊢ b
				∎ { rsp i r b } 
			∐ i'=5r . 
				» "r11" _ ⊢ r 
				bl.t {} ⊢ b
				∎ { rsp i r b } 
			∐ i'=6r . 
				» "rcx" _ ⊢ r 
				bl.t {} ⊢ b
				∎ { rsp i r b } 
			∐ i'=7r . 
				» "rdx" _ ⊢ r 
				bl.t {} ⊢ b
				∎ { rsp i r b } 
			∐. . 
				» REG_N _ ⊢ rbp 
				_add { rbp rsp } ⊢ { rbp rsp } 
				_setge { i rbp } ⊢ { i rbp b } 
				∐ b'=0r . 
					$ i ⊢ i,i0 
					» REG_N _ ⊢ n0
					_sub { i0 n0 } ⊢ { i0 n0 } 
					$ rsp ⊢ rsp,rsp0 
					_sub { rsp0 i0 } ⊢ { rsp0 i0 } 
					» _^ rsp0 ⊢ rsp0,sr 
						"QWORD [rsp-8+8*" 0d' "]" // 
					bl.f {} ⊢ br 
					∎ { rsp i sr br } 
				∐. . 
					» "emt.reg 0" _ ⊢ se0 
					_emt se0 ⊢ se0 
					_emt { rsp i } ⊢ { rsp i } 
					∎|
			§ brk_rsp { rsp i } 
				» REG_N _ ⊢ rbp 
				_add { rbp rsp } ⊢ { rbp rsp } 
				_setge { i rbp } ⊢ { i rbp b } 
				∐ b'=0r . 
					» "" _ ⊢ s 
					∎ { rsp i s }  
				∐. . 
					$ i ⊢ i,i0 
					_sub { i rbp } ⊢ { i rbp } 
					_inc i ⊢ i  
					_add { rsp i } ⊢ { rsp i }
					sub_rsp i ⊢ { i s } 
					∎ { rsp i0 s } 
		§ reg_brk { rsp i }  
			∐ i'=0r . 
				» "r13" _ ⊢ r 
				bl.t {} ⊢ b
				» "" _ ⊢ sb
				∎ { rsp i r b sb } 
			∐ i'=1r . 
				» "r14" _ ⊢ r 
				bl.t {} ⊢ b 
				» "" _ ⊢ sb				
				∎ { rsp i r b sb } 
			∐ i'=2r . 
				» "r8" _ ⊢ r 
				bl.t {} ⊢ b
				» "" _ ⊢ sb
				∎ { rsp i r b sb } 
			∐ i'=3r . 
				» "r9" _ ⊢ r 
				bl.t {} ⊢ b
				» "" _ ⊢ sb
				∎ { rsp i r b sb } 
			∐ i'=4r . 
				» "r10" _ ⊢ r 
				bl.t {} ⊢ b
				» "" _ ⊢ sb
				∎ { rsp i r b sb } 
			∐ i'=5r . 
				» "r11" _ ⊢ r 
				bl.t {} ⊢ b
				» "" _ ⊢ sb
				∎ { rsp i r b sb } 
			∐ i'=6r . 
				» "rcx" _ ⊢ r 
				bl.t {} ⊢ b
				» "" _ ⊢ sb
				∎ { rsp i r b sb } 
			∐ i'=7r . 
				» "rdx" _ ⊢ r 
				bl.t {} ⊢ b
				» "" _ ⊢ sb
				∎ { rsp i r b sb } 
			∐. . 
				» REG_N _ ⊢ rbp 
				_add { rbp rsp } ⊢ { rbp rsp } 
				_setge { i rbp } ⊢ { i rbp b } 
				∐ b'=0r . 
					$ i ⊢ i,i0 
					» REG_N _ ⊢ n0
					_sub { i0 n0 } ⊢ { i0 n0 } 
					$ rsp ⊢ rsp,rsp0 
					_sub { rsp0 i0 } ⊢ { rsp0 i0 } 
					» _^ rsp0 ⊢ rsp0,sr 
						"QWORD [rsp-8+8*" 0d' "]" // 
					bl.f {} ⊢ br 
					» "" _ ⊢ sb
					∎ { rsp i sr br sb } 
				∐. . 
					brk_rsp { rsp i } ⊢ { rsp i sb } 
					$ i ⊢ i,i0 
					» REG_N _ ⊢ n0
					_sub { i0 n0 } ⊢ { i0 n0 } 
					$ rsp ⊢ rsp,rsp0 
					_sub { rsp0 i0 } ⊢ { rsp0 i0 } 
					» _^ rsp0 ⊢ rsp0,sr 
						"QWORD [rsp-8+8*" 0d' "]" // 
					bl.f {} ⊢ br 
					∎ { rsp i sr br sb }
					\[
					» "emt.reg_brk 0" _ ⊢ se0 
					_emt se0 ⊢ se0 
					_emt { rsp i } ⊢ { rsp i } 
					∎|
					\]  
			§ chk_rsp { rsp i } 
				» REG_N _ ⊢ rbp 
				_add { rbp rsp } ⊢ { rbp rsp } 
				_setge { i rbp } ⊢ { i rbp b } 
				∐ b'=0r . 
					» 0r _ ⊢ i1 
					∎ { rsp i i1 }  
				∐. . 
					$ i ⊢ i,i0 
					_sub { i rbp } ⊢ { i rbp } 
					_inc i ⊢ i  
					_add { rsp i } ⊢ { rsp i }
					∎ { rsp i0 i } 
			§ mov { rsp i0 i1 } 
				∐ i0'=i1' . 
					» "" _ ⊢ sr 
					∎ { rsp i0 i1 sr }
				∐. . 
					reg { rsp i0 } ⊢ { rsp i0 s0 b0 } 
					reg { rsp i1 } ⊢ { rsp i1 s1 b1 } 
					∐ b0 ⊢ bl.f◂{}; b1 ⊢ bl.f◂{} . 
						» _^ s0,s1 ⊢ s0,s1,sr 
							"\tmov rdi," 0' "\n" 
							"\tmov " 1' ",rdi\n" // 
						∎ { rsp i0 i1 sr } 
					∐. . 
						» _^ s0,s1 ⊢ s0,s1,sr 
							"\tmov " 1' "," 0' "\n" // 
						∎ { rsp i0 i1 sr } 
			§ mov_brk { rsp i0 i1 } 
				∐ i0'=i1' . 
					» "" _ ⊢ sr 
					∎ { rsp i0 i1 sr }
				∐. . 
					brk_rsp { rsp i1 } ⊢ { rsp i1 sb0 } 
					reg { rsp i0 } ⊢ { rsp i0 s0 b0 } 
					reg { rsp i1 } ⊢ { rsp i1 s1 b1 } 
					∐ b0 ⊢ bl.f◂{}; b1 ⊢ bl.f◂{} . 
						» _^ s0,s1,sb0 ⊢ s0,s1,sb0,sr 
							2' 
							"\tmov rdi," 0' "\n" 
							"\tmov " 1' ",rdi\n" // 
						∎ { rsp i0 i1 sr } 
					∐. . 
						» _^ s0,s1,sb0 ⊢ s0,s1,sb0,sr 
							2' 
							"\tmov " 1' "," 0' "\n" // 
						∎ { rsp i0 i1 sr } 

			§ r64_to_rax { rsp evv a0 }
				∐ a0 ⊢ stt_v.hp_im◂v0; v0 ⊢ ast.r64◂x0 . 
					» _^ x0 ⊢ x0,sc0 
						"\tmov rax," 0d' "\n" //
					∎ { rsp evv sc0 }
				∐ a0 ⊢ stt_v.hp◂{ r0 h0 }; h0 ⊢ stt_v.r64◂{} . 
					reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
					» _^ sr0 ⊢ sr0,sc0 
						"\tmov rax," 0' "\n" //
					∎ { rsp evv sc0 }
				∐ a0 ⊢ stt_v.hp_im_e◂i0 . 
					_lod_q { evv i0 } ⊢ { evv i0 k0 }
					∐ k0 ⊢ k_cst_v◂v0; v0 ⊢ ast.r64◂x0 . 
						» _^ x0 ⊢ x0,sc0 
						"\tmov rax," 0d' "\n" //
						∎ { rsp evv sc0 }
					∐. .
						» "r64_t0_rax" _ ⊢ ee 
						_emt ee ⊢ ee
						∎| 	
				∐. .
					» "r64_t0_rax" _ ⊢ ee 
					_emt ee ⊢ ee
					∎| 
			§§ alc_mtc_ptn 
		§ @.lp { { gl lb1 rsp } isp mp rl evv rv irv tav tv_n tv vs0 e0 dl }
			$ mp ⊢ 
			∐ RP.rcd◂l1 . 
				$ isp ⊢ 
				∐ RP.rcd◂l0 . 
					lp_lst { { gl lb1 rsp } l0 l1 rl evv rv irv tav tv_n tv vs0 e0 dl } ⊢ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl lr } 
					∐ lr ⊢ _some◂lr . 
						RP.rcd lr ⊢ p1 
						_some p1 ⊢ p1  
						∎ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl p1 }
					∐. . 
						_none {} ⊢ p1 
						∎ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl p1 } 
				∐. RP.atm◂a0 . 		
					∐ a0 ⊢ stt_v.hp◂{ r0 h0 }; h0 ⊢ stt_v.ref◂q0; q0 ⊢ stt_v.rcd◂l0 . 
						$ r0 ⊢ r0,r00 
						$ l0 ⊢ l0,l00 
						stt_v.rcd l00 ⊢ q0 
						stt_v.ref q0 ⊢ h0 
						_cns { { r00 h0 } gl } ⊢ gl 
						» 0r _ ⊢ j0 
						lp_hp_lst { { gl lb1 rsp } j0 r0 l0 l1 rl evv rv irv tav tv_n tv vs0 e0 dl } ⊢ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl l }
						∐ l ⊢ _some◂l . 
							RP.rcd l ⊢ p1
							_some p1 ⊢ p1  
							∎ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl p1 }
						∐. . 
							_none {} ⊢ p1 
							∎ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl p1 }
					∐. .  
						» "mov_ptn.ptn_to_r d9" _ ⊢ ee0 
						_emt ee0 ⊢ _ 
						∎| 
			∐. RP.atm◂a1 .
				$ a1 ⊢ 
				∐ ast.mtc_wc◂o . 
					∐ o ⊢ _some◂wr . 
						$ isp ⊢ isp,isp0 
						_set_q { irv wr isp0 } ⊢ { irv wr }  
						$ isp ⊢ isp,isp0 
						_cns { isp0 dl } ⊢ dl 
						_some isp ⊢ isp 
						∎ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl isp }
					∐. . 
						∎| 
				∐ ast.mtc_reg◂r1 . 
					$ isp ⊢ isp,isp0 
					_set_q { irv r1 isp0 } ⊢ { irv r1 }  
					_cns { r1 rl } ⊢ rl
					_some isp ⊢ isp
					∎ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl isp }
				∐ ast.mtc_cst◂c1 . 
					$ c1 ⊢ 
					∐ ast.cst_v◂v1 . 
						stt_v.hp_im v1 ⊢ h 
						RP.atm h ⊢ p1
						_some p1 ⊢ p1  
						∎ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl p1 }
					∐. ast.cst_name◂e1 . 
						stt_v.hp_im_e e1 ⊢ h 
						RP.atm h ⊢ p1 
						_some p1 ⊢ p1 
						∎ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl p1 }
				∐. ast.mtc_agl◂{ ea1 mpa1 } . 
					_lod_q { evv ea1 } ⊢ { evv ea1 k1 } 
					∐ k1 ⊢ k_ctr◂{ ia1 na1 } .  
						$ isp ⊢ 
						∐ RP.atm◂a0 . 
							∐ a0 ⊢ stt_v.hp◂{ r0 h0 }; h0 ⊢ stt_v.adt◂{ ax0 ql0 } . 
								_lod_q { tav ax0 } ⊢ { tav ax0 { aw o0 } } 
								∐ o0 ⊢ _some◂{ vl0 kl0 pvl0 ipl0 } . 
									∐ lb1 ⊢ _some◂lb1 . 
										reg { rsp r0 } ⊢ { rsp r0 er0 br0 } 
										» _^ er0,ia1,lb1 ⊢ er0,ia1,lb1,ec1 
											"\tmov rdi," 0' "\n" 
											"\tmovzx rax,BYTE [rdi+6]\n" 
											"\tcmp rax," 1d' "\n" 
											"\tjnz LB_" 2d' "\n" //
										_some lb1 ⊢ lb1 
										rp8.add_s8 { e0 ec1 } ⊢ e0 
										mk_adt.f { ql0 pvl0 ipl0 } ⊢ ipl0 
										$ ia1 ⊢ ia1,i1 
										lst.nth { ipl0 i1 } ⊢ { ip0 ipl0 }
										∐ ip0 ⊢ stt_v.ref◂iq0 . 
											stt_v.ref iq0 ⊢ ip0 
											lp_hp { { gl lb1 rsp } r0 ip0 mpa1 rl evv rv irv tav tv_n tv vs0 e0 dl } ⊢ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl p1 }
											∐ p1 ⊢ _some◂p1 . 
												stt_v.stt_adt { ia1 na1 p1 } ⊢ p1 
												RP.atm p1 ⊢ p1
												_some p1 ⊢ p1  
												∎ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl p1 }
											∐. . 
												∎ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl p1 }												
										∐. . 
											alc_vs vs0 ⊢ { vs0 r2 } 
											brk_rsp { rsp r2 } ⊢ { rsp r2 sb0 } 
											rp8.add_s8 { e0 sb0 } ⊢ e0 
											reg { rsp r2 } ⊢ { rsp r2 er2 br2 }
											» _^ er2 ⊢ er2,ec1 
												"\tmov rax,QWORD [rdi+8]\n" 
												"\tmov " 0' ",rax\n" // 
											rp8.add_s8 { e0 ec1 } ⊢ e0 
											$ r2 ⊢ r2,r20 
											$ ip0 ⊢ ip0,ip00 
											_cns { { r20 ip00 } gl } ⊢ gl 
											lp_hp { { gl lb1 rsp } r2 ip0 mpa1 rl evv rv irv tav tv_n tv vs0 e0 dl } ⊢ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl p1 }
											∐ p1 ⊢ _some◂p1 . 
												stt_v.stt_adt { ia1 na1 p1 } ⊢ p1 
												RP.atm p1 ⊢ p1
												_some p1 ⊢ p1  
												∎ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl p1 }											
											∐. . 
												∎ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl p1 }
									∐. . 
										mk_adt.f { ql0 pvl0 ipl0 } ⊢ ipl0 
										$ ia1 ⊢ ia1,i1 
										lst.nth { ipl0 i1 } ⊢ { ip0 ipl0 }
										lp_hp { { gl lb1 rsp } r0 ip0 mpa1 rl evv rv irv tav tv_n tv vs0 e0 dl } ⊢ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl p1 }
										∐ p1 ⊢ _some◂p1 . 
											stt_v.stt_adt { ia1 na1 p1 } ⊢ p1 
											RP.atm p1 ⊢ p1 
											_some p1 ⊢ p1 
											∎ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl p1 }
										∐. . 
											∎ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl p1 }											
								∐. . 
									» "mov_ptn.ptn_to_r d8" _ ⊢ ee0 
										_emt ee0 ⊢ _ 
									∎| 
							∐ a0 ⊢ stt_v.stt_adt◂{ ia0 rn0 pa0 } . 
								∐ ia0'=ia1' . 
									lp { { gl lb1 rsp } pa0 mpa1 rl evv rv irv tav tv_n tv vs0 e0 dl } ⊢ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl p1 }
									∐ p1 ⊢ _some◂p1 . 
										stt_v.stt_adt { ia1 na1 p1 } ⊢ p1 
										RP.atm p1 ⊢ p1 
										_some p1 ⊢ p1 
										∎ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl p1 }
									∐. . 
										∎ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl p1 }										
								∐. . 
									∐ lb1 ⊢ _some◂lb1 . 
										» _^ lb1 ⊢ lb1,ec1 
											"\tjmp LB_" 0d' "\n" //
										rp8.add_s8 { e0 ec1 } ⊢ e0 
										_some lb1 ⊢ lb1 
										_none {} ⊢ p1 
										∎ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl p1 } 											
									∐. . 
										» "mov_ptn.ptn_to_r d5" _ ⊢ ee0 
										_emt ee0 ⊢ _ 
										∎| 
							∐. .
								» "mov_ptn.ptn_to_r d6" _ ⊢ ee0 
								_emt ee0 ⊢ _ 
								∎|  
						∐. RP.rcd◂l0 . 
							» "mov_ptn.ptn_to_r d7" _ ⊢ ee0 
							_emt ee0 ⊢ _ 
							∎| 
					∐. . 
						» "alc_mtc_ptn 6" _ ⊢ se 
						_emt se ⊢ se  
						∎|
			@.lp_hp { { gl lb1 rsp } r0 hp mp rl evv rv irv tav tv_n tv vs0 e0 dl }
				$ mp ⊢ 
				∐ RP.rcd◂l1 . 
					∐ hp ⊢ stt_v.ref◂q0; q0 ⊢ stt_v.rcd◂l0 . 
						$ r0 ⊢ r0,r00 
						$ l0 ⊢ l0,l00 
						stt_v.rcd l00 ⊢ q0 
						stt_v.ref q0 ⊢ h0 
						_cns { { r00 h0 } gl } ⊢ gl 
						» 0r _ ⊢ j0 
						lp_hp_lst { { gl lb1 rsp } j0 r0 l0 l1 rl evv rv irv tav tv_n tv vs0 e0 dl } ⊢ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl l }
						∐ l ⊢ _some◂l . 
							RP.rcd l ⊢ p1 
							_some p1 ⊢ p1 
							∎ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl p1 }
						∐. . 
							_none {} ⊢ p1 
							∎ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl p1 }							
					∐ hp ⊢ stt_v.pv◂pv . 
						∐ lb1 ⊢ _some◂lb1 . 
							» _^ lb1 ⊢ lb1,se0 
								"\tjmp lB_" 0d' "\n" //
							rp8.add_s8 { e0 se0 } ⊢ e0
							_none {} ⊢ p1 
							_some lb1 ⊢ lb1 
							∎ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl p1 }							
						∐. . 	
							» "alc_mtc_ptn.ptn_to_r d7" _ ⊢ ee0 
							_emt ee0 ⊢ _ 
							∎| 
					∐. . 
						» "alc_mtc_ptn.ptn_to_r d8" _ ⊢ ee0 
						_emt ee0 ⊢ _ 
						∎| 
				∐. RP.atm◂a1 . 
					$ a1 ⊢ 
					∐ ast.mtc_wc◂o . 
						∐ o ⊢ _some◂wr . 
							##rset.min_f vs0 ⊢ { vs0 im0 } 
							##exc_q { vs0 im0 b0 } ⊢ { vs0 im0 b0 } 
							##stt_v.hp { im0 hp } ⊢ h0 
							rset.set_t { vs0 r0 } ⊢ { vs0 r0 }
							stt_v.hp { r0 hp } ⊢ h0 
							RP.atm h0 ⊢ isp
							$ isp ⊢ isp,isp0 
							_set_q { irv wr isp0 } ⊢ { irv wr }  
							$ isp ⊢ isp,isp0 
							_cns { isp0 dl } ⊢ dl
							_some isp ⊢ isp 
							∎ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl isp }
						∐. . 
							» "mov_ptn.ptn_to_r d4" _ ⊢ ee0 
										_emt ee0 ⊢ _ 
							∎| 
					∐ ast.mtc_reg◂r1 . 
						##rset.min_f vs0 ⊢ { vs0 im0 } 
						##exc_q { vs0 im0 b0 } ⊢ { vs0 im0 b0 } 
						##stt_v.hp { im0 hp } ⊢ h0 
						rset.set_t { vs0 r0 } ⊢ { vs0 r0 }
						stt_v.hp { r0 hp } ⊢ h0 
						RP.atm h0 ⊢ isp
						$ isp ⊢ isp,isp0 
						_set_q { irv r1 isp0 } ⊢ { irv r1 }  
						_cns { r1 rl } ⊢ rl
						_some isp ⊢ isp 
						∎ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl isp }
					∐ ast.mtc_cst◂c1 . 
						$ c1 ⊢ 
						∐ ast.cst_v◂v1 . 
							stt_v.hp_im v1 ⊢ h 
							RP.atm h ⊢ p1 
							_some p1 ⊢ p1 
							∎ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl p1 }
						∐. ast.cst_name◂e1 . 
							stt_v.hp_im_e e1 ⊢ h 
							RP.atm h ⊢ p1 
							_some p1 ⊢ p1 
							∎ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl p1 }
					∐. ast.mtc_agl◂{ ea1 mpa1 } . 
						_lod_q { evv ea1 } ⊢ { evv ea1 k1 } 
						∐ k1 ⊢ k_ctr◂{ ia1 na1 }; hp ⊢ stt_v.adt◂{ ax0 ql0 } . 
							_lod_q { tav ax0 } ⊢ { tav ax0 { aw0 o0 } } 
							∐ o0 ⊢ _some◂{ vl0 kl0 pvl0 ipl0 } . 
								∐ lb1 ⊢ _some◂lb1 . 
									reg { rsp r0 } ⊢ { rsp r0 er0 br0 } 
									» _^ er0,ia1,lb1 ⊢ er0,ia1,lb1,ec1 
										"\tmov rdi," 0' "\n" 
										"\tmovzx rax,BYTE [rdi+6]\n" 
										"\tcmp rax," 1d' "\n" 
										"\tjnz LB_" 2d' "\n" //
									_some lb1 ⊢ lb1 
									rp8.of_s8 ec1 ⊢ ec1 
									rp8.cct { e0 ec1 } ⊢ e0 
									mk_adt.f { ql0 pvl0 ipl0 } ⊢ ipl0 
									$ ia1 ⊢ ia1,i1 
									lst.nth { ipl0 i1 } ⊢ { ip0 ipl0 }
									lp_hp { { gl lb1 rsp } r0 ip0 mpa1 rl evv rv irv tav tv_n tv vs0 e0 dl } ⊢ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl p1 }
									∐ p1 ⊢ _some◂p1 . 
										stt_v.stt_adt { ia1 na1 p1 } ⊢ p1 
										RP.atm p1 ⊢ p1 
										_some p1 ⊢ p1 
										∎ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl p1 }
									∐. . 
										∎ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl p1 }										
								∐. . 
									mk_adt.f { ql0 pvl0 ipl0 } ⊢ ipl0 
									$ ia1 ⊢ ia1,i1 
									lst.nth { ipl0 i1 } ⊢ { ip0 ipl0 }
									lp_hp { { gl lb1 rsp } r0 ip0 mpa1 rl evv rv irv tav tv_n tv vs0 e0 dl } ⊢ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl p1 }
									∐ p1 ⊢ _some◂p1 . 
										stt_v.stt_adt { ia1 na1 p1 } ⊢ p1 
										RP.atm p1 ⊢ p1 
										_some p1 ⊢ p1 
										∎ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl p1 }
									∐. . 
										∎ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl p1 }
							∐. . 
								» "mov_ptn.ptn_to_r d2" _ ⊢ ee0 
										_emt ee0 ⊢ _ 
								∎| 
						∐. . 
							» "alc_mtc_ptn 6" _ ⊢ se 
							_emt se ⊢ se  
							∎|
			@.lp_lst { { gl lb1 rsp } l0 l1 rl evv rv irv tav tv_n tv vs0 e0 dl }
				∐ l0 ⊢ _cns◂{ p0 l0 }; l1 ⊢ _cns◂{ p1 l1 } . 
					lp { { gl lb1 rsp } p0 p1 rl evv rv irv tav tv_n tv vs0 e0 dl } ⊢ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl p1 } 
					∐ p1 ⊢ _some◂p1 . 
						lp_lst { { gl lb1 rsp } l0 l1 rl evv rv irv tav tv_n tv vs0 e0 dl } ⊢ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl l } 
						∐ l ⊢ _some◂l . 
							_cns { p1 l } ⊢ l 
							_some l ⊢ l
							∎ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl l } 
						∐. . 
							##_none {} ⊢ l 
							∎ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl l } 
					∐. . 
						_none {} ⊢ l 
						∎ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl l } 					
				∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
					_nil {} ⊢ l 
					_some l ⊢ l 
					∎ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl l }
				∐. . 
					» "mov_ptn.ptn_to_r d1" _ ⊢ ee0 
										_emt ee0 ⊢ _ 
					∎|
			@.lp_hp_lst { { gl lb1 rsp } j0 r0 l0 l1 rl evv rv irv tav tv_n tv vs0 e0 dl }
				∐ l0 ⊢ _cns◂{ h0 l0 }; l1 ⊢ _cns◂{ p1 l1 } . 
					alc_vs vs0 ⊢ { vs0 r2 } 
					brk_rsp { rsp r2 } ⊢ { rsp r2 sb0 } 
					rp8.add_s8 { e0 sb0 } ⊢ e0
					reg { rsp r2 } ⊢ { rsp r2 er2 br2 } 
					reg { rsp r0 } ⊢ { rsp r0 er0 erb0 } 
					» _^ er0,er2,j0 ⊢ er0,er2,j0,ec1 
						"\tmov rdi," 0' "\n" 
						"\tmov rdi,QWORD [rdi+8+8*" 2d' "]\n"
						"\tmov " 1' ",rdi\n" //  
					rp8.add_s8 { e0 ec1 } ⊢ e0 
					lp_hp { { gl lb1 rsp } r2 h0 p1 rl evv rv irv tav tv_n tv vs0 e0 dl } ⊢ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl p1 } 
					∐ p1 ⊢ _some◂p1 . 
						_inc j0 ⊢ j0 
						lp_hp_lst { { gl lb1 rsp } j0 r0 l0 l1 rl evv rv irv tav tv_n tv vs0 e0 dl } ⊢ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl l }
						∐ l ⊢ _some◂l . 
							_cns { p1 l } ⊢ l 
							_some l ⊢ l 
							∎ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl l } 
						∐. . 
							##_none {} ⊢ l 
							∎ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl l } 
					∐. . 
						_none {} ⊢ l 
						∎ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl l } 
				∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
					_nil {} ⊢ l 
					_some l ⊢ l 
					∎ { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl l }
				∐. .
					» "alc_mtc_ptn d0" _ ⊢ ee0 
										_emt ee0 ⊢ _  
					∎|			
		§ f { { gl lb1 rsp } rl evv rv irv tav tv_n tv vs0 isp mp dl }
			rp8.e {} ⊢ e0 
			lp { { gl lb1 rsp } isp mp rl evv rv irv tav tv_n tv vs0 e0 dl } ⊢| 
		∎∎
	§§ idx 
		§ crt { irv d ip rl dl }
			$ d ⊢ 
			∐ ast.dst_reg◂i . 
				_set_q { irv i ip } ⊢ { irv i }
				_cns { i rl } ⊢ rl
				∎ { irv rl dl }
			∐. ast.wc◂o . 
				∐ o ⊢ _some◂i . 
					$ ip ⊢ ip,ip0 
					_set_q { irv i ip0 } ⊢ { irv i }
					_cns { ip dl } ⊢ dl 
					∎ { irv rl dl }
				∐. .
					» "crt_idx_ptn 1" _ ⊢ se 
					_emt se ⊢ se  
					∎|
		§ @.crt_lst { irv dl ipl rl dll } 
			∐ dl ⊢ _cns◂{ d dl }; ipl ⊢ _cns◂{ ip ipl } . 
				crt { irv d ip rl dll } ⊢ { irv rl dll } 
				crt_lst { irv dl ipl rl dll } ⊢|
			∐ dl ⊢ _nil◂{}; ipl ⊢ _nil◂{} . 
				∎ { irv rl dll }
			∐. . 
				» "idx.crt_lst 0" _ ⊢ ee 
				_emt ee ⊢ ee 
				∎|  
		§ 
			@.crt_ptn { irv rp ip rl dl }
				∐ rp ⊢ RP.rcd◂r . 
					∐ ip ⊢ RP.rcd◂ir . 
						crt_ptn_lst { irv r ir rl dl } ⊢| 
					∐ ip ⊢ RP.atm◂p0; p0 ⊢ stt_v.hp◂{ r0 h0 }; h0 ⊢ stt_v.ref◂q0; q0 ⊢ stt_v.rcd◂l0 .
						stt_v.rcd l0 ⊢ q0 
						stt_v.ref q0 ⊢ h0 
						stt_v.hp { r0 h0 } ⊢ p0 
						RP.atm p0 ⊢ ip
						stt_v.pnt.f ip ⊢ sip 
						» "crt_idx_ptn 3" _ ⊢ se 
						_emt se ⊢ se 
						_emt sip ⊢ sip 
						∎|
					∐. . 
						» "crt_idx_ptn 2" _ ⊢ se 
						_emt se ⊢ se  
						∎| 
				∐ rp ⊢ RP.atm◂a .  
					crt { irv a ip rl dl } ⊢| 
				∐. .
					stt_v.pnt.f ip ⊢ sip 
					» "crt_idx_ptn 0" _ ⊢ se 
					_emt se ⊢ se 
					_emt sip ⊢ sip 
					∎| 
			@.crt_ptn_lst { irv r ir rl dl } 
				∐ r ⊢ _cns◂{ p r }; ir ⊢ _cns◂{ ip ir } . 
					crt_ptn { irv p ip rl dl } ⊢ { irv rl dl }  
					crt_ptn_lst { irv r ir rl dl } ⊢|
				∐ r ⊢ _nil◂{}; ir ⊢ _nil◂{} . 
					∎ { irv rl dl } 
				∐. . 
					» "crt_idx_ptn_lst 0" _ ⊢ se 
					_emt se ⊢ se 
					∎| 
		§ csm { irv s rl } 
			$ s ⊢ 
			∐ ast.im_reg◂c . 
				$ c ⊢ 
				∐ ast.cst_v◂v . 
					stt_v.hp_im v ⊢ h 
					RP.atm h ⊢ p 
					∎ { irv p rl }
				∐. ast.cst_name◂i . 
					stt_v.hp_im_e i ⊢ h 
					RP.atm h ⊢ p 
					∎ { irv p rl } 
			∐. ast.src_reg◂r . 
				_lod_q { irv r } ⊢ { irv r ip }
				lst.csm { rl r } ⊢ { rl r }
				∎ { irv ip rl } 
		§ @.csm_lst { irv sl rl } 
			$ sl ⊢ 
			∐ _cns◂{ s sl } . 
				csm { irv s rl } ⊢ { irv p rl } 
				csm_lst { irv sl rl } ⊢ { irv pl rl } 
				_cns { p pl } ⊢ pl 
				∎ { irv pl rl }
			∐. _nil◂{} . 
				_nil {} ⊢ pl 
				∎ { irv pl rl }
		§ 
			@.csm_ptn { irv rp rl }
				∐ rp ⊢ RP.rcd◂r . 
					csm_ptn_lst { irv r rl } ⊢ { irv ir rl } 
					RP.rcd ir ⊢ ip 
					∎ { irv ip rl } 
				∐. rp ⊢ RP.atm◂a .  
					csm { irv a rl } ⊢| 
			@.csm_ptn_lst { irv r rl } 
				∐ r ⊢ _cns◂{ p r } . 
					csm_ptn { irv p rl } ⊢ { irv ip rl }  
					csm_ptn_lst { irv r rl } ⊢ { irv ir rl } 
					_cns { ip ir } ⊢ ir 
					∎ { irv ir rl }
				∐. r ⊢ _nil◂{} . 
					_nil {} ⊢ ir 
					∎ { irv ir rl } 
		∎∎
			§ @.subst_ptn { p sl }
				$ p ⊢ 
				∐ RP.rcd◂l . 
					subst_ptn_lst { l sl } ⊢ { l sl } 
					RP.rcd l ⊢ p 
					∎ { p sl }
				∐. RP.atm◂a .
					∐ a ⊢ stt_v.hp◂{ r0 h } . 
						subst { r0 sl } ⊢ { r0 sl } 
						stt_v.hp { r0 h } ⊢ a 
						RP.atm a ⊢ p 
						∎ { p sl }
					∐ a ⊢ stt_v.pt◂{ r0 r1 } . 
						subst { r0 sl } ⊢ { r0 sl } 
						subst { r1 sl } ⊢ { r1 sl } 
						stt_v.pt { r0 r1 } ⊢ a 
						RP.atm a ⊢ p 
						∎ { p sl }
					∐ a ⊢ stt_v.stt_adt◂{ ia nn pa } . 
						subst_ptn { pa sl } ⊢ { pa sl }
						stt_v.stt_adt { ia nn pa } ⊢ a 
						RP.atm a ⊢ p 
						∎ { p sl }
					∐. . 
						RP.atm a ⊢ p
						∎ { p sl }
				@.subst_ptn_lst { l sl } 
					$ l ⊢ 
					∐ _cns◂{ p l } . 
						subst_ptn { p sl } ⊢ { p sl } 
						subst_ptn_lst { l sl } ⊢ { l sl }
						_cns { p l } ⊢ l 
						∎ { l sl }
					∐. _nil◂{} . 
						_nil {} ⊢ l 
						∎ { l sl }  
			§§ mov_ptn 
				§ 
					@.f { tav rsp vs p0 p1 lb1 }
						$ vs ⊢ vs,vs0 
						$ p0 ⊢ p0,p00 
						stt_v.pnt.f p00 ⊢ sp0 
						$ p1 ⊢ p1,p10 
						stt_v.pnt.f p10 ⊢ sp1 
						##» "enter mov_ptn.f" _ ⊢ ds0 
						stt_v.mk_rset_x p0 ⊢ { p0 v0 }
						stt_v.mk_rset_x p1 ⊢ { p1 v1 }
						##_emt p1 ⊢ p1 
						$ v0 ⊢ v0,v0_0 
						rset.and { v0_0 v1 } ⊢ { v0_0 v1 } 
						rset.or { vs0 v1 } ⊢ { vs0 v1 } 
						rset.or { vs0 v0 } ⊢ { vs0 v0 }  
						_nil {} ⊢ sl 
						» 0r _ ⊢ i0 
						» _^ sp0,sp1 ⊢ sp0,sp1,er 
							"; .mov_ptn " 0' " ⊢ " 1' "\n" 
							// 
						rp8.of_s8 er ⊢ e0 
						rset.max_t vs0 ⊢ { vs0 rbp0 } 
						brk_rsp { rsp rbp0 } ⊢ { rsp rbp0 sb0 }
						rp8.add_s8 { e0 sb0 } ⊢ e0  
						lp0 { rsp vs0 v0_0 i0 sl e0 } ⊢ { rsp vs0 v0_0 sl e0 } 
						subst_ptn { p1 sl } ⊢ { p1 sl } 
						lp1 { e0 tav rsp vs0 p0 v0 p1 v1 lb1 } ⊢ { e0 tav rsp vs0 v0 v1 } 
						∎ { tav rsp vs e0 } 
					@.lp0 { rsp vs0 v0_0 i0 sl e0 } 
						∐ i0'=64r .
							∎ { rsp vs0 v0_0 sl e0 } 
						∐. . 
							_lod_q { v0_0 i0 } ⊢ { v0_0 i0 b } 
							$ b ⊢ 
							∐ bl.f◂{} . 
								_inc i0 ⊢ i0 
								lp0 { rsp vs0 v0_0 i0 sl e0 } ⊢| 
							∐. bl.t◂{} . 
								rset.min_f vs0 ⊢ { vs0 j0 }
								##bl.t {} ⊢ b 
								##exc_q { vs0 j0 b } ⊢ { vs0 j0 b }
								rset.set_t { vs0 j0 } ⊢ { vs0 j0 } 
								brk_rsp { rsp j0 } ⊢ { rsp j0 s0 } 
								rp8.add_s8 { e0 s0 } ⊢ e0 
								mov { rsp i0 j0 } ⊢ { rsp i0 j0 s0 } 
								rp8.add_s8 { e0 s0 } ⊢ e0 
								$ i0 ⊢ i0,i0_0 
								_some j0 ⊢ o 
								_cns { { i0_0 o } sl } ⊢ sl 
								_inc i0 ⊢ i0 
								lp0 { rsp vs0 v0_0 i0 sl e0 } ⊢| 	
				@.lp1 { e0 tav rsp vs0 p0 v0 p1 v1 lb1 } 
						$ p1 ⊢ 
						∐ RP.rcd◂l1 . 
							∐ p0 ⊢ RP.rcd◂l0 . 		
								lp1_lst { e0 tav rsp vs0 v0 l0 v1 l1 lb1 } ⊢| 
							∐ p0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp◂{ r0 h0 }; h0 ⊢ stt_v.ref◂q; q ⊢ stt_v.rcd◂l0 . 
								» 0r _ ⊢ i 
								r_to_rcd { e0 tav i rsp vs0 r0 l0 l1 lb1 } ⊢ { e0 tav rsp vs0 }
								∎ { e0 tav rsp vs0 v0 v1 } 
							∐. . 
								» "mov_ptn.lp1 0" _ ⊢ se 
								_emt se ⊢ se 
								∎|
						∐. RP.atm◂a1 . 
							∐ a1 ⊢ stt_v.hp◂{ r1 h1 } . 				
								ptn_to_r { e0 tav rsp vs0 p0 h1 lb1 } ⊢ { e0 tav rsp vs0 }
								brk_rsp { rsp r1 } ⊢ { rsp r1 sb0 } 
								rp8.add_s8 { e0 sb0 } ⊢ e0
								reg { rsp r1 } ⊢ { rsp r1 sr1 br1 }
								» _^ sr1 ⊢ sr1,sc0 
									"\tmov " 0' ",rax\n" // 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								∎ { e0 tav rsp vs0 v0 v1 }
							∐ a1 ⊢ stt_v.pt◂{ r10 r11 } . 
								max { r10 r11 } ⊢ { r10 r11 rM } 
								brk_rsp { rsp rM } ⊢ { rsp rM sb0 } 
								rp8.add_s8 { e0 sb0 } ⊢ e0 
								∐ p0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.pt◂{ r00 r01 } . 
									mov { rsp r00 r10 } ⊢ { rsp r00 r10 sm0 } 
									rp8.add_s8 { e0 sm0 } ⊢ e0 
									mov { rsp r10 r11 } ⊢ { rsp r10 r11 sm1 } 
									rp8.add_s8 { e0 sm1 } ⊢ e0 
									∎ { e0 tav rsp vs0 v0 v1 } 
								∐ p0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp◂{ r0 h0 }; h0 ⊢ stt_v.ref◂q0; q0 ⊢ stt_v.pt_hp◂{} . 
									reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
									##reg { rsp r10 } ⊢ { rsp r10 sr10 br10 } 
									reg { rsp r10 } ⊢ { rsp r10 sr10 br10 } 
									##reg { rsp r11 } ⊢ { rsp r11 sr11 br11 }
									reg { rsp r11 } ⊢ { rsp r11 sr11 br11 } 
									» _^ sr0,sr10,sr11 ⊢ sr0,sr10,sr11,sr 
										"\tmov rdi," 0' "\n"
										`	mov rsi,QWORD [rdi+8]
										"\tmov " 1' ",rsi\n" 
										`	mov rsi,QWORD [rdi+16]
										"\tmov " 2' ",rsi\n" //   
									rp8.add_s8 { e0 sr } ⊢ e0 
									∎ { e0 tav rsp vs0 v0 v1 }
								∐. . 
									» "mov_ptn.lp1 pt 0" _ ⊢ ee0 
									_emt ee0 ⊢ _ 
									∎| 
							∐ a1 ⊢ stt_v.stt_adt◂{ p1_i p1_n p1_p }; p0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.stt_adt◂{ ia0 na0 pa0 } . 
								∐ p1_i'=ia0' . 
									lp1 { e0 tav rsp vs0 pa0 v0 p1_p v1 lb1 } ⊢| 
								∐ lb1 ⊢ _some◂lb1 . 
									» _^ lb1 ⊢ lb1,ec1 
										"\tjnz LB_" 0d' "\n" 
									// 
									rp8.of_s8 ec1 ⊢ ec1 
									rp8.cct { e0 ec1 } ⊢ e0 
									∎ { e0 tav rsp vs0 v0 v1 }
								∐. . 
									» "stt stt 0" _ ⊢ se 
									_emt se ⊢ se 
									∎| 
							∐. . 
								» "mov_ptn.lp1 152" _ ⊢ se 
								_emt se ⊢ se  
								RP.atm a1 ⊢ p1 
								stt_v.pnt.f p1 ⊢ sp1 
								_emt sp1 ⊢ sp1 
								∎| 
					@.lp1_lst { e0 tav rsp vs0 v0 l0 v1 l1 lb1 }
						∐ l0 ⊢ _cns◂{ p0 l0 }; l1 ⊢ _cns◂{ p1 l1 } . 
							$ lb1 ⊢ lb1,lb10 
							lp1 { e0 tav rsp vs0 p0 v0 p1 v1 lb10 } ⊢ { e0 tav rsp vs0 v0 v1 }
							lp1_lst { e0 tav rsp vs0 v0 l0 v1 l1 lb1 } ⊢ { e0 tav rsp vs0 v0 v1 } 
							∎ { e0 tav rsp vs0 v0 v1 } 							
						∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
							∎ { e0 tav rsp vs0 v0 v1 } 
						∐. . 
							» "lp1_lst 0" _ ⊢ se 
							_emt se ⊢ se 
							∎| 
					@.rcd_to_r { e0 tav i rsp vs0 l0 r1 l1 lb1 }
						∐ l1 ⊢ _cns◂{ h1 l1 }; l0 ⊢ _cns◂{ p0 l0 } .  
							$ lb1 ⊢ lb1,lb10 
							ptn_to_r { e0 tav rsp vs0 p0 h1 lb10 } ⊢ { e0 tav rsp vs0 }
							reg { rsp r1 } ⊢ { rsp r1 er1 erb } 
							» _^ er1,i ⊢ er1,i,e1
								"\tmov rdi," 0' "\n" 
								"\tmov QWORD [rdi+8+8*" 1d' "],rax\n" 
								// 
							rp8.add_s8 { e0 e1 } ⊢ e0 
							_inc i ⊢ i 
							##rset.set_f { vs0 m0 } ⊢ { vs0 m0 } 
							rcd_to_r { e0 tav i rsp vs0 l0 r1 l1 lb1 } ⊢| 
						∐ l1 ⊢ _nil◂{}; l0 ⊢ _nil◂{} . 
							∎ { e0 tav rsp vs0 }
						∐. . 
							» "rcd_to_r" _ ⊢ se 
							_emt se ⊢ se 
							∎|  
					##@.ptn_to_r { e0 tav rsp vs0 p0 r1 h1 lb1 }
					@.ptn_to_r { e0 tav rsp vs0 p0 h1 lb1 } 
						$ p0 ⊢ 
						∐ RP.rcd◂l0 . 
							∐ h1 ⊢ stt_v.ref◂q; q ⊢ stt_v.rcd◂l1 . 
								∐ l1 ⊢ _nil◂{} . 
									##reg { rsp r1 } ⊢ { rsp r1 er1 br1 } 
									» _^ _ ⊢ ec1 
										`	mov rax,unt 
										//
									rp8.add_s8 { e0 ec1 } ⊢ e0   
									∎ { e0 tav rsp vs0 }
								∐. . 
									lst.len l1 ⊢ { l1 nl1 } 
									» 0r _ ⊢ i 
									##reg { rsp r1 } ⊢ { rsp r1 er1 br1 } 
									alc_vs vs0 ⊢ { vs0 r1 } 
									brk_rsp { rsp r1 } ⊢ { rsp r1 sb0 } 
									rp8.add_s8 { e0 sb0 } ⊢ e0 
									reg { rsp r1 } ⊢ { rsp r1 sr1 br1 } 
									» _^ sr1,nl1 ⊢ sr1,nl1,ec1 
										"\tmov rax,[SS_RCD_" 1d' "_TOP]\n" 
										`	mov rsi,[rax] 
										"\tmov QWORD [SS_RCD_" 1d' "_TOP],rsi\n"
										`	mov QWORD [rax],0
										"\tmov " 0' ",rax\n" 
										//
									rp8.add_s8 { e0 ec1 } ⊢ e0   
									$ r1 ⊢ r1,r10 
									rcd_to_r { e0 tav i rsp vs0 l0 r1 l1 lb1 } ⊢ { e0 tav rsp vs0 } 
									reg { rsp r10 } ⊢ { rsp r10 sr10 br10 }
									» _^ sr10 ⊢ sr10,sc0 
										"\tmov rax," 0' "\n" // 
									rp8.add_s8 { e0 sc0 } ⊢ e0
									rset.set_f { vs0 r10 } ⊢ { vs0 r10 }
									∎ { e0 tav rsp vs0 }
							∐. . 
								\[
								stt_v.pnt.hp h1 ⊢ sh1 
								_emt sh1 ⊢ _ 
								» "ptn_to_r 0" _ ⊢ se 
								_emt se ⊢ se 
								∎|
								\]
								» _^ _ ⊢ ec1
									` xor rax,rax 
									`	mov rdi,rt_err0 
									`	mov QWORD [rsp_tmp],rsp 
									`	and rsp,~0xf 
									`	call printf
									`	mov rsp,QWORD [rsp_tmp]
									`	mov QWORD [err_n],0xffff_0000
									`	jmp err
									// 
								rp8.add_s8 { e0 ec1 } ⊢ e0 
								∎ { e0 tav rsp vs0 }
						∐. RP.atm◂a0 . 
							$ a0 ⊢ 
							∐ stt_v.hp◂{ r0 h0 } . 
								reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
								##brk_rsp { rsp r1 } ⊢ { rsp r1 eb } 
								##rp8.add_s8 { e0 eb } ⊢ e0 
								##mov { rsp r0 r1 } ⊢ { rsp r0 r1 em } 
								» _^ sr0 ⊢ sr0,em 
									"\tmov rax," 0' "\n" //
								rp8.add_s8 { e0 em } ⊢ e0 
								∎ { e0 tav rsp vs0 }
							∐ stt_v.hp_im◂cv . 
								∐ cv ⊢ ast.r64◂x . 
									##reg { rsp r1 } ⊢ { rsp r1 er bc } 
									» _^ x ⊢ x,e1
										"\tmov rax," 0d' "\n" // 
									rp8.add_s8 { e0 e1 } ⊢ e0 
									∎ { e0 tav rsp vs0 }
								∐ cv ⊢ ast.s8◂s . 
									mk_s8 s ⊢ { s es } 
									rp8.cct { e0 es } ⊢ e0 
									##reg { rsp r1 } ⊢ { rsp r1 eim bim }
									##» _^ _ ⊢ ec1 
									##	"\tmov " 0' ",rax\n" // 
									##rp8.add_s8 { e0 ec1 } ⊢ e0 
									∎ { e0 tav rsp vs0 }
								∐. .
									» "mov_ptn im hp 0" _ ⊢ ee0 
									_emt ee0 ⊢ ec0 
									∎| 
							∐ stt_v.hp_im_e◂ie . 
								» "mov_ptn im_e 08" _ ⊢ ee0 
								_emt ee0 ⊢ ec0 
								∎| 
							∐ stt_v.pt◂{ r00 r01 } . 
								∐ h1 ⊢ stt_v.ref◂q0; q0 ⊢ stt_v.pt_hp◂{} . 
									##reg { rsp r1 } ⊢ { rsp r1 er1 br1 } 
									reg { rsp r00 } ⊢ { rsp r00 sr00 br00 } 
									reg { rsp r01 } ⊢ { rsp r01 sr01 br01 } 
									» _^ sr00,sr01 ⊢ sr00,sr01,ec1 
										`	mov rax,[SS_PT_TOP] 
										`	mov rsi,[rax] 
										`	mov QWORD [SS_PT_TOP],rsi
										`	mov QWORD [rax],0
										"\tmov rsi," 0' "\n" 
										`	mov QWORD [rax+8],rsi
										"\tmov rsi," 1' "\n" 
										`	mov QWORD [rax+16],rsi 
										//
									rp8.add_s8 { e0 ec1 } ⊢ e0   
									∎ { e0 tav rsp vs0 }
								∐. . 
									» "mov_ptn.ptn_to_r pt 0" _ ⊢ ee0 
									_emt ee0 ⊢ _
									∎|  
							∐. stt_v.stt_adt◂{ ia0 na0 pa0 } .
								∐ h1 ⊢ stt_v.adt◂{ ax1 ql1 } . 
									_lod_q { tav ax1 } ⊢ { tav ax1 { aw1 o1 } } 
									∐ o1 ⊢ _some◂{ vl1 kl1 pl1 ipl1 } . 
										mk_adt.f { ql1 pl1 ipl1 } ⊢ ipl1 
										$ ia0 ⊢ ia0,ia00
										lst.nth { ipl1 ia00 } ⊢ { ip1 ipl1 }
										$ ip1 ⊢ ip1,ip10 
										##reg { rsp r1 } ⊢ { rsp r1 er1 br1 } 
										ptn_to_r { e0 tav rsp vs0 pa0 ip10 lb1 } ⊢ { e0 tav rsp vs0 }
										∐ ip1 ⊢ stt_v.ref◂q1 .
											∐ q1 ⊢ stt_v.rcd◂l1; l1 ⊢ _nil◂{} . 
												» _^ ia0 ⊢ ia0,ec1 
													"\tmov rax,unt_" 0d' "\n" //
												rp8.add_s8 { e0 ec1 } ⊢ e0 
												∎ { e0 tav rsp vs0 }
											∐. . 
												» _^ ia0 ⊢ ia0,ec1 
													"\tmov BYTE [rax+6]," 0d' "\n" // 
												rp8.add_s8 { e0 ec1 } ⊢ e0 
												∎ { e0 tav rsp vs0 }
										∐. .
											» _^ ia0 ⊢ ia0,ec1 
												`	mov rdi,rax
												`	mov rax,[SS_LN_TOP]
												`	mov rsi,[rax]
												`	mov QWORD [SS_LN_TOP],rsi 
												`	mov QWORD [rax],0
												"\tmov BYTE [rax+6]," 0d' "\n"
												"\tmov QWORD [rax+8],rdi\n"
												// 
											rp8.add_s8 { e0 ec1 } ⊢ e0 
											∎ { e0 tav rsp vs0 }
									∐. . 
										» "mov_ptn.ptn_to_r 0" _ ⊢ ee0 
										_emt ee0 ⊢ _ 
										∎| 
								∐. . 
									\[
									» "mov_ptn.ptn_to_r 1" _ ⊢ ee0 
										_emt ee0 ⊢ _ 
									stt_v.pnt.hp h1 ⊢ sh1 
									_emt sh1 ⊢ _ 
									∎|
									\]
									» _^ _ ⊢ ec1
									` xor rax,rax 
									`	mov rdi,rt_err0 
									`	mov QWORD [rsp_tmp],rsp 
									`	and rsp,~0xf 
									`	call printf
									`	mov rsp,QWORD [rsp_tmp]
									`	mov QWORD [err_n],0xffff_0001
									`	jmp err
									// 
								rp8.add_s8 { e0 ec1 } ⊢ e0 
								∎ { e0 tav rsp vs0 } 
					@.r_to_ptn { e0 tav rsp vs0 r0 h0 p1 lb1 }  
						∐ p1 ⊢ RP.rcd◂l1; h0 ⊢ stt_v.ref◂q; q ⊢ stt_v.rcd◂l0 . 
							» 0r _ ⊢ i 
							r_to_rcd { e0 tav i rsp vs0 r0 l0 l1 lb1 } ⊢| 
						∐ p1 ⊢ RP.atm◂a1; a1 ⊢ stt_v.hp◂{ p1_r p1_h } . 
							##mov { rsp r0 p1_r } ⊢ { rsp r0 p1_r em0 } 
							mov_brk { rsp r0 p1_r } ⊢ { rsp r0 p1_r em0 } 
							rp8.add_s8 { e0 em0 } ⊢ e0 
							##bl.t {} ⊢ b0 
							##exc_q { vs0 p1_r b0 } ⊢ { vs0 p1_r b0 } 
							rset.set_t { vs0 p1_r } ⊢ { vs0 p1_r }
							∎ { e0 tav rsp vs0 }
						∐. . 
							» "mov_ptn.lp1 1007" _ ⊢ se 
							_emt se ⊢ se 
							∎|   							
					@.r_to_rcd { e0 tav i rsp vs0 r0 l0 l1 lb1 } 
						∐ l0 ⊢ _cns◂{ h0 l0 }; l1 ⊢ _cns◂{ p1 l1 } .  
							reg { rsp r0 } ⊢ { rsp r0 er0 erb } 
							alc_vs vs0 ⊢ { vs0 m0 } 
							brk_rsp { rsp m0 } ⊢ { rsp m0 sb0 } 
							rp8.add_s8 { e0 sb0 } ⊢ e0 
							reg { rsp m0 } ⊢ { rsp m0 em0 bm0 }
							» _^ er0,em0,i ⊢ er0,em0,i,e1
								"\tmov rdi," 0' "\n" 
								"\tmov rdi,QWORD [rdi+8+8*" 2d' "]\n"
								"\tmov " 1' ",rdi\n" 
								// 
							rp8.add_s8 { e0 e1 } ⊢ e0 
							$ m0 ⊢ m0,m00 
							$ lb1 ⊢ lb1,lb10 
							r_to_ptn { e0 tav rsp vs0 m00 h0 p1 lb10 } ⊢ { e0 tav rsp vs0 }
							_inc i ⊢ i 
							r_to_rcd { e0 tav i rsp vs0 r0 l0 l1 lb1 } ⊢| 
						∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
							∎ { e0 tav rsp vs0 }
						∐. . 
							» "r_to_rcd" _ ⊢ se 
							_emt se ⊢ se 
							∎|  
				§ @.f2_lp0 { p0 p1 r } 
						∐ p0 ⊢ RP.rcd◂l0; p1 ⊢ RP.rcd◂l1 . 
							f2_lp0_lst { l0 l1 r } ⊢| 
						∐. . 
							_cns { { p0 p1 } r } ⊢ r 
							∎ r
					@.f2_lp0_lst { l0 l1 r }
						∐ l0 ⊢ _cns◂{ p0 l0 }; l1 ⊢ _cns◂{ p1 l1 } . 
							f2_lp0 { p0 p1 r } ⊢ r 
							f2_lp0_lst { l0 l1 r } ⊢| 
						∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
							∎ r
						∐. . 
						» "mov_ptn.lp1 10000" _ ⊢ se 
									_emt se ⊢ se 
							∎|
				¶ vf_t 
					∐ c0 : {} 
					∐ c1 : {} 
					∐ c2 : {}
				§ @.vf_ini_i { n a i } 
					∐ i'=n' . 
						∎ { n a } 
					∐. . 
						c0 {} ⊢ t 
						_set_q { a i t } ⊢ { a i }
						_inc i ⊢ i 
						vf_ini_i { n a i } ⊢| 
				§ vf_ini n 
					_mk_arr n ⊢ { n a } 
					» 0r _ ⊢ i 
					vf_ini_i { n a i } ⊢ { n a } 
					∎ { n a }
				§ @.f2_lp1_i { a0 tij an i0 } 
						∐ i0'=an' . 
							∎ { a0 tij an }
						∐. . 
							» 0r _ ⊢ j0 
							f2_lp1_j { a0 tij an i0 j0 } ⊢ { a0 tij i0 an } 
							_inc i0 ⊢ i0 
							f2_lp1_i { a0 tij an i0 } ⊢| 
					@.f2_lp1_j { a0 tij an i0 j0 } 
						∐ j0'=an' . 
							∎ { a0 tij i0 an }
						∐. . 
							_lod_q { a0 i0 } ⊢ { a0 i0 { pi0 pi1 } }
							_lod_q { a0 j0 } ⊢ { a0 j0 { pj0 pj1 } } 
							stt_v.mk_rset_x pi1 ⊢ { pi1 vi }
							stt_v.mk_rset_x pj0 ⊢ { pj0 vj } 
							rset.and { vi vj } ⊢ { vi vj } 
							rset.is_zero vi ⊢ { vi b0 }
							$ i0 ⊢ i0,i00 
							_imul { i00 an } ⊢ { i00 an }
							_add { i00 j0 } ⊢ { i00 j0 }
							_set_q { tij i00 b0 } ⊢ { tij i00 }
							_inc j0 ⊢ j0 
							f2_lp1_j { a0 tij an i0 j0 } ⊢| 
				§ @.f2_lp2 { c0 vf0 tij an i0 l0 } 
						∐ i0'=an' . 
							∎ { vf0 tij an l0 } 
						∐. . 
							_lod_q { vf0 i0 } ⊢ { vf0 i0 b0 } 
							∐ b0 ⊢ bl.f◂{} . 
								$ c0 ⊢ c0,c01 
								$ c0 ⊢ 
								∐ _some◂c0 . 
									$ c0 ⊢ c0,c00 
									_imul { c00 an } ⊢ { c00 an }
									_add { c00 i0 } ⊢ { c00 i0 }
									_lod_q { tij c00 } ⊢ { tij c00 b0 }
									∐ b0 ⊢ bl.t◂{} . 
										bl.t {} ⊢ bt1 
										exc_q { vf0 i0 bt1 } ⊢ { vf0 i0 bt1 } 
										» 0r _ ⊢ j0 
										$ i0 ⊢ i0,i00 
										_some i00 ⊢ ci0 
										f2_lp2 { ci0 vf0 tij an j0 l0 } ⊢ { vf0 tij an l0 }
										$ i0 ⊢ i0,i00 
										_cns { i00 l0 } ⊢ l0 
										_inc i0 ⊢ i0 
										f2_lp2 { c01 vf0 tij an i0 l0 } ⊢|
									∐. . 
										_inc i0 ⊢ i0 
										f2_lp2 { c01 vf0 tij an i0 l0 } ⊢| 
								∐. _none◂{} . 
									bl.t {} ⊢ bt1 
									exc_q { vf0 i0 bt1 } ⊢ { vf0 i0 bt1 } 
									» 0r _ ⊢ j0 
									$ i0 ⊢ i0,i00 
									_some i00 ⊢ ci0 
									f2_lp2 { ci0 vf0 tij an j0 l0 } ⊢ { vf0 tij an l0 } 
									$ i0 ⊢ i0,i00 
									_cns { i00 l0 } ⊢ l0 
									_inc i0 ⊢ i0 
									f2_lp2 { c01 vf0 tij an i0 l0 } ⊢|
							∐. . 
								_inc i0 ⊢ i0 
								f2_lp2 { c0 vf0 tij an i0 l0 } ⊢| 
	
				§ @.f2_lp3 { tav rsp a0 vs0 vs1 l0 e0 sl lb1 } 
					$ l0 ⊢ 
					∐ _cns◂{ n0 l0 } . 
						_lod_q { a0 n0 } ⊢ { a0 n0 { p0 p1 } } 
						subst_ptn { p0 sl } ⊢ { p0 sl } 
						∐ p0 ⊢ RP.atm◂v0; v0 ⊢ stt_v.hp◂{ r0 h0 }; p1 ⊢ RP.atm◂v1; v1 ⊢ stt_v.hp◂{ r1 h1 }; r0'=r1' .  
							f2_lp3 { tav rsp a0 vs0 vs1 l0 e0 sl lb1 } ⊢| 
						∐. . 
							$ vs0 ⊢ vs0,vs00 
							stt_v.mk_rset_x p1 ⊢ { p1 vp1 } 
							rset.and { vs00 vp1 } ⊢ { vs00 vp1 }
							» 0r _ ⊢ i0 
							lp0 { rsp vs1 vs00 i0 sl e0 } ⊢ { rsp vs1 vs00 sl e0 } 
							subst_ptn { p0 sl } ⊢ { p0 sl } 
							stt_v.mk_rset_x p0 ⊢ { p0 vp0 } 
							rset.sub { vs0 vp0 } ⊢ { vs0 vp0 } 
							rset.sub { vs0 vp1 } ⊢ { vs0 vp1 }
							$ lb1 ⊢ lb1,lb10  
							f { tav rsp vs0 p0 p1 lb10 } ⊢ { tav rsp vs0 e1 } 
							rp8.cct { e0 e1 } ⊢ e0 
							rset.or { vs0 vp1 } ⊢ { vs0 vp1 } 
							f2_lp3 { tav rsp a0 vs0 vs1 l0 e0 sl lb1 } ⊢| 
					∐. _nil◂{} . 
						∎ { tav rsp a0 vs0 vs1 e0 sl }
				§ f2 { tav rsp v0 p0 p1 lb1 }
					##» "mov_ptn.f2 d0" _ ⊢ ee0 
					##_emt ee0 ⊢ _ 
					$ p0 ⊢ p0,p00 
					stt_v.pnt.f p00 ⊢ sp0 
					$ p1 ⊢ p1,p10 
					stt_v.pnt.f p10 ⊢ sp1 
					$ v0 ⊢ v0,v00 
					stt_v.mk_rset_x p0 ⊢ { p0 vs0 }
					stt_v.mk_rset_x p1 ⊢ { p1 vs1 }
					rset.or { vs0 v0 } ⊢ { vs0 v0 } 
					$ vs0 ⊢ vs0,vs01 
					rset.or { vs01 vs1 } ⊢ { vs01 vs1 } 
					_nil {} ⊢ r0 
					f2_lp0 { p0 p1 r0 } ⊢ r0 
					arr_of_lst_len r0 ⊢ { a0 na } 
					$ na ⊢ na,na0 
					_imul { na0 na } ⊢ { na0 na }
					_mk_arr na0 ⊢ { na0 tij } 
					» 0r _ ⊢ i0 
					f2_lp1_i { a0 tij na i0 } ⊢ { a0 tij na }   
					_none {} ⊢ c0 
					rset.ini {} ⊢ vf0 
					» 0r _ ⊢ i0 
					_nil {} ⊢ l0 
					f2_lp2 { c0 vf0 tij na i0 l0 } ⊢ { vf0 tij na l0 } 
					» _^ sp0,sp1 ⊢ sp0,sp1,spr 
						"; .mov_ptn2 " 0' " ⊢ " 1' "\n" //
					rp8.of_s8 spr ⊢ er 
					_nil {} ⊢ sl 
					f2_lp3 { tav rsp a0 vs0 vs01 l0 er sl lb1 } ⊢ { tav rsp vs0 vs01 l0 er sl } 
					##rp8.mk_s8 er ⊢ { er sr } 
					##» "mov_ptn.f2 d1" _ ⊢ ee0 
					##_emt ee0 ⊢ _
					∎ { tav rsp v0 er }
				∎∎
			
			§§ push_regs 
				§ @.lp { rsp irv vv v i n l e } 
					∐ i' = REG_N . 
						sub_rsp n ⊢ { n e1 } 
						» _^ e,e1 ⊢ e,e1,e2 
							1' 
							0' // 
						∎ { rsp irv vv v i n l e2 } 
					∐. . 
						_lod_q { v i } ⊢ { v i b } 
						$ b ⊢ 
						∐ bl.f◂{} . 
							_inc i ⊢ i 
							lp { rsp irv vv v i n l e } ⊢| 
						∐. bl.t◂{} . 
							» REG_N _ ⊢ m0 
							_add { m0 rsp } ⊢ { m0 rsp } 
							##_add { m0 n } ⊢ { m0 n } 
							rset.set_t { vv m0 } ⊢ { vv m0 } 
							 $ i ⊢ i,i0 
							_cns { i0 l } ⊢ l 
							reg { rsp i } ⊢ { rsp i si b0 } 
							» _^ n,si,e ⊢ n,si,e,e1 
								2' 
								"\tmov QWORD [rsp+8*" 0d' "]," 1' "\n" 
								//
							_inc i ⊢ i 
							_inc n ⊢ n 
							_inc rsp ⊢ rsp 
							lp { rsp irv vv v i n l e1 } ⊢| 
				§ f { rsp irv vv rl } 
					stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl v } 
					» 0r _ ⊢ i 
					» 0r _ ⊢ n 
					_nil {} ⊢ l 
					» "" _ ⊢ e 
					lp { rsp irv vv v i n l e } ⊢ { rsp irv vv v i n l e }
					∎ { rsp irv vv rl l e n }
				∎∎
			§ shft { i n } 
				» REG_N _ ⊢ j 
				_setge { i j } ⊢ { i j b }
				∐ b'=1r . 
					_add { i n } ⊢ { i n } 
					∎ { i n } 
				∐. . 
					∎ { i n }
			§ @.shft_ptn { p n }
				$ p ⊢ 
				∐ RP.rcd◂l . 
					shft_ptn_lst { l n } ⊢ { l n } 
					RP.rcd l ⊢ p 
					∎ { p n }
				∐. RP.atm◂a .
					∐ a ⊢ stt_v.hp◂{ r0 h } . 
						shft { r0 n } ⊢ { r0 n } 
						stt_v.hp { r0 h } ⊢ a 
						RP.atm a ⊢ p 
						∎ { p n }
					∐ a ⊢ stt_v.pt◂{ r0 r1 } . 
						shft { r0 n } ⊢ { r0 n } 
						shft { r1 n } ⊢ { r1 n } 
						stt_v.pt { r0 r1 } ⊢ a 
						RP.atm a ⊢ p 
						∎ { p n }
					∐ a ⊢ stt_v.stt_adt◂{ ia nn pa } . 
						shft_ptn { pa n } ⊢ { pa n }
						stt_v.stt_adt { ia nn pa } ⊢ a 
						RP.atm a ⊢ p 
						∎ { p n }
					∐. . 
						RP.atm a ⊢ p
						∎ { p n }
				@.shft_ptn_lst { l n } 
					$ l ⊢ 
					∐ _cns◂{ p l } . 
						shft_ptn { p n } ⊢ { p n } 
						shft_ptn_lst { l n } ⊢ { l n }
						_cns { p l } ⊢ l 
						∎ { l n }
					∐. _nil◂{} . 
						_nil {} ⊢ l 
						∎ { l n }
			§§ pop_regs 
				§ @.lp { rsp irv v0 v1 rl i l sl e0 }
					$ l ⊢ 
					∐ _cns◂{ j l } . 
						_lod_q { v1 j } ⊢ { v1 j b } 
						$ b ⊢ 
						∐ bl.t◂{} . 
							rset.set_f { v0 i } ⊢ { v0 i } 
							alc_vs v0 ⊢ { v0 m0 } 
							##mov { rsp j m0 } ⊢ { rsp j m0 em0 }
							mov_brk { rsp j m0 } ⊢ { rsp j m0 em0 } 
							reg { rsp j } ⊢ { rsp j er bc } 
							reg { rsp i } ⊢ { rsp i ei bi } 
							» _^ i,em0,er,e0,ei ⊢ i,em0,er,e0,ei,e1 
								3'
								"\tmov rax," 4' "\n" 
								1' 
								"\tmov " 2' ",rax\n" //
							_some m0 ⊢ o 
							_cns { { j o } sl } ⊢ sl 
							_inc i ⊢ i 
							lp { rsp irv v0 v1 rl i l sl e1 } ⊢|
						∐. bl.f◂{} . 
							rset.set_f { v0 i } ⊢ { v0 i }
							mov_brk { rsp i j } ⊢ { rsp i j em0 } 
							» _^ em0,e0 ⊢ em0,e0,e1
								1' 
								0' //
							_inc i ⊢ i 
							lp { rsp irv v0 v1 rl i l sl e1 } ⊢|
					∐. _nil◂{} . 
						∎ { rsp irv v0 v1 rl i sl e0 } 
				§ f { rsp irv rl p1 l vv n } 
					» "pop_regs D0" _ ⊢ ee0 
					_emt ee0 ⊢ _ 
					$ rl ⊢ rl,rl0 
					$ vv ⊢ vv,v0 
					stt_v.mk_rset_env { irv rl0 v0 } ⊢ { irv v0 }
					stt_v.mk_rset_x p1 ⊢ { p1 v1 }
					rset.or { v0 v1 } ⊢ { v0 v1 }
					_nil {} ⊢ sl 
					» "" _ ⊢ e1 
					$ n ⊢ n,i
					lp { rsp irv v0 v1 rl i l sl e1 } ⊢ { rsp irv v0 v1 rl i sl e1 }
					rset.max_t v0 ⊢ { v0 im } 
					resize_rsp { rsp im } ⊢ { rsp im er }
					» _^ e1,er ⊢ e1,er,e2 
						0'
						1' //	
					subst_ptn { p1 sl } ⊢ { p1 sl }
					» "pop_regs D1" _ ⊢ ee0 
					_emt ee0 ⊢ _ 
					∎ { rsp irv rl p1 e2 vv n }
				∎∎
			§ @.pnt_env_lp { irv rl } 
				$ rl ⊢ 
				∐ _cns◂{ i rl } . 
					_lod_q { irv i } ⊢ { irv i p } 
					stt_v.pnt.f p ⊢ sp 
					pnt_env_lp { irv rl } ⊢ { irv sr }
					» _^ i,sp,sr ⊢ i,sp,sr,srr 
						"%" 0d' "~" 1' " " 2' // 
					∎ { irv srr }
				∐. _nil◂{} . 
					» "" _ ⊢ sr 
					∎ { irv sr } 
			§ pnt_env { irv rsp rl } 
				pnt_env_lp { irv rl } ⊢ { irv s }
				» _^ rsp,s ⊢ rsp,s,sr 
					";; rsp=" 0d' " , " 1' "\n" // 
				∎ { irv rsp sr } 

			§§ dlt 
				§ @.ptn { lb_n rsp p } 
					∐ p ⊢ RP.rcd◂l . 
						ptn_lst { lb_n rsp l } ⊢| 
					∐. p ⊢ RP.atm◂a . 	
						∐ a ⊢ stt_v.hp◂{ r h } . 
							hp { rsp r h } ⊢ { rsp eh } 
							∐ eh ⊢ _some◂eh . 
								∎ { lb_n rsp eh }
							∐. . 
								rp8.e {} ⊢ e 
								∎ { lb_n rsp e }
						∐ a ⊢ stt_v.pt◂{ r0 r1 } .
							rp8.e {} ⊢ e0  
							∎ { lb_n rsp e0 }
						∐ a ⊢ stt_v.stt_adt◂{ ia na pa } . 
							ptn { lb_n rsp pa } ⊢| 
						∐ a ⊢ stt_v.hp_im◂v .  
							rp8.e {} ⊢ e 
							∎ { lb_n rsp e }
						\[
						∐ a ⊢ stt_v.dyn_agl◂{ ir nr rp lr } . 
							reg { rsp ir } ⊢ { rsp ir sir bir } 
							$ lb_n ⊢ lb_n,lb1 
							_inc lb_n ⊢ lb_n 
							$ lb_n ⊢ lb_n,lb0 
							_inc lb_n ⊢ lb_n 
							$ lb_n ⊢ lb_n,lb_b 
							$ lb1 ⊢ lb1,lb10 
							dyn_agl { rsp rp lr lb10 lb_n } ⊢ { rsp lb_n eg beg }
							∐ beg ⊢ bl.t◂{} . 
								$ lb_n ⊢ lb_n,lb_c 
								_sub { lb_c lb_b } ⊢ { lb_c lb_b } 
								mk_jmp_tbl { lb_b lb_c } ⊢ { lb_b et } 
								rp8.mk_s8 et ⊢ { et st } 
								» _^ lb0,sir,st ⊢ lb0,sir,st,sj 
									"\tmov rdi," 1' "\n" 
									"\tjmp QWORD [LB_" 0d' "+8*rdi]\n"
									"LB_" 0d' ": dq " 2' "\n" //
								rp8.of_s8 sj ⊢ ej 
								rp8.cct { ej eg } ⊢ e 
								» _^ lb1 ⊢ lb1,e1 
									"LB_" 0d' ":\n" // 
								rp8.of_s8 e1 ⊢ e1 
								rp8.cct { e e1 } ⊢ e    
								∎ { lb_n rsp e }
							∐. . 
								rp8.e {} ⊢ e 
								∎ { lb_n rsp e }
						\]
						∐. . 
							» "dlt 1" _ ⊢ se 
							_emt se ⊢ se 
							∎| 
					@.hp { rsp r h } 
						$ h ⊢ 
						∐ stt_v.adt◂{ ax0 ql0 } . 
							» _^ _ ⊢ e0 
								`;	.dlt adt ⊢ _  
								// 
							rp8.of_s8 e0 ⊢ e0 
							_some e0 ⊢ e0 
							∎ { rsp e0 }
						∐ stt_v.ref◂q .
							$ q ⊢ 
							∐ stt_v.opq◂{} . 
								reg { rsp r } ⊢ { rsp r er br } 
								» _^ er ⊢ er,e 
									"\tmov rdi," 0' "\n"  
									push_c_regs 
									`	xor rax,rax
									`	mov QWORD [rsp_tmp],rsp 
									`	and rsp,~0xf 
									`	call free 
									`	mov rsp,QWORD [rsp_tmp] 
									pop_c_regs 
									//
								rp8.of_s8 e ⊢ e 
								_some e ⊢ e 
								∎ { rsp e } 
							∐ stt_v.arr◂h .
								» _^ _ ⊢ sc1 
									"; .dlt.hp \n" // 
								rp8.of_s8 sc1 ⊢ e 
								_some e ⊢ e 
								∎ { rsp e } 
							∐ stt_v.clr◂h . 
								» _^ _ ⊢ sc1 
									"; .dlt.hp clr\n" // 
								rp8.of_s8 sc1 ⊢ e 
								_some e ⊢ e 
								∎ { rsp e } 
							∐ stt_v.pt_hp◂{} . 
								» _^ _ ⊢ sc1 
									"; .dlt.hp pt\n" // 
								rp8.of_s8 sc1 ⊢ e 
								_some e ⊢ e 
								∎ { rsp e } 
							∐. stt_v.rcd◂l .
								» _^ _ ⊢ sc1 
									"; .dlt.hp rcd\n" // 
								rp8.of_s8 sc1 ⊢ e 
								_some e ⊢ e 
								∎ { rsp e }  
						∐ stt_v.r64◂{} . 
							_none {} ⊢ e 
							∎ { rsp e }
						∐. stt_v.pv◂ipv. 
							\[
							» "dlt.hp 4" _ ⊢ se 
								_emt se ⊢ se 
								∎| 
								\]
								» _^ _ ⊢ sc1 
									"; .dlt.hp pv\n" // 
								rp8.of_s8 sc1 ⊢ e 
								_some e ⊢ e 
								∎ { rsp e } 
					@.dyn_agl { rsp r lr lb1 lb_n } 
						$ lr ⊢ 
						∐ _cns◂{ h lr } . 
							$ r ⊢ r,r0  
							hp { rsp r0 h } ⊢ { rsp eh } 
							∐ eh ⊢ _some◂eh . 
								» _^ lb_n ⊢ lb_n,e1 
									"LB_" 0d' ":\n" // 
								_inc lb_n ⊢ lb_n 
								rp8.of_s8 e1 ⊢ e1 
								rp8.cct { e1 eh } ⊢ e 
								» _^ lb1 ⊢ lb1,el0 
									"\tjmp LB_" 0d' "\n" // 
								rp8.of_s8 el0 ⊢ el0 
								rp8.cct { e el0 } ⊢ e 
								dyn_agl { rsp r lr lb1 lb_n } ⊢ { rsp lb_n e2 be } 
								bl.t {} ⊢ be1 
								rp8.cct { e e2 } ⊢ e 
								∎ { rsp lb_n e be1 }
							∐. . 
								» _^ lb_n,lb1 ⊢ lb_n,lb1,e 
									"LB_" 0d' ":\n" 
									"\tjmp LB_" 1d' "\n" // 
								_inc lb_n ⊢ lb_n 
								rp8.of_s8 e ⊢ e 
								dyn_agl { rsp r lr lb1 lb_n } ⊢ { rsp lb_n e2 be } 
								∐ be ⊢ bl.t◂{} . 
									bl.t {} ⊢ be1 
									rp8.cct { e e2 } ⊢ e 
									∎ { rsp lb_n e be1 }
								∐. . 
									bl.f {} ⊢ be1 
									rp8.cct { e e2 } ⊢ e 
									∎ { rsp lb_n e be1 }
						∐. _nil◂{} . 
							rp8.e {} ⊢ e 
							bl.f {} ⊢ be 
							∎ { rsp lb_n e be } 
					@.ptn_lst { lb_n rsp l } 
					$ l ⊢ 
					∐ _cns◂{ p l } . 
						ptn { lb_n rsp p } ⊢ { lb_n rsp ep } 
						ptn_lst { lb_n rsp l } ⊢ { lb_n rsp el } 
						rp8.cct { ep el } ⊢ e 
						∎ { lb_n rsp e }
					∐. _nil◂{} . 
						rp8.e {} ⊢ e 
						∎ { lb_n rsp e } 
				§ @.f { lb_n rsp dl }
					$ dl ⊢ 
					∐ _cns◂{ p dl } . 
						$ p ⊢ p,p0 
						stt_v.pnt.f p0 ⊢ sp 
						» _^ sp ⊢ sp,sc 
							"; .dlt.ptn " 0' "\n" // 
						rp8.of_s8 sc ⊢ sc 
						ptn { lb_n rsp p } ⊢ { lb_n rsp ep } 
						f { lb_n rsp dl } ⊢ { lb_n rsp e } 
						rp8.cct { sc ep } ⊢ ep 
						rp8.cct { ep e } ⊢ e 
						∎ { lb_n rsp e }
					∐. _nil◂{} . 
						rp8.e {} ⊢ e 
						∎ { lb_n rsp e }
				§ @.env_lp { lb_n rsp irv rl } 
					$ rl ⊢ 
					∐ _cns◂{ i rl } . 
						_lod_q { irv i } ⊢ { irv i p } 
						$ p ⊢ p,p0 
						stt_v.pnt.f p0 ⊢ sp 
						» _^ sp ⊢ sp,sc 
							"; .dlt.ptn " 0' "\n" //
						rp8.of_s8 sc ⊢ sc 
						ptn { lb_n rsp p } ⊢ { lb_n rsp ep } 
						rp8.cct { sc ep } ⊢ ep 
						env_lp { lb_n rsp irv rl } ⊢ { lb_n rsp irv sr }
						rp8.cct { ep sr } ⊢ e  
						∎ { lb_n rsp irv e }
					∐. _nil◂{} . 
						rp8.e {} ⊢ e 
						∎ { lb_n rsp irv e } 
				§ env { lb_n irv rsp rl } 
					env_lp { lb_n rsp irv rl } ⊢ { lb_n rsp irv s }
					∎ { lb_n irv rsp s }   
				∎∎ 
			§ printf { s lb_n }
				» 0r _ ⊢ rs  
				mk_db { s rs } ⊢ { s rs dbs }	
				$ lb_n ⊢ lb_n,lb0 
				_inc lb_n ⊢ lb_n 
				$ lb_n ⊢ lb_n,lb1 
				_inc lb_n ⊢ lb_n 
				» _^ lb0,lb1,dbs ⊢ lb0,lb1,dbs,s0
					"\tjmp LB_" 1d' "\n" 
					"LB_" 0d' ": db " 2' "\n"   
					"LB_" 1d' ":\n" 
					push_c_regs 
					`	xor rax,rax  
					"\tmov rdi,LB_" 0d' "\n" 
					`	mov QWORD [rsp_tmp],rsp 
					`	and rsp,~0xf 
					`	call printf 
					`	mov rsp,QWORD [rsp_tmp]
					pop_c_regs 
					//
				∎ { s lb_n s0 }
			§§ cmp_s8
				§ 
					@.f { lb0 s }  
						_s8_len s ⊢ { s ls } 
						» 0r _ ⊢ i 
						rp8.e {} ⊢ e0
						lp { lb0 s ls i e0 } ⊢ { lb0 s e0 }
						∎ { lb0 s e0 } 
					@.lp { lb0 s ls i e0 } 
						∐ ls'=i' . 
							∎ { lb0 s e0 } 
						∐. . 
							_lds { s i } ⊢ { s i c } 
							» _^ i,c,lb0 ⊢ i,c,lb0,s0 
								"\tcmp BYTE [rdi+" 0d' "]," 1d' "\n" 
								"\tjnz LB_" 2d' "\n" 
								// 
							_inc i ⊢ i 
							rp8.add_s8 { e0 s0 } ⊢ e0 
							lp { lb0 s ls i e0 } ⊢|
				∎∎ 
			§ @.asc_hp { l k }
				∐ l ⊢ _cns◂{ { k0 o0 } l } .
					stt_v.eq_hp { k k0 } ⊢ { k k0 b } 
					∐ b ⊢ bl.t◂{} .
						∐ o0 ⊢ _some◂v0 .
							$ v0 ⊢ v0,v1
							_some v0 ⊢ o0
							_cns { { k0 o0 } l } ⊢ l
							_some v1 ⊢ r1
							∎ { l k r1 }
						∐. .
							_cns { { k0 o0 } l } ⊢ l
							_none {} ⊢ r1
							∎ { l k r1 }
					∐. .
						asc_hp { l k } ⊢ { l k r0 }
						_cns { { k0 o0 } l } ⊢ l
						∎ { l k r0 }
				∐. .
					_none {} ⊢ r1
					∎ { l k r1 }	
			§§ emt 
				§ 
					@.ptn { ahl fl tav lb_n rsp is0 e0 } 
						$ is0 ⊢ 
						∐ RP.rcd◂l0 . 
							» _^ _ ⊢ s0 
								"{ " //
							printf { s0 lb_n } ⊢ { s0 lb_n sr0 }
							rp8.add_s8 { e0 sr0 } ⊢ e0 
							ptn_lst { ahl fl tav lb_n rsp l0 e0 } ⊢ { ahl fl tav lb_n rsp e0 }
							» _^ _ ⊢ s1 
								"} " // 
							printf { s1 lb_n } ⊢ { s1 lb_n sr0 }
							rp8.add_s8 { e0 sr0 } ⊢ e0
							∎	{ ahl fl tav lb_n rsp e0 }
						∐. RP.atm◂k0 . 
							$ k0 ⊢ 
							∐ stt_v.hp◂{ r h } . 
								reg { rsp r } ⊢ { rsp r sr b }
								» _^ sr ⊢ sr,s0 
									"\tmov rax," 0' "\n"
									push_c_regs 
									"\tmov r8,rax\n"
									//		
								rp8.add_s8 { e0 s0 } ⊢ e0 
								hp { ahl fl tav lb_n rsp h e0 } ⊢ { ahl fl tav lb_n rsp e0 } 
								» _^ _ ⊢ s0 
									pop_c_regs //
								rp8.add_s8 { e0 s0 } ⊢ e0 
								∎ { ahl fl tav lb_n rsp e0 } 								
							∐ stt_v.hp_im◂iv . 
								$ iv ⊢ 
								∐ ast.r64◂x . 
									» _^ x ⊢ x,sx 
										0d' "r" //
									printf { sx lb_n } ⊢ { sx lb_n s0 } 
									rp8.add_s8 { e0 s0 } ⊢ e0 
									∎ { ahl fl tav lb_n rsp e0 }
								∐. ast.s8◂s . 
									» 0r _ ⊢ x0 
									mk_esc_s8 s ⊢ { s ss } 
									» _^ ss ⊢ ss,s0 
										"\"" 0' "\"" // 
									printf { s0 lb_n } ⊢ { s0 lb_n s00 } 
									rp8.add_s8 { e0 s00 } ⊢ e0 
									∎ { ahl fl tav lb_n rsp e0 }
							∐ stt_v.hp_im_e◂ie0 . 
							» "emt x0 " _ ⊢ ee 
									_emt ee ⊢ ee 
								∎|
							∐ stt_v.pt◂{ r0 r1 } . 	
								» "clr A0" _ ⊢ ee0 
								_emt ee0 ⊢ _ 
								∎|  
							∐. stt_v.stt_adt◂{ ia0 na0 pa0 } .
								» _^ ia0 ⊢ ia0,sx 
										"'" 0d' "◂" //
								printf { sx lb_n } ⊢ { sx lb_n s0 }
								rp8.add_s8 { e0 s0 } ⊢ e0 
								ptn { ahl fl tav lb_n rsp pa0 e0 } ⊢| 
					@.hp { ahl fl tav lb_n rsp h e0 } 
						$ h ⊢ 
						∐ stt_v.r64◂{} . 
							» _^ _ ⊢ %s1 
								"\tmov rsi,r8\n" 
								`	xor rax,rax  
								`	mov rdi,fmt_r64
								`	mov QWORD [rsp_tmp],rsp 
								`	and rsp,~0xf 
								`	call printf 
								`	mov rsp,QWORD [rsp_tmp]
								//		 
								rp8.add_s8 { e0 s1 } ⊢ e0 
								∎ { ahl fl tav lb_n rsp e0 }
						∐ stt_v.ref◂q0 . 
							$ q0 ⊢ 
							∐ stt_v.opq◂{} . 
								» _^ _ ⊢ s1 
									"\tmov rsi,r8\n" 
									"\tadd rsi,8\n"
									`	xor rax,rax  
									`	mov rdi,fmt_s8
									`	mov QWORD [rsp_tmp],rsp 
									`	and rsp,~0xf 
									`	call printf 
									`	mov rsp,QWORD [rsp_tmp]
									//		
								rp8.add_s8 { e0 s1 } ⊢ e0 
								∎ { ahl fl tav lb_n rsp e0 }
							∐ stt_v.arr◂h0 . 
								» "{| " _ ⊢ sp0 
								printf { sp0 lb_n } ⊢ { sp0 lb_n se0 } 
								rp8.add_s8 { e0 se0 } ⊢ e0 
								$ lb_n ⊢ lb_n,lb0
								_inc lb_n ⊢ lb_n 
								$ lb_n ⊢ lb_n,lb1
								_inc lb_n ⊢ lb_n 
								» _^ lb0,lb1 ⊢ lb0,lb1,s1 
									`	mov rsi,[r8]
									`	mov rax,0 
									"LB_" 0d' ":\n"
									`	cmp rsi,rax 
									"\tjz LB_" 1d' "\n"
									`	push r8 
									`	push rax 
									`	push rsi 
									`	mov r8,QWORD [r8+8+8*rax]
									//
								rp8.add_s8 { e0 s1 } ⊢ e0
								hp { ahl fl tav lb_n rsp h0 e0 } ⊢ { ahl fl tav lb_n rsp e0 } 
								» " " _ ⊢ sp1 
								printf { sp1 lb_n } ⊢ { sp1 lb_n se0 } 
								rp8.add_s8 { e0 se0 } ⊢ e0 
								» _^ lb0,lb1 ⊢ lb0,lb1,s1 	 
									`	pop rsi 
									`	pop rax 
									`	pop r8 
									`	add rax,1 
									"\tjmp LB_" 0d' "\n" 
									"LB_" 1d' ":\n" 
									//	
								rp8.add_s8 { e0 s1 } ⊢ e0 
								» "|}" _ ⊢ sp2 
								printf { sp2 lb_n } ⊢ { sp2 lb_n se0 } 
								rp8.add_s8 { e0 se0 } ⊢ e0 
								∎ { ahl fl tav lb_n rsp e0 } 
							∐ stt_v.clr◂h0 . 
							» "clr A1" _ ⊢ ee0 
								_emt ee0 ⊢ _ 
								∎|
							∐ stt_v.pt_hp◂{} . 
								» "clr A2" _ ⊢ ee0 
								_emt ee0 ⊢ _ 
								∎|
							∐. stt_v.rcd◂l0 . 
								» "*{ " _ ⊢ s0 
								printf { s0 lb_n } ⊢ { s0 lb_n sr0 }
								rp8.add_s8 { e0 sr0 } ⊢ e0 
								» 0r _ ⊢ i0 
								hp_rcd { ahl fl tav lb_n rsp l0 i0 e0 } ⊢ { ahl fl tav lb_n rsp e0 }
								» "} " _ ⊢ s1 
								printf { s1 lb_n } ⊢ { s1 lb_n sr0 }
								rp8.add_s8 { e0 sr0 } ⊢ e0
								∎	{ ahl fl tav lb_n rsp e0 }
						∐ stt_v.adt◂{ ax0 l0 } . 
							$ ax0 ⊢ ax0,ax00 
							$ l0 ⊢ l0,l00 
							stt_v.adt { ax00 l00 } ⊢ h0 
							asc_hp { ahl h0 } ⊢ { ahl h0 o } 
							$ o ⊢ 
							∐ _some◂lb0 . 
								» _^ lb0 ⊢ lb0,s1 
									"\tcall LB_" 0d' "\n"  
									//		
								rp8.add_s8 { e0 s1 } ⊢ e0 
								∎ { ahl fl tav lb_n rsp e0 }
							∐. _none◂{} . 
								$ lb_n ⊢ lb_n,lb0 
								_inc lb_n ⊢ lb_n 
								$ lb0 ⊢ lb0,lb00 
								» _^ lb0 ⊢ lb0,s1 
									"\tcall LB_" 0d' "\n"  
									//		
								rp8.add_s8 { e0 s1 } ⊢ e0 
								_some lb00 ⊢ o 
								_cns { { h0 o } ahl } ⊢ ahl 
								_cns { { ax0 l0 lb0 } fl } ⊢ fl 
								∎ { ahl fl tav lb_n rsp e0 }
						∐. stt_v.pv◂pv0 .  
							» _^ _ ⊢ ec1
									` xor rax,rax 
									`	mov rdi,rt_err0 
									`	mov QWORD [rsp_tmp],rsp 
									`	and rsp,~0xf 
									`	call printf
									`	mov rsp,QWORD [rsp_tmp]
									`	mov QWORD [err_n],0xffff_0002
									`	jmp err
									// 
								rp8.add_s8 { e0 ec1 } ⊢ e0 
								∎ { ahl fl tav lb_n rsp e0 }
					@.hp_rcd { ahl fl tav lb_n rsp l0 i0 e0 }
						$ l0 ⊢ 
						∐ _cns◂{ h l0 } . 
							» _^ i0 ⊢ i0,s0 
								"\tpush r8\n" 
								"\tmov r8,QWORD [r8+8+8*" 0d' "]\n" // 
							rp8.add_s8 { e0 s0 } ⊢ e0 
							hp { ahl fl tav lb_n rsp h e0 } ⊢ { ahl fl tav lb_n rsp e0 } 
							» _^ _ ⊢ s0 
								`	pop r8 
								//
							rp8.add_s8 { e0 s0 } ⊢ e0 
							» " " _ ⊢ ss 
							printf { ss lb_n } ⊢ { ss lb_n ssp } 
							rp8.add_s8 { e0 ssp } ⊢ e0 
							_inc i0 ⊢ i0 
							hp_rcd { ahl fl tav lb_n rsp l0 i0 e0 } ⊢| 
						∐. _nil◂{} . 
							∎ { ahl fl tav lb_n rsp e0 }
					@.ptn_lst { ahl fl tav lb_n rsp l0 e0 } 
						$ l0 ⊢ 
						∐ _cns◂{ p0 l0 } . 
							ptn { ahl fl tav lb_n rsp p0 e0 } ⊢ { ahl fl tav lb_n rsp e0 } 
							» _^ _ ⊢ s0 
								" " //
							printf { s0 lb_n } ⊢ { s0 lb_n s1 } 
							rp8.add_s8 { e0 s1 } ⊢ e0
							ptn_lst { ahl fl tav lb_n rsp l0 e0 } ⊢|
						∐. _nil◂{} . 
							∎ { ahl fl tav lb_n rsp e0 } 
					@.adt { ahl fl ax0 l0 tav lb_n rsp e0 } 
						_lod_q { tav ax0 } ⊢ { tav ax0 { w0 o0 } } 
						∐ o0 ⊢ _some◂{ lx0 lx1 vl0 pl0 } .
							mk_adt.f { l0 vl0 pl0 } ⊢ pl0							
							lst.len pl0 ⊢ { pl0 n } 
							mk_jmp_tbl { lb_n n } ⊢ { lb_n ej lbl } 
							rp8.mk_s8 ej ⊢ { ej sj } 
							$ lb_n ⊢ lb_n,lb0 
							_inc lb_n ⊢ lb_n
							$ lb_n ⊢ lb_n,lb1 
							_inc lb_n ⊢ lb_n 
							» _^ lb0,sj ⊢ lb0,sj,s0  
								"\tmovzx rax,BYTE [r8+6]\n" 
								"\tjmp QWORD [LB_" 0d' "+8*rax]\n"
								"LB_" 0d' ": dq " 1' "\n" //
							rp8.add_s8 { e0 s0 } ⊢ e0 
							» 0r _ ⊢ j0  
							adt_hp { ahl fl j0 tav rsp pl0 lbl lb1 lb_n e0 } ⊢ { ahl fl tav rsp lb1 lb_n e0 }
							» _^ lb1 ⊢ lb1,s0 
								"LB_" 0d' ":\n"
								"\tret\n" //
							rp8.add_s8 { e0 s0 } ⊢ e0   
							∎ { ahl fl tav lb_n rsp e0 }
						∐. . 
						» "emt x2" _ ⊢ ee 
									_emt ee ⊢ ee 
							∎|   
					@.adt_hp { ahl fl j0 tav rsp lr lbl lb1 lb_n e0 } 
						∐ lr ⊢ _cns◂{ h lr }; lbl ⊢ _cns◂{ lbi lbl } . 
							» _^ lbi ⊢ lbi,s0 
								"LB_" 0d' ":\n" // 
							rp8.add_s8 { e0 s0 } ⊢ e0 
							» _^ j0 ⊢ j0,sx 
										"'" 0d' "◂" //
							_inc j0 ⊢ j0 
							printf { sx lb_n } ⊢ { sx lb_n s0 }
							rp8.add_s8 { e0 s0 } ⊢ e0 
							∐ h ⊢ stt_v.ref◂q0 . 
								stt_v.ref q0 ⊢ h 
								hp { ahl fl tav lb_n rsp h e0 } ⊢ { ahl fl tav lb_n rsp e0 } 
								» _^ lb1 ⊢ lb1,s0 
									"\tjmp LB_" 0d' "\n" // 
								rp8.add_s8 { e0 s0 } ⊢ e0 
								adt_hp { ahl fl j0 tav rsp lr lbl lb1 lb_n e0 } ⊢| 
							∐. . 
								» _^ _ ⊢ s0 
									"\tmov r8,QWORD [r8+8]\n" // 
								rp8.add_s8 { e0 s0 } ⊢ e0 
								hp { ahl fl tav lb_n rsp h e0 } ⊢ { ahl fl tav lb_n rsp e0 } 
								» _^ lb1 ⊢ lb1,s0 
									"\tjmp LB_" 0d' "\n" // 
								rp8.add_s8 { e0 s0 } ⊢ e0 
								adt_hp { ahl fl j0 tav rsp lr lbl lb1 lb_n e0 } ⊢|
						∐ lr ⊢ _nil◂{}; lbl ⊢ _nil◂{} . 
							∎ { ahl fl tav rsp lb1 lb_n e0 }
						∐. . 
						» "emt adt_hp x3" _ ⊢ ee 
									_emt ee ⊢ ee 
							∎|
					@.adt_lp { ahl fl tav lb_n rsp e0 }
						∐ fl ⊢ _cns◂{ { ax0 tl0 lb0 } fl } . 
							» _^ lb0 ⊢ lb0,se 
								"LB_" 0d' ":\n" // 
							rp8.add_s8 { e0 se } ⊢ e0 
							adt { ahl fl ax0 tl0 tav lb_n rsp e0 } ⊢ { ahl fl tav lb_n rsp e0 }
							adt_lp { ahl fl tav lb_n rsp e0 } ⊢| 
						∐. . 
							∎ { ahl tav lb_n rsp e0 } 
				∎∎
			§§ rpc
				§ 
					@.hp_rcd { j0 ahl fl tav lb_n hl e0 }
						$ hl ⊢ 
						∐ _cns◂{ h hl } . 
							» _^ j0 ⊢ j0,s0 
								`	push rdi
								`	push rsi
								"\tmov rdi,QWORD [rdi+8+8*" 0d' "]\n" //
							rp8.add_s8 { e0 s0 } ⊢ e0
							hp { ahl fl tav lb_n h e0 } ⊢ { ahl fl tav lb_n e0 } 
							» _^ j0 ⊢ j0,s0
								`	pop rsi  
								`	pop rdi 
								"\tmov QWORD [rsi+8+8*" 0d' "],rax\n"  
								//  
							rp8.add_s8 { e0 s0 } ⊢ e0
							_inc j0 ⊢ j0 
							hp_rcd { j0 ahl fl tav lb_n hl e0 } ⊢|
						∐. _nil◂{} . 
							» _^ _ ⊢ s0 
								`	mov rax,rsi 
								//
							rp8.add_s8 { e0 s0 } ⊢ e0 
							∎ { ahl fl tav lb_n e0 } 
					
					@.hp { ahl fl tav lb_n h e0 }
						$ h ⊢ 
						∐ stt_v.r64◂{} . 
							» "\tmov rax,rdi\n" _ ⊢ s0 
							rp8.add_s8 { e0 s0 } ⊢ e0 
							∎ { ahl fl tav lb_n e0 }
						∐ stt_v.ref◂q0 . 
							$ q0 ⊢ 
							∐ stt_v.opq◂{} . 
								» _^ _ ⊢ ec1 
									push_c_regs  
									`	call rpc_s8  
									pop_c_regs // 
								rp8.add_s8 { e0 ec1 } ⊢ e0 
								∎ { ahl fl tav lb_n e0 }
							∐ stt_v.arr◂ar0 .
							» "rpc.hp 0" _ ⊢ ee 
									_emt ee ⊢ ee 
								∎|  
							∐ stt_v.clr◂hc0 . 
								» "clr A4" _ ⊢ ee0 
								_emt ee0 ⊢ _ 
								∎|
							∐ stt_v.pt_hp◂{} . 
								» "clr A5" _ ⊢ ee0 
								_emt ee0 ⊢ _ 
								∎|
							∐. stt_v.rcd◂l0 .
								∐ l0 ⊢ _nil◂{} . 
									» _^ _ ⊢ s0 
										`	mov rax,unt
										//
									rp8.add_s8 { e0 s0 } ⊢ e0 
									∎ { ahl fl tav lb_n e0 }
								∐. . 
									lst.len l0 ⊢ { l0 nl0 } 
									» _^ nl0 ⊢ nl0,s0 
										"\tmov rsi,[SS_RCD_" 0d' "_TOP]\n" 
										`	mov rax,[rsi] 
										"\tmov QWORD [SS_RCD_" 0d' "_TOP],rax\n"
										`	mov QWORD [rsi],0
										// 
									rp8.add_s8 { e0 s0 } ⊢ e0
									» 0r _ ⊢ j0 
									hp_rcd { j0 ahl fl tav lb_n l0 e0 } ⊢| 
						∐ stt_v.adt◂{ ax0 l0 } .
							$ ax0 ⊢ ax0,ax00 
							$ l0 ⊢ l0,l00 
							stt_v.adt { ax00 l00 } ⊢ h0 
							asc_hp { ahl h0 } ⊢ { ahl h0 o } 
							$ o ⊢ 
							∐ _some◂lb0 . 
								» _^ lb0 ⊢ lb0,s1 
									"\tcall LB_" 0d' "\n"  
									//		
								rp8.add_s8 { e0 s1 } ⊢ e0 
								∎ { ahl fl tav lb_n e0 }
							∐. _none◂{} . 
								$ lb_n ⊢ lb_n,lb0 
								_inc lb_n ⊢ lb_n 
								$ lb0 ⊢ lb0,lb00 
								» _^ lb0 ⊢ lb0,s1 
									"\tcall LB_" 0d' "\n"  
									//		
								rp8.add_s8 { e0 s1 } ⊢ e0 
								_some lb00 ⊢ o 
								_cns { { h0 o } ahl } ⊢ ahl 
								_cns { { ax0 l0 lb0 } fl } ⊢ fl 
								∎ { ahl fl tav lb_n e0 } 
						∐. stt_v.pv◂vi .
						» "rpc.hp x0" _ ⊢ ee 
									_emt ee ⊢ ee  
							∎|
							
				§	
					@.adt { ahl fl ax0 l0 tav lb_n e0 } 
						_lod_q { tav ax0 } ⊢ { tav ax0 { w0 o0 } } 
						∐ o0 ⊢ _some◂{ lx0 lx1 vl0 pl0 } .
							mk_adt.f { l0 vl0 pl0 } ⊢ pl0							
							lst.len pl0 ⊢ { pl0 n } 
							mk_jmp_tbl { lb_n n } ⊢ { lb_n ej lbl } 
							rp8.mk_s8 ej ⊢ { ej sj } 
							$ lb_n ⊢ lb_n,lb0 
							_inc lb_n ⊢ lb_n
							$ lb_n ⊢ lb_n,lb1 
							_inc lb_n ⊢ lb_n 
							» _^ lb0,sj ⊢ lb0,sj,s0  
								"\tmovzx rsi,BYTE [rdi+6]\n" 
								"\tjmp QWORD [LB_" 0d' "+8*rsi]\n"
								"LB_" 0d' ": dq " 1' "\n" //
							rp8.add_s8 { e0 s0 } ⊢ e0 
							» 0r _ ⊢ j0  
							adt_hp { ahl fl j0 tav pl0 lbl lb1 lb_n e0 } ⊢ { ahl fl tav lb1 lb_n e0 }
							» _^ lb1 ⊢ lb1,s0 
								"LB_" 0d' ":\n"
								"\tret\n" //
							rp8.add_s8 { e0 s0 } ⊢ e0   
							∎ { ahl fl tav lb_n e0 }
						∐. . 
							∎|   
					@.adt_hp { ahl fl j0 tav lr lbl lb1 lb_n e0 } 
						∐ lr ⊢ _cns◂{ h lr }; lbl ⊢ _cns◂{ lbi lbl } . 
							» _^ lbi ⊢ lbi,s0 
								"LB_" 0d' ":\n" // 
							rp8.add_s8 { e0 s0 } ⊢ e0 
							##» _^ j0 ⊢ j0,sx 
							##			"'" 0d' "◂" //
							##printf { sx lb_n } ⊢ { sx lb_n s0 }
							##rp8.add_s8 { e0 s0 } ⊢ e0 
							∐ h ⊢ stt_v.ref◂q0 . 
								stt_v.ref q0 ⊢ h 
								hp { ahl fl tav lb_n h e0 } ⊢ { ahl fl tav lb_n e0 } 
								» _^ lb1,j0 ⊢ lb1,j0,s0
									"\tmov BYTE [rax+6]," 1d' "\n" 
									"\tjmp LB_" 0d' "\n" // 
								rp8.add_s8 { e0 s0 } ⊢ e0 
								_inc j0 ⊢ j0 
								adt_hp { ahl fl j0 tav lr lbl lb1 lb_n e0 } ⊢| 
							∐. . 
								» _^ _ ⊢ s0 
									"\tmov rdi,QWORD [rdi+8]\n" // 
								rp8.add_s8 { e0 s0 } ⊢ e0 
								hp { ahl fl tav lb_n h e0 } ⊢ { ahl fl tav lb_n e0 } 
								» _^ lb1,j0 ⊢ lb1,j0,s0 
									`	mov rsi,[SS_LN_TOP] 
									`	mov rdi,[rsi] 
									`	mov QWORD [SS_LN_TOP],rdi
									`	mov QWORD [rsi+8],rax
									"\tmov BYTE [rsi+6]," 1d' "\n"
									`	mov rax,rsi
									"\tjmp LB_" 0d' "\n" // 
								rp8.add_s8 { e0 s0 } ⊢ e0 
								_inc j0 ⊢ j0 
								adt_hp { ahl fl j0 tav lr lbl lb1 lb_n e0 } ⊢|
						∐ lr ⊢ _nil◂{}; lbl ⊢ _nil◂{} . 
							∎ { ahl fl tav lb1 lb_n e0 }
						∐. . 
							∎|
					@.adt_lp { ahl fl tav lb_n e0 }
						∐ fl ⊢ _cns◂{ { ax0 tl0 lb0 } fl } . 
							» _^ lb0 ⊢ lb0,se 
								"LB_" 0d' ":\n" // 
							rp8.add_s8 { e0 se } ⊢ e0 
							adt { ahl fl ax0 tl0 tav lb_n e0 } ⊢ { ahl fl tav lb_n e0 }
							adt_lp { ahl fl tav lb_n e0 } ⊢| 
						∐. . 
							∎ { ahl tav lb_n e0 }  
				§ 
					@.f_lst { ahl fl tav lb_n l0 rsp irv v0 e0 }   					
						$ l0 ⊢
						∐ _cns◂{ p0 l0 } . 
							f { ahl fl tav lb_n p0 rsp irv v0 e0 } ⊢ { ahl fl tav lb_n p0 p1 rsp irv v0 e0 }
							f_lst { ahl fl tav lb_n l0 rsp irv v0 e0 } ⊢ { ahl fl tav lb_n l0 l1 rsp irv v0 e0 } 
							_cns { p0 l0 } ⊢ l0 
							_cns { p1 l1 } ⊢ l1 
							∎ { ahl fl tav lb_n l0 l1 rsp irv v0 e0 }
						∐. _nil◂{} . 
							_nil {} ⊢ l0
							_nil {} ⊢ l1 
							∎ { ahl fl tav lb_n l0 l1 rsp irv v0 e0 }
					@.f { ahl fl tav lb_n is rsp irv vs0 e0 }
						$ is ⊢ is,is0 
						$ is0 ⊢ 
						∐ RP.atm◂k . 
							$ k ⊢ 
							∐ stt_v.hp◂{ r0 h } . 
								_nil {} ⊢ dl 
								alc_vs vs0 ⊢ { vs0 rm0 } 
								brk_rsp { rsp rm0 } ⊢ { rsp rm0 eb0 } 
								rp8.add_s8 { e0 eb0 } ⊢ e0 
								$ h ⊢ h,h0
								reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
								reg { rsp rm0 } ⊢ { rsp rm0 srm0 brm0 }
								stt_v.hp { rm0 h0 } ⊢ p1 
								RP.atm p1 ⊢ p1 
								» _^ sr0 ⊢ sr0,s0 
									"\tmov rdi," 0' "\n" // 
								rp8.add_s8 { e0 s0 } ⊢ e0 
								hp { ahl fl tav lb_n h e0 } ⊢ { ahl fl tav lb_n e0 }
								» _^ srm0 ⊢ srm0,s0 
									"\tmov " 0' ",rax\n" // 
								rp8.add_s8 { e0 s0 } ⊢ e0
								∎ { ahl fl tav lb_n is p1 rsp irv vs0 e0 } 
							∐ stt_v.hp_im◂v0 .
								$ is ⊢ is,id 
								∎ { ahl fl tav lb_n is id rsp irv vs0 e0 } 
							∐ stt_v.hp_im_e◂ev0 .
								$ is ⊢ is,id 
								∎ { ahl fl tav lb_n is id rsp irv vs0 e0 }
							∐ stt_v.pt◂{ r0 r1 } . 
							» "clr A6" _ ⊢ ee0 
								_emt ee0 ⊢ _ 
								∎|
							∐. stt_v.stt_adt◂{ ia na pa0 } . 
								f { ahl fl tav lb_n pa0 rsp irv vs0 e0 } ⊢ { ahl fl tav lb_n pa0 id0 rsp irv vs0 e0 }
								stt_v.stt_adt { ia na id0 } ⊢ p1 
								RP.atm p1 ⊢ p1 
								∎ { ahl fl tav lb_n is p1 rsp irv vs0 e0 }
						∐. RP.rcd◂l0 . 
							f_lst { ahl fl tav lb_n l0 rsp irv vs0 e0 } ⊢ { ahl fl tav lb_n l0 l1 rsp irv vs0 e0 }
							RP.rcd l0 ⊢ p0 
							RP.rcd l1 ⊢ p1 
							∎ { ahl fl tav lb_n p0 p1 rsp irv vs0 e0 }						   					
				§ @.lp { ahl fl tav lb_n rsp irv rl is dpl ppl e0 } 
					$ dpl ⊢ 
					∐ _cns◂{ d0 dpl } . 
						rset.ini {} ⊢ v0 
						$ rl ⊢ rl,rl0 
						stt_v.mk_rset_env { irv rl0 v0 } ⊢ { irv v0 } 
						f { ahl fl tav lb_n is rsp irv v0 e0 } ⊢ { ahl fl tav lb_n is id rsp irv v0 e0 } 
						$ id ⊢ id,id0 
						stt_v.pnt.f id0 ⊢ sid 
						» _^ sid ⊢ sid,s0 
							"," 0' // 
						rp8.add_s8 { ppl s0 } ⊢ ppl
						_nil {} ⊢ dl 
						idx.crt_ptn { irv d0 id rl dl } ⊢ { irv rl dl } 
						lp { ahl fl tav lb_n rsp irv rl is dpl ppl e0 } ⊢| 
					∐. _nil◂{} . 
						» "\n" _ ⊢ s0 
						rp8.add_s8 { ppl s0 } ⊢ ppl 
						rp8.cct { ppl e0 } ⊢ e0
						∎ { ahl fl tav lb_n rsp irv rl is e0 }
						
				§ id { tav lb_n rsp irv sis is rl dpl } 
					∐ dpl ⊢ _cns◂{ d0 dpl } . 
						rp8.e {} ⊢ e0 
						$ lb_n ⊢ lb_n,lb0 
						_inc lb_n ⊢ lb_n
						» _^ lb0 ⊢ lb0,s0 
							"\tjmp LB_" 0d' "\n" // 
						rp8.add_s8 { e0 s0 } ⊢ e0 
						» _^ sis ⊢ sis,ppl 
							"; $ " 0' " ⊢ " 0' // 
						rp8.of_s8 ppl ⊢ ppl 
						_nil {} ⊢ dl 
				 		$ is ⊢ is,is0 
						idx.crt_ptn { irv d0 is0 rl dl } ⊢ { irv rl dl } 
						_nil {} ⊢ ahl
						_nil {} ⊢ fl
						rp8.e {} ⊢ e00
						lp { ahl fl tav lb_n rsp irv rl is dpl ppl e00 } ⊢ { ahl fl tav lb_n rsp irv rl is e00 } 
						adt_lp { ahl fl tav lb_n e0 } ⊢ { ahl tav lb_n e0 }
						» _^ lb0 ⊢ lb0,s0 
							"LB_" 0d' ":\n" // 
						rp8.add_s8 { e0 s0 } ⊢ e0 
						rp8.cct { e0 e00 } ⊢ e0 
						∎ { tav lb_n rsp irv sis is rl e0 }
					∐. . 
					» "id 0" _ ⊢ ee 
									_emt ee ⊢ ee 
						∎| 
				∎∎ 
			§§ arr 
				§ l1 { rsp evv a0 e0 }
					∐ a0 ⊢ stt_v.hp_im◂v0; v0 ⊢ ast.r64◂x0 .
						» _^ x0 ⊢ x0,s0
							"\tmov rdi," 0d' "\n" //
						rp8.add_s8 { e0 s0 } ⊢ e0
						∎ { rsp evv e0 }
					∐ a0 ⊢ stt_v.hp_im_e◂i0 . 
						_lod_q { evv i0 } ⊢ { evv i0 k0 } 
						∐ k0 ⊢ k_cst_v◂v0; v0 ⊢ ast.r64◂x0 . 
							» _^ x0 ⊢ x0,s0
								"\tmov rdi," 0d' "\n" //
							rp8.add_s8 { e0 s0 } ⊢ e0
							∎ { rsp evv e0 }
						∐. .
							» "mk_arr 0" _ ⊢ ee 
							_emt ee ⊢ ee  
							∎|  
					∐ a0 ⊢ stt_v.hp◂{ r1 h1 }; h1 ⊢ stt_v.r64◂{} . 
						reg { rsp r1 } ⊢ { rsp r1 sr1 br1 } 
						» _^ sr1 ⊢ sr1,s0
							"\tmov rdi," 0' "\n" //
						rp8.add_s8 { e0 s0 } ⊢ e0
						∎ { rsp evv e0 }
					∐. . 
						» "mk_arr 0" _ ⊢ ee 
						_emt ee ⊢ ee 
						∎|  
				§ mk_arr { is sis irv evv tav tv_n tv yd lb_n rl rsp }
					rp8.e {} ⊢ e0 
					stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl vs1 }
					$ is ⊢ is,is0 
					stt_v.mk_rset { is0 vs1 } ⊢ vs1 
					∐ is ⊢ RP.rcd◂l0; l0 ⊢ _cns◂{ a0 l0 }; l0 ⊢ _cns◂{ a1 l0 }; l0 ⊢ _nil◂{}; a0 ⊢ RP.atm◂a0 . 
						» 0r _ ⊢ pv_n 
						_nil {} ⊢ al 
						rset.ini {} ⊢ vs0 
						alc_type_k.f { pv_n al tav tv_n tv vs0 yd } ⊢ { pv_n al tav tv_n tv vs0 pd0 }
						∐ pd0 ⊢ RP.rcd◂l0; l0 ⊢ _cns◂{ a2 l0 }; l0 ⊢ _cns◂{ a3 l0 }; l0 ⊢ _cns◂{ a4 l0 }; l0 ⊢ _nil◂{} .
							∐ a4 ⊢ RP.atm◂ap; ap ⊢ stt_v.hp◂{ r0 h0 }; h0 ⊢ stt_v.ref◂q0; q0 ⊢ stt_v.arr◂ha0 . 
								alc_vs vs1 ⊢ { vs1 rm0 } 
								alc_vs vs1 ⊢ { vs1 rm1 } 
								alc_vs vs1 ⊢ { vs1 rm2 } 
								$ a0 ⊢ a0,a00 
								RP.atm a00 ⊢ a00 
								$ a1 ⊢ a1,a11 
								$ ha0 ⊢ ha0,ha00 
								$ rm0 ⊢ rm0,rm00 
								stt_v.arr ha00 ⊢ q0 
								stt_v.ref q0 ⊢ h0
								$ h0 ⊢ h0,h00 
								stt_v.hp { rm00 h00 } ⊢ k0 
								RP.atm k0 ⊢ k0 
								_nil {} ⊢ l0 
								_cns { k0 l0 } ⊢ l0 
								_cns { a11 l0 } ⊢ l0 
								_cns { a00 l0 } ⊢ l0 
								RP.rcd l0 ⊢ pd1 
								l1 { rsp evv a0 e0 } ⊢ { rsp evv e0 }
								» "calloc" _ ⊢ f0 
								c_call f0 ⊢ { f0 sf0 } 
								$ lb_n ⊢ lb_n,lb2 
								_inc lb_n ⊢ lb_n 
								$ lb_n ⊢ lb_n,lb3 
								_inc lb_n ⊢ lb_n
								brk_rsp { rsp rm2 } ⊢ { rsp rm2 sb0 } 
								rp8.add_s8 { e0 sb0 } ⊢ e0 
								reg { rsp rm0 } ⊢ { rsp rm0 srm0 _ } 
								reg { rsp rm2 } ⊢ { rsp rm2 srm2 _ } 
								» _^ sf0,lb2,lb3,srm0,srm2 ⊢ sf0,lb2,lb3,_,_,s0 
									`	push rdi 
									`	lea rsi,[8+8*rdi]
									`	mov rdi,1 
									push_c_regs 
									0' 
									pop_c_regs 
									`	pop rdi 
									"\tmov " 3' ",rax\n" 
									`	mov QWORD [rax],rdi 
									`	cmp rdi,0 
									"\tjz LB_" 2d' "\n" 
									"\tmov " 4' ",rdi\n" 
									//
								rp8.add_s8 { e0 s0 } ⊢ e0 
								_nil {} ⊢ ahl
								_nil {} ⊢ fl
								rp8.e {} ⊢ e1 
								rpc.f { ahl fl tav lb_n a1 rsp irv vs1 e1 } ⊢ { ahl fl tav lb_n a1 p1 rsp irv vs1 e1 }					
								$ ha0 ⊢ ha0,ha00 
								rp8.e {} ⊢ eh 
								rpc.hp { ahl fl tav lb_n ha00 eh } ⊢ { ahl fl tav lb_n eh }
								rp8.e {} ⊢ e2 
								rpc.adt_lp { ahl fl tav lb_n e2 } ⊢ { ahl tav lb_n e2 }
								skip { lb_n e2 } ⊢ { lb_n e2 } 
								rp8.cct { e0 e2 } ⊢ e0 
								rp8.cct { e0 e1 } ⊢ e0 
								$ rm1 ⊢ rm1,rm10
								
								stt_v.hp { rm10 h0 } ⊢ pt0 
								RP.atm pt0 ⊢ pt0 
								_none {} ⊢ lb1
								mov_ptn.f2 { tav rsp vs1 p1 pt0 lb1 } ⊢ { tav rsp vs1 er0 }
								rp8.cct { e0 er0 } ⊢ e0 
								rp8.mk_s8 eh ⊢ { eh seh }
								reg { rsp rm1 } ⊢ { rsp rm1 srm1 _ } 
								reg { rsp rm0 } ⊢ { rsp rm0 srm0 _ } 
								reg { rsp rm2 } ⊢ { rsp rm2 srm2 _ } 
								» _^ srm0,srm1,srm2,lb2,lb3,seh ⊢ srm0,srm1,srm2,lb2,lb3,seh,sc2	
									"LB_" 3d' ":\n" 
									"\tmov rsi," 0' "\n" 
									"\tmov rax," 1' "\n" 
									"\tmov rdi," 2' "\n" 
									`	mov QWORD [rsi+8*rdi],rax 
									`	cmp rdi,1 
									"\tjz LB_" 4d' "\n" 
									`	sub rdi,1 
									"\tmov " 2' ",rdi\n" 
									`	mov rdi,rax
									5' 
									"\tmov " 1' ",rax\n"
									"\tjmp LB_" 3d' "\n" 
									"LB_" 4d' ":\n"
									//	
								rp8.add_s8 { e0 sc2 } ⊢ e0				
								∎ { irv evv tav tv_n tv lb_n rl rsp e0 pd1 }
							∐. .
								» "mk_arr 0" _ ⊢ ee 
								_emt ee ⊢ ee 
								∎| 
						∐. . 
						» "mk_arr 0" _ ⊢ ee 
									_emt ee ⊢ ee 
							∎| 
					∐. . 
						» "mk_arr 0" _ ⊢ ee 
							_emt ee ⊢ ee 
							∎| 
			
				§ exc { h } 
					∎| 
				§ arr_of_lst { is sis irv evv tav tv_n tv yd lb_n rl rsp }
					rp8.e {} ⊢ e0 
					» 0r _ ⊢ pv_n 
					_nil {} ⊢ al 
					alc_type_k.hp { pv_n al tav tv_n tv yd } ⊢ { pv_n al tav tv_n tv hd } 
					stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl vs0 } 
					$ is ⊢ is,is0 
					stt_v.mk_rset { is0 vs0 } ⊢ vs0 
					∐ is ⊢ RP.atm◂a0; a0 ⊢ stt_v.stt_adt◂{ ia na p0 } . 
						∐ ia'=1r; p0 ⊢ RP.rcd◂l0; l0 ⊢ _nil◂{} . 
							alc_vs vs0 ⊢ { vs0 rm0 } 
							brk_rsp { rsp rm0 } ⊢ { rsp rm0 sb0 } 
							rp8.add_s8 { e0 sb0 } ⊢ e0 
							reg { rsp rm0 } ⊢ { rsp rm0 srm0 brm0 } 
							» "calloc" _ ⊢ f0 
							c_call f0 ⊢ { f0 sf0 } 
							» _^ sf0,srm0 ⊢ sf0,srm0,s0 
								push_c_regs
								`	xor rax,rax 
								`	mov rdi,1 
								`	mov rsi,8 
								0'
								pop_c_regs 
								"\tmov " 1' ",rax\n" // 
							rp8.add_s8 { e0 s0 } ⊢ e0
							stt_v.hp { rm0 hd } ⊢ a0 
							RP.atm a0 ⊢ is1 
							∎ { irv evv tav tv_n tv lb_n rl rsp e0 is1 }	
						∐ hd ⊢ stt_v.ref◂q0; q0 ⊢ stt_v.arr◂ha0 . 
							$ ha0 ⊢ ha0,ha00 
							_nil {} ⊢ l1 
							_cns { ha00 l1 } ⊢ l1 
							» t_axm.id.lst _ ⊢ ax0 
							stt_v.adt { ax0 l1 } ⊢ h1 
							alc_vs vs0 ⊢ { vs0 rm0 } 
							$ rm0 ⊢ rm0,rm00 
							stt_v.hp { rm00 h1 } ⊢ a1 
							RP.atm a1 ⊢ p1 
							_none {} ⊢ lb1 
							mov_ptn.f2 { tav rsp vs0 p0 p1 lb1 } ⊢ { tav rsp vs0 er } 
							rp8.cct { e0 er } ⊢ e0 
							reg { rsp rm0 } ⊢ { rsp rm0 srm0 brm0 }
							» _^ srm0 ⊢ srm0,s0 
								"\tmov rdi," 0' "\n" 
								push_c_regs 
								`	call arr_of_lst 
								pop_c_regs 
								"\tmov " 0' ",rax\n" //
							rp8.add_s8 { e0 s0 } ⊢ e0
							stt_v.arr ha0 ⊢ q0 
							stt_v.ref q0 ⊢ hd 
							stt_v.hp { rm0 hd } ⊢ a0 
							RP.atm a0 ⊢ is1 
							∎ { irv evv tav tv_n tv lb_n rl rsp e0 is1 }
						∐. . 							
							» "arr_of_lst d0" _ ⊢ ee0 
							_emt ee0 ⊢ _ 
							_emt sis ⊢ _ 
							∎| 
					∐ is ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp◂{ r0 h0 }; h0 ⊢ stt_v.adt◂{ ax0 hl0 } . 
						reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
						» _^ sr0 ⊢ sr0,s0 
							"\tmov rdi," 0' "\n" 
							push_c_regs 
							`	call arr_of_lst 
							pop_c_regs 
							"\tmov " 0' ",rax\n" //
						rp8.add_s8 { e0 s0 } ⊢ e0
						stt_v.hp { r0 hd } ⊢ a0 
						RP.atm a0 ⊢ is1 
						∎ { irv evv tav tv_n tv lb_n rl rsp e0 is1 }	
					∐. . 
						##stt_v.pnt.f is ⊢ sis 
					» "arr_of_lst d1" _ ⊢ ee0 
							_emt ee0 ⊢ _ 
						_emt sis ⊢ _ 
						∎| 
				 
				∎∎ 
			\[
			§§ eq 
				∎∎
			§§ spc 
				§ mk { h } 
					∎| 
				§ alp { h }
					∎| 
				§ frp { h } 
					∎|  
				§ ldp { h } 
					∎|  
				§ xcp { h } 
					∎| 
				∎∎
			\]
			§§ lc_code 
				§§ rep_movsb
					§ 
						@.f { sip0 ip0 lb_n rsp irv rl e0 } 
							∐ ip0 ⊢ RP.rcd◂l0; l0 ⊢ _cns◂{ a0 l0 }; l0 ⊢ _cns◂{ a1 l0 }; l0 ⊢ _cns◂{ a2 l0 }; l0 ⊢ _cns◂{ a3 l0 }; l0 ⊢ _cns◂{ a4 l0 };l0 ⊢ _nil◂{} . 
								f_c0 { a0 lb_n rsp rl e0 } ⊢ { lb_n rsp rl e0 c0 }
								f_s0 { a1 lb_n rsp rl e0 } ⊢ { lb_n rsp rl e0 s0 }
								f_o0 { a2 lb_n rsp rl e0 } ⊢ { lb_n rsp rl e0 o0 }
								f_s1 { a3 lb_n rsp irv rl e0 } ⊢ { lb_n rsp irv rl e0 s1 } 
								f_o1 { a4 lb_n rsp rl e0 } ⊢ { lb_n rsp rl e0 o1 }
								_nil {} ⊢ lr 
								_cns { o1 lr } ⊢ lr 
								_cns { s1 lr } ⊢ lr 
								_cns { o0 lr } ⊢ lr 
								_cns { s0 lr } ⊢ lr 
								_cns { c0 lr } ⊢ lr 
								RP.rcd lr ⊢ p1 
								» _^ _ ⊢ sc0 
									`	pop rsi 
									`	push rcx 
									`	mov rcx,rax 
									`	cld 
									`	rep movsb
									`	pop rcx 
									// 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								$ p1 ⊢ p1,p10 
								stt_v.pnt.f p10 ⊢ sp1 
								» _^ sip0,sp1 ⊢ sip0,sp1,s0 
									"; _rep_movsb " 0' " ⊢ " 1' "\n" // 
								rp8.of_s8 s0 ⊢ s0 
								rp8.cct { s0 e0 } ⊢ e0 
								∎ { lb_n rsp irv rl e0 p1 }
							∐. . 
								∎| 
						@.f_c0 { a0 lb_n rsp rl e0 } 
							∐ a0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp_im◂v0; v0 ⊢ ast.r64◂c0 . 
								» _^ c0 ⊢ c0,sc0 
									"\tmov rax," 0d' "\n" // 
								rp8.add_s8 { e0 sc0 } ⊢ e0 
								stt_v.r64_im c0 ⊢ p1 
								∎ { lb_n rsp rl e0 p1 }
							∐ a0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp◂{ r0 h0 }; h0 ⊢ stt_v.r64◂{} .
								reg { rsp r0 } ⊢ { rsp r0 sr0 br0 }
								» _^ sr0 ⊢ sr0,sc0 
									"\tmov rax," 0' "\n" // 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								stt_v.r64_reg r0 ⊢ p1 
								∎ { lb_n rsp rl e0 p1 }
							∐. . 
								∎| 
						@.f_s0 { a0 lb_n rsp rl e0 } 
							∐ a0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp_im◂v0; v0 ⊢ ast.s8◂s0 . 
								_s8_len s0 ⊢ { s0 ls0 } 
								$ lb_n ⊢ lb_n,lb0 
								_inc lb_n ⊢ lb_n 
								$ lb_n ⊢ lb_n,lb1 
								_inc lb_n ⊢ lb_n  
								» 0r _ ⊢ x0 
								mk_db { s0 x0 } ⊢ { s0 x0 ss0 }
								» _^ lb0,lb1,ss0,ls0 ⊢ lb0,lb1,ss0,ls0,sc0 
									"\tjmp LB_" 0d' "\n"
									"\tLB_ " 1d' ": db " 2' "\n" 
									"LB_" 0d' ":\n" 
									"\tmov rsi,LB_" 1d' "\n" 
									"\tmov rdi," 3d' "\n"
									"\tsub rdi,rax\n" // 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								stt_v.s8_im s0 ⊢ p1 
								∎ { lb_n rsp rl e0 p1 }
							∐ a0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp◂{ r0 h0 }; h0 ⊢ stt_v.ref◂q0; q0 ⊢ stt_v.opq◂{} .
								reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
								» _^ sr0 ⊢ sr0,sc0 
									"\tmov rsi," 0' "\n" 
									"\tmov rdi,0x0000_ffff_ffff_ffff\n"
									"\tand rdi,[rsi]\n"
									"\tsub rdi,rax\n" 
									"\tlea rsi,[rsi+8]\n" // 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								stt_v.s8_reg r0 ⊢ p1 
								∎ { lb_n rsp rl e0 p1 }  
							∐. . 
								∎|  
						@.f_o0 { a0 lb_n rsp rl e0 } 
							∐ a0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp_im◂v0; v0 ⊢ ast.r64◂o0 . 
								» _^ o0 ⊢ o0,sc0 
									"\tcmp rdi," 0d' "\n" 
									"\tjl err\n"
									"\tlea rsi,[rsi+" 0d' "]\n" 
									`	push rsi 
									// 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								stt_v.r64_im o0 ⊢ p1
								∎ { lb_n rsp rl e0 p1 } 
							∐ a0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp◂{ r0 h0 }; h0 ⊢ stt_v.r64◂{} .
								reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
								» _^ sr0 ⊢ sr0,sc0 
									"\tcmp rdi," 0' "\n" 
									"\tjl err\n"
									"\tadd rdi," 0' "\n"
									`	push rsi 
									// 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								stt_v.r64_reg r0 ⊢ p1
								∎ { lb_n rsp rl e0 p1 } 
							∐. . 
								∎| 
						@.f_s1 { a0 lb_n rsp irv rl e0 } 
							∐ a0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp_im◂v0; v0 ⊢ ast.s8◂s1 . 
								_s8_len s1 ⊢ { s1 ls1 } 
								stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl v0 }  	
								alc_vs v0 ⊢ { v0 rm0 } 
								brk_rsp { rsp rm0 } ⊢ { rsp rm0 sb0 } 
								rp8.add_s8 { e0 sb0 } ⊢ e0 
								reg { rsp rm0 } ⊢ { rsp rm0 srm0 brm0 } 
								$ rm0 ⊢ rm0,rm00 
								» _^ srm0 ⊢ srm0,sc0 
									"\tmov " 0' ",rax\n" // 
								rp8.add_s8 { e0 sc0 } ⊢ e0 
								mk_s8 s1 ⊢ { s1 es1 }
								rp8.cct { e0 es1 } ⊢ e0 
								» _^ srm0,ls1 ⊢ srm0,ls1,sc0 
									"\tmov rsi," 0' "\n" 
									"\tmov " 0' ",rax\n" 
									"\tlea rax,[rax+8]\n" 
									"\tmov rdi," 1d' "\n"
									"\tsub rdi,rsi\n" // 
								rp8.add_s8 { e0 sc0 } ⊢ e0 
								stt_v.s8_reg rm00 ⊢ p1 
								∎ { lb_n rsp irv rl e0 p1 }
							∐ a0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp◂{ r0 h0 }; h0 ⊢ stt_v.ref◂q0; q0 ⊢ stt_v.opq◂{} .
								reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
								» _^ sr0 ⊢ sr0,s0 
									"\tmov rsi," 0' "\n" 
									"\tmov rdi,0x0000_ffff_ffff_ffff\n"
									"\tand rdi,[rsi]\n"
									"\tsub rdi,rax\n" 
									"\tlea rsi,[rsi+8]\n" // 
								rp8.add_s8 { e0 s0 } ⊢ e0
								stt_v.s8_reg r0 ⊢ p1 
								∎ { lb_n rsp irv rl e0 p1 }  
							∐. . 
								∎|  
						@.f_o1 { a0 lb_n rsp rl e0 } 
							∐ a0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp_im◂v0; v0 ⊢ ast.r64◂o1 . 
								» _^ o1 ⊢ o1,sc0 
									"\tcmp rdi," 0d' "\n" 
									"\tjl err\n"
									"\tlea rsi,[rsi+" 0d' "]\n"
									`	mov rdi,rsi
									// 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								stt_v.r64_im o1 ⊢ p1 
								∎ { lb_n rsp rl e0 p1 } 
							∐ a0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp◂{ r0 h0 }; h0 ⊢ stt_v.r64◂{} .
								reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
								» _^ sr0 ⊢ sr0,sc0 
									"\tcmp rdi," 0' "\n" 
									"\tjl err\n"
									"\tadd rsi," 0' "\n" 
									`	mov rdi,rsi 
									// 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								stt_v.r64_reg r0 ⊢ p1 
								∎ { lb_n rsp rl e0 p1 } 
							∐. . 
								∎|
					∎∎
					§§ sts 
						§ 
						@.f { sip0 ip0 lb_n rsp irv rl e0 } 
							∐ ip0 ⊢ RP.rcd◂l0; l0 ⊢ _cns◂{ a0 l0 }; l0 ⊢ _cns◂{ a1 l0 }; l0 ⊢ _cns◂{ a2 l0 }; l0 ⊢ _nil◂{} . 
								f_s0 { a0 lb_n rsp irv rl e0 } ⊢ { lb_n rsp irv rl e0 s0 } 
								f_o0 { a1 lb_n rsp rl e0 } ⊢ { lb_n rsp rl e0 o0 }
								f_c0 { a2 lb_n rsp rl e0 } ⊢ { lb_n rsp rl e0 c0 }
								_nil {} ⊢ lr 
								_cns { c0 lr } ⊢ lr 
								_cns { o0 lr } ⊢ lr 
								_cns { s0 lr } ⊢ lr 
								RP.rcd lr ⊢ p1 
								$ p1 ⊢ p1,p10 
								stt_v.pnt.f p10 ⊢ sp1 
								» _^ sip0,sp1 ⊢ sip0,sp1,s0 
									"; _sts " 0' " ⊢ " 1' "\n" // 
								rp8.of_s8 s0 ⊢ s0 
								rp8.cct { s0 e0 } ⊢ e0 
								∎ { lb_n rsp irv rl e0 p1 }
							∐. . 
								∎| 
						@.f_s0 { a0 lb_n rsp irv rl e0 } 
							∐ a0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp_im◂v0; v0 ⊢ ast.s8◂s0 . 
								_s8_len s0 ⊢ { s0 ls0 }  
								stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl v0 }  
								alc_vs v0 ⊢ { v0 rm0 } 
								brk_rsp { rsp rm0 } ⊢ { rsp rm0 sb0 } 
								rp8.add_s8 { e0 sb0 } ⊢ e0 
								reg { rsp rm0 } ⊢ { rsp rm0 srm0 brm0 } 
								$ rm0 ⊢ rm0,rm00 
								mk_s8 s0 ⊢ { s0 es0 }
								rp8.cct { e0 es0 } ⊢ e0 
								» _^ srm0,ls0 ⊢ srm0,ls0,sc0 
									"\tmov " 0' ",rax\n" 
									"\tmov rdi," 1d' "\n" // 
								rp8.add_s8 { e0 sc0 } ⊢ e0 
								stt_v.s8_reg rm00 ⊢ p1 
								∎ { lb_n rsp irv rl e0 p1 }
							∐ a0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp◂{ r0 h0 }; h0 ⊢ stt_v.ref◂q0; q0 ⊢ stt_v.opq◂{} .
								reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
								» _^ sr0 ⊢ sr0,s0 
									"\tmov rax," 0' "\n" 
									"\tmov rdi,0x0000_ffff_ffff_ffff\n"
									"\tand rdi,[rax]\n" // 
								rp8.add_s8 { e0 s0 } ⊢ e0
								stt_v.s8_reg r0 ⊢ p1 
								∎ { lb_n rsp irv rl e0 p1 }  
							∐. . 
								∎|
						@.f_o0 { a0 lb_n rsp rl e0 } 
							∐ a0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp_im◂v0; v0 ⊢ ast.r64◂o0 . 
								» _^ o0 ⊢ o0,sc0 
									"\tcmp rdi," 0d' "\n" 
									"\tjle err\n"
									"\tmov rsi," 0d' "\n" 
									// 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								stt_v.r64_im o0 ⊢ p1 
								∎ { lb_n rsp rl e0 p1 } 
							∐ a0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp◂{ r0 h0 }; h0 ⊢ stt_v.r64◂{} .
								reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
								» _^ sr0 ⊢ sr0,sc0 
									"\tcmp rdi," 0' "\n" 
									"\tjle err\n"
									"\tmov rsi," 0' "\n"
									// 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								stt_v.r64 {} ⊢ h0 
								stt_v.hp { r0 h0 } ⊢ a0 
								RP.atm a0 ⊢ p1  
								∎ { lb_n rsp rl e0 p1 } 
							∐. . 
								∎| 
						@.f_c0 { a0 lb_n rsp rl e0 } 
							∐ a0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp_im◂v0; v0 ⊢ ast.r64◂o0 . 
								» _^ o0 ⊢ o0,sc0 
									"\tmov BYTE [rax+8+rsi]," 0d' "\n" 
									// 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								ast.r64 o0 ⊢ v0 
								stt_v.hp_im v0 ⊢ a0 
								RP.atm a0 ⊢ p1 
								∎ { lb_n rsp rl e0 p1 } 
							∐ a0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp◂{ r0 h0 }; h0 ⊢ stt_v.r64◂{} .
								reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
								» _^ sr0 ⊢ sr0,sc0 
									"\tmov rdi," 0' "\n" 
									"\tmov BYTE [rax+8+rsi],dil\n" // 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								stt_v.r64 {} ⊢ h0 
								stt_v.hp { r0 h0 } ⊢ a0 
								RP.atm a0 ⊢ p1  
								∎ { lb_n rsp rl e0 p1 } 
							∐. . 
								∎|   
					∎∎
				§§ exp_s8 
					§ @.lp0 { i irv rl sl dl dll } 
						∐ sl ⊢ _cns◂{ s sl }; dl ⊢ _cns◂{ d dl } .
							idx.csm { irv s rl } ⊢ { irv ip rl } 
							$ ip ⊢ ip,ip0
							idx.crt { irv d ip0 rl dll } ⊢ { irv rl dll }
							_inc i ⊢ i 
							lp0 { i irv rl sl dl dll } ⊢ { i irv rl dll ar rr } 
							_dec i ⊢ i 
							_set_q { ar i ip } ⊢ { ar i } 
							∎ { i irv rl dll ar rr } 
						∐ sl ⊢ _nil◂{}; dl ⊢ _cns◂{ d dl }; dl ⊢ _nil◂{} .  
							stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl v } 
							alc_vs v ⊢ { v rr } 
							stt_v.opq {} ⊢ q0 
							stt_v.ref q0 ⊢ h0 
							$ rr ⊢ rr,rr0 
							stt_v.hp { rr0 h0 } ⊢ a0 
							RP.atm a0 ⊢ pr 
							idx.crt { irv d pr rl dll } ⊢ { irv rl dll }
							_mk_arr i ⊢ { i ar }
							∎ { i irv rl dll ar rr }
						∐. . 
							» "exp_s8 0" _ ⊢ ee 
							_emt ee ⊢ ee 
							∎| 
					§ 
						@.s8 { evv e0 ld lb_n rsp irv rl ar s0 rr pl }
							_s8_len s0 ⊢ { s0 l0 } 
							_add { ld l0 } ⊢ { ld l0 } 
							lp1 { evv e0 ld lb_n rsp irv rl ar rr pl } ⊢ { evv e0 ld lb_n rsp irv rl ar }
							_sub { ld l0 } ⊢ { ld l0 }
							» 0r _ ⊢ rs 
							mk_db { s0 rs } ⊢ { s0 rs dbs } 
							$ lb_n ⊢ lb_n,lb0 
							_inc lb_n ⊢ lb_n 
							$ lb_n ⊢ lb_n,lb1 
							_inc lb_n ⊢ lb_n  
							» _^ lb0,lb1,dbs,l0 ⊢ lb0,lb1,dbs,l0,sr 
								"\tjmp LB_" 0d' "\n"
								"\tLB_" 1d' ": db " 2' "\n" 
								"LB_" 0d' ":\n" 
								"\tlea rsi,[LB_" 1d' "+" 3d' "-1]\n" 
								"\tmov rcx," 3d' "\n" 
								`	rep movsb
								//
							rp8.add_s8 { e0 sr } ⊢ e0 
							∎ { evv e0 ld lb_n rsp irv rl ar }
						@.d { evv e0 ld lb_n rsp irv rl ar x0 rr pl }
							» _^ x0 ⊢ x0,s0 
								0d' // 
							s8 { evv e0 ld lb_n rsp irv rl ar s0 rr pl } ⊢| 
						@.s8_for { evv e0 ld lb_n rsp irv rl ar x0 s0 rr pl }
							_s8_len s0 ⊢ { s0 l0 } 
							$ l0 ⊢ l0,l00 
							_imul { l00 x0 } ⊢ { l00 x0 }
							_add { ld l00 } ⊢ { ld l00 } 
							lp1 { evv e0 ld lb_n rsp irv rl ar rr pl } ⊢ { evv e0 ld lb_n rsp irv rl ar }
							_sub { ld l00 } ⊢ { ld l00 }
							» 0r _ ⊢ rs 
							mk_db { s0 rs } ⊢ { s0 rs dbs } 
							$ lb_n ⊢ lb_n,lb0 
							_inc lb_n ⊢ lb_n 
							$ lb_n ⊢ lb_n,lb1 
							_inc lb_n ⊢ lb_n  
							$ lb_n ⊢ lb_n,lb2
							_inc lb_n ⊢ lb_n
							» _^ lb0,lb1,dbs,l0,x0,lb2 ⊢ lb0,lb1,dbs,l0,x0,lb2,sr 
								"\tjmp LB_" 0d' "\n"
								"\tLB_" 1d' ": db " 2' "\n" 
								"LB_" 0d' ":\n"
								"\tmov rax," 4d' "\n" 
								"LB_" 5d' ":\n"
								"\tlea rsi,[LB_" 1d' "+" 3d' "-1]\n" 
								"\tmov rcx," 3d' "\n" 
								`	rep movsb 
								`	sub rax,1
								`	cmp rax,0
								"\tjnz LB_" 5d' "\n" 
								//
							rp8.add_s8 { e0 sr } ⊢ e0 
							∎ { evv e0 ld lb_n rsp irv rl ar } 
						@.lp1 { evv e0 ld lb_n rsp irv rl ar rr pl }
						$ pl ⊢ 
						∐ _cns◂{ ps pl } . 
							$ ps ⊢ 
							∐ ast.exp_s8.s8◂s0 .
								s8 { evv e0 ld lb_n rsp irv rl ar s0 rr pl } ⊢|									
							∐ ast.exp_s8.cst◂c0 . 
								$ c0 ⊢ 
								∐ ast.cst_v◂v0 . 
									∐ v0 ⊢ ast.s8◂s0 . 
										s8 { evv e0 ld lb_n rsp irv rl ar s0 rr pl } ⊢|									
									∐. . 
										∎| 
								∐. ast.cst_name◂i0 . 
									_lod_q { evv i0 } ⊢ { evv i0 k0 } 
									∐ k0 ⊢ k_cst_v◂v0; v0 ⊢ ast.s8◂s0 . 
										s8 { evv e0 ld lb_n rsp irv rl ar s0 rr pl } ⊢|									
									∐. . 
										∎| 
							∐ ast.exp_s8.idx◂{ f0 j0 } . 
								_lod_q { ar j0 } ⊢ { ar j0 p0 }
								$ f0 ⊢ 
								∐ ast.exp_s8.s◂{} . 
									∐ p0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp_im◂v0; v0 ⊢ ast.s8◂s0 . 
										s8 { evv e0 ld lb_n rsp irv rl ar s0 rr pl } ⊢|									
									∐ p0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp_im_e◂i0 . 
										_lod_q { evv i0 } ⊢ { evv i0 k0 } 
										∐ k0 ⊢ k_cst_v◂v0; v0 ⊢ ast.s8◂s0 . 
											s8 { evv e0 ld lb_n rsp irv rl ar s0 rr pl } ⊢|									
										∐. . 
											∎|
									∐ p0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp◂{ r0 h0 }; h0 ⊢ stt_v.ref◂q0; q0 ⊢ stt_v.opq◂{} . 
										reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
										» _^ sr0 ⊢ sr0,s1 
											"\tmov rsi," 0' "\n" 
											`	mov rax,0x0000_ffff_ffff_ffff 
											`	and rax,[rsi] 
											`	add rdi,rax 
											`	push rax
											`	push rsi
											// 
										_inc rsp ⊢ rsp 
										_inc rsp ⊢ rsp
										rp8.add_s8 { e0 s1 } ⊢ e0
										lp1 { evv e0 ld lb_n rsp irv rl ar rr pl } ⊢ { evv e0 ld lb_n rsp irv rl ar }
										_dec rsp ⊢ rsp 
										_dec rsp ⊢ rsp 
										» _^ _ ⊢ sr 
											`	pop rsi 
											`	pop rcx
											`	lea rsi,[rsi+7+rcx]
											`	rep movsb
											//
										rp8.add_s8 { e0 sr } ⊢ e0 
										∎ { evv e0 ld lb_n rsp irv rl ar } 				
									∐. . 
										∎| 
								∐ ast.exp_s8.d◂{} .
									∐ p0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp_im◂v0; v0 ⊢ ast.r64◂x0 . 
										d { evv e0 ld lb_n rsp irv rl ar x0 rr pl } ⊢|									
									∐ p0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp_im_e◂i0 . 
										_lod_q { evv i0 } ⊢ { evv i0 k0 } 
										∐ k0 ⊢ k_cst_v◂v0; v0 ⊢ ast.r64◂x0 . 
											d { evv e0 ld lb_n rsp irv rl ar x0 rr pl } ⊢|									
										∐. . 
											∎|
									∐ p0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp◂{ r0 h0 }; h0 ⊢ stt_v.r64◂{} . 
										reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
										» "sprintf" _ ⊢ f0 
										c_call f0 ⊢ { f0 sf0 } 
										» _^ sr0,sf0 ⊢ sr0,sf0,s1 
											`	sub rsp,128
											`	mov rdi,rsp
											`	mov rsi,fmt_d
											"\tmov rdx," 0' "\n" 
											`	mov QWORD [tmp],rdi
											push_c_regs 
											1' 
											pop_c_regs 
											`	push rax 
											`	add rax,QWORD [tmp]
											`	mov rdi,rax
											// 
										_inc rsp ⊢ rsp 
										» 16r _ ⊢ w0 
										_add { rsp w0 } ⊢ { rsp w0 }
										rp8.add_s8 { e0 s1 } ⊢ e0
										lp1 { evv e0 ld lb_n rsp irv rl ar rr pl } ⊢ { evv e0 ld lb_n rsp irv rl ar }
										_sub { rsp w0 } ⊢ { rsp w0 }
										_dec rsp ⊢ rsp 
										» _^ _ ⊢ sr 
											`	pop rcx
											`	lea rsi,[rsp+rcx-1]
											`	rep movsb
											`	add rsp,128
											//
										rp8.add_s8 { e0 sr } ⊢ e0 
										∎ { evv e0 ld lb_n rsp irv rl ar } 	 
									∐. . 
										∎| 
								∐ ast.exp_s8.x◂{} .
									∐ p0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp_im◂v0; v0 ⊢ ast.s8◂s0 . 
										∎| 
									∐ p0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp_im_e◂i0 . 
										∎| 
									∐ p0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp◂{ r0 h0 }; h0 ⊢ stt_v.ref◂q0; q0 ⊢ stt_v.opq◂{} . 
										∎| 
									∐. . 
										∎| 
								∐. ast.exp_s8.p◂{} .
									∐ p0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp_im◂v0; v0 ⊢ ast.s8◂s0 . 
										∎| 
									∐ p0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp_im_e◂i0 . 
										∎| 
									∐ p0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp◂{ r0 h0 }; h0 ⊢ stt_v.ref◂q0; q0 ⊢ stt_v.opq◂{} . 
										∎| 
									∐. . 
										∎| 
							∐. ast.exp_s8.for◂{ j0 s0 } . 
								_lod_q { ar j0 } ⊢ { ar j0 p0 }
								∐ p0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp_im◂v0; v0 ⊢ ast.r64◂x0 . 
									s8_for { evv e0 ld lb_n rsp irv rl ar x0 s0 rr pl } ⊢|									
								∐ p0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp_im_e◂i0 . 
									_lod_q { evv i0 } ⊢ { evv i0 k0 } 
									∐ k0 ⊢ k_cst_v◂v0; v0 ⊢ ast.r64◂x0 . 
										s8_for { evv e0 ld lb_n rsp irv rl ar x0 s0 rr pl } ⊢|									
									∐. . 
										∎|
								∐ p0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp◂{ r0 h0 }; h0 ⊢ stt_v.r64◂{} . 
									_s8_len s0 ⊢ { s0 l0 } 
									reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
									» _^ sr0,l0 ⊢ sr0,l0,s1 
										"\tmov rsi," 0' "\n" 
										`	push rsi
										"\timul rsi," 1d' "\n" 
										`	add rdi,rsi 
										// 
									_inc rsp ⊢ rsp 
									rp8.add_s8 { e0 s1 } ⊢ e0
									lp1 { evv e0 ld lb_n rsp irv rl ar rr pl } ⊢ { evv e0 ld lb_n rsp irv rl ar }
									_dec rsp ⊢ rsp 
									» 0r _ ⊢ rs 
									mk_db { s0 rs } ⊢ { s0 rs dbs } 
									$ lb_n ⊢ lb_n,lb0 
									_inc lb_n ⊢ lb_n 
									$ lb_n ⊢ lb_n,lb1
									_inc lb_n ⊢ lb_n  
									$ lb_n ⊢ lb_n,lb2
									_inc lb_n ⊢ lb_n  
									» _^ lb0,lb1,dbs,l0,lb2 ⊢ lb0,lb1,dbs,l0,lb2,sr 
										"\tjmp LB_" 0d' "\n"
										"\tLB_" 1d' ": db " 2' "\n" 
										"LB_" 0d' ":\n" 
										`	pop rax 
										"LB_" 4d' ":\n"
										"\tlea rsi,[LB_" 1d' "+" 3d' "-1]\n" 
										"\tmov rcx," 3d' "\n" 
										`	rep movsb 
										`	sub rax,1
										`	cmp rax,0
										"\tjnz LB_" 4d' "\n" 
										//
									rp8.add_s8 { e0 sr } ⊢ e0 
									∎ { evv e0 ld lb_n rsp irv rl ar } 	 
								∐. . 
									∎|
						∐. _nil◂{} . 
							reg { rsp rr } ⊢ { rsp rr srr brr }
							» "calloc" _ ⊢ n0 
							c_call n0 ⊢ { n0 cn0 } 
							» _^ cn0,ld,srr ⊢ cn0,ld,srr,s1 
								push_c_regs 
								"\tadd rdi," 1d' "\n" 
								`	push rdi 
								`	and rdi,~111b
								`	add rdi,16
								`	mov rsi,rdi 
								`	mov rdi,1
								`	xor rax,rax 
								0' 
								`	pop rdi 
								`	mov QWORD [rax],rdi
								pop_c_regs
								"\tmov " 2' ",rax\n" 
								`	lea rdi,[rax+7+rdi]
								`	std 
								`	mov QWORD [tmp],rcx 
								//
							rp8.add_s8 { e0 s1 } ⊢ e0 
							∎ { evv e0 ld lb_n rsp irv rl ar }
					§ f { evv lb_n rsp irv rl sl dl pl }
						rp8.e {} ⊢ e0 
						» 0r _ ⊢ i 
						_nil {} ⊢ dll 
						lp0 { i irv rl sl dl dll } ⊢ { i irv rl dll ar rr }
						brk_rsp { rsp rr } ⊢ { rsp rr sb0 } 
						rp8.add_s8 { e0 sb0 } ⊢ e0 
						» 0r _ ⊢ ld 
						» "\tmov rdi,0\n" _ ⊢ se0 
						rp8.add_s8 { e0 se0 } ⊢ e0 
						lp1 { evv e0 ld lb_n rsp irv rl ar rr pl } ⊢ { evv e0 ld lb_n rsp irv rl ar }
						» _^ _ ⊢ se0 
							`	mov rcx,QWORD [tmp] 
							//
						rp8.add_s8 { e0 se0 } ⊢ e0 
						∎ { evv lb_n rsp irv rl e0 }
					∎∎ 
				\[
				§§ asc 
					§ rl { lb_n { ev evv } rsp { rv irv } tav tv_n tv lc ec0 rl ft} 
						∎ { rl { lb_n { ev evv } rsp { rv irv } tav tv_n tv lc ec0 ft } } 
					∎∎
				§§ rtn
					§ rl { rl { lb_n { ev evv } rsp { rv irv } tav tv_n tv lc ec0 ft } } 
						∎ { lb_n { ev evv } rsp { rv irv } tav tv_n tv lc ec0 rl ft } 
					∎∎ 
				\]
				§ 
					@.f { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv lc ec0 rl ft } 
						» "\tret\n" _ ⊢ ret 
						ret_f { { gfl cl } ret lb_n { ev evv } rsp { rv irv } tav tv_n tv lc ec0 rl ft } ⊢|						
					@.ret_f { { gfl cl } ret lb_n { ev evv } rsp { rv irv } tav tv_n tv lc ec0 rl ft } 
						$ rl ⊢ rl,rl0 
						pnt_env { irv rsp rl0 } ⊢ { irv rsp srl } 
						» "ret_f D0" _ ⊢ eed 
						_emt eed ⊢ _ 
						_emt srl ⊢ srl
						rp8.add_s8 { ec0 srl } ⊢ ec0 
						 $ lc ⊢
						∐ ast.jmp◂{ o x } . 
							∐ ft ⊢ f_etr◂{ rsp_d pr yr } . 
								$ x ⊢ x,s0
								crt_type_k.src_ptn { ev tv rv s0 } ⊢ { ev tv rv ys } 
								inst_cl { tv_n tv ys cl } ⊢ { tv_n tv ys cl }
								idx.csm_ptn { irv x rl } ⊢ { irv is rl }
								$ is ⊢ is,is0 
								stt_v.pnt.f is0 ⊢ sis
								_lod_q { ev o } ⊢ { ev o yk } 
								var yk ⊢ yk 
								RP.atm yk ⊢ yk 
								» 1r _ ⊢ lv 
								$ yr ⊢ yr,yr0 
								iug_imp { tv_n tv lv ys yr0 yk } ⊢ { tv_n tv lv ys _ yk } 
								_lod_q { evv o } ⊢ { evv o k }
								∐ k ⊢ k_op_axm◂a . 
									$ sis ⊢ sis,sis0 
									$ yr ⊢ yr,yr0 
									op_axm { evv tav tv_n tv lb_n a rsp rl irv is sis0 yr0 } ⊢ { evv tav tv_n tv lb_n a rsp rl irv iy eo }
									rp8.add_s8 { ec0 eo } ⊢ ec0 
									rset.ini {} ⊢ v0 
									» REG_N _ ⊢ rbp 
									_dec rbp ⊢ rbp 
									_add { rbp rsp_d } ⊢ { rbp rsp_d } 
									brk_rsp { rsp rbp } ⊢ { rsp rbp es0 } 
									$ pr ⊢ pr,pr0 
									_none {} ⊢ lb1 
									mov_ptn.f2 { tav rsp v0 iy pr0 lb1 } ⊢ { tav rsp v0 er } 
									resize_rsp { rsp rbp } ⊢ { rsp rbp es1 } 
									» _^ sis ⊢ sis,sc1 
										"; ∎ " 0' "\n" //
									rp8.add_s8 { ec0 sc1 } ⊢ ec0 
									rp8.add_s8 { ec0 es0 } ⊢ ec0 
									rp8.cct { ec0 er } ⊢ ec0 
									rp8.add_s8 { ec0 es1 } ⊢ ec0 
									∐ rsp'=0r . 
										rp8.add_s8 { ec0 ret } ⊢ ec0 
										f_etr { rsp_d pr yr } ⊢ ft 
										∎ { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv ec0 rl ft } 
									∐. . 
										» _^ rsp ⊢ rsp,sc1 
											"\tpush QWORD [rsp+8*" 0d' "]\n"  
											// 
										rp8.add_s8 { ec0 sc1 } ⊢ ec0 
										rp8.add_s8 { ec0 ret } ⊢ ec0
										f_etr { rsp_d pr yr } ⊢ ft 
										∎ { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv ec0 rl ft } 
								∐ k ⊢ k_ctr◂{ ia na } . 
									stt_v.stt_adt { ia na is } ⊢ iy 
									RP.atm iy ⊢ iy 
									» _^ o,sis ⊢ o,sis,ec1 
										"; #" 0d' " " 1' " ⊢|\n" //
									rp8.add_s8 { ec0 ec1 } ⊢ ec0 
									rset.ini {} ⊢ v0 
									» REG_N _ ⊢ rbp 
									_dec rbp ⊢ rbp 
									_add { rbp rsp_d } ⊢ { rbp rsp_d } 
									brk_rsp { rsp rbp } ⊢ { rsp rbp es0 } 
									rp8.add_s8 { ec0 es0 } ⊢ ec0 
									$ pr ⊢ pr,pr0 
									_none {} ⊢ lb1 
									mov_ptn.f2 { tav rsp v0 iy pr0 lb1 } ⊢ { tav rsp v0 er } 
									rp8.cct { ec0 er } ⊢ ec0 
									resize_rsp { rsp rbp } ⊢ { rsp rbp es1 } 
									rp8.add_s8 { ec0 es1 } ⊢ ec0 
									∐ rsp'=0r . 
										rp8.add_s8 { ec0 ret } ⊢ ec0 
										f_etr { rsp_d pr yr } ⊢ ft 
										∎ { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv ec0 rl ft } 
									∐. . 
										» _^ rsp ⊢ rsp,sc1 
											"\tpush QWORD [rsp+8*" 0d' "]\n"  
											// 
										rp8.add_s8 { ec0 sc1 } ⊢ ec0 
										rp8.add_s8 { ec0 ret } ⊢ ec0
										f_etr { rsp_d pr yr } ⊢ ft 
										∎ { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv ec0 rl ft } 
								∐ k ⊢ k_op◂{ rsp_s p0 rsp_d1 p1 } . 
									» _^ o ⊢ o,se0 
										"ETR_" 0d' // 
									stt_call { tav se0 lb_n rsp irv rl rsp_s p0 is } ⊢ { tav se0 lb_n rsp irv rl rsp_s er l v0 nb } 
									∐ rsp_d1'=0r . 
										$ p1 ⊢ p1,p10 
										» _^ o,sis ⊢ o,sis,ec1 
											"; rsp_d=0 , #" 0d' " " 1' " ⊢| " "\n" //
										rp8.add_s8 { ec0 ec1 } ⊢ ec0 
										rp8.cct { ec0 er } ⊢ ec0 
										» REG_N _ ⊢ rbp0 
										_dec rbp0 ⊢ rbp0 
										_add { rbp0 rsp_d } ⊢ { rbp0 rsp_d }
										brk_rsp { rsp rbp0 } ⊢ { rsp rbp0 sb0 }
										rp8.add_s8 { ec0 sb0 } ⊢ ec0 
										_none {} ⊢ o0 
										rset.ini {} ⊢ vs0
										$ pr ⊢ pr,pr0
										mov_ptn.f2 { tav rsp vs0 p1 pr0 o0 } ⊢ { tav rsp vs0 er0 }
										rp8.cct { ec0 er0 } ⊢ ec0 
										resize_rsp { rsp rbp0 } ⊢ { rsp rbp0 sb0 } 
										rp8.add_s8 { ec0 sb0 } ⊢ ec0
										rp8.add_s8 { ec0 ret } ⊢ ec0
										f_etr { rsp_d pr yr } ⊢ ft 
										∎ { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv ec0 rl ft } 
									∐. . 
										_inc rsp ⊢ rsp 
										shft_ptn { p1 rsp } ⊢ { p1 rsp } 
										_add { rsp rsp_d1 } ⊢ { rsp rsp_d1 } 
										» _^ o,sis ⊢ o,sis,ec1 
											"; #" 0d' " " 1' " ⊢| \n" //
										rp8.add_s8 { ec0 ec1 } ⊢ ec0 
										rp8.cct { ec0 er } ⊢ ec0 
										» REG_N _ ⊢ rbp0 
										_dec rbp0 ⊢ rbp0 
										_add { rbp0 rsp_d } ⊢ { rbp0 rsp_d }
										brk_rsp { rsp rbp0 } ⊢ { rsp rbp0 sb0 }
										rp8.add_s8 { ec0 sb0 } ⊢ ec0 
										_none {} ⊢ o0 
										rset.ini {} ⊢ vs0
										$ pr ⊢ pr,pr0
										mov_ptn.f2 { tav rsp vs0 p1 pr0 o0 } ⊢ { tav rsp vs0 er0 } 
										rp8.cct { ec0 er0 } ⊢ ec0 
										resize_rsp { rsp rbp0 } ⊢ { rsp rbp0 sb0 } 
										rp8.add_s8 { ec0 sb0 } ⊢ ec0
										» _^ rsp ⊢ rsp,sc1 
											"\tpush QWORD [rsp+8*" 0d' "]\n"  
											// 
										rp8.add_s8 { ec0 sc1 } ⊢ ec0 
										rp8.add_s8 { ec0 ret } ⊢ ec0
										f_etr { rsp_d pr yr } ⊢ ft 
										∎ { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv ec0 rl ft } 
								∐ k ⊢ k_op_gnr◂{ dp lcg } . 
									##» "k_op_gnr D0" _ ⊢ dd0
									##_emt dd0 ⊢ _  
									find_gf { tv gfl o ys } ⊢ { tv gfl o ys oa0 } 
									##» "k_op_gnr D1" _ ⊢ dd0
									##_emt dd0 ⊢ _ 
									∐ oa0 ⊢ _some◂{ lb ig y1 rsp_g0 p0 rsp_g1 p1 } . 
										» _^ lb ⊢ lb,se0 
											"LB_" 0d' "\n" //
										stt_call { tav se0 lb_n rsp irv rl rsp_g0 p0 is } ⊢ { tav se0 lb_n rsp irv rl rsp_g0 er l v0 nb } 
										∐ rsp_g1'=0r . 
											$ p1 ⊢ p1,p10 
											» _^ o,sis ⊢ o,sis,ec1 
												"; rsp_d=0 , #" 0d' " " 1' " ⊢| " "\n" //
											rp8.add_s8 { ec0 ec1 } ⊢ ec0 
											rp8.cct { ec0 er } ⊢ ec0 
											» REG_N _ ⊢ rbp0 
											_dec rbp0 ⊢ rbp0 
											_add { rbp0 rsp_d } ⊢ { rbp0 rsp_d }
											brk_rsp { rsp rbp0 } ⊢ { rsp rbp0 sb0 }
											rp8.add_s8 { ec0 sb0 } ⊢ ec0 
											_none {} ⊢ o0 
											rset.ini {} ⊢ vs0
											$ pr ⊢ pr,pr0
											mov_ptn.f2 { tav rsp vs0 p1 pr0 o0 } ⊢ { tav rsp vs0 er0 } 
											rp8.cct { ec0 er0 } ⊢ ec0 
											resize_rsp { rsp rbp0 } ⊢ { rsp rbp0 sb0 } 
											rp8.add_s8 { ec0 sb0 } ⊢ ec0
											rp8.add_s8 { ec0 ret } ⊢ ec0
											f_etr { rsp_d pr yr } ⊢ ft 
											∎ { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv ec0 rl ft } 
										∐. . 
											_inc rsp ⊢ rsp 
											shft_ptn { p1 rsp } ⊢ { p1 rsp } 
											_add { rsp rsp_g1 } ⊢ { rsp rsp_g1 } 
											» _^ o,sis ⊢ o,sis,ec1 
												"; #" 0d' " " 1' " ⊢| \n" //
											rp8.add_s8 { ec0 ec1 } ⊢ ec0 
											rp8.cct { ec0 er } ⊢ ec0 
											» REG_N _ ⊢ rbp0 
											_dec rbp0 ⊢ rbp0 
											_add { rbp0 rsp_d } ⊢ { rbp0 rsp_d }
											brk_rsp { rsp rbp0 } ⊢ { rsp rbp0 sb0 }
											rp8.add_s8 { ec0 sb0 } ⊢ ec0 
											_none {} ⊢ o0 
											rset.ini {} ⊢ vs0
											$ pr ⊢ pr,pr0
											mov_ptn.f2 { tav rsp vs0 p1 pr0 o0 } ⊢ { tav rsp vs0 er0 } 
											rp8.cct { ec0 er0 } ⊢ ec0 
											resize_rsp { rsp rbp0 } ⊢ { rsp rbp0 sb0 } 
											rp8.add_s8 { ec0 sb0 } ⊢ ec0
											» _^ rsp ⊢ rsp,sc1 
												"\tpush QWORD [rsp+8*" 0d' "]\n"  
												// 
											rp8.add_s8 { ec0 sc1 } ⊢ ec0 
											rp8.add_s8 { ec0 ret } ⊢ ec0
											f_etr { rsp_d pr yr } ⊢ ft 
											∎ { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv ec0 rl ft } 
									∐. . 
										##» "k_op_gnr D2" _ ⊢ dd0
										##_emt dd0 ⊢ _ 
										$ yr ⊢ yr,yr0
										$ o ⊢ o,o0 
										gnr_lc_code { { o0 ys yr0 dp } { gfl cl } lb_n { ev evv } rv tav tv_n tv lcg } ⊢ { ee0 R0 { gfl cl } lb_n { ev evv } rv tav tv_n tv }
										##» "k_op_gnr D2.0" _ ⊢ dd0
										##_emt dd0 ⊢ _ 
										$ R0 ⊢ { lb ig y1 rsp_g0 p0 rsp_g1 p1 }
										rp8.cct { ee0 ec0 } ⊢ ec0 
										» _^ lb ⊢ lb,se0 
											"LB_" 0d' "\n" //
										stt_call { tav se0 lb_n rsp irv rl rsp_g0 p0 is } ⊢ { tav se0 lb_n rsp irv rl rsp_g0 er l v0 nb } 
										∐ rsp_g1'=0r . 
											$ p1 ⊢ p1,p10 
											» _^ o,sis ⊢ o,sis,ec1 
												"; rsp_d=0 , #" 0d' " " 1' " ⊢| " "\n" //
											rp8.add_s8 { ec0 ec1 } ⊢ ec0 
											rp8.cct { ec0 er } ⊢ ec0 
											» REG_N _ ⊢ rbp0 
											_dec rbp0 ⊢ rbp0 
											_add { rbp0 rsp_d } ⊢ { rbp0 rsp_d }
											brk_rsp { rsp rbp0 } ⊢ { rsp rbp0 sb0 }
											rp8.add_s8 { ec0 sb0 } ⊢ ec0 
											_none {} ⊢ o0 
											rset.ini {} ⊢ vs0
											$ pr ⊢ pr,pr0
											mov_ptn.f2 { tav rsp vs0 p1 pr0 o0 } ⊢ { tav rsp vs0 er0 } 
											rp8.cct { ec0 er0 } ⊢ ec0 
											resize_rsp { rsp rbp0 } ⊢ { rsp rbp0 sb0 } 
											rp8.add_s8 { ec0 sb0 } ⊢ ec0
											rp8.add_s8 { ec0 ret } ⊢ ec0
											f_etr { rsp_d pr yr } ⊢ ft 
											∎ { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv ec0 rl ft } 
										∐. . 
											_inc rsp ⊢ rsp 
											shft_ptn { p1 rsp } ⊢ { p1 rsp } 
											_add { rsp rsp_g1 } ⊢ { rsp rsp_g1 } 
											» _^ o,sis ⊢ o,sis,ec1 
												"; #" 0d' " " 1' " ⊢| \n" //
											rp8.add_s8 { ec0 ec1 } ⊢ ec0 
											rp8.cct { ec0 er } ⊢ ec0 
											» REG_N _ ⊢ rbp0 
											_dec rbp0 ⊢ rbp0 
											_add { rbp0 rsp_d } ⊢ { rbp0 rsp_d }
											brk_rsp { rsp rbp0 } ⊢ { rsp rbp0 sb0 }
											rp8.add_s8 { ec0 sb0 } ⊢ ec0 
											_none {} ⊢ o0 
											rset.ini {} ⊢ vs0
											$ pr ⊢ pr,pr0
											mov_ptn.f2 { tav rsp vs0 p1 pr0 o0 } ⊢ { tav rsp vs0 er0 } 
											rp8.cct { ec0 er0 } ⊢ ec0 
											resize_rsp { rsp rbp0 } ⊢ { rsp rbp0 sb0 } 
											rp8.add_s8 { ec0 sb0 } ⊢ ec0
											» _^ rsp ⊢ rsp,sc1 
												"\tpush QWORD [rsp+8*" 0d' "]\n"  
												// 
											rp8.add_s8 { ec0 sc1 } ⊢ ec0 
											rp8.add_s8 { ec0 ret } ⊢ ec0
											f_etr { rsp_d pr yr } ⊢ ft 
											∎ { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv ec0 rl ft } 
								∐. . 
									» _^ o ⊢ o,ec1 
										"; " "#" 0d' ".." " ⊢|\n" 
										"\tjmp ETR_" 0d' "\n" // 
									##rp8.add_s8 { ec0 ec1 } ⊢ ec0
									_emt ec1 ⊢ _ 
									##∎ { lb_n { ev evv } rsp { rv irv } tav tv_n tv ec0 rl ft } 
									∎| 
							∐. . 
								∎| 
						∐ ast.app_jmp◂{ f x } . 
							» _^ _ ⊢ ec1 
								"; " "◂ ..,.. ⊢|\n"
								"\tjmp err\n" //
								rp8.add_s8 { ec0 ec1 } ⊢ ec0
							∎ { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv ec0 rl ft } 
						∐ ast.seq◂{ ll lc } .
							$ ll ⊢
							∐ ast.op_name◂{ o s d } .			
								##» "lc_codef.ret_f op_name d0" _ ⊢ ee0 
								##_emt ee0 ⊢ _ 
								##_emt o ⊢ o 
								$ s ⊢ s,s0
								crt_type_k.src_ptn { ev tv rv s0 } ⊢ { ev tv rv ys } 
								##» "lc_codef.ret_f op_name d1" _ ⊢ ee0 
								##_emt ee0 ⊢ _ 
								idx.csm_ptn { irv s rl } ⊢ { irv is rl }
								$ is ⊢ is,is0 
								stt_v.pnt.f is0 ⊢ sis
								$ d ⊢ d,d0 
								crt_type_k.dst_ptn { tv rv d0 } ⊢ { tv rv yd }
								##$ yd ⊢ yd,yd0 
								##pnt_type_k { tv yd0 } ⊢ { tv syd }  
								##$ ys ⊢ ys,ys0 
								##pnt_type_k { tv ys0 } ⊢ { tv sys }  
								##_emt { sys syd } ⊢ _ 
								inst_cl { tv_n tv ys cl } ⊢ { tv_n tv ys cl }
								inst_cl { tv_n tv yd cl } ⊢ { tv_n tv yd cl } 
								##$ ys ⊢ ys,ys0 
								##$ yd ⊢ yd,yd0 
								##imp { ys0 yd0 } ⊢ yi 
								##RP.atm yi ⊢ yi 
								_lod_q { ev o } ⊢ { ev o yk } 
								var yk ⊢ yk 
								RP.atm yk ⊢ yk
								» 1r _ ⊢ lv 
								iug_imp { tv_n tv lv ys yd yk } ⊢ { tv_n tv lv ys yd yk } 
								_lod_q { evv o } ⊢ { evv o k } 
								∐ k ⊢ k_op_axm◂a .
									op_axm { evv tav tv_n tv lb_n a rsp rl irv is sis yd } ⊢ { evv tav tv_n tv lb_n a rsp rl irv iy ec1 }
									_nil {} ⊢ dl 
									idx.crt_ptn { irv d iy rl dl } ⊢ { irv rl dl } 
									dlt.f { lb_n rsp dl } ⊢ { lb_n rsp edl } 
									rp8.add_s8 { ec0 ec1 } ⊢ ec0
									rp8.cct { ec0 edl } ⊢ ec0 
									ret_f { { gfl cl } ret lb_n { ev evv } rsp { rv irv } tav tv_n tv lc ec0 rl ft } ⊢|
								∐ k ⊢ k_op◂{ rsp_s p0 rsp_d1 p1 } . 
									» _^ o ⊢ o,se0 
										"ETR_" 0d' "\n" // 
									∐ rsp_d1'=0r . 
										stt_call { tav se0 lb_n rsp irv rl rsp_s p0 is } ⊢ { tav se0 lb_n rsp irv rl rsp_s er l v0 nb } 
										pop_regs.f { rsp irv rl p1 l v0 nb } ⊢ { rsp irv rl p1 e1 v0 nb }
										$ p1 ⊢ p1,p10 
										stt_v.pnt.f p10 ⊢ sp1
										_nil {} ⊢ dl 
										idx.crt_ptn { irv d p1 rl dl } ⊢ { irv rl dl } 
										dlt.f { lb_n rsp dl } ⊢ { lb_n rsp edl } 
										rp8.mk_s8 edl ⊢ { edl sdl } 											
										» _^ o,sis,sp1,rsp_d1 ⊢ o,sis,sp1,rsp_d1,ec1 
											"; rsp_d=" 3d' ", #" 0d' " " 1' " ⊢ " 2' "\n" //
										rp8.add_s8 { ec0 ec1 } ⊢ ec0 
										rp8.cct { ec0 er } ⊢ ec0 
										rp8.add_s8 { ec0 e1 } ⊢ ec0 
										rp8.cct { ec0 edl } ⊢ ec0 
										ret_f { { gfl cl } ret lb_n { ev evv } rsp { rv irv } tav tv_n tv lc ec0 rl ft } ⊢|
									∐. . 
										stt_call { tav se0 lb_n rsp irv rl rsp_s p0 is } ⊢ { tav se0 lb_n rsp irv rl rsp_s er l v0 nb } 
										_inc rsp ⊢ rsp 
										shft_ptn { p1 rsp } ⊢ { p1 rsp } 
										$ p1 ⊢ p1,p11 
										stt_v.pnt.f p11 ⊢ sp11 
										_add { rsp rsp_d1 } ⊢ { rsp rsp_d1 } 
										pop_regs.f { rsp irv rl p1 l v0 nb } ⊢ { rsp irv rl p1 e1 v0 nb }
										$ p1 ⊢ p1,p10 
										_nil {} ⊢ dl 
										idx.crt_ptn { irv d p1 rl dl } ⊢ { irv rl dl } 
										dlt.f { lb_n rsp dl } ⊢ { lb_n rsp edl } 
										stt_v.pnt.f p10 ⊢ sp1
										» _^ o,sis,sp1,sp11 ⊢ o,sis,sp1,sp11,ec1 
											"; #" 0d' " " 1' " ⊢ " 2' " / " 3' "\n" //
										rp8.add_s8 { ec0 ec1 } ⊢ ec0 
										rp8.cct { ec0 er } ⊢ ec0 
										rp8.add_s8 { ec0 e1 } ⊢ ec0 
										rp8.cct { ec0 edl } ⊢ ec0 
										ret_f { { gfl cl } ret lb_n { ev evv } rsp { rv irv } tav tv_n tv lc ec0 rl ft } ⊢|
								∐ k ⊢ k_ctr◂{ ia na } . 
									stt_v.stt_adt { ia na is } ⊢ iy 
									RP.atm iy ⊢ iy 
									$ iy ⊢ iy,iy0 
									stt_v.pnt.f iy0 ⊢ siy 
									» _^ o,sis,siy ⊢ o,sis,siy,ec1 
										"; #" 0d' " " 1' " ⊢ " 2' "\n" //
									rp8.add_s8 { ec0 ec1 } ⊢ ec0 
									_nil {} ⊢ dl 
									idx.crt_ptn { irv d iy rl dl } ⊢ { irv rl dl } 
									dlt.f { lb_n rsp dl } ⊢ { lb_n rsp edl } 
									rp8.cct { ec0 edl } ⊢ ec0 
									ret_f { { gfl cl } ret lb_n { ev evv } rsp { rv irv } tav tv_n tv lc ec0 rl ft } ⊢|
								∐ k ⊢ k_op_gnr◂{ dp lcg } . 
									##» "k_op_gnr D0" _ ⊢ dd0
									##_emt dd0 ⊢ _  
									find_gf { tv gfl o ys } ⊢ { tv gfl o ys oa0 } 
									##» "k_op_gnr D1" _ ⊢ dd0
									##_emt dd0 ⊢ _ 
									∐ oa0 ⊢ _some◂{ lb ig y1 rsp_g0 p0 rsp_g1 p1 } . 
										» _^ lb ⊢ lb,se0 
											"LB_" 0d' "\n" //
										stt_call { tav se0 lb_n rsp irv rl rsp_g0 p0 is } ⊢ { tav se0 lb_n rsp irv rl rsp_g0 er l v0 nb } 
										∐ rsp_g1'=0r . 
											pop_regs.f { rsp irv rl p1 l v0 nb } ⊢ { rsp irv rl p1 e1 v0 nb }
											$ p1 ⊢ p1,p10 
											stt_v.pnt.f p10 ⊢ sp1
											_nil {} ⊢ dl 
											idx.crt_ptn { irv d p1 rl dl } ⊢ { irv rl dl } 
											dlt.f { lb_n rsp dl } ⊢ { lb_n rsp edl } 
											» _^ ig,sis,sp1,rsp_g1 ⊢ ig,sis,sp1,rsp_g1,ec1 
												"; rsp_d=" 3d' ", #" 0d' " " 1' " ⊢ " 2' "\n" //
											rp8.add_s8 { ec0 ec1 } ⊢ ec0 
											rp8.cct { ec0 er } ⊢ ec0 
											rp8.add_s8 { ec0 e1 } ⊢ ec0 
											rp8.cct { ec0 edl } ⊢ ec0 
											ret_f { { gfl cl } ret lb_n { ev evv } rsp { rv irv } tav tv_n tv lc ec0 rl ft } ⊢|
										∐. . 
											_inc rsp ⊢ rsp 
											shft_ptn { p1 rsp } ⊢ { p1 rsp } 
											$ p1 ⊢ p1,p11 
											stt_v.pnt.f p11 ⊢ sp11 
											_add { rsp rsp_g1 } ⊢ { rsp rsp_g1 } 
											pop_regs.f { rsp irv rl p1 l v0 nb } ⊢ { rsp irv rl p1 e1 v0 nb }
											$ p1 ⊢ p1,p10 
											_nil {} ⊢ dl 
											idx.crt_ptn { irv d p1 rl dl } ⊢ { irv rl dl } 
											dlt.f { lb_n rsp dl } ⊢ { lb_n rsp edl } 
											stt_v.pnt.f p10 ⊢ sp1
											» _^ ig,sis,sp1,sp11 ⊢ ig,sis,sp1,sp11,ec1 
												"; #" 0d' " " 1' " ⊢ " 2' " / " 3' "\n" //
											rp8.add_s8 { ec0 ec1 } ⊢ ec0 
											rp8.cct { ec0 er } ⊢ ec0 
											rp8.add_s8 { ec0 e1 } ⊢ ec0 
											rp8.cct { ec0 edl } ⊢ ec0 
											ret_f { { gfl cl } ret lb_n { ev evv } rsp { rv irv } tav tv_n tv lc ec0 rl ft } ⊢|		
									∐. . 
										##» "k_op_gnr D2" _ ⊢ dd0
										##_emt dd0 ⊢ _ 
										gnr_lc_code { { o ys yd dp } { gfl cl } lb_n { ev evv } rv tav tv_n tv lcg } ⊢ { ee0 R0 { gfl cl } lb_n { ev evv } rv tav tv_n tv }
										##» "k_op_gnr D2.0" _ ⊢ dd0
										##_emt dd0 ⊢ _ 
										$ R0 ⊢ { lb ig y1 rsp_g0 p0 rsp_g1 p1 }
										rp8.cct { ee0 ec0 } ⊢ ec0 
										» _^ lb ⊢ lb,se0 
											"LB_" 0d' "\n" //
										stt_call { tav se0 lb_n rsp irv rl rsp_g0 p0 is } ⊢ { tav se0 lb_n rsp irv rl rsp_g0 er l v0 nb } 
										∐ rsp_g1'=0r . 
											##» "k_op_gnr D3" _ ⊢ dd0
											##_emt dd0 ⊢ _ 
											pop_regs.f { rsp irv rl p1 l v0 nb } ⊢ { rsp irv rl p1 e1 v0 nb }
											$ p1 ⊢ p1,p10 
											stt_v.pnt.f p10 ⊢ sp1
											_emt sp1 ⊢ sp1 
											_nil {} ⊢ dl 
											idx.crt_ptn { irv d p1 rl dl } ⊢ { irv rl dl } 
											dlt.f { lb_n rsp dl } ⊢ { lb_n rsp edl } 
											rp8.mk_s8 edl ⊢ { edl sdl } 											
											» _^ ig,sis,sp1,rsp_g1 ⊢ ig,sis,sp1,rsp_g1,ec1 
											"; rsp_d=" 3d' ", #" 0d' " " 1' " ⊢ " 2' "\n" //
											rp8.add_s8 { ec0 ec1 } ⊢ ec0 
											rp8.cct { ec0 er } ⊢ ec0 
											rp8.add_s8 { ec0 e1 } ⊢ ec0 
											rp8.cct { ec0 edl } ⊢ ec0 
											ret_f { { gfl cl } ret lb_n { ev evv } rsp { rv irv } tav tv_n tv lc ec0 rl ft } ⊢|
										∐. . 
											##» "k_op_gnr D4" _ ⊢ dd0
											##_emt dd0 ⊢ _ 
											_inc rsp ⊢ rsp 
											shft_ptn { p1 rsp } ⊢ { p1 rsp } 
											$ p1 ⊢ p1,p11 
											stt_v.pnt.f p11 ⊢ sp11 
											_add { rsp rsp_g1 } ⊢ { rsp rsp_g1 } 
											pop_regs.f { rsp irv rl p1 l v0 nb } ⊢ { rsp irv rl p1 e1 v0 nb }
											$ p1 ⊢ p1,p10 
											_nil {} ⊢ dl 
											idx.crt_ptn { irv d p1 rl dl } ⊢ { irv rl dl } 
											dlt.f { lb_n rsp dl } ⊢ { lb_n rsp edl } 
											stt_v.pnt.f p10 ⊢ sp1
											» _^ ig,sis,sp1,sp11 ⊢ ig,sis,sp1,sp11,ec1 
												"; #" 0d' " " 1' " ⊢ " 2' " / " 3' "\n" //
											rp8.add_s8 { ec0 ec1 } ⊢ ec0 
											rp8.cct { ec0 er } ⊢ ec0 
											rp8.add_s8 { ec0 e1 } ⊢ ec0 
											rp8.cct { ec0 edl } ⊢ ec0 
											##» "k_op_gnr D5" _ ⊢ dd0
											##_emt dd0 ⊢ _ 
											ret_f { { gfl cl } ret lb_n { ev evv } rsp { rv irv } tav tv_n tv lc ec0 rl ft } ⊢|		
								∐. . 
									» "lc_code op 0" _ ⊢ se 
									_emt se ⊢ se  
									∎| 
							∐ ast.op_app◂{ f x y } .
								» _^ _ ⊢ ec1 
									"; ◂ ..,.. ⊢ ..\n"
									// 
								rp8.add_s8 { ec0 ec1 } ⊢ ec0 
								ret_f { { gfl cl } ret lb_n { ev evv } rsp { rv irv  } tav tv_n tv lc ec0 rl ft } ⊢| 
							∐ ast.op_exp_cst◂{ c s d } .
								» _^ _ ⊢ ec1 
									"; » .. .. ⊢ ..\n" // 
								rp8.add_s8 { ec0 ec1 } ⊢ ec0 
								ret_f { { gfl cl } ret lb_n { ev evv } rsp { rv irv  } tav tv_n tv lc ec0 rl ft } ⊢| 
							∐. ast.op_exp_s8◂{ pl ss ds } .
								» _^ _ ⊢ ec1 
									"; » _^ .. ⊢ ..\n"
									"; .. //\n" // 
								rp8.add_s8 { ec0 ec1 } ⊢ ec0 
								exp_s8.f { evv lb_n rsp irv rl ss ds pl } ⊢ { evv lb_n rsp irv rl e0 }
								rp8.cct { ec0 e0 } ⊢ ec0
								ret_f { { gfl cl } ret lb_n { ev evv } rsp { rv irv } tav tv_n tv lc ec0 rl ft } ⊢|
						∐ ast.mtc◂lm .
							∐ ft ⊢ f_rtm◂{} . 
								∎| 
							∐. .  
								mtc { { gfl cl } ret lb_n { ev evv } rsp { rv irv } tav tv_n tv lm ec0 rl ft } ⊢| 
						∐ ast.op_id◂{ sp ll } . 
							idx.csm_ptn { irv sp rl } ⊢ { irv is rl }
							$ is ⊢ is,is0 
							stt_v.pnt.f is0 ⊢ sis
							$ ll ⊢ 
							∐ ast.id_mtc◂ilm . 
								∐ ft ⊢ f_rtm◂{} . 
									∎| 
								∐. . 
									id_mtc { { gfl cl } ret { is sis } lb_n { ev evv } rsp { rv irv } tav tv_n tv ilm ec0 rl ft } ⊢| 
							∐. ast.id_line◂{ dl lc } . 
								rpc.id { tav lb_n rsp irv sis is rl dl } ⊢ { tav lb_n rsp irv sis is rl e1 }
								rp8.cct { ec0 e1 } ⊢ ec0 
								ret_f { { gfl cl } ret lb_n { ev evv } rsp { rv irv } tav tv_n tv lc ec0 rl ft } ⊢|
						∐ ast.ret◂s .
							∐ ft ⊢ f_etr◂{ rsp_d pr yr }; s ⊢ _some◂s . 
								∐ rsp_d'=0r . 
									idx.csm_ptn { irv s rl } ⊢ { irv is rl }
									$ rl ⊢ rl,rl0 
									dlt.env { lb_n irv rsp rl0 } ⊢ { lb_n irv rsp erl } 
									rp8.mk_s8 erl ⊢ { erl srl } 
									$ is ⊢ is,is0 
									stt_v.pnt.f is0 ⊢ sis
									$ pr ⊢ pr,pr0 
									rset.ini {} ⊢ v 
									_none {} ⊢ lb1 
									mov_ptn.f2 { tav rsp v is pr0 lb1 } ⊢ { tav rsp v er } 
									add_rsp rsp ⊢ { rsp es0 } 
									» _^ sis ⊢ sis,ec1 
										"; ∎ " 0' "\n"
										 // 
										rp8.add_s8 { ec0 ec1 } ⊢ ec0 
										rp8.add_s8 { ec0 srl } ⊢ ec0 
										rp8.cct { ec0 er } ⊢ ec0
										rp8.add_s8 { ec0 es0 } ⊢ ec0 
										rp8.add_s8 { ec0 ret } ⊢ ec0
										f_etr { rsp_d pr yr } ⊢ ft 
									∎ { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv ec0 rl ft }
								∐. . 
									idx.csm_ptn { irv s rl } ⊢ { irv is rl }
									$ rl ⊢ rl,rl0 
									dlt.env { lb_n irv rsp rl0 } ⊢ { lb_n irv rsp erl } 
									rp8.mk_s8 erl ⊢ { erl srl } 
									$ is ⊢ is,is0 
									stt_v.pnt.f is0 ⊢ sis
									$ pr ⊢ pr,pr0 
									rset.ini {} ⊢ v 
									» REG_N _ ⊢ rbp 
									_dec rbp ⊢ rbp 
									_add { rbp rsp_d } ⊢ { rbp rsp_d } 
									brk_rsp { rsp rbp } ⊢ { rsp rbp es0 }
									_none {} ⊢ lb1  
									mov_ptn.f2 { tav rsp v is pr0 lb1 } ⊢ { tav rsp v er } 
									resize_rsp { rsp rbp } ⊢ { rsp rbp es1 } 
									##add_rsp rsp ⊢ { rsp es0 } 
									» _^ sis ⊢ sis,ec1 
										"; ∎ " 0' "\n" //
									rp8.add_s8 { ec0 ec1 } ⊢ ec0 
									rp8.add_s8 { ec0 srl } ⊢ ec0 
									rp8.add_s8 { ec0 es0 } ⊢ ec0 
									rp8.cct { ec0 er } ⊢ ec0
									rp8.add_s8 { ec0 es1 } ⊢ ec0 
									» _^ rsp ⊢ rsp,sc1 
										"\tpush QWORD [rsp+8*" 0d' "]\n" //
									rp8.add_s8 { ec0 sc1 } ⊢ ec0 
									rp8.add_s8 { ec0 ret } ⊢ ec0
									f_etr { rsp_d pr yr } ⊢ ft 
									∎ { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv ec0 rl ft }
							∐ ft ⊢ f_rtm◂{}; s ⊢ _none◂{} . 
								» "; ∎\n" _ ⊢ sc0 
								rp8.add_s8 { ec0 sc0 } ⊢ ec0 
								f_rtm {} ⊢ ft 
								∎ { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv ec0 rl ft }
							∐. . 
								∎| 
						∐. ast.exn◂ne .
							» _^ ne ⊢ ne,se 
								"exn " 0d' ":\n" // 
							printf { se lb_n } ⊢ { se lb_n sse }
							» _^ sse ⊢ sse,ec1 
								"; ∎| \n"
								0' 
								"\tjmp err\n" // 
							rp8.add_s8 { ec0 ec1 } ⊢ ec0 
							∎ { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv ec0 rl ft } 		
					@.gnr_lc_code { { o gys gyd dp } { gfl cl } lb_n { ev evv } rv tav tv_n tv lc } 
						» 4000r _ ⊢ irv_g_N 
						_mk_arr irv_g_N ⊢ { _ irv_g } 
						##» "gnr_lc_code D0" _ ⊢ dd0
						##_emt dd0 ⊢ _ 
						$ lb_n ⊢ lb_n,lbg 
						_inc lb_n ⊢ lb_n 
						rset.ini {} ⊢ s0 
						» 0r _ ⊢ pv_n 
						_nil {} ⊢ alp 
						$ gys ⊢ gys,gys0 
						alc_type_k.f { pv_n alp tav tv_n tv s0 gys0 } ⊢ { pv_n alp tav tv_n tv s0 p0 } 
						rset.ini {} ⊢ sr0 
						$ gyd ⊢ gyd,gyd0 
						alc_type_k.f { pv_n alp tav tv_n tv sr0 gyd0 } ⊢ { pv_n alp tav tv_n tv sr0 pr0 } 
						$ p0 ⊢ p0,p00 
						stt_v.pnt.f p00 ⊢ sp0 
						$ pr0 ⊢ pr0,pr00 
						stt_v.pnt.f pr00 ⊢ spr0 
						$ pr0 ⊢ pr0,pr0_0 
						emt.mk_rsp pr0_0 ⊢ rsp_d 
						$ p0 ⊢ p0,p00 
						emt.mk_rsp p00 ⊢ rsp 

						$ p0 ⊢ p0,p00 
						_nil {} ⊢ dl 
						_nil {} ⊢ rl 
						emt.idx.crt_ptn { irv_g dp p00 rl dl } ⊢ { irv_g rl dl } 
							
						$ pr0 ⊢ pr0,pr00 
						$ rsp ⊢ rsp,rsp0 
						$ rsp_d ⊢ rsp_d,rsp_d0 
						rp8.e {} ⊢ ee0 
						$ gys ⊢ gys,gys0 
						$ gyd ⊢ gyd,gyd0 
						imp { gys0 gyd0 } ⊢ yx 
						RP.atm yx ⊢ yx 
						$ yx ⊢ yx,yx0 
						pnt_type_k { tv yx0 } ⊢ { tv syx } 
						##» "gnr_lc_code D1" _ ⊢ dd0
						##_emt dd0 ⊢ _ 
						_lod_q { ev o } ⊢ { ev o yi } 
						var yi ⊢ yi 
						RP.atm yi ⊢ yi 
						##» "gnr_lc_code D2" _ ⊢ dd0
						##_emt dd0 ⊢ _  
						$ yi ⊢ yi,yi0 
						##pnt_type_k { tv yi0 } ⊢ { tv syi }
						##_emt { syx syi } ⊢ { syx syi }
						_nil {} ⊢ clg 
						##cmp_t.f { tv yx yi clg } ⊢ { tv b clg }
						» 1r _ ⊢ lvg 
						inst_al { tv_n tv lvg yx clg } ⊢ { tv_n tv lvg yx clg }
						inst_al { tv_n tv lvg yi clg } ⊢ { tv_n tv lvg yi clg }
						$ yx ⊢ yx,yx0 
						unify.f { tv yx0 yi } ⊢ tv 
						_dec lvg ⊢ lvg 
						gen { tv_n tv lvg yx } ⊢ { tv_n tv lvg yx } 
						##∐ b ⊢ bl.t◂{} . 
						##» "gnr_lc_code D3" _ ⊢ dd0
						##_emt dd0 ⊢ _ 
						» _^ lbg,o,sp0,spr0,syx ⊢ lbg,o,sp0,spr0,syx,ec1 
							"LB_" 0d' ": ; " 1d' " " 2' " ⊢ " 3' " : " 4' "\n" //
						$ { lbg o gys rsp0 p0 rsp_d pr0 } ⊢ R0
						$ R0 ⊢ R0,R1 
						_cns { R1 gfl } ⊢ gfl
						rp8.add_s8 { ee0 ec1 } ⊢ ee0 
						∐ rsp'=0r . 
							##» "gnr_lc_code D5" _ ⊢ dd0
							##_emt dd0 ⊢ _ 
							f_etr { rsp_d0 pr00 gyd } ⊢ ft 
							emt.lc_code.f { { gfl clg } lb_n { ev evv } rsp { rv irv_g } tav tv_n tv lc ee0 rl ft } ⊢ { { gfl clg } lb_n { ev evv } rsp { rv irv_g } tav tv_n tv ee0 rl ft } 
							##» "gnr_lc_code D7" _ ⊢ dd0
							##_emt dd0 ⊢ _ 
							∎ { ee0 R0 { gfl cl } lb_n { ev evv } rv tav tv_n tv } 
						∐. . 
							##» "gnr_lc_code D6" _ ⊢ dd0
							##		_emt dd0 ⊢ _ 
							» "\tadd rsp,8\n" _ ⊢ sc0 
							rp8.add_s8 { ee0 sc0 } ⊢ ee0
							f_etr { rsp_d0 pr00 gyd } ⊢ ft 
							emt.lc_code.f { { gfl cl } lb_n { ev evv } rsp { rv irv_g } tav tv_n tv lc ee0 rl ft } ⊢ { { gfl cl } lb_n { ev evv } rsp { rv irv_g } tav tv_n tv ee0 rl ft } 
							∎ { ee0 R0 { gfl cl } lb_n { ev evv } rv tav tv_n tv }
							##∎| 
						\[
						∐. . 
							» "gnr_lc_code D4" _ ⊢ dd0
										_emt dd0 ⊢ _ 
										∎| 
										\]				
					@.stt_call { tav o lb_n rsp irv rl rsp_s p0 is }
						rp8.e {} ⊢ er 
						∐ rsp_s'=0r . 
							» REG_N _ ⊢ nb 
							_add { nb rsp } ⊢ { nb rsp }
							rset.ini {} ⊢ v0 
							push_regs.f { rsp irv v0 rl } ⊢ { rsp irv v0 rl l e n }
							rp8.add_s8 { er e } ⊢ er 
							_inc rsp ⊢ rsp 
							shft_ptn { p0 rsp } ⊢ { p0 rsp }
							_dec rsp ⊢ rsp 
							##sub_rsp rsp_s ⊢ { rsp_s ec2 } 
							$ rsp ⊢ rsp,rsp00 
							##_add { rsp00 rsp_s } ⊢ { rsp00 rsp_s }
							_none {} ⊢ lb1 
							mov_ptn.f2 { tav rsp00 v0 is p0 lb1 } ⊢ { tav rsp00 v0 em0 }
							rp8.cct { er em0 } ⊢ er 
							» _^ o ⊢ o,e1 
								"\tcall " 0' "\n" //
							rp8.add_s8 { er e1 } ⊢ er 
							∎ { tav o lb_n rsp irv rl rsp_s er l v0 nb } 
						∐. . 
							» REG_N _ ⊢ nb 
							_add { nb rsp } ⊢ { nb rsp }
							rset.ini {} ⊢ v0 
							push_regs.f { rsp irv v0 rl } ⊢ { rsp irv v0 rl l e n }
							rp8.add_s8 { er e } ⊢ er 
							$ lb_n ⊢ lb_n,lbr 
							_inc lb_n ⊢ lb_n 
							» _^ lbr ⊢ lbr,s0 
								"\tpush LB_" 0d' "\n" // 
							rp8.add_s8 { er s0 } ⊢ er 
							» REG_N _ ⊢ nb1 
							_add { nb1 rsp } ⊢ { nb1 rsp } 
							bl.t {} ⊢ bt0 
							exc_q { v0 nb1 bt0 } ⊢ { v0 nb1 bt0 } 
							$ rsp ⊢ rsp,rsp00  
							_inc rsp00 ⊢ rsp00 
							shft_ptn { p0 rsp00 } ⊢ { p0 rsp00 }
							sub_rsp rsp_s ⊢ { rsp_s ec2 }
							rp8.add_s8 { er ec2 } ⊢ er  
							_add { rsp00 rsp_s } ⊢ { rsp00 rsp_s }
							_none {} ⊢ lb1 
							mov_ptn.f2 { tav rsp00 v0 is p0 lb1 } ⊢ { tav rsp00 v0 em0 }
							rp8.cct { er em0 } ⊢ er 
							bl.f {} ⊢ bf0 
							exc_q { v0 nb1 bf0 } ⊢ { v0 nb1 bf0 } 
							» _^ lbr,o ⊢ lbr,o,s0 
								"\tcall " 1' "\n" 
								"LB_" 0d' ":\n" // 
							rp8.add_s8 { er s0 } ⊢ er
							∎ { tav o lb_n rsp irv rl rsp_s er l v0 nb } 
					@.op_axm { evv tav tv_n tv lb_n a rsp rl irv is sis yd } 
						##» "enter op_axm" _ ⊢ ee0 
						##_emt ee0 ⊢ _ 
						##_emt a ⊢ a 
						∐ a'=e_axm.inc . 
							∐ is ⊢ RP.atm◂k; k ⊢ stt_v.hp◂{ r h }; h ⊢ stt_v.r64◂{} . 
								$ r ⊢ r,r0 
								stt_v.r64_reg r0 ⊢ is 
								reg { rsp r } ⊢ { rsp r sr b } 						
								» _^ sis,sr ⊢ sis,sr,ec1 
									"; _inc " 0' " ⊢ " 0' "\n" 
									"\tadd " 1' ",1\n" 
									//
								∎ { evv tav tv_n tv lb_n a rsp rl irv is ec1 }
							∐ is ⊢ RP.atm◂k; k ⊢ stt_v.hp_im◂v; v ⊢ ast.r64◂x . 
								_inc x ⊢ x 
								ast.r64 x ⊢ v 
								stt_v.hp_im v ⊢ k 
								RP.atm k ⊢ is1 
								$ is1 ⊢ is1,is10 
								stt_v.pnt.f is10 ⊢ sis1
								» _^ sis,sis1 ⊢ sis,sis1,ec1 
									"; _inc " 0' " ⊢ " 1' "\n" 
									//
								∎ { evv tav tv_n tv lb_n a rsp rl irv is1 ec1 }
							∐. . 
								» "lc_code.f t2" _ ⊢ se 
								_emt se ⊢ se 
								∎|
						∐ a'=e_axm.dec . 
							∐ is ⊢ RP.atm◂k; k ⊢ stt_v.hp◂{ r h }; h ⊢ stt_v.r64◂{} . 
								reg { rsp r } ⊢ { rsp r sr b } 
								stt_v.r64 {} ⊢ h 
								stt_v.hp { r h } ⊢ k
								RP.atm k ⊢ is 
								» _^ sis,sr ⊢ sis,sr,ec1 
									"; _dec " 0' " ⊢ " 0' "\n" 
									"\tsub " 1' ",1\n" 
									//
								∎ { evv tav tv_n tv lb_n a rsp rl irv is ec1 }
							∐ is ⊢ RP.atm◂k; k ⊢ stt_v.hp_im◂v; v ⊢ ast.r64◂x . 
								_dec x ⊢ x 
								ast.r64 x ⊢ v 
								stt_v.hp_im v ⊢ k 
								RP.atm k ⊢ is1 
								$ is1 ⊢ is1,is10 
								stt_v.pnt.f is10 ⊢ sis1
								» _^ sis,sis1 ⊢ sis,sis1,ec1 
									"; _dec " 0' " ⊢ " 1' "\n" 
									//
								∎ { evv tav tv_n tv lb_n a rsp rl irv is1 ec1 }
							∐. . 
								» "lc_code.f t3" _ ⊢ se 
								_emt se ⊢ se 
								∎|  					
						∐ a' = e_axm.imul . 
							» "imul" _ ⊢ op0 
							op2 { op0 tav lb_n a rsp rl irv sis is } ⊢ { tav lb_n a rsp rl irv is1 ec1 }
							rp8.mk_s8 ec1 ⊢ { ec1 sc1 } 
							∎ { evv tav tv_n tv lb_n a rsp rl irv is1 sc1 }						
						∐ a' = e_axm.add . 
							» "add" _ ⊢ op0 
							op2 { op0 tav lb_n a rsp rl irv sis is } ⊢ { tav lb_n a rsp rl irv is1 ec1 }
							rp8.mk_s8 ec1 ⊢ { ec1 sc1 } 
							∎ { evv tav tv_n tv lb_n a rsp rl irv is1 sc1 }	
						∐ a'=e_axm.mlc_s8 . 
							rp8.e {} ⊢ e0 
							∐ is ⊢ RP.atm◂a0 . 
								∐ a0 ⊢ stt_v.hp_im◂v0; v0 ⊢ ast.r64◂l0 . 
									_mlc_s8 l0 ⊢ { l0 s1 } 
									ast.r64 l0 ⊢ v0 
									stt_v.hp_im v0 ⊢ h0
									RP.atm h0 ⊢ a0   
									ast.s8 s1 ⊢ v1 
									stt_v.hp_im v1 ⊢ h1
									RP.atm h1 ⊢ a1  
									_nil {} ⊢ l0 
									_cns { a1 l0 } ⊢ l0 
									_cns { a0 l0 } ⊢ l0 
									RP.rcd l0 ⊢ ip1 
									$ ip1 ⊢ ip1,ip10 
									stt_v.pnt.f ip10 ⊢ sip1 
									» _^ sis,sip1 ⊢ sis,sip1,sc0 
										"; _mlc_s8 " 0' " ⊢ " 1' "\n" // 
									rp8.add_s8 { e0 sc0 } ⊢ e0 
									rp8.mk_s8 e0 ⊢ { e0 sc0 } 
									∎ { evv tav tv_n tv lb_n a rsp rl irv ip1 sc0 }
								∐ a0 ⊢ stt_v.hp◂{ r0 h0 }; h0 ⊢ stt_v.r64◂{} . 
									stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl v0 } 
									rset.set_t { v0 r0 } ⊢ { v0 r0 } 
									alc_vs v0 ⊢ { v0 rm0 } 
									$ rm0 ⊢ rm0,rm00 
									stt_v.s8_reg rm00 ⊢ a1 
									$ r0 ⊢ r0,r00 
									stt_v.r64_reg r00 ⊢ a0 
									_nil {} ⊢ l0 
									_cns { a1 l0 } ⊢ l0 
									_cns { a0 l0 } ⊢ l0 
									RP.rcd l0 ⊢ ip1 
									$ ip1 ⊢ ip1,ip10 
									stt_v.pnt.f ip10 ⊢ sip1 
									brk_rsp { rsp rm0 } ⊢ { rsp rm0 sb0 } 
									rp8.add_s8 { e0 sb0 } ⊢ e0
									reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
									reg { rsp rm0 } ⊢ { rsp rm0 srm0 brm0 } 
									» "calloc" _ ⊢ sf0 
									c_call sf0 ⊢ { sf0 scf0 }
									» _^ sis,sip1,sr0,srm0,scf0 ⊢ sis,sip1,sr0,srm0,scf0,sc0 
										"; _mlc_s8 " 0' " ⊢ " 1' "\n" 
										"\tmov rdi," 2' "\n" 
										push_c_regs 
										`	mov rsi,1 
										`	xor rax,rax
										`	push rdi
										4'
										`	pop QWORD [rax] 
										pop_c_regs 
										"\tmov " 3' ",rax\n" // 
									rp8.add_s8 { e0 sc0 } ⊢ e0 
									rp8.mk_s8 e0 ⊢ { e0 sc0 }
									∎ { evv tav tv_n tv lb_n a rsp rl irv ip1 sc0 }
								∐. . 
									» "mlc_s8 0" _ ⊢ se 
									_emt se ⊢ se 
									∎|	
							∐. . 
								» "mlc_s8 0" _ ⊢ se 
								_emt se ⊢ se 
								∎|
						∐ a'=e_axm.rep_movsb . 
							rp8.e {} ⊢ e0 
							rep_movsb.f { sis is lb_n rsp irv rl e0 } ⊢ { lb_n rsp irv rl e0 p1 }
							rp8.mk_s8 e0 ⊢ { e0 sr } 
							∎ { evv tav tv_n tv lb_n a rsp rl irv p1 sr }  
						∐ a'=e_axm.sts . 
							rp8.e {} ⊢ e0 
							sts.f { sis is lb_n rsp irv rl e0 } ⊢ { lb_n rsp irv rl e0 p1 }
							rp8.mk_s8 e0 ⊢ { e0 sr } 
							∎ { evv tav tv_n tv lb_n a rsp rl irv p1 sr } 
						∐ a'=e_axm.s8_len . 
							∐ is ⊢ RP.atm◂a0 . 
								∐ a0 ⊢ stt_v.hp_im◂v0; v0 ⊢ ast.s8◂s0 . 
									_s8_len s0 ⊢ { s0 l0 } 
									ast.r64 l0 ⊢ v1 
									stt_v.hp_im v1 ⊢ h1
									RP.atm h1 ⊢ a1   
									ast.s8 s0 ⊢ v0 
									stt_v.hp_im v0 ⊢ h0
									RP.atm h0 ⊢ a0  
									_nil {} ⊢ l0 
									_cns { a1 l0 } ⊢ l0 
									_cns { a0 l0 } ⊢ l0 
									RP.rcd l0 ⊢ ip1 
									$ ip1 ⊢ ip1,ip10 
									stt_v.pnt.f ip10 ⊢ sip1 
									» _^ sis,sip1 ⊢ sis,sip1,sc0 
										"; _s8_len " 0' " ⊢ " 1' "\n" // 
									∎ { evv tav tv_n tv lb_n a rsp rl irv ip1 sc0 }
								∐ a0 ⊢ stt_v.hp◂{ r0 h0 }; h0 ⊢ stt_v.ref◂q0; q0 ⊢ stt_v.opq◂{} .
									stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl v0 } 
									rset.set_t { v0 r0 } ⊢ { v0 r0 } 
									alc_vs v0 ⊢ { v0 rm0 } 
									$ rm0 ⊢ rm0,rm00 
									stt_v.r64_reg rm00 ⊢ a1 
									$ r0 ⊢ r0,r00
									stt_v.s8_reg r00 ⊢ a0 
									_nil {} ⊢ l0 
									_cns { a1 l0 } ⊢ l0 
									_cns { a0 l0 } ⊢ l0 
									RP.rcd l0 ⊢ ip1 
									$ ip1 ⊢ ip1,ip10 
									stt_v.pnt.f ip10 ⊢ sip1 
									brk_rsp { rsp rm0 } ⊢ { rsp rm0 er }
									##rp8.add_s8 { sc0 er } ⊢ sc0 
									reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
									reg { rsp rm0 } ⊢ { rsp rm0 srm0 brm0 } 
									» _^ sis,sip1,sr0,srm0,er ⊢ sis,sip1,sr0,srm0,er,sc0 
										4' 
										"; _s8_len " 0' " ⊢ " 1' "\n" 
										"\tmov rdi," 2' "\n" 
										"\tmov rdi,QWORD [rdi]\n" 
										"\tmov rsi,0x0000_ffff_ffff_ffff\n" 
										"\tand rdi,rsi\n" 
										"\tmov " 3' ",rdi\n" // 
									∎ { evv tav tv_n tv lb_n a rsp rl irv ip1 sc0 }
								∐. . 
									» "s8_len 0" _ ⊢ se 
									_emt se ⊢ se 
									∎|	
							∐. . 
								» "s8_len 0" _ ⊢ se 
								_emt se ⊢ se 
								∎|
						∐ a'=e_axm.emt .
							rp8.e {} ⊢ e0 
							$ is ⊢ is,is0  
							» _^ sis ⊢ sis,s0 
								"; _emt " 0' " ⊢ " 0' "\n" // 
							rp8.add_s8 { e0 s0 } ⊢ e0 
							\[
							» _^ _ ⊢ s0
								push_c_regs // 
							rp8.add_s8 { e0 s0 } ⊢ e0 
							\]
							» "_emt:" _ ⊢ se0 
							printf { se0 lb_n } ⊢ { se0 lb_n s0 } 
							rp8.add_s8 { e0 s0 } ⊢ e0 
							_nil {} ⊢ ahl
							_nil {} ⊢ fl 
							emt.ptn { ahl fl tav lb_n rsp is0 e0 } ⊢ { ahl fl tav lb_n rsp e0 }
							» "\n" _ ⊢ se1 
							printf { se1 lb_n } ⊢ { se1 lb_n s0 } 
							rp8.add_s8 { e0 s0 } ⊢ e0 
							$ lb_n ⊢ lb_n,lb0 
							_inc lb_n ⊢ lb_n 
							» _^ lb0 ⊢ lb0,s0 
								"\tjmp LB_" 0d' "\n" // 
							rp8.add_s8 { e0 s0 } ⊢ e0 
							emt.adt_lp { ahl fl tav lb_n rsp e0 } ⊢ { ahl tav lb_n rsp e0 }
							» _^ lb0 ⊢ lb0,s0 
								"LB_" 0d' ":\n" // 
							rp8.add_s8 { e0 s0 } ⊢ e0  
							\[
							» _^ _ ⊢ s0 
								pop_c_regs //
							rp8.add_s8 { e0 s0 } ⊢ e0 
							\]
							rp8.mk_s8 e0 ⊢ { e0 s0 }
							∎ { evv tav tv_n tv lb_n a rsp rl irv is s0 } 
						∐ a'=e_axm.mk_arr .
							$ is ⊢ is,is0 
							arr.mk_arr { is0 sis irv evv tav tv_n tv yd lb_n rl rsp } ⊢ { irv evv tav tv_n tv lb_n rl rsp e0 is1 }
							rp8.mk_s8 e0 ⊢ { e0 s0 } 
							∎ { evv tav tv_n tv lb_n a rsp rl irv is1 s0 } 
						∐ a'=e_axm.arr_of_lst . 
							arr.arr_of_lst { is sis irv evv tav tv_n tv yd lb_n rl rsp } ⊢ { irv evv tav tv_n tv lb_n rl rsp e0 is1 }
							rp8.mk_s8 e0 ⊢ { e0 s0 } 
							∎ { evv tav tv_n tv lb_n a rsp rl irv is1 s0 } 
						∐ a'=e_axm.exc_q . 
							rp8.e {} ⊢ e0 
							stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl vs0 }
							$ is ⊢ is,is0 
							stt_v.mk_rset { is0 vs0 } ⊢ vs0
							∐ is ⊢ RP.rcd◂l0; l0 ⊢ _cns◂{ a0 l0 }; l0 ⊢ _cns◂{ a1 l0 }; l0 ⊢ _cns◂{ a2 l0 }; l0 ⊢ _nil◂{}; a0 ⊢ RP.atm◂aa0; a1 ⊢ RP.atm◂aa1 .
								$ aa0 ⊢ aa0,aa00 
								RP.atm aa0 ⊢ a0 
								∐ aa00 ⊢ stt_v.hp◂{ r0 h0 }; h0 ⊢ stt_v.ref◂q0; q0 ⊢ stt_v.arr◂ha0 . 
									alc_vs vs0 ⊢ { vs0 rm0 } 
									$ ha0 ⊢ ha0,ha00 
									$ rm0 ⊢ rm0,rm00 
									stt_v.hp { rm00 ha00 } ⊢ pp0 
									RP.atm pp0 ⊢ ip0 
									_none {} ⊢ lb1
									$ ip0 ⊢ ip0,ip00
									mov_ptn.f2 { tav rsp vs0 a2 ip00 lb1 } ⊢ { tav rsp vs0 er0 }
									rp8.cct { e0 er0 } ⊢ e0 
									$ aa1 ⊢ aa1,aa10 
									r64_to_rax { rsp evv aa10 } ⊢ { rsp evv sc0 } 
									rp8.add_s8 { e0 sc0 } ⊢ e0 
									reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
									reg { rsp rm0 } ⊢ { rsp rm0 srm0 brm0 }
									##rp8.add_s8 { e0 sbrm0 } ⊢ e0 
									» _^ sr0,srm0 ⊢ sr0,srm0,sc0 
										"\tmov rdi," 0' "\n" 
										`	lea rdi,[rdi+8+8*rax]
										`	mov rax,QWORD [rdi]
										"\tmov rsi," 1' "\n" 
										`	mov QWORD [rdi],rsi 
										"\tmov " 1' ",rax\n" 
										//
									rp8.add_s8 { e0 sc0 } ⊢ e0 
									stt_v.ptn_of_hp { vs0 ha0 } ⊢ { vs0 pt0 }
									_none {} ⊢ lb1 
									$ pt0 ⊢ pt0,pt00
									_nil {} ⊢ l0 
									_cns { pt0 l0 } ⊢ l0 
									RP.atm aa1 ⊢ a1 
									_cns { a1 l0 } ⊢ l0 
									_cns { a0 l0 } ⊢ l0 
									RP.rcd l0 ⊢ p1 
									mov_ptn.f2 { tav rsp vs0 ip0 pt00 lb1 } ⊢ { tav rsp vs0 er0 }
									rp8.mk_s8 e0 ⊢ { e0 s0 } 
									∎ { evv tav tv_n tv lb_n a rsp rl irv p1 s0 }
								∐. .
									∎| 
							∐. .
								∎| 
						∐ a'=e_axm.lod_q . 
							rp8.e {} ⊢ e0 
							stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl vs0 }
							$ is ⊢ is,is0 
							stt_v.mk_rset { is0 vs0 } ⊢ vs0
							∐ is ⊢ RP.rcd◂l0; l0 ⊢ _cns◂{ a0 l0 }; l0 ⊢ _cns◂{ a1 l0 }; l0 ⊢ _nil◂{}; a0 ⊢ RP.atm◂aa0; a1 ⊢ RP.atm◂aa1 .
								$ aa0 ⊢ aa0,aa00 
								RP.atm aa0 ⊢ a0 
								$ aa1 ⊢ aa1,aa10 
								RP.atm aa1 ⊢ a1 
								r64_to_rax { rsp evv aa10 } ⊢ { rsp evv sc0 } 
								rp8.add_s8 { e0 sc0 } ⊢ e0 
								∐ aa00 ⊢ stt_v.hp◂{ r0 h0 }; h0 ⊢ stt_v.ref◂q0; q0 ⊢ stt_v.arr◂ha0 . 
									alc_vs vs0 ⊢ { vs0 rm0 } 
									reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
									» _^ sr0 ⊢ sr0,sc0 
										"\tmov rdi," 0' "\n" 
										`	mov rdi,[rdi+8+8*rax]
										//
									rp8.add_s8 { e0 sc0 } ⊢ e0 
									rp8.e {} ⊢ eh 
									$ ha0 ⊢ ha0,ha00 
									_nil {} ⊢ ahl 
									_nil {} ⊢ fl
									rpc.hp { ahl fl tav lb_n ha00 eh } ⊢ { ahl fl tav lb_n eh }
									rp8.e {} ⊢ e2 
									rpc.adt_lp { ahl fl tav lb_n e2 } ⊢ { ahl tav lb_n e2 }
									skip { lb_n e2 } ⊢ { lb_n e2 } 
									rp8.cct { e0 e2 } ⊢ e0 
									rp8.cct { e0 eh } ⊢ e0 
									brk_rsp { rsp rm0 } ⊢ { rsp rm0 sb0 } 
									rp8.add_s8 { e0 sb0 } ⊢ e0 
									reg { rsp rm0 } ⊢ { rsp rm0 srm0 brm0 }
									» _^ srm0 ⊢ srm0,sc0 
										"\tmov " 0' ",rax\n" //
									rp8.add_s8 { e0 sc0 } ⊢ e0 
									$ ha0 ⊢ ha0,ha00
									stt_v.ptn_of_hp { vs0 ha00 } ⊢ { vs0 pt0 } 
									$ rm0 ⊢ rm0,rm00 
									stt_v.hp { rm00 ha0 } ⊢ ap0 
									RP.atm ap0 ⊢ ip0 
									$ pt0 ⊢ pt0,pt00
									_nil {} ⊢ l0 
									_cns { pt0 l0 } ⊢ l0 
									_cns { a1 l0 } ⊢ l0 
									_cns { a0 l0 } ⊢ l0 
									RP.rcd l0 ⊢ p1 
									_none {} ⊢ o0 
									mov_ptn.f2 { tav rsp vs0 ip0 pt00 o0 } ⊢ { tav rsp vs0 er0 }
									rp8.cct { e0 er0 } ⊢ e0 
									rp8.mk_s8 e0 ⊢ { e0 s0 } 
									∎ { evv tav tv_n tv lb_n a rsp rl irv p1 s0 }
								∐. . 
									∎| 
							∐. . 
								∎|
						∐ a'=e_axm.arr_len . 
							rp8.e {} ⊢ e0 
							stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl v0 } 
							$ is ⊢ is,is0 
							stt_v.mk_rset { is0 v0 } ⊢ v0 
							$ is ⊢ is,is0 
							∐ is ⊢ RP.atm◂a0 . 
								∐ a0 ⊢ stt_v.hp◂{ r0 h0 }; h0 ⊢ stt_v.ref◂q0; q0 ⊢ stt_v.arr◂ha .
									alc_vs v0 ⊢ { v0 rm0 } 
									$ rm0 ⊢ rm0,rm00 
									stt_v.r64_reg rm00 ⊢ a1 
									_nil {} ⊢ l0 
									_cns { a1 l0 } ⊢ l0 
									_cns { is0 l0 } ⊢ l0 
									RP.rcd l0 ⊢ ip1 
									$ ip1 ⊢ ip1,ip10 
									stt_v.pnt.f ip10 ⊢ sip1 
									brk_rsp { rsp rm0 } ⊢ { rsp rm0 er }
									rp8.add_s8 { e0 er } ⊢ e0 
									##$ r0 ⊢ r0,r00
									reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
									reg { rsp rm0 } ⊢ { rsp rm0 srm0 brm0 } 
									##rp8.add_s8 { e0 sbrm0 } ⊢ e0 
									» _^ sis,sip1,sr0,srm0 ⊢ sis,sip1,sr0,srm0,sc0 
										"; _arr_len " 0' " ⊢ " 1' "\n" 
										"\tmov rdi," 2' "\n" 
										"\tmov rdi,QWORD [rdi]\n" 
										"\tmov rsi,0x0000_ffff_ffff_ffff\n" 
										"\tand rdi,rsi\n" 
										"\tmov " 3' ",rdi\n" // 
									rp8.add_s8 { e0 sc0 } ⊢ e0 
									rp8.mk_s8 e0 ⊢ { e0 se0 } 
									∎ { evv tav tv_n tv lb_n a rsp rl irv ip1 se0 }
								∐. . 
									» "arr_len 0" _ ⊢ se 
									_emt se ⊢ se 
									∎|	
							∐. . 
								» "arr_len 0" _ ⊢ se 
								_emt se ⊢ se 
								∎| 
						∐ a'=e_axm.in_fn . 
							rp8.e {} ⊢ e0 
							stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl vs0 }
							$ is ⊢ is,is0 
							stt_v.mk_rset { is0 vs0 } ⊢ vs0
							$ is ⊢ is,is0 
							alc_vs vs0 ⊢ { vs0 rm0 } 
							brk_rsp { rsp rm0 } ⊢ { rsp rm0 sb0 } 
							rp8.add_s8 { e0 sb0 } ⊢ e0 
							reg { rsp rm0 } ⊢ { rsp rm0 srm0 brm0 } 
							∐ is ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp◂{ r0 h0 }; h0 ⊢ stt_v.ref◂q0; q0 ⊢ stt_v.opq◂{} . 
								reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
								stt_v.s8_reg rm0 ⊢ a1 
								_nil {} ⊢ l0 
								_cns { a1 l0 } ⊢ l0 
								_cns { is0 l0 } ⊢ l0 
								RP.rcd l0 ⊢ p1 
								» _^ sr0,srm0 ⊢ sr0,srm0,sc0 
									push_c_regs 
									"\tmov rdi," 0' "\n" 
									`	add rdi,8
									`	call in_fn
									pop_c_regs 
									"\tmov " 1' ",rax\n" 
									// 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								rp8.mk_s8 e0 ⊢ { e0 se0 } 
								∎ { evv tav tv_n tv lb_n a rsp rl irv p1 se0 }
							∐ is ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp_im◂v0; v0 ⊢ ast.s8◂s0 . 
								stt_v.s8_reg rm0 ⊢ a1 
								_nil {} ⊢ l0 
								_cns { a1 l0 } ⊢ l0 
								_cns { is0 l0 } ⊢ l0 
								RP.rcd l0 ⊢ p1 
								» 0r _ ⊢ rs 
								mk_db { s0 rs } ⊢ { s0 rs dbs } 
								inc_x lb_n ⊢ { lb0 lb_n }
								inc_x lb_n ⊢ { lb1 lb_n }  
								» _^ lb0,lb1,dbs,srm0 ⊢ lb0,lb1,dbs,srm0,sr 
									"\tjmp LB_" 0d' "\n"
									"\tLB_" 1d' ": db " 2' "\n" 
									"LB_" 0d' ":\n" 
									push_c_regs 
									"\tmov rdi,LB_" 1d' "\n" 
									`	call in_fn 
									pop_c_regs 
									"\tmov " 3' ",rax\n" 
								//
								rp8.add_s8 { e0 sr } ⊢ e0 
								rp8.mk_s8 e0 ⊢ { e0 se0 } 
								∎ { evv tav tv_n tv lb_n a rsp rl irv p1 se0 }
							∐. . 
								∎| 
						\[
						∐ a'=e_axm.out_fn . 
							rp8.e {} ⊢ e0 
							stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl vs0 }
							$ is ⊢ is,is0 
							stt_v.mk_rset { is0 vs0 } ⊢ vs0
							$ is ⊢ is,is0 
							∐ is ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp◂{ r0 h0 }; h0 ⊢ stt_v.ref◂q0; q0 ⊢ stt_v.opq◂{} . 
								reg { rsp r0 } ⊢ { rsp r0 sr0 br0 } 
								alc_vs vs0 ⊢ { vs0 rm0 } 
								reg_brk { rsp rm0 } ⊢ { rsp rm0 srm0 brm0 sbrm0 } 
								rp8.add_s8 { e0 sbrm0 } ⊢ e0 
								stt_v.s8_reg rm0 ⊢ a1 
								_nil {} ⊢ l0 
								_cns { a1 l0 } ⊢ l0 
								_cns { is0 l0 } ⊢ l0 
								RP.rcd l0 ⊢ p1 
								» _^ sr0,srm0 ⊢ sr0,srm0,sc0 
									push_c_regs 
									"\tmov rdi," 0' "\n" 
									`	add rdi,8
									`	call in_fn
									pop_c_regs 
									"\tmov " 1' ",rax\n" 
									// 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								rp8.mk_s8 e0 ⊢ { e0 se0 } 
								∎ { evv tav tv_n tv lb_n a rsp rl irv p1 se0 }
							∐ is ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp_im◂v0; v0 ⊢ ast.s8◂s0 . 
								alc_vs vs0 ⊢ { vs0 rm0 } 
								reg_brk { rsp rm0 } ⊢ { rsp rm0 srm0 brm0 sbrm0 } 
								rp8.add_s8 { e0 sbrm0 } ⊢ e0 
								stt_v.s8_reg rm0 ⊢ a1 
								_nil {} ⊢ l0 
								_cns { a1 l0 } ⊢ l0 
								_cns { is0 l0 } ⊢ l0 
								RP.rcd l0 ⊢ p1 
								» 0r _ ⊢ rs 
								mk_db { s0 rs } ⊢ { s0 rs dbs } 
								inc_x lb_n ⊢ { lb0 lb_n }
								inc_x lb_n ⊢ { lb1 lb_n }  
								» _^ lb0,lb1,dbs,srm0 ⊢ lb0,lb1,dbs,srm0,sr 
									"\tjmp LB_" 0d' "\n"
									"\tLB_" 1d' ": db " 2' "\n" 
									"LB_" 0d' ":\n" 
									push_c_regs 
									"\tmov rdi,LB_" 1d' "\n" 
									`	call in_fn 
									pop_c_regs 
									"\tmov " 3' ",rax\n" 
								//
								rp8.add_s8 { e0 sr } ⊢ e0 
								rp8.mk_s8 e0 ⊢ { e0 se0 } 
								∎ { evv tav tv_n tv lb_n a rsp rl irv p1 se0 }
							∐. . 
								∎|
						\]
						∐. . 
							» _^ a ⊢ a,ee1 
								"; ##" 0d' ".. ⊢ ..\n"
								"\tcall ETR_" 0d' "\n" //
							##rp8.of_s8 ec1 ⊢ ec1  
							_emt ee1 ⊢ ee1 
							∎| 
					\[
					@.op2 { op im tav lb_n a rsp rl irv sis is }
						∐ is ⊢ RP.atm◂k; k ⊢ stt_v.hp◂{ r h }; h ⊢ stt_v.r64◂{} . 
							stt_v.r64 {} ⊢ h 
							reg { rsp r } ⊢ { rsp r sr b } 
							stt_v.hp { r h } ⊢ k
							RP.atm k ⊢ is 
							» _^ sis,sr,op,im ⊢ sis,sr,op,im,ec1 
								"; " 2' " " 0' " ⊢ " 0' "\n" 
								"\t" 2' " " 1' "," 3' "\n" 
								//
							∎ { evv tav tv_n tv lb_n a rsp rl irv is ec1 }
							∐ is ⊢ RP.atm◂k; k ⊢ stt_v.hp_im◂v; v ⊢ ast.r64◂x . 
								$ rl ⊢ rl,rl0 
								rset.ini {} ⊢ v 
								stt_v.mk_rset_env { irv rl0 v } ⊢ { irv v } 
								rset.min_f v ⊢ { v i0 } 
								stt_v.r64 {} ⊢ h 
								$ i0 ⊢ i0,i00 
								stt_v.hp { i0 h } ⊢ k
								RP.atm k ⊢ is1 
								$ is1 ⊢ is1,is10 
								stt_v.pnt.f is10 ⊢ sis1
								reg { rsp i00 } ⊢ { rsp i00 sr b } 
								_inc x ⊢ x 
								» _^ sis,sis1,sr,x ⊢ sis,sis1,sr,x,ec1 
									"; _inc " 0' " ⊢ " 1' "\n" 
									"\tmov " 2' "," 3d' "\n" 
									//
								∎ { evv tav tv_n tv lb_n a rsp rl irv is1 ec1 }
							∐. . 
								» "lc_code.f t2" _ ⊢ se 
								_emt se ⊢ se 
								∎|
						∎ { tav lb_n a rsp rl irv is ec1 }
					\]
					@.op2 { op tav lb_n a rsp rl irv sis is }
						rp8.e {} ⊢ e0 
						∐ is ⊢ RP.rcd◂l; l ⊢ _cns◂{ a0 l }; l ⊢ _cns◂{ a1 l }; l ⊢ _nil◂{}; a0 ⊢ RP.atm◂k0; a1 ⊢ RP.atm◂k1 . 
							∐ k0 ⊢ stt_v.hp◂{ r0 h0 }; h0 ⊢ stt_v.r64◂{} .
								∐ k1 ⊢ stt_v.hp◂{ r1 h1 }; h1 ⊢ stt_v.r64◂{} .  
									$ r0 ⊢ r0,r00 
									stt_v.r64_reg r00 ⊢ a0
									$ r1 ⊢ r1,r10 
									stt_v.r64_reg r10 ⊢ a1 
									_nil {} ⊢ l 
									_cns { a1 l } ⊢ l 
									_cns { a0 l } ⊢ l 
									RP.rcd l ⊢ is 
									reg { rsp r0 } ⊢ { rsp r0 sr0 b0 } 
									reg { rsp r1 } ⊢ { rsp r1 sr1 b1 } 
									$ b1 ⊢ 
									∐ bl.t◂{} . 
										» _^ sis,sr0,sr1,op ⊢ sis,sr0,sr1,op,ec1 
											"; _" 3' " " 0' " ⊢ " 0' "\n" 
											"\t" 3' " " 1' "," 2' "\n" 
											//
										rp8.add_s8 { e0 ec1 } ⊢ e0 
										∎ { tav lb_n a rsp rl irv is e0 }
									∐. bl.f◂{} . 
										» _^ sis,sr0,sr1,op ⊢ sis,sr0,sr1,op,ec1 
											"; _" 3' " " 0' " ⊢ " 0' "\n"
											"\tmov rdi," 2' "\n" 
											"\t" 3' " " 1' ",rdi\n"
											//
										rp8.add_s8 { e0 ec1 } ⊢ e0 
										∎ { tav lb_n a rsp rl irv is e0 }
									∐ k1 ⊢ stt_v.hp_im◂v; v ⊢ ast.r64◂x .  
										reg { rsp r0 } ⊢ { rsp r0 sr0 b0 } 
										stt_v.r64_reg r0 ⊢ a0 
										$ x ⊢ x,x0 
										stt_v.r64_im x0 ⊢ a1 
										_nil {} ⊢ l 
										_cns { a1 l } ⊢ l 
										_cns { a0 l } ⊢ l 
										RP.rcd l ⊢ is 
										$ is ⊢ is,is0 
										stt_v.pnt.f is0 ⊢ sis1 
										∐ b0 ⊢ bl.t◂{} . 
											» _^ sis,sis1,sr0,x,op ⊢ sis,sis1,sr0,x,op,ec1 
												"; _" 4' " " 0' " ⊢ " 1' "\n" 
												"\t" 4' " " 2' "," 3d' "\n" 
												//
											rp8.add_s8 { e0 ec1 } ⊢ e0 
											∎ { tav lb_n a rsp rl irv is e0 }
										∐. . 
											» _^ sis,sis1,sr0,x,op ⊢ sis,sis1,sr0,x,op,ec1 
												"; _" 4' " " 0' " ⊢ " 1' "\n" 
												"\tmov rdi," 3d' "\n" 
												"\t" 4' " " 2' ",rdi\n" 
												//
											rp8.add_s8 { e0 ec1 } ⊢ e0 
											∎ { tav lb_n a rsp rl irv is e0 }
									∐. . 
										» "lc_code.f _imul 0" _ ⊢ se 
										_emt se ⊢ se 
										∎| 
								∐ k0 ⊢ stt_v.hp_im◂v0; v0 ⊢ ast.r64◂x0 . 
									∐ k1 ⊢ stt_v.hp◂{ r1 h1 }; h1 ⊢ stt_v.r64◂{} .  
										stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl v0 }
										alc_vs v0 ⊢ { v0 rm0 } 
										brk_rsp { rsp rm0 } ⊢ { rsp rm0 sb0 } 
										rp8.add_s8 { e0 sb0 } ⊢ e0 
										$ r1 ⊢ r1,r10 
										stt_v.r64_reg r10 ⊢ a1 
										$ rm0 ⊢ rm0,rm00 
										stt_v.r64_reg rm00 ⊢ a0 
										_nil {} ⊢ l 
										_cns { a1 l } ⊢ l 
										_cns { a0 l } ⊢ l 
										RP.rcd l ⊢ is 
										$ is ⊢ is,is0 
										stt_v.pnt.f is0 ⊢ sis1 
										reg { rsp r1 } ⊢ { rsp r1 sr1 b1 } 
										reg { rsp rm0 } ⊢ { rsp rm0 sr0 b0 } 
										∐ b0 ⊢ bl.t◂{} . 
											» _^ sis,sis1,sr0,sr1,x0,op ⊢ sis,sis1,sr0,sr1,x0,op,ec1  
												"; _" 5' " " 0' " ⊢ " 1' "\n" 
												"\tmov " 2' "," 4d' "\n"  
												"\t" 5' " " 2' "," 3' "\n" 
												//
											rp8.add_s8 { e0 ec1 } ⊢ e0 
											∎ { tav lb_n a rsp rl irv is e0 }
										∐. b0 ⊢ bl.f◂{} . 
											» _^ sis,sis1,sr0,sr1,x0 ⊢ sis,sis1,sr0,sr1,x0,ec1 
												"; _imul " 0' " ⊢ " 1' "\n" 
												"\tmov rdi," 4d' "\n" 
												"\timul rdi," 3' "\n" 
												"\tmov " 2' ",rdi\n"  
												//
											rp8.add_s8 { e0 ec1 } ⊢ e0 
											∎ { tav lb_n a rsp rl irv is e0 }
									∐ k1 ⊢ stt_v.hp_im◂v1; v1 ⊢ ast.r64◂x1 .  
										stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl v0 } 
										alc_vs v0 ⊢ { v0 rm0 } 
										alc_vs v0 ⊢ { v0 rm1 }  
										$ rm0 ⊢ rm0,rm00
										stt_v.r64_reg rm00 ⊢ a0 
										$ rm1 ⊢ rm1,rm10 
										stt_v.r64_reg rm10 ⊢ a1 
										_nil {} ⊢ l 
										_cns { a1 l } ⊢ l 
										_cns { a0 l } ⊢ l 
										RP.rcd l ⊢ is 
										$ is ⊢ is,is0 
										stt_v.pnt.f is0 ⊢ sis1 
										brk_rsp { rsp rm1 } ⊢ { rsp rm1 sb0 } 
										rp8.add_s8 { e0 sb0 } ⊢ e0 
										reg { rsp rm0 } ⊢ { rsp rm0 sr0 b0 } 
										##$ rm1 ⊢ rm1,rm10 
										reg { rsp rm1 } ⊢ { rsp rm1 sr1 b1 } 
										∐ b1 ⊢ bl.t◂{}; b0 ⊢ bl.f◂{} . 
											» _^ sis,sis1,sr0,sr1,x0,x1,op ⊢ sis,sis1,sr0,sr1,x0,x1,op,ec1 
												"; _" 6' " " 0' " ⊢ " 1' "\n" 
												"\tmov " 3' "," 5d' "\n"  
												"\tmov rdi," 4d' "\n" 
												"\t" 6' " rdi," 3' "\n"
												"\tmov " 2' ",rdi\n"  
												//
											rp8.add_s8 { e0 ec1 } ⊢ e0
											∎ { tav lb_n a rsp rl irv is e0 }
										∐ b1 ⊢ bl.t◂{}; b0 ⊢ bl.t◂{} . 
											» _^ sis,sis1,sr0,sr1,x0,x1,op ⊢ sis,sis1,sr0,sr1,x0,x1,op,ec1 
												"; _" 6' " " 0' " ⊢ " 1' "\n" 
												"\tmov " 3' "," 5d' "\n"  
												"\tmov " 2' "," 4d' "\n" 
												"\t" 6' " " 2' "," 3' "\n"
												//
											rp8.add_s8 { e0 ec1 } ⊢ e0
											rp8.mk_s8 e0 ⊢ { e0 ec1 } 
											∎ { tav lb_n a rsp rl irv is e0 }
										∐ b1 ⊢ bl.f◂{}; b0 ⊢ bl.t◂{} . 
											» _^ sis,sis1,sr0,sr1,x0,x1,op ⊢ sis,sis1,sr0,sr1,x0,x1,op,ec1 
												"; _" 6' " " 0' " ⊢ " 1' "\n" 
												"\tmov rdi," 5d' "\n"  
												"\tmov " 2' "," 4d' "\n" 
												"\t" 6' " " 2' ",rdi\n"
												"\tmov " 3' ",rdi\n" 
												//
											rp8.add_s8 { e0 ec1 } ⊢ e0
											∎ { tav lb_n a rsp rl irv is e0 }
										∐. b1 ⊢ bl.f◂{}; b0 ⊢ bl.f◂{} . 
											» _^ sis,sis1,sr0,sr1,x0,x1,op ⊢ sis,sis1,sr0,sr1,x0,x1,op,ec1 
												"; _" 6' " " 0' " ⊢ " 1' "\n" 
												"\tmov rsi," 5d' "\n"  
												"\tmov rdi," 4d' "\n" 
												"\t" 6' " rdi,rsi\n"
												"\tmov " 2' ",rdi\n"  
												"\tmov " 3' ",rsi\n" 
												//
											rp8.add_s8 { e0 ec1 } ⊢ e0
											∎ { tav lb_n a rsp rl irv is e0 }
									∐. . 
										» "lc_code.f _imul 1" _ ⊢ se 
										_emt se ⊢ se 
										∎| 
								∐. . 
									» "lc_code.f _imul 2" _ ⊢ se 
									_emt se ⊢ se 
									_emt sis ⊢ sis 
									∎|
							∐. . 
								» "lc_code.f _imul 3" _ ⊢ se 
								_emt se ⊢ se 
								∎| 
					@.mtc { { gfl cl } ret lb_n { ev evv } rsp { rv irv } tav tv_n tv lm ec0 rl ft } 
						$ lm ⊢ 
						∐ p_cns◂{ { tl me } lm } .  
							$ lb_n ⊢ lb_n,lb0 
							» _^ lb0 ⊢ lb0,slb0 
								"LB_" 0d' ":\n" //
							_inc lb_n ⊢ lb_n 
							_some lb0 ⊢ o0 
							rset.ini {} ⊢ vs0 
							_nil {} ⊢ gl 
							_nil {} ⊢ dl
							$ rl ⊢ rl,rl0 
							stt_v.mk_rset_env { irv rl0 vs0 } ⊢ { irv vs0 }
							$ rl ⊢ rl,rl0 
							mtc_line { vs0 gl dl lb_n o0 { ev evv } rsp { rv irv } tav tv_n tv tl ec0 rl0 } ⊢ { vs0 gl dl lb_n { ev evv }  rsp { rv irv  } tav tv_n tv ec0 rl0 } 
							$ ret ⊢ ret,ret0
							mtc_etr { { gfl cl } ret0 lb_n { ev evv } rsp { rv irv } tav tv_n tv me ec0 rl0 ft } ⊢ { { gfl cl } lb_n { ev evv }  rsp { rv irv  } tav tv_n tv ec0 rl0 ft } 
							rp8.add_s8 { ec0 slb0 } ⊢ ec0 
							mtc { { gfl cl } ret lb_n { ev evv } rsp { rv irv } tav tv_n tv lm ec0 rl ft } ⊢|
						∐. p_end◂{ tl me } .
							_none {} ⊢ o 
							rset.ini {} ⊢ vs0 
							$ rl ⊢ rl,rl0 
							stt_v.mk_rset_env { irv rl0 vs0 } ⊢ { irv vs0 }
							_nil {} ⊢ gl 
							_nil {} ⊢ dl 
							mtc_line { vs0 gl dl lb_n o { ev evv } rsp { rv irv } tav tv_n tv tl ec0 rl } ⊢ { vs0 gl dl lb_n { ev evv } rsp { rv irv  } tav tv_n tv ec0 rl } 
							mtc_etr { { gfl cl } ret lb_n { ev evv } rsp { rv irv } tav tv_n tv me ec0 rl ft } ⊢ { { gfl cl } lb_n { ev evv } rsp { rv irv  } tav tv_n tv ec0 rl ft } 
							∎ { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv ec0 rl ft }
					@.mtc_etr { { gfl cl } ret lb_n { ev evv } rsp { rv irv } tav tv_n tv me ec0 rl ft } 
						$ me ⊢ 
						∐ ast.mtc_rmf◂lm0 .
							mtc { { gfl cl } ret lb_n { ev evv } rsp { rv irv } tav tv_n tv lm0 ec0 rl ft } ⊢| 
						∐ ast.mtc_id_rmf◂{ sp0 ilm0 } .  
							idx.csm_ptn { irv sp0 rl } ⊢ { irv is0 rl }
							$ is0 ⊢ is0,is00 
							stt_v.pnt.f is00 ⊢ sis
							id_mtc { { gfl cl } ret { is0 sis } lb_n { ev evv } rsp { rv irv } tav tv_n tv ilm0 ec0 rl ft } ⊢| 
						∐. ast.mtc_code◂lc0 . 
							ret_f { { gfl cl } ret lb_n { ev evv } rsp { rv irv } tav tv_n tv lc0 ec0 rl ft } ⊢|
					@.mtc_line { vs0 gl dl lb_n o0 { ev evv } rsp { rv irv } tav tv_n tv tl ec0 rl } 
						$ tl ⊢ 
						∐ _cns◂{ t tl } . 
							$ t ⊢ 
							∐ ast.mtc_id◂{ sp mp } . 
								idx.csm_ptn { irv sp rl } ⊢ { irv isp rl } 
								$ isp ⊢ isp,isp0 
								stt_v.pnt.f isp0 ⊢ sisp 
								$ isp ⊢ isp,isp0
								alc_mtc_ptn.f { { gl o0 rsp } rl evv rv irv tav tv_n tv vs0 isp0 mp dl } ⊢ { { gl o0 rsp } rl evv rv irv tav tv_n tv vs0 e0 dl p1 } 
								∐ p1 ⊢ _some◂p1 . 
									$ p1 ⊢ p1,p10 
									stt_v.pnt.f p10 ⊢ sp1 
									» _^ sisp,sp1 ⊢ sisp,sp1,ec1 
										";; ? " 0' " ⊢ " 1' "\n" // 
									rp8.add_s8 { ec0 ec1 } ⊢ ec0 
									rp8.cct { ec0 e0 } ⊢ ec0
									mtc_line { vs0 gl dl lb_n o0 { ev evv } rsp { rv irv } tav tv_n tv tl ec0 rl } ⊢|
								∐. . 
									∎ { vs0 gl dl lb_n { ev evv } rsp { rv irv } tav tv_n tv ec0 rl }
							∐ ast.mtc_cmp_test◂{ v0 v1 } .  
								$ o0 ⊢ 
								∐ _some◂lb0 . 
									$ lb0 ⊢ lb0,lb00 
									_some lb00 ⊢ o0 
									∐ v0 ⊢ ast.test_var◂i0 . 
										∐ v1 ⊢ ast.test_cst◂c1 . 
											mtc_line_cmp_var_cst { i0 c1 lb_n lb0 { ev evv } rsp { rv irv } tv tl ec0 rl } ⊢ { lb_n lb0 { ev evv } rsp { rv irv } tv tl ec0 rl }
											mtc_line { vs0 gl dl lb_n o0 { ev evv } rsp { rv irv } tav tv_n tv tl ec0 rl } ⊢| 
										∐. v1 ⊢ ast.test_var◂i1 . 
											_lod_q { irv i0 } ⊢ { irv i0 p0 } 
											_lod_q { irv i1 } ⊢ { irv i1 p1 }
											$ p0 ⊢ p0,p00 
											stt_v.pnt.f p00 ⊢ sp0 
											$ p1 ⊢ p1,p10 
											stt_v.pnt.f p10 ⊢ sp1 
											∐ p0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp◂{ r0 h0 } .
												∐ p1 ⊢ RP.atm◂a1; a1 ⊢ stt_v.hp◂{ r1 h1 } .
													∐ h0 ⊢ stt_v.r64◂{} . 
														reg { rsp r0 } ⊢ { rsp r0 sr0 b0 } 
														reg { rsp r1 } ⊢ { rsp r1 sr1 b1 } 
														» _^ sr0,sr1,lb0,sp0,sp1 ⊢ sr0,sr1,lb0,sp0,sp1,e0 
															";;" 3' "=<" 4' "\n" 
															"\tmov rdi," 1' "\n" 
															"\tcmp " 0' ",rdi\n" 
															"\tjg LB_" 2d' "\n" // 
														rp8.add_s8 { ec0 e0 } ⊢ ec0 
														mtc_line { vs0 gl dl lb_n o0 { ev evv } rsp { rv irv } tav tv_n tv tl ec0 rl } ⊢|
													∐. . 
														∎|
												∐ p1 ⊢ RP.atm◂a1; a1 ⊢ stt_v.hp_im◂iv; iv ⊢ ast.r64◂x1 .
													reg { rsp r0 } ⊢ { rsp r0 sr0 b0 } 
													» _^ sr0,x1,lb0 ⊢ sr0,x1,lb0,e0 
														";; .. = ..\n" 
														"\tmov rdi," 1d' "\n" 
														"\tcmp " 0' ",rdi\n" 
														"\tjg LB_" 2d' "\n" // 
													rp8.add_s8 { ec0 e0 } ⊢ ec0 
													mtc_line { vs0 gl dl lb_n o0 { ev evv } rsp { rv irv } tav tv_n tv tl ec0 rl } ⊢|													
												∐. . 
													∎|  												
											∐ p0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp_im◂iv; iv ⊢ ast.r64◂x0 . 
												∐ p1 ⊢ RP.atm◂a1; a1 ⊢ stt_v.hp◂{ r1 h1 } .
													reg { rsp r1 } ⊢ { rsp r1 sr1 b1 } 
													» _^ x0,sr1,lb0 ⊢ x0,sr1,lb0,e0 
														";; ..=.. \n" 
														"\tmov rdi," 0d' "\n" 
														"\tcmp " 1' ",rdi\n" 
														"\tjg LB_" 2d' "\n" // 
													rp8.add_s8 { ec0 e0 } ⊢ ec0 
													mtc_line { vs0 gl dl lb_n o0 { ev evv } rsp { rv irv } tav tv_n tv tl ec0 rl } ⊢|
												∐ p1 ⊢ RP.atm◂a1; a1 ⊢ stt_v.hp_im◂iv; iv ⊢ ast.r64◂x1 .
													_setge { x1 x0 } ⊢ { x2 x0 bc } 
													∐ bc'=1r .  
														» _^ _ ⊢ ec1 
															";; ..=..\n" // 
														mtc_line { vs0 gl dl lb_n o0 { ev evv } rsp { rv irv } tav tv_n tv tl ec0 rl } ⊢|
													∐. . 
														» _^ lb0 ⊢ lb0,e0 
															";; .. = . \n" 
															"\tjmp LB_" 0d' "\n" //
														rp8.add_s8 { ec0 e0 } ⊢ ec0 
														mtc_line { vs0 gl dl lb_n o0 { ev evv } rsp { rv irv } tav tv_n tv tl ec0 rl } ⊢|						
												∐. . 
													∎|  	
											∐. . 
												∎| 	
									∐. v0 ⊢ ast.test_cst◂c0 . 
										∐ v1 ⊢ ast.test_var◂i1 . 
											mtc_line_cmp_var_cst { i1 c0 lb_n lb0 { ev evv } rsp { rv irv } tv tl ec0 rl } ⊢ { lb_n lb0 { ev evv } rsp { rv irv } tv tl ec0 rl }
											mtc_line { vs0 gl dl lb_n o0 { ev evv } rsp { rv irv } tav tv_n tv tl ec0 rl } ⊢|
										∐. v1 ⊢ ast.test_cst◂c1 . 
											∐ c1 ⊢ ast.cst_v◂cv1 . 
												∎| 
											∐. .
												∎| 
								∐. _none◂{} . 
									_none {} ⊢ o0 
									mtc_line { vs0 gl dl lb_n o0 { ev evv } rsp { rv irv } tav tv_n tv tl ec0 rl } ⊢|
							∐. ast.mtc_test◂{ v0 v1 } .  
								$ o0 ⊢ 
								∐ _some◂lb0 . 
									$ lb0 ⊢ lb0,lb00 
									_some lb00 ⊢ o0 
									∐ v0 ⊢ ast.test_var◂i0 . 
										∐ v1 ⊢ ast.test_cst◂c1 . 
											mtc_line_eq_var_cst { i0 c1 lb_n lb0 { ev evv } rsp { rv irv } tv tl ec0 rl } ⊢ { lb_n lb0 { ev evv } rsp { rv irv } tv tl ec0 rl }
											mtc_line { vs0 gl dl lb_n o0 { ev evv } rsp { rv irv } tav tv_n tv tl ec0 rl } ⊢| 
										∐. v1 ⊢ ast.test_var◂i1 . 
											_lod_q { irv i0 } ⊢ { irv i0 p0 } 
											_lod_q { irv i1 } ⊢ { irv i1 p1 }
											∐ p0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp◂{ r0 h0 } .
												∐ p1 ⊢ RP.atm◂a1; a1 ⊢ stt_v.hp◂{ r1 h1 } .
													∐ h0 ⊢ stt_v.r64◂{} . 
														reg { rsp r0 } ⊢ { rsp r0 sr0 b0 } 
														reg { rsp r1 } ⊢ { rsp r1 sr1 b1 } 
														» _^ sr0,sr1,lb0 ⊢ sr0,sr1,lb0,e0 
														"\tmov rdi," 1' "\n" 
														"\tcmp " 0' ",rdi\n" 
														"\tjnz LB_" 2d' "\n" // 
														rp8.add_s8 { ec0 e0 } ⊢ ec0 
														mtc_line { vs0 gl dl lb_n o0 { ev evv } rsp { rv irv } tav tv_n tv tl ec0 rl } ⊢|
													∐. . 
														∎|
												∐ p1 ⊢ RP.atm◂a1; a1 ⊢ stt_v.hp_im◂iv; iv ⊢ ast.r64◂x1 .
													reg { rsp r0 } ⊢ { rsp r0 sr0 b0 } 
													» _^ sr0,x1,lb0 ⊢ sr0,x1,lb0,e0 
													"\tmov rdi," 1d' "\n" 
													"\tcmp " 0' ",rdi\n" 
													"\tjnz LB_" 2d' "\n" // 
													rp8.add_s8 { ec0 e0 } ⊢ ec0 
													mtc_line { vs0 gl dl lb_n o0 { ev evv } rsp { rv irv } tav tv_n tv tl ec0 rl } ⊢|													
												∐. . 
													∎|  												
											∐ p0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp_im◂iv; iv ⊢ ast.r64◂x0 . 
												∐ p1 ⊢ RP.atm◂a1; a1 ⊢ stt_v.hp◂{ r1 h1 } .
													reg { rsp r1 } ⊢ { rsp r1 sr1 b1 } 
													» _^ x0,sr1,lb0 ⊢ x0,sr1,lb0,e0 
														"\tmov rdi," 0d' "\n" 
														"\tcmp " 1' ",rdi\n" 
														"\tjnz LB_" 2d' "\n" // 
													rp8.add_s8 { ec0 e0 } ⊢ ec0 
													mtc_line { vs0 gl dl lb_n o0 { ev evv } rsp { rv irv } tav tv_n tv tl ec0 rl } ⊢|
												∐ p1 ⊢ RP.atm◂a1; a1 ⊢ stt_v.hp_im◂iv; iv ⊢ ast.r64◂x1 .
													∐ x0'=x1' . 
														mtc_line { vs0 gl dl lb_n o0 { ev evv } rsp { rv irv } tav tv_n tv tl ec0 rl } ⊢|
													∐. . 
														» _^ lb0 ⊢ lb0,e0 
															"\tjmp LB_" 0d' "\n" //
														rp8.add_s8 { ec0 e0 } ⊢ ec0 
														mtc_line { vs0 gl dl lb_n o0 { ev evv } rsp { rv irv } tav tv_n tv tl ec0 rl } ⊢|						
												∐. . 
													∎|  	
											∐. . 
												∎| 	
									∐. v0 ⊢ ast.test_cst◂c0 . 
										∐ v1 ⊢ ast.test_var◂i1 . 
											mtc_line_eq_var_cst { i1 c0 lb_n lb0 { ev evv } rsp { rv irv } tv tl ec0 rl } ⊢ { lb_n lb0 { ev evv } rsp { rv irv } tv tl ec0 rl }
											mtc_line { vs0 gl dl lb_n o0 { ev evv } rsp { rv irv } tav tv_n tv tl ec0 rl } ⊢|
										∐. v1 ⊢ ast.test_cst◂c1 . 
											∐ c1 ⊢ ast.cst_v◂cv1 . 
												∎| 
											∐. .
												∎| 
								∐. _none◂{} . 
									_none {} ⊢ o0 
									mtc_line { vs0 gl dl lb_n o0 { ev evv } rsp { rv irv } tav tv_n tv tl ec0 rl } ⊢|
						∐. _nil◂{} . 
							∎ { vs0 gl dl lb_n { ev evv } rsp { rv irv } tav tv_n tv ec0 rl }
					@.mtc_line_eq_var_cst { i0 c1 lb_n lb0 { ev evv } rsp { rv irv } tv tl ec0 rl }
						_lod_q { irv i0 } ⊢ { irv i0 p0 } 
						∐ c1 ⊢ ast.cst_v◂cv1 . 
							$ cv1 ⊢ 
							∐ ast.r64◂x1 . 
								∐ p0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp◂{ r0 h0 } .
									reg { rsp r0 } ⊢ { rsp r0 sr0 b0 } 
									» _^ sr0,x1,lb0 ⊢ sr0,x1,lb0,e0 
										"\tmov rdi," 1d' "\n" 
										"\tcmp " 0' ",rdi\n" 
										"\tjnz LB_" 2d' "\n" // 
									rp8.add_s8 { ec0 e0 } ⊢ ec0 
									∎ { lb_n lb0 { ev evv } rsp { rv irv } tv tl ec0 rl }
								∐ p0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp_im◂iv; iv ⊢ ast.r64◂x0 . 
									∐ x0'=x1' . 
										∎ { lb_n lb0 { ev evv } rsp { rv irv } tv tl ec0 rl }
									∐. . 
										» _^ lb0 ⊢ lb0,e0 
											"\tjmp LB_" 0d' "\n" //
										rp8.add_s8 { ec0 e0 } ⊢ ec0 
										∎ { lb_n lb0 { ev evv } rsp { rv irv } tv tl ec0 rl }
								∐. . 
									∎| 	
							∐. ast.s8◂s1 . 
								∎ { lb_n lb0 { ev evv } rsp { rv irv } tv tl ec0 rl }
						∐. .
							∎|
					@.mtc_line_cmp_var_cst { i0 c1 lb_n lb0 { ev evv } rsp { rv irv } tv tl ec0 rl }
						_lod_q { irv i0 } ⊢ { irv i0 p0 } 
						∐ c1 ⊢ ast.cst_v◂cv1 . 
							$ cv1 ⊢ 
							∐ ast.r64◂x1 . 
								∐ p0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp◂{ r0 h0 } .
									reg { rsp r0 } ⊢ { rsp r0 sr0 b0 } 
									» _^ sr0,x1,lb0 ⊢ sr0,x1,lb0,e0 
										"\tmov rdi," 1d' "\n" 
										"\tcmp " 0' ",rdi\n" 
										"\tjg LB_" 2d' "\n" // 
										rp8.add_s8 { ec0 e0 } ⊢ ec0 
									∎ { lb_n lb0 { ev evv } rsp { rv irv } tv tl ec0 rl }
								∐ p0 ⊢ RP.atm◂a0; a0 ⊢ stt_v.hp_im◂iv; iv ⊢ ast.r64◂x0 . 
									_setge { x1 x0 } ⊢ { x1 x0 bc } 
									∐ bc'=1r . 
										∎ { lb_n lb0 { ev evv } rsp { rv irv } tv tl ec0 rl }
									∐. . 
										» _^ lb0 ⊢ lb0,e0 
											"\tjmp LB_" 0d' "\n" //
										rp8.add_s8 { ec0 e0 } ⊢ ec0 
										∎ { lb_n lb0 { ev evv } rsp { rv irv } tv tl ec0 rl }
								∐. . 
									∎| 	
							∐. ast.s8◂s1 . 
								∎ { lb_n lb0 { ev evv } rsp { rv irv } tv tl ec0 rl }
						∐. .
							∎|
					@.id_mtc { { gfl cl } ret { is sis } lb_n { ev evv } rsp { rv irv } tav tv_n tv ilm ec0 rl ft } 
						$ ilm ⊢ 
						∐ p_cns◂{ { mp tl me } ilm } .
							$ lb_n ⊢ lb_n,lb0 
							» _^ lb0 ⊢ lb0,slb0 
								"LB_" 0d' ":\n" // 
							_inc lb_n ⊢ lb_n
							_some lb0 ⊢ o0 
							rset.ini {} ⊢ vs0
							$ rl ⊢ rl,rl0
							stt_v.mk_rset_env { irv rl0 vs0 } ⊢ { irv vs0 }
							$ is ⊢ is,is0 
							stt_v.mk_rset { is0 vs0 } ⊢ vs0 
							_nil {} ⊢ gl 
							_nil {} ⊢ dl
							$ rl ⊢ rl,rl0 
							$ is ⊢ is,is0 
							alc_mtc_ptn.f { { gl o0 rsp } rl0 evv rv irv tav tv_n tv vs0 is0 mp dl } ⊢ { { gl o0 rsp } rl0 evv rv irv tav tv_n tv vs0 e0 dl p1 } 
							∐ p1 ⊢ _some◂p1 . 
								$ p1 ⊢ p1,p10 
								stt_v.pnt.f p10 ⊢ sp1 
								» _^ sis,sp1 ⊢ sis,sp1,ec1 
									";; ? " 0' " ⊢ " 1' "\n" // 
								rp8.add_s8 { ec0 ec1 } ⊢ ec0 
								rp8.cct { ec0 e0 } ⊢ ec0 
								mtc_line { vs0 gl dl lb_n o0 { ev evv } rsp { rv irv  } tav tv_n tv tl ec0 rl0 } ⊢ { vs0 gl dl lb_n { ev evv } rsp { rv irv  } tav tv_n  tv ec0 rl0 }
								$ ret ⊢ ret,ret0 
								mtc_etr { { gfl cl } ret0 lb_n { ev evv } rsp { rv irv } tav tv_n tv me ec0 rl0 ft } ⊢ { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv ec0 rl0 ft } 
								rp8.add_s8 { ec0 slb0 } ⊢ ec0 
								id_mtc { { gfl cl } ret { is sis } lb_n { ev evv } rsp { rv irv } tav tv_n tv ilm ec0 rl ft } ⊢| 
							∐. . 
								##rp8.add_s8 { ec0 slb0 } ⊢ ec0 
								id_mtc { { gfl cl } ret { is sis } lb_n { ev evv } rsp { rv irv } tav tv_n tv ilm ec0 rl ft } ⊢| 								
						∐. p_end◂{ mp tl me } .
							stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl vs0 }
							$ is ⊢ is,is0 
							stt_v.mk_rset { is0 vs0 } ⊢ vs0 
							_nil {} ⊢ gl 
							_nil {} ⊢ dl
							_none {} ⊢ o0
							$ rl ⊢ rl,rl0  
							alc_mtc_ptn.f { { gl o0 rsp } rl0 evv rv irv tav tv_n tv vs0 is mp dl } ⊢ { { gl o0 rsp } rl0 evv rv irv tav tv_n tv vs0 e0 dl p1 } 
							∐ p1 ⊢ _some◂p1 . 
								$ p1 ⊢ p1,p10 
								stt_v.pnt.f p10 ⊢ sp1 
								» _^ sis,sp1 ⊢ sis,sp1,ec1 
									";; ? " 0' " ⊢ " 1' "\n" // 
								rp8.add_s8 { ec0 ec1 } ⊢ ec0 
								rp8.cct { ec0 e0 } ⊢ ec0 
								mtc_line { vs0 gl dl lb_n o0 { ev evv } rsp { rv irv } tav tv_n tv tl ec0 rl0 } ⊢ { vs0 gl dl lb_n { ev evv }  rsp { rv irv  } tav tv_n tv ec0 rl0 }
								mtc_etr { { gfl cl } ret lb_n { ev evv } rsp { rv irv } tav tv_n tv me ec0 rl0 ft } ⊢ { { gfl cl } lb_n { ev evv } rsp { rv irv  } tav tv_n tv ec0 rl0 ft }
								∎ { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv ec0 rl ft }
							∐. . 
								» "id_mtc pm0" _ ⊢ ee0 
								_emt ee0 ⊢ _
								∎| 
				∎∎
				
			∎∎
		§ @.slv_ns_e { n mmv mev ev m_ns e_ns m_l } 
			$ n ⊢ 
			∐ ast.mdl_n◂{ w n } . 
				assoc { m_ns w } ⊢ { m_ns w o }
				$ o ⊢ 
				∐ _some◂i_m . 
					_lod_q { mmv i_m } ⊢ { mmv i_m m_ns0 }
					_lod_q { mev i_m } ⊢ { mev i_m e_ns0 }
					_nil {} ⊢ m_l0 
					slv_ns_e { n mmv mev ev m_ns0 e_ns0 m_l0 } ⊢ { mmv mev ev m_ns0 e_ns0 m_l0 i_e }
					∎ { mmv mev ev m_ns e_ns m_l i_e }
				∐. _none◂{} . 
					$ m_l ⊢ 
					∐ _cns◂{ i_m_r m_l } .
						_lod_q { mmv i_m_r } ⊢ { mmv i_m_r m_ns0 }
						_lod_q { mev i_m_r } ⊢ { mev i_m_r e_ns0 }
						ast.mdl_n { w n } ⊢ n 
						slv_ns_e { n mmv mev ev m_ns0 e_ns0 m_l } ⊢ { mmv mev ev m_ns0 e_ns0 m_l i_e }
						_cns { i_m_r m_l } ⊢ m_l 
						∎ { mmv mev ev m_ns e_ns m_l i_e }
					∐. _nil◂{} . 
						» _^ _ ⊢ sr 
							"slv_ns_e 0:not found\n" //
						_emt sr ⊢ sr 
						_emt { w } ⊢ { w }
						∎|  
			∐. ast.fst_n◂w . 
				assoc { e_ns w } ⊢ { e_ns w o } 
				$ o ⊢
				∐ _some◂i_e . 
					∎ { mmv mev ev m_ns e_ns m_l i_e }
				∐. _none◂{} . 
					$ m_l ⊢ 
					∐ _cns◂{ i_m_r m_l } .
						_lod_q { mmv i_m_r } ⊢ { mmv i_m_r m_ns0 }
						_lod_q { mev i_m_r } ⊢ { mev i_m_r e_ns0 }
						ast.fst_n w ⊢ n 
						slv_ns_e { n mmv mev ev m_ns0 e_ns0 m_l } ⊢ { mmv mev ev m_ns0 e_ns0 m_l i_e }
						_cns { i_m_r m_l } ⊢ m_l 
						∎ { mmv mev ev m_ns e_ns m_l i_e }
					∐. _nil◂{} . 
						_emt { w } ⊢ { w }
						» _^ _ ⊢ sr 
							"slv_ns_e 1:not found\n" //
						_emt sr ⊢ sr 
						_emt e_ns ⊢ e_ns 
						∎|  
		§ @.slv_ns_m { n mmv m_ns m_l } 
			$ n ⊢ 
			∐ ast.mdl_n◂{ w n } . 
				assoc { m_ns w } ⊢ { m_ns w o }
				$ o ⊢ 
				∐ _some◂i_m0 . 
					_lod_q { mmv i_m0 } ⊢ { mmv i_m0 m_ns0 }
					_nil {} ⊢ m_l0 
					slv_ns_m { n mmv m_ns0 m_l0 } ⊢ { mmv m_ns0 m_l0 i_m }
					∎ { mmv m_ns m_l i_m }
				∐. _none◂{} . 
					$ m_l ⊢ 
					∐ _cns◂{ i_m_r m_l } .
						_lod_q { mmv i_m_r } ⊢ { mmv i_m_r m_ns0 }
						ast.mdl_n { w n } ⊢ n 
						slv_ns_m { n mmv m_ns0 m_l } ⊢ { mmv m_ns0 m_l i_m }
						_cns { i_m_r m_l } ⊢ m_l 
						∎ { mmv m_ns m_l i_m }
					∐. _nil◂{} . 
						» _^ _ ⊢ sr 
							"slv_ns_m 0:not found\n" //
						_emt sr ⊢ sr 
						_emt { w } ⊢ { w }
						∎|    
			∐. ast.fst_n◂w . 
				assoc { m_ns w } ⊢ { m_ns w o } 
				$ o ⊢
				∐ _some◂i_m . 
					∎ { mmv m_ns m_l i_m }
				∐. _none◂{} . 
					$ m_l ⊢ 
					∐ _cns◂{ i_m_r m_l } .
						_lod_q { mmv i_m_r } ⊢ { mmv i_m_r m_ns0 }
						ast.fst_n w ⊢ n 
						slv_ns_m { n mmv m_ns0 m_l } ⊢ { mmv m_ns0 m_l i_m }
						_cns { i_m_r m_l } ⊢ m_l 
						∎ { mmv m_ns m_l i_m }
					∐. _nil◂{} . 
						» _^ _ ⊢ sr 
							"slv_ns_m 1:not found\n" //
						_emt sr ⊢ sr 
						_emt { w } ⊢ { w }
						∎|
		§ slv_cst_v v
			$ v ⊢ 
			∐ ast.r64◂x . 
				t_axm.r64 {} ⊢ y 
				ast.r64 x ⊢ v 
				∎ { v y }
			∐. ast.s8◂s . 
				t_axm.s8 {} ⊢ y 
				ast.s8 s ⊢ v 
				∎ { v y } 
		§ slv_cst { lv env0 tv_n tv c } 
			$ c ⊢ 
			∐ ast.cst_name◂cn . 
				$ env0 ⊢ { mmv mev ev m_ns e_ns m_l } 
				slv_ns_e { cn mmv mev ev m_ns e_ns m_l } ⊢ { mmv mev ev m_ns e_ns m_l i_e }
				_lod_q { ev i_e } ⊢ { ev i_e vi }
				ast.cst_name i_e ⊢ c 
				var vi ⊢ y 
				RP.atm y ⊢ y 
				inst { tv_n tv lv y } ⊢ { tv_n tv lv y } 
				$ { mmv mev ev m_ns e_ns m_l } ⊢ env0 	
				∎ { lv env0 tv_n tv c y }
			∐. ast.cst_v◂v .
				slv_cst_v v ⊢ { v y } 
				ast.cst_v v ⊢ c 
				∎ { lv env0 tv_n tv c y }  
		
		§ inst_imp { tv_n tv lv y } 
			inst { tv_n tv lv y } ⊢ { tv_n tv lv y }
			newvar_l { tv_n tv lv } ⊢ { tv_n tv lv y0 }
			newvar_l { tv_n tv lv } ⊢ { tv_n tv lv y1 } 
			$ y0 ⊢ y0,y0_0 
			$ y1 ⊢ y1,y1_0 
			imp { y0_0 y1_0 } ⊢ y2 
			RP.atm y2 ⊢ y2 
			unify.f { tv y y2 } ⊢ tv 
			∎ { tv_n tv lv y0 y1 }
		§ ini_reg { lv w rv_n rv re tv_n tv }
			$ rv_n ⊢ rv_n,n0
			_some n0 ⊢ o
			_cns { { w o } re } ⊢ re
			$ tv_n ⊢ tv_n,tv_n_0
			_set_q { rv rv_n tv_n_0 } ⊢ { rv rv_n } 
			$ lv ⊢ lv,lv_0 
			var_l lv_0 ⊢ v0 
			_set_q { tv tv_n v0 } ⊢ { tv tv_n }
			$ tv_n ⊢ tv_n,tv_n_0 
			var tv_n_0 ⊢ y 
			RP.atm y ⊢ y 
			_inc tv_n ⊢ tv_n 
			_inc rv_n ⊢ rv_n 
			∎ { lv rv_n rv re tv_n tv y }
		§ mk_reg { w rv_n rv re tv_n tv y } 
			$ rv_n ⊢ rv_n,n0
			_some n0 ⊢ o
			_cns { { w o } re } ⊢ re
			$ tv_n ⊢ tv_n,tv_n_0
			_set_q { rv rv_n tv_n_0 } ⊢ { rv rv_n }  
			var_ln y ⊢ v0 
			_set_q { tv tv_n v0 } ⊢ { tv tv_n }
			$ tv_n ⊢ tv_n,tv_n_0 
			var tv_n_0 ⊢ y 
			RP.atm y ⊢ y 
			$ rv_n ⊢ rv_n,n0
			_inc tv_n ⊢ tv_n 
			_inc rv_n ⊢ rv_n 
			∎ { rv_n rv re tv_n tv y n0 }
		§ add_t { tv_n tv ns e y } 
			newvar_ln { tv_n tv y } ⊢ { tv_n tv i0 } 
			_some i0 ⊢ o 
			_cns { { e o } ns } ⊢ ns 
			∎ { tv_n tv ns } 
		§ @.crt_mtc_ptn { lv env0 rv tv tv_n n re p }
				##_emt { n re p } ⊢ { n re p }
				∐ p ⊢ RP.rcd◂l .
					crt_mtc_ptn_lst { lv env0 rv tv tv_n n re l } ⊢ { lv env0 rv tv tv_n n re l y }
					RP.rcd l ⊢ p
					RP.rcd y ⊢ y 
					∎ { lv env0 rv tv tv_n n re p y }
				∐. p ⊢ RP.atm◂a .
				 	$ a ⊢ 
					∐ ast.mtc_reg◂w .
						##_emt { lv w n } ⊢ { lv w n }
						assoc { re w } ⊢ { re w o }
						∐ o ⊢ _none◂{} .
							$ n ⊢ n,n0
							ast.mtc_reg n0 ⊢ a
							ini_reg { lv w n rv re tv_n tv } ⊢ { lv n rv re tv_n tv y } 
							RP.atm a ⊢ p
							∎ { lv env0 rv tv tv_n n re p y }
						∐. .
							» "crt_mtc_ptn 0" _ ⊢ e 
							_emt e ⊢ e 
							∎|
					∐ ast.mtc_wc◂o .
						∐ o ⊢ _none◂{} . 
							$ n ⊢ n,n0
							_some n0 ⊢ o 
							ast.mtc_wc o ⊢ a
							$ tv_n ⊢ tv_n,tv_n_0
							_set_q { rv n tv_n_0 } ⊢ { rv n } 
							$ lv ⊢ lv,lv_0 
							var_l lv_0 ⊢ v0 
							_set_q { tv tv_n v0 } ⊢ { tv tv_n }
							$ tv_n ⊢ tv_n,tv_n_0 
							var tv_n_0 ⊢ y 
							RP.atm y ⊢ y 
							_inc tv_n ⊢ tv_n 
							_inc n ⊢ n 							
							RP.atm a ⊢ p
							∎ { lv env0 rv tv tv_n n re p y }
						∐. . 
							» "crt_mtc_ptn 6" _ ⊢ e 
							_emt e ⊢ e 
							∎|
					∐ ast.mtc_cst◂c . 
						slv_cst { lv env0 tv_n tv c } ⊢ { lv env0 tv_n tv c y } 
						ast.mtc_cst c ⊢ a 
						RP.atm a ⊢ p 
						∎ { lv env0 rv tv tv_n n re p y }
					∐. ast.mtc_agl◂{ cn ap } . 
						crt_mtc_ptn { lv env0 rv tv tv_n n re ap } ⊢ { lv env0 rv tv tv_n n re ap y } 
						$ env0 ⊢ { mmv mev ev m_ns e_ns m_l } 
						_emt cn ⊢ cn 
						slv_ns_e { cn mmv mev ev m_ns e_ns m_l } ⊢ { mmv mev ev m_ns e_ns m_l i_e } 
						_lod_q { ev i_e } ⊢ { ev i_e iv } 
						$ { mmv mev ev m_ns e_ns m_l } ⊢ env0 
						##_emt iv ⊢ iv 
						var iv ⊢ yx 
						RP.atm yx ⊢ yx
						inst { tv_n tv lv yx } ⊢ { tv_n tv lv yx } 
						newvar_l { tv_n tv lv } ⊢ { tv_n tv lv yy }	
						$ yy ⊢ yy,yy0 
						imp { y yy } ⊢ y0 
						RP.atm y0 ⊢ y0 
						unify.f { tv y0 yx } ⊢ tv 
						ast.mtc_agl { i_e ap } ⊢ a
						RP.atm a ⊢ p 
						∎ { lv env0 rv tv tv_n n re p yy0 }
			@.crt_mtc_ptn_lst { lv env0 rv tv tv_n n re l }
				∐ l ⊢ _cns◂{ hd l } .
					crt_mtc_ptn { lv env0 rv tv tv_n n re hd } ⊢ { lv env0 rv tv tv_n n re hd y0 }
					crt_mtc_ptn_lst { lv env0 rv tv tv_n n re l } ⊢ { lv env0 rv tv tv_n n re l y1 }
					_cns { hd l } ⊢ l
					_cns { y0 y1 } ⊢ y
					∎ { lv env0 rv tv tv_n n re l y }
				∐. .
					_nil {} ⊢ l0
					_nil {} ⊢ y 
					∎ { lv env0 rv tv tv_n n re l0 y }
		§ 
			@.crt_dst_ptn { lv rv tv tv_n n re p }
				##_emt { n re p } ⊢ { n re p }
				∐ p ⊢ RP.rcd◂l .
					crt_dst_ptn_lst { lv rv tv tv_n n re l } ⊢ { lv rv tv tv_n n re l y }
					RP.rcd l ⊢ p
					RP.rcd y ⊢ y 
					∎ { lv rv tv tv_n n re p y }
				∐. p ⊢ RP.atm◂a .
					crt_dst { lv rv tv tv_n n re a } ⊢ { lv rv tv tv_n n re a y } 
					RP.atm a ⊢ p
					∎ { lv rv tv tv_n n re p y }
			@.crt_dst { lv rv tv tv_n n re a } 
				 	∐ a ⊢ ast.dst_reg◂w .
						##_emt { re w n } ⊢ { re w n }
						assoc { re w } ⊢ { re w o }
						∐ o ⊢ _none◂{} .
							$ n ⊢ n,n0
							ast.dst_reg n0 ⊢ a
							ini_reg { lv w n rv re tv_n tv } ⊢ { lv n rv re tv_n tv y } 
							∎ { lv rv tv tv_n n re a y }
						∐. .
							» "crt_dst 0" _ ⊢ se 
							_emt se ⊢ se 
							∎|
					∐. a ⊢ ast.wc◂o .
						∐ o ⊢ _none◂{} . 
							$ n ⊢ n,n0
							_some n0 ⊢ o 
							ast.wc o ⊢ a
							$ tv_n ⊢ tv_n,tv_n_0
							_set_q { rv n tv_n_0 } ⊢ { rv n } 
							$ lv ⊢ lv,lv_0 
							var_l lv_0 ⊢ v0 
							_set_q { tv tv_n v0 } ⊢ { tv tv_n }
							$ tv_n ⊢ tv_n,tv_n_0 
							var tv_n_0 ⊢ y 
							RP.atm y ⊢ y 
							_inc tv_n ⊢ tv_n 
							_inc n ⊢ n 							
							∎ { lv rv tv tv_n n re a y }
						∐. . 
							» "crt_mtc_ptn 6" _ ⊢ e 
							_emt e ⊢ e 
							∎|
			@.crt_dst_ptn_lst { lv rv tv tv_n n re l }
				∐ l ⊢ _cns◂{ hd l } .
					crt_dst_ptn { lv rv tv tv_n n re hd } ⊢ { lv rv tv tv_n n re hd y }
					crt_dst_ptn_lst { lv rv tv tv_n n re l } ⊢ { lv rv tv tv_n n re l yl }
					_cns { hd l } ⊢ l
					_cns { y yl } ⊢ y 
					∎ { lv rv tv tv_n n re l y }
				∐. .
					_nil {} ⊢ l0
					_nil {} ⊢ y 
					∎ { lv rv tv tv_n n re l0 y }
			@.crt_dst_lst { lv rv tv tv_n n re l }
				∐ l ⊢ _cns◂{ hd l } .
					crt_dst { lv rv tv tv_n n re hd } ⊢ { lv rv tv tv_n n re hd y }
					crt_dst_lst { lv rv tv tv_n n re l } ⊢ { lv rv tv tv_n n re l yl }
					_cns { hd l } ⊢ l
					_cns { y yl } ⊢ y 
					∎ { lv rv tv tv_n n re l y }
				∐. .
					_nil {} ⊢ l0
					_nil {} ⊢ y 
					∎ { lv rv tv tv_n n re l0 y }
		§ @.csm_src_ptn { lv env0 rv tv tv_n re p }
				∐ p ⊢ RP.rcd◂l .
					csm_src_ptn_lst { lv env0 rv tv tv_n re l } ⊢ { lv env0 rv tv tv_n re l y0 }
					RP.rcd l ⊢ p
					RP.rcd y0 ⊢ y0 
					∎ { lv env0 rv tv tv_n re p y0 }
				∐. p ⊢ RP.atm◂a .
					csm_src { lv env0 rv tv tv_n re a } ⊢ { lv env0 rv tv tv_n re a y0 } 
					RP.atm a ⊢ p 
					∎ { lv env0 rv tv tv_n re p y0 }
			@.csm_src { lv env0 rv tv tv_n re a }
				∐ a ⊢ ast.src_reg◂w .
					assoc { re w } ⊢ { re w o }
					∐ o ⊢ _some◂i .
						_lod_q { rv i } ⊢ { rv i vi } 
						var vi ⊢ y0 
						RP.atm y0 ⊢ y0 
						inst { tv_n tv lv y0 } ⊢ { tv_n tv lv y0 } 
						##mk_reg { w rv_n rv re tv_n tv y0 } ⊢ { rv_n rv re tv_n tv y0 i1 }
						ast.src_reg i ⊢ a
						_none {} ⊢ o
						_cns { { w o } re } ⊢ re
						∎ { lv env0 rv tv tv_n re a y0 }
					∐. .
						» "csm_src 0" _ ⊢ s0 
						_emt { re w } ⊢ { re w }
						_emt s0 ⊢ s0 
						∎|
				∐. a ⊢ ast.im_reg◂c .
					slv_cst { lv env0 tv_n tv c } ⊢ { lv env0 tv_n tv c y0 }
					ast.im_reg c ⊢ a 
					∎ { lv env0 rv tv tv_n re a y0 }
			@.csm_src_ptn_lst { lv env0 rv tv tv_n re l }
				∐ l ⊢ _cns◂{ hd l } .
					csm_src_ptn { lv env0 rv tv tv_n re hd } ⊢ { lv env0 rv tv tv_n re hd y0 }
					csm_src_ptn_lst { lv env0 rv tv tv_n re l } ⊢ { lv env0 rv tv tv_n re l y1 }
					_cns { hd l } ⊢ l
					_cns { y0 y1 } ⊢ y0
					∎ { lv env0 rv tv tv_n re l y0 }
				∐. .
					_nil {} ⊢ l0
					_nil {} ⊢ y0
					∎ { lv env0 rv tv tv_n re l0 y0 }
			@.csm_src_lst { lv env0 rv tv tv_n re l }
				∐ l ⊢ _cns◂{ hd l } .
					csm_src { lv env0 rv tv tv_n re hd } ⊢ { lv env0 rv tv tv_n re hd y0 }
					csm_src_lst { lv env0 rv tv tv_n re l } ⊢ { lv env0 rv tv tv_n re l y1 }
					_cns { hd l } ⊢ l
					_cns { y0 y1 } ⊢ y0 
					∎ { lv env0 rv tv tv_n re l y0 }
				∐. .
					_nil {} ⊢ l0
					_nil {} ⊢ y0 
					∎ { lv env0 rv tv tv_n re l0 y0 }
		§ @.slv_src_ptn { re p }
				∐ p ⊢ RP.rcd◂l .
					slv_src_ptn_lst { re l } ⊢ { re l }
					RP.rcd l ⊢ p
					∎ { re p }
				∐. p ⊢ RP.atm◂a .
					slv_src { re a } ⊢ { re a } 
					RP.atm a ⊢ p 
					∎ { re p }
			@.slv_src { re a }
				∐ a ⊢ ast.src_reg◂w .
					assoc { re w } ⊢ { re w o }
					∐ o ⊢ _some◂i .
						ast.src_reg i ⊢ a
						_none {} ⊢ o
						∎ { re a }
					∐. .
						_emt { re w } ⊢ { re w } 
						∎|
				∐. a ⊢ ast.im_reg◂c .
					ast.im_reg c ⊢ a
					\[
					∎ { re a }
					\]
					» "slv_src 0" _ ⊢ se 
					_emt se ⊢ se 
					∎|
			@.slv_src_ptn_lst { re l }
				∐ l ⊢ _cns◂{ hd l } .
					slv_src_ptn { re hd } ⊢ { re hd }
					slv_src_ptn_lst { re l } ⊢ { re l }
					_cns { hd l } ⊢ l
					∎ { re l }
				∐. .
					_nil {} ⊢ l0
					∎ { re l0 }
		§ @.slv_test_var { lv env0 tv_n tv rv n re v } 
			$ v ⊢ 
			∐ ast.test_var◂w . 
				assoc { re w } ⊢ { re w o } 
				$ o ⊢ 
				∐ _some◂i . 
					_lod_q { rv i } ⊢ { rv i vi } 
					var vi ⊢ yv 
					RP.atm yv ⊢ yv 
					inst { tv_n tv lv yv } ⊢ { tv_n tv lv yv }  
					ast.test_var i ⊢ v 
					∎ { lv env0 tv_n tv rv n re v yv }
				∐. _none◂{} . 
					» "slv_test_var" _ ⊢ se 
					_emt se ⊢ se 
					∎| 
			∐. ast.test_cst◂c . 
				slv_cst { lv env0 tv_n tv c } ⊢ { lv env0 tv_n tv c y }
				ast.test_cst c ⊢ v 
				∎ { lv env0 tv_n tv rv n re v y }
		§ slv_exp_s8 { lv env0 tv_n tv e } 
			$ e ⊢ 
			∐ ast.exp_s8.cst◂c . 
				slv_cst { lv env0 tv_n tv c } ⊢ { lv env0 tv_n tv c y } 
				ast.exp_s8.cst c ⊢ e 
				_none {} ⊢ o 
				∎ { lv env0 tv_n tv e o }
			∐ ast.exp_s8.s8◂s . 
				ast.exp_s8.s8 s ⊢ e 
				t_axm.s8 {} ⊢ y 
				_none {} ⊢ o 
				∎ { lv env0 tv_n tv e o } 
			∐ ast.exp_s8.idx◂{ p i } . 
				$ i ⊢ i,i0 
				$ p ⊢ 
				∐ ast.exp_s8.s◂{} . 
					ast.exp_s8.s {} ⊢ p 
					ast.exp_s8.idx { p i } ⊢ e 
					t_axm.s8 {} ⊢ y 
					_some { i0 y } ⊢ o 
					∎ { lv env0 tv_n tv e o }
				∐ ast.exp_s8.d◂{} . 
					ast.exp_s8.d {} ⊢ p 
					ast.exp_s8.idx { p i } ⊢ e 
					t_axm.r64 {} ⊢ y
					_some { i0 y } ⊢ o 					 
					∎ { lv env0 tv_n tv e o }
				∐ ast.exp_s8.x◂{} .
					ast.exp_s8.x {} ⊢ p 
					ast.exp_s8.idx { p i } ⊢ e 
					t_axm.r64 {} ⊢ y 
					_some { i0 y } ⊢ o 
					∎ { lv env0 tv_n tv e o } 
				∐. ast.exp_s8.p◂{} .
					» "slv_exp_s8_fmt 0" _ ⊢ se 
					_emt se ⊢ se 
					∎|  
			∐. ast.exp_s8.for◂{ i p } . 
				$ i ⊢ i,i0 
				ast.exp_s8.for { i p } ⊢ e
				t_axm.r64 {} ⊢ y 
				_some { i0 y } ⊢ o 
				∎ { lv env0 tv_n tv e o } 
		§§ slv_exp_s8 
			§ 
				@.f { lv env0 n rv re tv_n tv ss ds el } 
					_inc lv ⊢ lv 
					» 0r _ ⊢ i
					f0 { lv env0 n rv re tv_n tv ss ds i } ⊢ { lv env0 n rv re tv_n tv ss ds a i ys }
					f1 { lv env0 tv_n tv el a } ⊢ { lv env0 tv_n tv el a }
					_dec lv ⊢ lv 
					gen_lst { tv_n tv lv ys } ⊢ { tv_n tv lv ys }
					∎ { lv env0 n rv re tv_n tv ss ds el }
				@.f0 { lv env0 n rv re tv_n tv ss ds i } 
					∐ ss ⊢ _cns◂{ s ss }; ds ⊢ _cns◂{ d ds } . 
						csm_src { lv env0 rv tv tv_n re s } ⊢ { lv env0 rv tv tv_n re s ys }
						crt_dst { lv rv tv tv_n n re d } ⊢ { lv rv tv tv_n n re d yd }
						$ yd ⊢ yd,yd0 
						unify.f { tv ys yd0 } ⊢ tv
						_inc i ⊢ i 
						f0 { lv env0 n rv re tv_n tv ss ds i } ⊢ { lv env0 n rv re tv_n tv ss ds a i ys }
						_dec i ⊢ i 
						$ yd ⊢ yd,yd0 
						_set_q { a i yd } ⊢ { a i } 
						_cns { s ss } ⊢ ss 
						_cns { d ds } ⊢ ds 
						_cns { yd0 ys } ⊢ ys 
						∎ { lv env0 n rv re tv_n tv ss ds a i ys } 
					∐ ss ⊢ _nil◂{}; ds ⊢ _cns◂{ d ds }; ds ⊢ _nil◂{} . 
						crt_dst { lv rv tv tv_n n re d } ⊢ { lv rv tv tv_n n re d yd }						
						t_axm.s8 {} ⊢ yy 
						$ yd ⊢ yd,yd0 
						unify.f { tv yy yd } ⊢ tv  
						_mk_arr i ⊢ { i a } 
						_nil {} ⊢ ys 
						_cns { yd0 ys } ⊢ ys 
						_nil {} ⊢ ss 
						_nil {} ⊢ ds 
						_cns { d ds } ⊢ ds
						∎ { lv env0 n rv re tv_n tv ss ds a i ys }
					∐. . 
						» "slv_exp_s8.f0 0" _ ⊢ se 
						_emt se ⊢ se
						∎|  
			@.f1 { lv env0 tv_n tv el a } 
				$ el ⊢ 
				∐ _cns◂{ hd el } .
					slv_exp_s8 { lv env0 tv_n tv hd } ⊢ { lv env0 tv_n tv e o } 
					$ o ⊢ 
					∐ _some◂{ i y } . 
						_lod_q { a i } ⊢ { a i yd }
						unify.f { tv y yd } ⊢ tv
						f1 { lv env0 tv_n tv el a } ⊢ { lv env0 tv_n tv el a }
						_cns { e el } ⊢ el 
						∎ { lv env0 tv_n tv el a }
					∐. _none◂{} . 
						f1 { lv env0 tv_n tv el a } ⊢ { lv env0 tv_n tv el a }
						_cns { e el } ⊢ el 
						∎ { lv env0 tv_n tv el a }
					∐. _nil◂{} . 
						_nil {} ⊢ el 
						∎ { lv env0 tv_n tv el a }
			∎∎ 
		§ 
			@.slv_r { lv env0 rv tv tv_n n re lc }
			##» "enter slv_r" _  ⊢ sd0 
			##_emt sd0 ⊢ sd0 
			##_emt { lv n } ⊢ { lv n }
			$ lc ⊢
			∐ ast.jmp◂{ en x } . 
				$ env0 ⊢ { mmv mev ev m_ns e_ns m_l } 
				slv_ns_e { en mmv mev ev m_ns e_ns m_l } ⊢ { mmv mev ev m_ns e_ns m_l i_e } 
				_lod_q { ev i_e } ⊢ { ev i_e iv } 
				$ { mmv mev ev m_ns e_ns m_l } ⊢ env0 
				var iv ⊢ yv 
				RP.atm yv ⊢ yv 
				_inc lv ⊢ lv 
				inst { tv_n tv lv yv } ⊢ { tv_n tv lv yv } 
				csm_src_ptn { lv env0 rv tv tv_n re x } ⊢ { lv env0 rv tv tv_n re x y0 } 
				newvar_l { tv_n tv lv } ⊢ { tv_n tv lv yy } 
				$ yy ⊢ yy,yy0 
				imp { y0 yy } ⊢ y_f
				RP.atm y_f ⊢ y_f 
				unify.f { tv y_f yv } ⊢ tv 
				_dec lv ⊢ lv 
				gen { tv_n tv lv yy0 } ⊢ { tv_n tv lv yy0 } 
				ast.jmp { i_e x } ⊢ lc 
				∎ { lv env0 rv tv tv_n n re lc yy0 } 
			∐ ast.app_jmp◂{ f x } . 
				_inc lv ⊢ lv 
				csm_src { lv env0 rv tv tv_n re f } ⊢ { lv env0 rv tv tv_n re f ys } 
				csm_src_ptn { lv env0 rv tv tv_n re x } ⊢ { lv env0 rv tv tv_n re x y0 } 
				newvar_l { tv_n tv lv } ⊢ { tv_n tv lv yy } 
				_dec lv ⊢ lv 
				$ yy ⊢ yy,yy0 
				imp { y0 yy } ⊢ y_f
				RP.atm y_f ⊢ y_f 
				unify.f { tv y_f ys } ⊢ tv 
				gen { tv_n tv lv yy0 } ⊢ { tv_n tv lv yy0 }
				ast.app_jmp { f x } ⊢ lc 
				∎ { lv env0 rv tv tv_n n re lc yy0 } 
			∐ ast.seq◂{ ll lc } .
				$ ll ⊢
				∐ ast.op_name◂{ o s d } .
					##» "slv_r op_name" _ ⊢ sec0 
					##_emt sec0 ⊢ sec0 
					##_emt o ⊢ o
					##_emt { o s d } ⊢ { o s d } 
					$ env0 ⊢ { mmv mev ev m_ns e_ns m_l } 
					slv_ns_e { o mmv mev ev m_ns e_ns m_l } ⊢ { mmv mev ev m_ns e_ns m_l i_e } 
					_lod_q { ev i_e } ⊢ { ev i_e iv } 
					$ { mmv mev ev m_ns e_ns m_l } ⊢ env0 
					##_lod_q { tv iv } ⊢ { tv iv yt }  
					##_emt { i_e iv yt } ⊢ { i_e iv yt } 
					var iv ⊢ yo 
					RP.atm yo ⊢ yo 
					##$ yo ⊢ yo,yo0 
					##pnt_type_k { tv yo0 } ⊢ { tv syo } 
					##_emt i_e ⊢ i_e 
					##_emt syox ⊢ syox 
					_inc lv ⊢ lv 
					inst { tv_n tv lv yo } ⊢ { tv_n tv lv yo } 
					csm_src_ptn { lv env0 rv tv tv_n re s } ⊢ { lv env0 rv tv tv_n re s y_s }
					crt_dst_ptn { lv rv tv tv_n n re d } ⊢ { lv rv tv tv_n n re d y_d }
					imp { y_s y_d } ⊢ y_s_d 
					RP.atm y_s_d ⊢ y_s_d 
					$ yo ⊢ yo,yo0 
					unify.f { tv yo0 y_s_d } ⊢ tv 
					_dec lv ⊢ lv 
					gen { tv_n tv lv yo } ⊢ { tv_n tv lv yo } 
					ast.op_name { i_e s d } ⊢ ll 
					pnt_type_k { tv yo } ⊢ { tv syo } 
					_emt syo ⊢ syo 
					slv_r { lv env0 rv tv tv_n n re lc } ⊢ { lv env0 rv tv tv_n n re lc yr }
					ast.seq { ll lc } ⊢ lc
					∎ { lv env0 rv tv tv_n n re lc yr }
				∐ ast.op_app◂{ f x y } .
					_inc lv ⊢ lv 
					csm_src { lv env0 rv tv tv_n re f } ⊢ { lv env0 rv tv tv_n re f y0 } 
					csm_src_ptn { lv env0 rv tv tv_n re x } ⊢ { lv env0 rv tv tv_n re x y_s } 
					crt_dst_ptn { lv rv tv tv_n n re y } ⊢ { lv rv tv tv_n n re y y_d } 
					imp { y_s y_d } ⊢ yx 
					RP.atm yx ⊢ yx 
					$ y0 ⊢ y0,y0_0 
					unify.f { tv y0 yx } ⊢ tv 
					_dec lv ⊢ lv 
					gen { tv_n tv lv y0_0 } ⊢ { tv_n tv lv y0_0 } 
					ast.op_app { f x y } ⊢ ll 
					slv_r { lv env0 rv tv tv_n n re lc } ⊢ { lv env0 rv tv tv_n n re lc yr }
					ast.seq { ll lc } ⊢ lc 
					∎ { lv env0 rv tv tv_n n re lc yr } 
				∐ ast.op_exp_cst◂{ c s d } .
					» "slv_r op_exp_cst" _ ⊢ sec0 
					_emt c ⊢ c 
					_emt sec0 ⊢ sec0
					_inc lv ⊢ lv 
					slv_cst { lv env0 tv_n tv c } ⊢ { lv env0 tv_n tv c y } 
					##_emt sec0 ⊢ sec0
					csm_src_ptn { lv env0 rv tv tv_n re s } ⊢ { lv env0 rv tv tv_n re s y_s } 
					crt_dst_ptn { lv rv tv tv_n n re d } ⊢ { lv rv tv tv_n n re d y_d } 
					##_emt sec0 ⊢ sec0
					_dec lv ⊢ lv 
					$ y ⊢ y,y0 
					unify.f { tv y0 y_d } ⊢ tv 
					##_emt sec0 ⊢ sec0
					gen { tv_n tv lv y } ⊢ { tv_n tv lv y } 
					gen { tv_n tv lv y_s } ⊢ { tv_n tv lv y_s } 
					ast.op_exp_cst { c s d } ⊢ ll 
					slv_r { lv env0 rv tv tv_n n re lc } ⊢ { lv env0 rv tv tv_n n re lc yr }
					ast.seq { ll lc } ⊢ lc 
					∎ { lv env0 rv tv tv_n n re lc yr }
				∐. ast.op_exp_s8◂{ pl ss ds } .
					##» "op_exp_s8 d0" _ ⊢ sd2 
					##_emt sd2 ⊢ sd2 
					slv_exp_s8.f { lv env0 n rv re tv_n tv ss ds pl } ⊢ { lv env0 n rv re tv_n tv ss ds pl }
					ast.op_exp_s8 { pl ss ds } ⊢ ll 
					slv_r { lv env0 rv tv tv_n n re lc } ⊢ { lv env0 rv tv tv_n n re lc yr } 
					ast.seq { ll lc } ⊢ lc 
					∎ { lv env0 rv tv tv_n n re lc yr }
			∐ ast.mtc◂lm .
				slv_lc_mtc { lv env0 rv tv tv_n n re lm } ⊢ { lv env0 rv tv tv_n n re lm yr }
				ast.mtc lm ⊢ lc 
				∎ { lv env0 rv tv tv_n n re lc yr } 
			∐ ast.op_id◂{ sp ll } . 
				$ ll ⊢ 
				∐ ast.id_mtc◂ilm . 
					_inc lv ⊢ lv 
					csm_src_ptn { lv env0 rv tv tv_n re sp } ⊢ { lv env0 rv tv tv_n re sp y0 } 
					_dec lv ⊢ lv 
					$ y0 ⊢ y0,y0_0 
					##» "op_id d0" _ ⊢ sd4 
					##_emt sd4 ⊢ sd4 
					slv_lc_id_mtc_mp { y0 lv env0 rv tv tv_n n re ilm } ⊢ { lv env0 rv tv tv_n n ilm } 
					gen { tv_n tv lv y0_0 } ⊢ { tv_n tv lv y0_0 } 
					slv_lc_id_mtc { lv env0 rv tv tv_n n ilm } ⊢ { lv env0 rv tv tv_n n ilm yr } 
					ast.id_mtc ilm ⊢ ll 
					ast.op_id { sp ll } ⊢ lc 
					_nil {} ⊢ re 
					∎ { lv env0 rv tv tv_n n re lc yr } 
				∐. ast.id_line◂{ dl lc } . 
					_inc lv ⊢ lv 
					csm_src_ptn { lv env0 rv tv tv_n re sp } ⊢ { lv env0 rv tv tv_n re sp y_s } 
					crt_dst_ptn_lst { lv rv tv tv_n n re dl } ⊢ { lv rv tv tv_n n re dl y_d }
					##$ y_s ⊢ y_s,y_s0 
					unifys { tv y_s y_d } ⊢ { tv y_s } 
					_dec lv ⊢ lv 
					gen { tv_n tv lv y_s } ⊢ { tv_n tv lv y_s } 
					slv_r { lv env0 rv tv tv_n n re lc } ⊢ { lv env0 rv tv tv_n n re lc yr } 
					ast.id_line { dl lc } ⊢ ll
					ast.op_id { sp ll } ⊢ lc 
					∎ { lv env0 rv tv tv_n n re lc yr }
			∐ ast.ret◂s .
				$ s ⊢
				∐ _some◂s . 
					##» "slv_r ast.ret 0" _ ⊢ ser0 
					##_emt ser0 ⊢ ser0 
					_inc lv ⊢ lv 
					csm_src_ptn { lv env0 rv tv tv_n re s } ⊢ { lv env0 rv tv tv_n re s y0 } 
					_dec lv ⊢ lv 
					gen { tv_n tv lv y0 } ⊢ { tv_n tv lv y0 } 
					_some s ⊢ s 
					ast.ret s ⊢ lc 
					∎ { lv env0 rv tv tv_n n re lc y0 } 			
				∐. _none◂{} . 
					_none {} ⊢ s 
					ast.ret s ⊢ lc 
					_nil {} ⊢ l0 
					RP.rcd l0 ⊢ y0 
					∎ { lv env0 rv tv tv_n n re lc y0 } 								
			∐. ast.exn◂ne .
				ast.exn ne ⊢ lc 
				newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yq }
				∎ { lv env0 rv tv tv_n n re lc yq }   			
		@.slv_lc_mtc { lv env0 rv tv tv_n n re lm } 
			$ lm ⊢ 
			∐ p_cns◂{ { tl me } lm } .  
				$ re ⊢ re,re0 
				slv_mtc_line { lv env0 rv tv tv_n n re tl } ⊢ { lv env0 rv tv tv_n n re tl } 
				slv_mtc_etr { lv env0 rv tv tv_n n re me } ⊢ { lv env0 rv tv tv_n n re me yr1 } 
				slv_lc_mtc { lv env0 rv tv tv_n n re0 lm } ⊢ { lv env0 rv tv tv_n n re0 lm yr0 } 
				_inc lv ⊢ lv 
				inst { tv_n tv lv yr0 } ⊢ { tv_n tv lv yr0 } 
				inst { tv_n tv lv yr1 } ⊢ { tv_n tv lv yr1 }
				$ yr0 ⊢ yr0,yr0_0 
				unify.f { tv yr0 yr1 } ⊢ tv 
				_dec lv ⊢ lv 
				gen { tv_n tv lv yr0_0 } ⊢ { tv_n tv lv yr0_0 } 
				p_cns { { tl me } lm } ⊢ lm 
				∎ { lv env0 rv tv tv_n n re lm yr0_0 }
			∐. p_end◂{ tl me } .
				slv_mtc_line { lv env0 rv tv tv_n n re tl } ⊢ { lv env0 rv tv tv_n n re tl } 
				slv_mtc_etr { lv env0 rv tv tv_n n re me } ⊢ { lv env0 rv tv tv_n n re me yr0 } 
				p_end { tl me } ⊢ lm 
				∎ { lv env0 rv tv tv_n n re lm yr0 }
		@.slv_mtc_etr { lv env0 rv tv tv_n n re me } 
			$ me ⊢ 
			∐ ast.mtc_rmf◂lm0 .
				slv_lc_mtc { lv env0 rv tv tv_n n re lm0 } ⊢ { lv env0 rv tv tv_n n re lm0 yr }  
				ast.mtc_rmf lm0 ⊢ me 
				∎ { lv env0 rv tv tv_n n re me yr } 
			∐ ast.mtc_id_rmf◂{ sp0 ilm0 } .  
				_inc lv ⊢ lv 
				csm_src_ptn { lv env0 rv tv tv_n re sp0 } ⊢ { lv env0 rv tv tv_n re sp0 y0 } 
				_dec lv ⊢ lv 
				$ y0 ⊢ y0,y0_0 
				slv_lc_id_mtc_mp { y0 lv env0 rv tv tv_n n re ilm0 } ⊢ { lv env0 rv tv tv_n n ilm0 } 
				gen { tv_n tv lv y0_0 } ⊢ { tv_n tv lv y0_0 } 
				slv_lc_id_mtc { lv env0 rv tv tv_n n ilm0 } ⊢ { lv env0 rv tv tv_n n ilm0 yr } 
				ast.mtc_id_rmf { sp0 ilm0 } ⊢ me  
				_nil {} ⊢ re
				∎ { lv env0 rv tv tv_n n re me yr }  
			∐. ast.mtc_code◂lc0 . 
				slv_r { lv env0 rv tv tv_n n re lc0 } ⊢ { lv env0 rv tv tv_n n re lc0 yr } 
				ast.mtc_code lc0 ⊢ me 
				∎ { lv env0 rv tv tv_n n re me yr } 
		@.slv_mtc_line { lv env0 rv tv tv_n n re tl } 
			##» "slv_mtc_line d0" _ ⊢ sd0 
			##_emt sd0 ⊢ sd0 
			$ tl ⊢ 
			∐ _cns◂{ t tl } . 
				$ t ⊢ 
				∐ ast.mtc_id◂{ sp mp } . 
					_inc lv ⊢ lv 
					csm_src_ptn { lv env0 rv tv tv_n re sp } ⊢ { lv env0 rv tv tv_n re sp y0 } 
					crt_mtc_ptn { lv env0 rv tv tv_n n re mp } ⊢ { lv env0 rv tv tv_n n re mp y }
					_dec lv ⊢ lv 
					$ y0 ⊢ y0,y0_0 
					unify.f { tv y0_0 y } ⊢ tv 
					gen { tv_n tv lv y0 } ⊢ { tv_n tv lv y0 } 
					ast.mtc_id { sp mp } ⊢ t 
					$ y0 ⊢ y0,y00 
					pnt_type_k { tv y00 } ⊢ { tv s00 } 
					##_emt sd0 ⊢ sd0 
					##_emt s00 ⊢ s00 
					slv_mtc_line { lv env0 rv tv tv_n n re tl } ⊢ { lv env0 rv tv tv_n n re tl } 
					_cns { t tl } ⊢ tl 
					∎ { lv env0 rv tv tv_n n re tl } 
				∐ ast.mtc_cmp_test◂{ v0 v1 } .  
					_inc lv ⊢ lv 
					slv_test_var { lv env0 tv_n tv rv n re v0 } ⊢ { lv env0 tv_n tv rv n re v0 y0 } 
					slv_test_var { lv env0 tv_n tv rv n re v1 } ⊢ { lv env0 tv_n tv rv n re v1 y1 } 
					_dec lv ⊢ lv 
					$ y0 ⊢ y0,y0_0 
					unify.f { tv y0_0 y1 } ⊢ tv  
					gen { tv_n tv lv y0 } ⊢ { tv_n tv lv y0 } 
					ast.mtc_cmp_test { v0 v1 } ⊢ t 
					slv_mtc_line { lv env0 rv tv tv_n n re tl } ⊢ { lv env0 rv tv tv_n n re tl } 
					_cns { t tl } ⊢ tl 
					∎ { lv env0 rv tv tv_n n re tl } 
				∐. ast.mtc_test◂{ v0 v1 } .  
					_inc lv ⊢ lv 
					slv_test_var { lv env0 tv_n tv rv n re v0 } ⊢ { lv env0 tv_n tv rv n re v0 y0 } 
					slv_test_var { lv env0 tv_n tv rv n re v1 } ⊢ { lv env0 tv_n tv rv n re v1 y1 } 
					_dec lv ⊢ lv 
					$ y0 ⊢ y0,y0_0 
					unify.f { tv y0_0 y1 } ⊢ tv  
					gen { tv_n tv lv y0 } ⊢ { tv_n tv lv y0 } 
					ast.mtc_test { v0 v1 } ⊢ t 
					slv_mtc_line { lv env0 rv tv tv_n n re tl } ⊢ { lv env0 rv tv tv_n n re tl } 
					_cns { t tl } ⊢ tl 
					∎ { lv env0 rv tv tv_n n re tl } 
			∐. _nil◂{} . 
				_nil {} ⊢ tl 
				∎ { lv env0 rv tv tv_n n re tl }
		@.slv_lc_id_mtc_mp { y0 lv env0 rv tv tv_n n re ilm } 
			##» "slv_id_mtc_mp d0" _ ⊢ sd0 
			##_emt sd0 ⊢ sd0 
			$ ilm ⊢ 
			∐ p_cns◂{ { mp tl me } ilm } .
				$ re ⊢ re,re0 
				$ y0 ⊢ y0,y0_0 
				slv_lc_id_mtc_mp { y0_0 lv env0 rv tv tv_n n re0 ilm } ⊢ { lv env0 rv tv tv_n n ilm } 
				_inc lv ⊢ lv 
				crt_mtc_ptn { lv env0 rv tv tv_n n re mp } ⊢ { lv env0 rv tv tv_n n re mp y } 
				_dec lv ⊢ lv  
				unify.f { tv y0 y } ⊢ tv
				p_cns { { mp re tl me } ilm } ⊢ ilm 
				∎ { lv env0 rv tv tv_n n ilm }
			∐. p_end◂{ mp tl me } .
				_inc lv ⊢ lv 
				crt_mtc_ptn { lv env0 rv tv tv_n n re mp } ⊢ { lv env0 rv tv tv_n n re mp y } 
				_dec lv ⊢ lv  
				unify.f { tv y0 y } ⊢ tv 
				p_end { mp re tl me } ⊢ ilm 
				∎ { lv env0 rv tv tv_n n ilm }
		@.slv_lc_id_mtc { lv env0 rv tv tv_n n ilm } 
			$ ilm ⊢ 
			∐ p_cns◂{ { mp re tl me } ilm } .  
				slv_mtc_line { lv env0 rv tv tv_n n re tl } ⊢ { lv env0 rv tv tv_n n re tl } 
				slv_mtc_etr { lv env0 rv tv tv_n n re me } ⊢ { lv env0 rv tv tv_n n re me yr1 } 
				slv_lc_id_mtc { lv env0 rv tv tv_n n ilm } ⊢ { lv env0 rv tv tv_n n ilm yr0 } 
				_inc lv ⊢ lv 
				inst { tv_n tv lv yr0 } ⊢ { tv_n tv lv yr0 } 
				inst { tv_n tv lv yr1 } ⊢ { tv_n tv lv yr1 }
				$ yr0 ⊢ yr0,yr0_0 
				unify.f { tv yr0 yr1 } ⊢ tv 
				_dec lv ⊢ lv 
				gen { tv_n tv lv yr0_0 } ⊢ { tv_n tv lv yr0_0 } 
				p_cns { { mp tl me } ilm } ⊢ ilm 
				∎ { lv env0 rv tv tv_n n ilm yr0_0 }
			∐. p_end◂{ mp re tl me } .
				slv_mtc_line { lv env0 rv tv tv_n n re tl } ⊢ { lv env0 rv tv tv_n n re tl } 
				slv_mtc_etr { lv env0 rv tv tv_n n re me } ⊢ { lv env0 rv tv tv_n n re me yr0 } 
				p_end { mp tl me } ⊢ ilm 
				∎ { lv env0 rv tv tv_n n ilm yr0 }
		§ add_e { tv_n tv evv ev ev_n ns e k y } 
			newvar_ln { tv_n tv y } ⊢ { tv_n tv i0 } 
			_set_q { ev ev_n i0 } ⊢ { ev ev_n }
			_set_q { evv ev_n k } ⊢ { evv ev_n } 
			$ ev_n ⊢ ev_n,n0 
			_inc ev_n ⊢ ev_n 
			_some n0 ⊢ o 
			_cns { { e o } ns } ⊢ ns 
			∎ { tv_n tv evv ev ev_n ns } 
		§§ slv_lc_clq 
			§ 
				@.f { env0 irv tav evv rv tv tv_n ev_n r_n q gfl { dd ep0 ec0 lb_n } } 
					_nil {} ⊢ cl 
					f_l0 { env0 evv tv tv_n ev_n r_n q cl } ⊢ { env0 evv tv tv_n ev_n r_n q } 
					f_l1 { env0 rv tv tv_n r_n q } ⊢ { env0 rv tv tv_n r_n q yl } 
					» 0r _ ⊢ pv_n 
					_nil {} ⊢ al 
					f_l2 { { pv_n al } env0 irv tav evv rv tv_n tv yl { dd ep0 ec0 lb_n } } ⊢ { { pv_n al } env0 irv tav evv rv tv_n tv yl { dd ep0 ec0 lb_n } } 
					f_l3 { gfl env0 lb_n evv { rv irv } tav tv_n tv ec0 yl } ⊢ { gfl env0 lb_n evv { rv irv } tav tv_n tv ec0 } 
					∎ { env0 irv tav evv rv tv tv_n ev_n r_n q gfl { dd ep0 ec0 lb_n } } 
				@.f_l0 { env0 evv tv tv_n ev_n r_n q cl }
					$ q ⊢ 
					∐ _cns◂{ { w d td lc } q } . 
						» "enter slv_lc_clq" _ ⊢ sxe0
						_emt sxe0 ⊢ sxe0
						_emt w ⊢ w  
						assoc { cl w } ⊢ { cl w o } 
						$ o ⊢ 
						∐ _none◂{} . 
							$ w ⊢ w,w0 
							_some {} ⊢ a 
							_cns { { w0 a } cl } ⊢ cl 
							$ env0 ⊢ { mmv mev ev ns_m ns_e il }
							» 1r _ ⊢ lv 
							newvar_l { tv_n tv lv } ⊢ { tv_n tv lv yx }
							$ yx ⊢ yx,yx0 
							$ w ⊢ w,w0
							$ ev_n ⊢ ev_n,en0 
							» 0r _ ⊢ ka0 
							k_op_axm ka0 ⊢ k 
							add_e { tv_n tv evv ev ev_n ns_e w k yx } ⊢ { tv_n tv evv ev ev_n ns_e }
							$ { mmv mev ev ns_m ns_e il } ⊢ env0 
							f_l0 { env0 evv tv tv_n ev_n r_n q cl } ⊢ { env0 evv tv tv_n ev_n r_n q } 
							##_emt yx0 ⊢ yx0 
							_cns { { en0 w0 yx0 d lc } q } ⊢ q 
							∎ { env0 evv tv tv_n ev_n r_n q }
						∐. _some◂{} . 
							_emt w ⊢ w 
							∎| 
					∐. _nil◂{} . 
						_nil {} ⊢ q 
						∎ { env0 evv tv tv_n ev_n r_n q } 
				@.f_l1 { env0 rv tv tv_n r_n q } 
					##» "enter f_l1" _ ⊢ sxe0
					##_emt sxe0 ⊢ sxe0
					$ q ⊢ 
					∐ _cns◂{ { en w yx d lc } q } . 
						_nil {} ⊢ re 
						» 1r _ ⊢ lv 
						crt_dst_ptn { lv rv tv tv_n r_n re d } ⊢ { lv rv tv tv_n r_n re d y0 } 
						##» "enter f_l1 d1" _ ⊢ sd1
						##_emt sd1 ⊢ sd1
						##_emt w ⊢ w 
						slv_r { lv env0 rv tv tv_n r_n re lc } ⊢ { lv env0 rv tv tv_n r_n re lc yr } 
						inst { tv_n tv lv yr } ⊢ { tv_n tv lv yr } 
						##» "enter f_l1 d2" _ ⊢ sd2
						##_emt sd2 ⊢ sd2
						$ y0 ⊢ y0,y00 
						$ yr ⊢ yr,yr0 
						imp { y00 yr0 } ⊢ yf
						RP.atm yf ⊢ yf 
						$ yf ⊢ yf,yf0 
						pnt_type_k { tv yf0 } ⊢ { tv syf0 } 
						##_emt syf0 ⊢ syf0 
						##» "DBG Fx2" _ ⊢ sdde 
						##_emt sdde ⊢ sdde
						unify.f { tv yf yx } ⊢ tv 
						f_l1 { env0 rv tv tv_n r_n q } ⊢ { env0 rv tv tv_n r_n q yl } 
						_cns { {} q } ⊢ q 
						_cns { { en lc w { d y0 yr } } yl } ⊢ yl 
						∎ { env0 rv tv tv_n r_n q yl } 
					∐. _nil◂{} . 
						_nil {} ⊢ q 
						_nil {} ⊢ yl
						∎ { env0 rv tv tv_n r_n q yl }
				@.f_l2 { { pv_n al } env0 irv tav evv rv tv_n tv yl { dd ep0 ec0 lb_n } }  
					$ yl ⊢ 
					∐ _cns◂{ { en lc w { d ys yd } } yl } .
						» 0r _ ⊢ lv 
						##» "f_l2 0" _ ⊢ se1 
						##_emt se1 ⊢ se1 
						$ ys ⊢ ys,ys0 
						$ yd ⊢ yd,yd0 
						imp { ys0 yd0 } ⊢ yx
						RP.atm yx ⊢ yx 
						gen { tv_n tv lv yx } ⊢ { tv_n tv lv yx } 
						$ ys ⊢ ys,ys0 
						_nil {} ⊢ ql0 
						chk_pv { tv ys0 ql0 } ⊢ { tv ql0 } 
						∐ ql0 ⊢ _nil◂{} .  
							$ ys ⊢ ys,ys0 
							rset.ini {} ⊢ s0 
							alc_type_k.f { pv_n al tav tv_n tv s0 ys0 } ⊢ { pv_n al tav tv_n tv s0 p0 } 
							$ yd ⊢ yd,yd0 
							rset.ini {} ⊢ sd0 
							alc_type_k.f { pv_n al tav tv_n tv sd0 yd0 } ⊢ { pv_n al tav tv_n tv sr0 pr0 } 
							$ p0 ⊢ p0,p00 
							stt_v.pnt.f p00 ⊢ sp0 
							$ p0 ⊢ p0,p00 
							emt.mk_rsp p00 ⊢ rsp 
							$ p0 ⊢ p0,p00 
							_nil {} ⊢ dl 
							_nil {} ⊢ rl 
							emt.idx.crt_ptn { irv d p00 rl dl } ⊢ { irv rl dl } 
							$ pr0 ⊢ pr0,pr00 
							stt_v.pnt.f pr00 ⊢ spr0 
							$ pr0 ⊢ pr0,pr00 
							emt.mk_rsp pr00 ⊢ rsp_d 
							$ pr0 ⊢ pr0,pr00 
							$ rsp ⊢ rsp,rsp0 
							$ rsp_d ⊢ rsp_d,rsp_d0 
							k_op { rsp0 p0 rsp_d pr0 } ⊢ k 
							$ yx ⊢ yx,yx0 
							exc_q { evv en k } ⊢ { evv en k } 
							pnt_type_k { tv yx0 } ⊢ { tv yx1s } 
							» _^ dd,w,yx1s,sp0,spr0,en ⊢ dd,w,yx1s,sp0,spr0,en,ep1 
								0'*"\t" "§ " 1' "(" 5d' ") " 3' " ⊢ " 4' " : " 2' "\n" // 
							_cns { ep1 ep0 } ⊢ ep0
							rp8.e {} ⊢ ee0 
							» _^ en,w,sp0,spr0,yx1s ⊢ en,w,sp0,spr0,yx1s,ec1 
								"ETR_" 0d' ": ; " 1' " " 2' " ⊢ " 3' " : " 4' "\n" //
							rp8.add_s8 { ee0 ec1 } ⊢ ee0 
							∐ rsp'=0r . 
								f_l2 { { pv_n al } env0 irv tav evv rv tv_n tv yl { dd ep0 ec0 lb_n } } ⊢ { { pv_n al } env0 irv tav evv rv tv_n tv yl { dd ep0 ec0 lb_n } }
								_cns { { rsp lc rl rsp_d0 pr00 yx yd ee0 } yl } ⊢ yl 
								∎ { { pv_n al } env0 irv tav evv rv tv_n tv yl { dd ep0 ec0 lb_n } } 
							∐. . 
								» "\tadd rsp,8\n" _ ⊢ sc0 
								rp8.add_s8 { ee0 sc0 } ⊢ ee0 
								f_l2 { { pv_n al } env0 irv tav evv rv tv_n tv yl { dd ep0 ec0 lb_n } } ⊢ { { pv_n al } env0 irv tav evv rv tv_n tv yl { dd ep0 ec0 lb_n } }
								_cns { { rsp lc rl rsp_d0 pr00 yx yd ee0 } yl } ⊢ yl 
								∎ { { pv_n al } env0 irv tav evv rv tv_n tv yl { dd ep0 ec0 lb_n } }
						∐. . 
							k_op_gnr { d lc } ⊢ k 
							exc_q { evv en k } ⊢ { evv en k } 
							f_l2 { { pv_n al } env0 irv tav evv rv tv_n tv yl { dd ep0 ec0 lb_n } } ⊢ { { pv_n al } env0 irv tav evv rv tv_n tv yl { dd ep0 ec0 lb_n } }
							##_cns { { rsp lc rl rsp_d0 pr00 yx yd } yl } ⊢ yl 
							∎ { { pv_n al } env0 irv tav evv rv tv_n tv yl { dd ep0 ec0 lb_n } } 
					∐. _nil◂{} . 
						_nil {} ⊢ yl 
						∎ { { pv_n al } env0 irv tav evv rv tv_n tv yl { dd ep0 ec0 lb_n } }
				@.f_l3 { gfl env0 lb_n evv { rv irv } tav tv_n tv ec0 yl }
					$ yl ⊢ 
					∐ _cns◂{ { rsp lc rl rsp_d pr00 yx yd ee0 } yl } . 
						$ env0 ⊢ { mmv mev ev m_ns e_ns m_l } 						
						_nil {} ⊢ cl 
						f_etr { rsp_d pr00 yd } ⊢ ft 
						emt.lc_code.f { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv lc ee0 rl ft } ⊢ { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv ee0 rl ft } 
						rp8.cct { ec0 ee0 } ⊢ ec0 
						$ { mmv mev ev m_ns e_ns m_l } ⊢ env0 
						f_l3 { gfl env0 lb_n evv { rv irv } tav tv_n tv ec0 yl } ⊢| 
					∐. _nil◂{} . 
						∎ { gfl env0 lb_n evv { rv irv } tav tv_n tv ec0 }
			∎∎ 
		
		§ @.slv_type { env0 mtv tv_n tv t_ns al t l2 } 
			» 0r _ ⊢ xx 
			_add { xx tv_n } ⊢ { xx tv_n } 
			$ t ⊢ 
			∐ ast.type_rcd◂l . 
				slv_type_lst { env0 mtv tv_n tv t_ns al l l2 } ⊢ { env0 mtv tv_n tv t_ns al l l2 } 
				RP.rcd l ⊢ k 
				∎ { env0 mtv tv_n tv t_ns al k l2 }
			∐ ast.imp◂{ t0 t1 } . 
				slv_type { env0 mtv tv_n tv t_ns al t0 l2 } ⊢ { env0 mtv tv_n tv t_ns al k0 l2 }
				slv_type { env0 mtv tv_n tv t_ns al t1 l2 } ⊢ { env0 mtv tv_n tv t_ns al k1 l2 } 
				imp { k0 k1 } ⊢ k 
				RP.atm k ⊢ k 
				∎ { env0 mtv tv_n tv t_ns al k l2 } 
			∐ ast.app◂{ t0 t1 } .
				slv_type { env0 mtv tv_n tv t_ns al t0 l2 } ⊢ { env0 mtv tv_n tv t_ns al k0 l2 }
				slv_type { env0 mtv tv_n tv t_ns al t1 l2 } ⊢ { env0 mtv tv_n tv t_ns al k1 l2 } 
				slv_type_app { env0 mtv tv_n tv t_ns al k0 k1 l2 } ⊢| 	
			∐ ast.type_name◂n . 
				$ env0 ⊢ { mmv mev ev m_ns e_ns m_l } 
				slv_ns_e { n mmv mtv tv m_ns t_ns m_l } ⊢ { mmv mtv tv m_ns t_ns m_l iv }
				$ { mmv mev ev m_ns e_ns m_l } ⊢ env0 	
				assoc { l2 iv } ⊢ { l2 iv o } 
				∐ o ⊢ _some◂o; o ⊢ _some◂{ w as y } .
					_none {} ⊢ o 
					_some o ⊢ o 
					$ iv ⊢ iv,i0_0 
					_cns { { i0_0 o } l2 } ⊢ l2 
					_nil {} ⊢ al0 
					slv_args_ln { env0 mtv tv_n tv t_ns as al0 y l2 } ⊢ { env0 mtv tv_n tv t_ns al0 k l2 } 
					_none {} ⊢ o 
					$ iv ⊢ iv,i0_0 
					_cns { { i0_0 o } l2 } ⊢ l2 
					var_ln k ⊢ v 
					_set_q { tv iv v } ⊢ { tv iv }
					var iv ⊢ k 
					RP.atm k ⊢ k 
					∎ { env0 mtv tv_n tv t_ns al k l2 } 
				∐ o ⊢ _some◂o; o ⊢ _none◂{} . 
					» "slv_type 0" _ ⊢ se 
					_emt se ⊢ se 
					∎| 
				∐. . 
					var iv ⊢ k 
					RP.atm k ⊢ k 
					» 1r _ ⊢ lv 
					inst { tv_n tv lv k } ⊢ { tv_n tv lv k }
					_dec lv ⊢ lv  
					gen { tv_n tv lv k } ⊢ { tv_n tv lv k } 
					∎ { env0 mtv tv_n tv t_ns al k l2 }
			∐. ast.type_var◂s . 
				assoc { al s } ⊢ { al s o } 
				$ o ⊢ 
				∐ _some◂i . 
					var i ⊢ k 
					RP.atm k ⊢ k 
					∎ { env0 mtv tv_n tv t_ns al k l2 }
				∐. _none◂{} . 
					» "slv_type 1" _ ⊢ se 
					_emt se ⊢ se 
					∎| 
			@.slv_type_lst { env0 mtv tv_n tv t_ns al l l2 }
				$ l ⊢ 
				∐ _cns◂{ t l } . 
					slv_type { env0 mtv tv_n tv t_ns al t l2 } ⊢ { env0 mtv tv_n tv t_ns al k l2 } 
					slv_type_lst { env0 mtv tv_n tv t_ns al l l2 } ⊢ { env0 mtv tv_n tv t_ns al l l2 } 
					_cns { k l } ⊢ l 
					∎ { env0 mtv tv_n tv t_ns al l l2 }
				∐. _nil◂{} . 
					_nil {} ⊢ l 
					∎ { env0 mtv tv_n tv t_ns al l l2 } 
			@.slv_type_app { env0 mtv tv_n tv t_ns al k0 k1 l2 } 
				$ k0 ⊢ 
				∐ RP.rcd◂l . 
					RP.rcd l ⊢ k0 
					pnt_type_k { tv k0 } ⊢ { tv s0 } 
					##» "slv_type_app 1" _ ⊢ se 
					##_emt se ⊢ se 
					##_emt s0 ⊢ s0 
					∎| 
				∐. RP.atm◂k0 . 
					∐ k0 ⊢ abs◂{ a k0 } . 
						var_ln k1 ⊢ v1 
						exc_q { tv a v1 } ⊢ { tv a v1 } 
						∎ { env0 mtv tv_n tv t_ns al k0 l2 } 
					∐ k0 ⊢ var◂i . 
						_lod_q { tv i } ⊢ { tv i v } 
						∐ v ⊢ var_ln◂k2 . 
							slv_type_app { env0 mtv tv_n tv t_ns al k2 k1 l2 } ⊢|
						∐. . 
							pnt_type_k { tv k1 } ⊢ { tv s0 } 
							» "slv_type_app 1" _ ⊢ se 
							_emt se ⊢ se 
							_emt s0 ⊢ s0 
							∎|
					∐. . 
						RP.atm k0 ⊢ k0 
						pnt_type_k { tv k0 } ⊢ { tv s0 } 
						» "slv_type_app 0" _ ⊢ se 
						_emt se ⊢ se 
						_emt s0 ⊢ s0 
						∎| 
			@.slv_args_ln { env0 mtv tv_n tv t_ns as al t l2 } 
				$ as ⊢ 
				∐ _cns◂{ a as } . 
					assoc { al a } ⊢ { al a o } 
					$ o ⊢ 
					∐ _none◂{} . 
						newvar_i { tv_n tv } ⊢ { tv_n tv i } 
						$ i ⊢ i,i0 
						_some i ⊢ o 
						_cns { { a o } al } ⊢ al 
						slv_args_ln { env0 mtv tv_n tv t_ns as al t l2 } ⊢ { env0 mtv tv_n tv t_ns al k l2 } 
						abs { i0 k } ⊢ k 
						RP.atm k ⊢ k 
						∎ { env0 mtv tv_n tv t_ns al k l2 }
					∐. _some◂y . 
						» "slv_args 0" _ ⊢ se 
						_emt se ⊢ se 
						∎| 
				∐. _nil◂{} .  
					slv_type { env0 mtv tv_n tv t_ns al t l2 } ⊢|
		§ slv_args_ln { env0 mtv tv_n tv t_ns as t l2 } 
			_nil {} ⊢ al 
			slv_args_ln { env0 mtv tv_n tv t_ns as al t l2 } ⊢| 
		§ @.slv_args_def_0 { env0 mtv tv_n tv t_ns as al x xl ql dl } 
			$ as ⊢ 
			∐ _cns◂{ a as } . 
				assoc { al a } ⊢ { al a o } 
				$ o ⊢ 
				∐ _none◂{} . 
					newvar_i { tv_n tv } ⊢ { tv_n tv i } 
					» 0r _ ⊢ lv 
					$ tv_n ⊢ tv_n,tv_n0 
					$ tv_n ⊢ tv_n,qi 
					newvar_q { tv_n tv lv } ⊢ { tv_n tv lv q } 
					_cns { q ql } ⊢ ql 
					_some tv_n0 ⊢ o 
					_cns { { a o } al } ⊢ al 
					$ i ⊢ i,i1 
					var i1 ⊢ v 
					RP.atm v ⊢ v 
					_cns { v xl } ⊢ xl 
					slv_args_def_0 { env0 mtv tv_n tv t_ns as al x xl ql dl } ⊢ { env0 mtv tv_n tv t_ns al k yx dl ql } 
					_cns { qi ql } ⊢ ql 
					abs { i k } ⊢ k 
					RP.atm k ⊢ k 
					∎ { env0 mtv tv_n tv t_ns al k yx dl ql }
				∐. _some◂y . 
					» "slv_args_def 0" _ ⊢ se 
					_emt se ⊢ se 
					∎| 
			∐. _nil◂{} .  
				$ x ⊢ x,x0 
				##slv_args_def_dl { tv_n dl } ⊢ { tv_n dl } 
				_nil {} ⊢ ql0 
				dta { x0 ql } ⊢ yx 
				RP.atm yx ⊢ yx 
				dta { x xl } ⊢ k 
				RP.atm k ⊢ k 
				∎ { env0 mtv tv_n tv t_ns al k yx dl ql0 }
		§ slv_args_def { env0 mtv tv_n tv t_ns as x dl } 
			_nil {} ⊢ al 
			_nil {} ⊢ xl
			_nil {} ⊢ ql 
			slv_args_def_0 { env0 mtv tv_n tv t_ns as al x xl ql dl } ⊢ { env0 mtv tv_n tv t_ns al k yx dl ql0 } 
			rev ql0 ⊢ ql0 
			∎ { env0 mtv tv_n tv t_ns al k yx dl ql0 }
		§ @.slv_dt_def { { mmv mev ns_m il } { tav evv } an mtv al yx tv tv_n ns_t ev ev_n ns_e dl { dd ep0 ec0 } } 
			$ dl ⊢ 
			∐ _cns◂{ { cn y } dl } . 
				_nil {} ⊢ l2 
				slv_type { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t al y l2 } ⊢ { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t al k l2 } 
				» 0r _ ⊢ lv 
				$ yx ⊢ yx,yx0 
				##$ k ⊢ k,k0 
				$ k ⊢ k,k0 
				imp { k yx0 } ⊢ yy 
				RP.atm yy ⊢ yy 
				$ yy ⊢ yy,yy0 
				pnt_type_k { tv yy0 } ⊢ { tv syy }
				» _^ dd,ev_n,cn,syy ⊢ dd,ev_n,cn,syy,ep1 
					0'*"\t" "§ " 2' "(" 1d' ") : " 3' "\n" // 
				##var_ln k0 ⊢ vk 
				##_set_q { tv ic vk } ⊢ { tv ic } 
				_inc an ⊢ an 
				slv_dt_def { { mmv mev ns_m il } { tav evv } an mtv al yx tv tv_n ns_t ev ev_n ns_e dl { dd ep0 ec0 } } ⊢ { { mmv mev ns_m il } { tav evv } an mtv al yx tv tv_n ns_t ev ev_n ns_e { dd ep0 ec0 } ac kl }  
				_dec an ⊢ an 
				_cns { k0 kl } ⊢ kl 
				$ ac ⊢ ac,ac0 
				$ an ⊢ an,an0 
				k_ctr { an0 ac0 } ⊢ k 
				add_e { tv_n tv evv ev ev_n ns_e cn k yy } ⊢ { tv_n tv evv ev ev_n ns_e } 
				_cns { ep1 ep0 } ⊢ ep0 
				∎ { { mmv mev ns_m il } { tav evv } an mtv al yx tv tv_n ns_t ev ev_n ns_e { dd ep0 ec0 } ac kl } 
			∐. _nil◂{} . 
				$ an ⊢ an,ac 
				_nil {} ⊢ kl 
				∎ { { mmv mev ns_m il } { tav evv } an mtv al yx tv tv_n ns_t ev ev_n ns_e { dd ep0 ec0 } ac kl }

		§ @.mk_asc_lst { tv_n tv ql } 
			$ ql ⊢ 
			∐ _cns◂{ i0 ql } . 
				mk_asc_lst { tv_n tv ql } ⊢ { tv_n tv ql al } 
				newvar_i { tv_n tv } ⊢ { tv_n tv i1 }
				$ i1 ⊢ i1,i11 
				_some i1 ⊢ o 
				_cns { { i0 o } al } ⊢ al 
				_cns { i11 ql } ⊢ ql 
				∎ { tv_n tv ql al }
			∐. _nil◂{} . 
				_nil {} ⊢ al 
				_nil {} ⊢ ql 
				∎ { tv_n tv ql al } 
		§ mk_t_aux_f { tv_n tv ql kl } 
			mk_asc_lst { tv_n tv ql } ⊢ { tv_n tv ql al } 
			» 1r _ ⊢ lv 
			inst_lst { tv_n tv lv kl al } ⊢ { tv_n tv lv kl al } 
			_dec lv ⊢ lv 
			gen_lst { tv_n tv lv kl } ⊢ { tv_n tv lv kl }
			∎ { tv_n tv ql kl }
		§§ slv_dt_clq 
			§ 
				@.f { q { mmv mev ev ns_m ns_e il } tav evv ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } }
					_nil {} ⊢ l0 
					_nil {} ⊢ l1
					_nil {} ⊢ l2 
					lp0 { q { l0 l1 l2 } { mmv mev ev ns_m ns_e il } tav tx_n mtv tv_n tv ns_t } ⊢ { { l0 l1 l2 } { mmv mev ev ns_m ns_e il } tav tx_n mtv tv_n tv ns_t }
					lp0_ln { { l1 l2 } { mmv mev ev ns_m ns_e il } ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } } ⊢ { { mmv mev ev ns_m ns_e il } ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } } 
					lp0_def { l0 { mmv mev ev ns_m ns_e il } tav evv ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } } ⊢ { { mmv mev ev ns_m ns_e il } tav evv ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } }
					∎ { { mmv mev ev ns_m ns_e il } tav evv ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } }
				@.lp0 { q { l0 l1 l2 } { mmv mev ev ns_m ns_e il } tav tx_n mtv tv_n tv ns_t } 
					##» "slv_dt_clq.lp0" _ ⊢ sec1 
					##_emt sec1 ⊢ sec1 
					$ q ⊢ 
					∐ _cns◂{ { w d } q } . 
						$ d ⊢ 
						∐ ast.dt_def◂{ as dl } .
							$ tx_n ⊢ tx_n,x 
							$ x ⊢ x,x0 
							$ w ⊢ w,w0 
							_inc tx_n ⊢ tx_n 
							slv_args_def { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t as x dl } ⊢ { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t al k yx dl ql } 
							add_t { tv_n tv ns_t w k } ⊢ { tv_n tv ns_t }
							_cns { { al yx dl x0 w0 ql } l0 } ⊢ l0 
							##_cns { { as dl
							 lp0 { q { l0 l1 l2 } { mmv mev ev ns_m ns_e il } tav tx_n mtv tv_n tv ns_t } ⊢| 
						∐. ast.dt_ln◂{ as y } . 
							##slv_args_ln { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t as y } ⊢ { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t al k } 
							##add_t { tv_n tv ns_t w k } ⊢ { tv_n tv ns_t } 
							$ tv_n ⊢ tv_n,t0
							_some t0 ⊢ o 
							$ w ⊢ w,w0 
							_cns { { w o } ns_t } ⊢ ns_t 
							$ tv_n ⊢ tv_n,t0 
							_cns { t0 l2 } ⊢ l2 
							$ tv_n ⊢ tv_n,t0 
							_inc tv_n ⊢ tv_n 
							_some { w0 as y } ⊢ o 
							_some o ⊢ o 
							_cns { { t0 o } l1 } ⊢ l1
							lp0 { q { l0 l1 l2 } { mmv mev ev ns_m ns_e il } tav tx_n mtv tv_n tv ns_t } ⊢| 
					∐. _nil◂{} .
						∎ { { l0 l1 l2 } { mmv mev ev ns_m ns_e il } tav tx_n mtv tv_n tv ns_t } 
				@.lp0_ln { { l1 l2 } { mmv mev ev ns_m ns_e il } ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } }  
					$ l2 ⊢ 
					∐ _cns◂{ i0 l2 } . 
						assoc { l1 i0 } ⊢ { l1 i0 o } 
						∐ o ⊢ _some◂o; o ⊢ _some◂{ w as y } . 
							_none {} ⊢ o 
							_some o ⊢ o 
							$ i0 ⊢ i0,i0_0 
							_cns { { i0_0 o } l1 } ⊢ l1 
							slv_args_ln { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t as y l1 } ⊢ { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t al k l1 } 
							_none {} ⊢ o 
							$ i0 ⊢ i0,i0_0 
							_cns { { i0_0 o } l1 } ⊢ l1 
							$ k ⊢ k,k0 
							var_ln k ⊢ v 
							pnt_type_k { tv k0 } ⊢ { tv sv } 
							» _^ dd,w,i0,sv ⊢ dd,w,i0,sv,ep1 
								0'*"\t" "¶ " 1' "(" 2d' ") ~ " 3' // 
							_cns { ep1 ep0 } ⊢ ep0 
							_set_q { tv i0 v } ⊢ { tv i0 }
							lp0_ln { { l1 l2 } { mmv mev ev ns_m ns_e il } ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } } ⊢|
						∐ o ⊢ _some◂o; o ⊢ _none◂{} . 
							» "lp0_ln 0" _ ⊢ se 
							_emt se ⊢ se 
							∎|	  
						∐. .
							lp0_ln { { l1 l2 } { mmv mev ev ns_m ns_e il } ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } } ⊢|
					∐. _nil◂{} . 
						∎ { { mmv mev ev ns_m ns_e il } ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } } 
				@.lp0_def { l0 { mmv mev ev ns_m ns_e il } tav evv ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } } 
					$ l0 ⊢ 
					∐ _cns◂{ { al yx dl x w ql } l0 } . 
						» 0r _ ⊢ an 
						slv_dt_def { { mmv mev ns_m il } { tav evv } an mtv al yx tv tv_n ns_t ev ev_n ns_e dl { dd ep0 ec0 } } ⊢ { { mmv mev ns_m il } { tav evv } an mtv al yx tv tv_n ns_t ev ev_n ns_e { dd ep0 ec0 } ac kl }
						mk_t_aux_f { tv_n tv ql kl } ⊢ { tv_n tv ql kl }
						$ kl ⊢ kl,kl0 
						» 0r _ ⊢ pv_n 
						_nil {} ⊢ alp 
						alc_type_k.hp_lst { pv_n alp tav tv_n tv kl0 } ⊢ { pv_n alp tav tv_n tv hl }
						$ ql ⊢ ql,ql0 
						subst_lst { ql0 alp } ⊢ { ql0 alp } 
						_some { ql kl ql0 hl } ⊢ o 						
						_set_q { tav x { w o } } ⊢ { tav x } 
						lp0_def { l0 { mmv mev ev ns_m ns_e il } tav evv ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } } ⊢| 
					∐. _nil◂{} .
						∎ { { mmv mev ev ns_m ns_e il } tav evv ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } }	
			∎∎
		§ rtr_dst_ptn { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t y td } 
			∐ td ⊢ _some◂td . 
				_nil {} ⊢ l2 
				_nil {} ⊢ al 
				slv_type { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t al td l2 } ⊢ { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t al kd l2 } 
				unify.f { tv y kd } ⊢ tv
				∎ { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t }
			∐. . 
				∎ { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t }
		§ mk_prs { yt i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
			» 0r _ ⊢ pv_n 
			_nil {} ⊢ al 
			alc_type_k.hp { pv_n al tav tv_n tv yt } ⊢ { pv_n al tav tv_n tv h } 
			stt_v.opq {} ⊢ q0 
			stt_v.ref q0 ⊢ h0 
			stt_v.r64 {} ⊢ h1 
			$ h0 ⊢ h0,h2 
			$ h1 ⊢ h1,h3 
			» 0r _ ⊢ r0 
			» 1r _ ⊢ r1 
			» 2r _ ⊢ r2 
			stt_v.hp { r0 h0 } ⊢ a0
			RP.atm a0 ⊢ a0 
			stt_v.hp { r1 h1 } ⊢ a1  
			RP.atm a1 ⊢ a1 
			_nil {} ⊢ l0 
			_cns { a1 l0 } ⊢ l0 
			_cns { a0 l0 } ⊢ l0 
			RP.rcd l0 ⊢ sp0 
			» 0r _ ⊢ r0 
			» 1r _ ⊢ r1 
			stt_v.hp { r0 h2 } ⊢ a0
			RP.atm a0 ⊢ a0 
			stt_v.hp { r1 h3 } ⊢ a1 
			RP.atm a1 ⊢ a1 
			stt_v.hp { r2 h } ⊢ a2
			RP.atm a2 ⊢ a2  
			_nil {} ⊢ l0 
			_cns { a2 l0 } ⊢ l0 
			_cns { a1 l0 } ⊢ l0 
			_cns { a0 l0 } ⊢ l0 		
			RP.rcd l0 ⊢ dp0 
			» 0r _ ⊢ rsp_s 
			» 0r _ ⊢ rsp_d 
			k_op { rsp_s sp0 rsp_d dp0 } ⊢ k 
			∎ { k i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }

		§ add_grm { { w yt k } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
			$ mv_n ⊢ mv_n,mv_n_0 
			_inc mv_n ⊢ mv_n  
			_nil {} ⊢ ns_m_g 
			_nil {} ⊢ ns_e_g 
			_nil {} ⊢ ns_t_g
			$ yt ⊢ yt,yt0 
			» "t" _ ⊢ tn0 
			» "prs" _ ⊢ e0 
			t_axm.s8 {} ⊢ y0 
			t_axm.r64 {} ⊢ y1 
			$ y0 ⊢ y0,y2 
			$ y1 ⊢ y1,y3 
			_nil {} ⊢ l0 
			_cns { yt0 l0 } ⊢ l0 
			_cns { y3 l0 } ⊢ l0 
			_cns { y2 l0 } ⊢ l0 
			RP.rcd l0 ⊢ yd 
			_nil {} ⊢ l0
			_cns { y1 l0 } ⊢ l0 
			_cns { y0 l0 } ⊢ l0 
			RP.rcd l0 ⊢ ys  
			imp { ys yd } ⊢ yp 
			RP.atm yp ⊢ yp 
			$ yt ⊢ yt,yt0 
			add_t { tv_n tv ns_t_g tn0 yt0 } ⊢ { tv_n tv ns_t_g }			
			$ ev_n ⊢ ev_n,en 
			add_e { tv_n tv evv ev ev_n ns_e_g e0 k yp } ⊢ { tv_n tv evv ev ev_n ns_e_g }
			_set_q { mmv mv_n_0 ns_m_g } ⊢ { mmv mv_n_0 }
			_set_q { mev mv_n_0 ns_e_g } ⊢ { mev mv_n_0 }
			_set_q { mtv mv_n_0 ns_t_g } ⊢ { mtv mv_n_0 }				
			_some mv_n_0 ⊢ o 
			_cns { { w o } ns_m } ⊢ ns_m 
			∎ { i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
		§§ slv_grm 
			§ act_regs {} 
				t_axm.r64 {} ⊢ y0 
				t_axm.r64 {} ⊢ y1 
				_nil {} ⊢ l0 
				_cns { y0 l0 } ⊢ l0 
				_cns { y1 l0 } ⊢ l0 
				∎ l0
			§
				@.grm_rle { { il mmv mev mtv ns_m } gr }  
					$ gr ⊢ 
					∐ ast.grm.ptn_cut◂gc . 
						grm_rle_cut { { il mmv mev mtv ns_m } gc } ⊢ { { il mmv mev mtv ns_m } gc yl } 
						ast.grm.ptn_cut gc ⊢ gr 
						∎ { { il mmv mev mtv ns_m } gr yl }
					∐ ast.grm.ptn_seq◂{ gp gr } .
						grm_ptn { { il mmv mev mtv ns_m } gp } ⊢ { { il mmv mev mtv ns_m } gp y } 
						grm_rle { { il mmv mev mtv ns_m } gr } ⊢ { { il mmv mev mtv ns_m } gr yl }
						_cns { y yl } ⊢ yl 
						ast.grm.ptn_seq { gp gr } ⊢ gr
						∎ { { il mmv mev mtv ns_m } gr yl }   
					∐. ast.grm.ptn_end◂{} . 
						ast.grm.ptn_end {} ⊢ gr 
						_nil {} ⊢ yl 
						∎ { { il mmv mev mtv ns_m } gr yl }
				@.grm_rle_cut { { il mmv mev mtv ns_m } gc } 
					$ gc ⊢ 
					∐ _cns◂{ gp gc } .
						grm_ptn { { il mmv mev mtv ns_m } gp } ⊢ { { il mmv mev mtv ns_m } gp y } 
						grm_rle_cut { { il mmv mev mtv ns_m } gc } ⊢ { { il mmv mev mtv ns_m } gc yl }
						_cns { y yl } ⊢ yl 
						_cns { gp gc } ⊢ gc 
						∎ { { il mmv mev mtv ns_m } gc yl } 
					∐. _nil◂{} . 
						_nil {} ⊢ gc 
						_nil {} ⊢ yl 
						∎ { { il mmv mev mtv ns_m } gc yl }
				@.grm_ptn { { il mmv mev mtv ns_m } gp }  
					$ gp ⊢ 
					∐ ast.grm.lst◂ga . 
						grm_atm { { il mmv mev mtv ns_m } ga } ⊢ { { il mmv mev mtv ns_m } ga y } 
						t_axm.lst y ⊢ y 
						ast.grm.lst ga ⊢ gp 
						∎ { { il mmv mev mtv ns_m } gp y }
					∐. ast.grm.atm◂ga . 
						grm_atm { { il mmv mev mtv ns_m } ga } ⊢ { { il mmv mev mtv ns_m } ga y } 
						ast.grm.atm ga ⊢ gp 
						∎ { { il mmv mev mtv ns_m } gp y }
				@.grm_atm { { il mmv mev mtv ns_m } ga }  
					$ ga ⊢ 
					∐ ast.grm.name◂en . 
						slv_ns_m { en mmv ns_m il } ⊢ { mmv ns_m il i_m } 
						_lod_q { mev i_m } ⊢ { mev i_m ns_e_g }
						_lod_q { mtv i_m } ⊢ { mtv i_m ns_t_g }
						» "t" _ ⊢ nt0 
						» "prs" _ ⊢ ne0 
						assoc { ns_e_g ne0 } ⊢ { ns_e_g ne0 oe } 
						assoc { ns_t_g nt0 } ⊢ { ns_t_g nt0 ot } 
						∐ oe ⊢ _some◂ve; ot ⊢ _some◂vt . 
							ast.grm.name ve ⊢ ga 
							var vt ⊢ y 
							RP.atm y ⊢ y 
							∎ { { il mmv mev mtv ns_m } ga y }
						∐. . 
							∎| 			
					∐. ast.grm.s8◂s . 
						t_axm.unt {} ⊢ y 
						ast.grm.s8 s ⊢ ga 
						∎ { { il mmv mev mtv ns_m } ga y }
			§ 
				@.f { g i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
					##» "slv_grm d0\n" _ ⊢ ee0 
					##_emt ee0 ⊢ _ 
					lp0 { g i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } ⊢ { g i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
 					» 1r _ ⊢ lv 
					##	» "slv_grm d1\n" _ ⊢ ee0 
					##_emt ee0 ⊢ _ 
					lp1 { lv g i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } ⊢ { lv g i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
					##	» "slv_grm d2\n" _ ⊢ ee0 
					##_emt ee0 ⊢ _ 
					lp2 { g i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } ⊢ { g i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
					##	» "slv_grm d3\n" _ ⊢ ee0 
					##_emt ee0 ⊢ _ 
					lp3 { g i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } ⊢ { g i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
					##	» "slv_grm d4\n" _ ⊢ ee0 
					##_emt ee0 ⊢ _ 
					∎ { g i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
				@.lp0 { g i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
					$ g ⊢ 
					∐ _cns◂{ { w e } g } . 
						$ mv_n ⊢ mv_n,mv_n_0 
						_inc mv_n ⊢ mv_n  
						_nil {} ⊢ ns_m_g 
						_nil {} ⊢ ns_e_g 
						_nil {} ⊢ ns_t_g
						» 1r _ ⊢ lv0 
						newvar_l { tv_n tv lv0 } ⊢ { tv_n tv lv0 yt }
						$ yt ⊢ yt,yt0 
						t_axm.opn yt0 ⊢ yt0 
						» "t" _ ⊢ tn0 
						» "prs" _ ⊢ e0 
						t_axm.s8 {} ⊢ y0 
						t_axm.r64 {} ⊢ y1 
						$ y0 ⊢ y0,y2 
						$ y1 ⊢ y1,y3 
						_nil {} ⊢ l0 
						_cns { yt0 l0 } ⊢ l0 
						_cns { y3 l0 } ⊢ l0 
						_cns { y2 l0 } ⊢ l0 
						RP.rcd l0 ⊢ yd 
						_nil {} ⊢ l0
						_cns { y1 l0 } ⊢ l0 
						_cns { y0 l0 } ⊢ l0 
						RP.rcd l0 ⊢ ys  
						imp { ys yd } ⊢ yp 
						RP.atm yp ⊢ yp 
						$ yt ⊢ yt,yt0 
						add_t { tv_n tv ns_t_g tn0 yt0 } ⊢ { tv_n tv ns_t_g }
						» 0r _ ⊢ ka0 
						k_op_axm ka0 ⊢ k 
						$ ev_n ⊢ ev_n,en 
						add_e { tv_n tv evv ev ev_n ns_e_g e0 k yp } ⊢ { tv_n tv evv ev ev_n ns_e_g }
						_set_q { mmv mv_n_0 ns_m_g } ⊢ { mmv mv_n_0 }
						_set_q { mev mv_n_0 ns_e_g } ⊢ { mev mv_n_0 }
						_set_q { mtv mv_n_0 ns_t_g } ⊢ { mtv mv_n_0 }				
						_some mv_n_0 ⊢ o 
						_cns { { w o } ns_m } ⊢ ns_m 
						lp0 { g i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } ⊢ { g i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } 
						_cns { { en yt e } g } ⊢ g 
						∎ { g i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
					∐. _nil◂{} . 
						_nil {} ⊢ g
						∎ { g i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
				@.lp1 { lv g i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
					$ g ⊢ 
					∐ _cns◂{ { en yt e } g } . 
						∐ e ⊢ ast.grm.act◂ga . 
							lp1_act { { lv yt ga } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } ⊢ { { lv yt ga } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
							ast.grm.act ga ⊢ e 
							lp1 { lv g i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } ⊢ { lv g i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }							
							_cns { { en yt e } g } ⊢ g 
							∎ { lv g i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
						∐. . 
							lp1 { lv g i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } ⊢ { lv g i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
							##_cns { { en yt e } g } ⊢ g 
							∎ { lv g i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
					∐. _nil◂{} . 
						_nil {} ⊢ g 
						∎ { lv g i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
				@.lp1_act { { lv yt ga } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
					_nil {} ⊢ re 
					$ ga ⊢ 
					∐ ast.grm.act_cns◂{ drl dp lc rf gr go ga } . 
						grm_rle { { il mmv mev mtv ns_m } gr } ⊢ { { il mmv mev mtv ns_m } gr yl }  
						RP.rcd yl ⊢ yd 
						_inc lv ⊢ lv 
						inst { tv_n tv lv yd } ⊢ { tv_n tv lv yd } 
						crt_dst_ptn { lv rv tv tv_n rv_n re dp } ⊢ { lv rv tv tv_n rv_n re dp y0 } 
						$ yd ⊢ yd,yd0 
						unify.f { tv yd0 y0 } ⊢ tv 
						crt_dst_lst { lv rv tv tv_n rv_n re drl } ⊢ { lv rv tv tv_n rv_n re drl yrl }
						act_regs {} ⊢ yal 
						unify.f_lst { tv yal yrl } ⊢ tv 
						_dec lv ⊢ lv 
						gen { tv_n tv lv yd } ⊢ { tv_n tv lv yd } 
						$ go ⊢ 
						∐ _some◂{ dpr gar } . 
							_inc lv ⊢ lv 
							newvar_l { tv_n tv lv } ⊢ { tv_n tv lv ytr }
							lp1_act { { lv ytr gar } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } ⊢ { { lv ytr gar } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
							crt_dst_ptn { lv rv tv tv_n rv_n re dpr } ⊢ { lv rv tv tv_n rv_n re dpr y0 } 
							$ ytr ⊢ ytr,ytr0
							unify.f { tv ytr0 y0 } ⊢ tv 
							_dec lv ⊢ lv 
							gen { tv_n tv lv ytr } ⊢ { tv_n tv lv ytr } 
							slv_r { lv { mmv mev ev ns_m ns_e il } rv tv tv_n rv_n re lc } ⊢ { lv { mmv mev ev ns_m ns_e il } rv tv tv_n rv_n re lc yr }  
							$ yt ⊢ yt,yt0 
							t_axm.opn yt0 ⊢ yt0 
							_inc lv ⊢ lv 
							inst { tv_n tv lv yr } ⊢ { tv_n tv lv yr }
							$ yr ⊢ yr,yr0 
							unify.f { tv yt0 yr0 } ⊢ tv  
							_dec lv ⊢ lv 
							gen { tv_n tv lv yr } ⊢ { tv_n tv lv yr }
							lp1_act { { lv yt ga } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } ⊢ { { lv yt ga } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
							_some { dpr gar } ⊢ go 
							ast.grm.act_cns { drl dp lc rf gr go ga } ⊢ ga 
							∎ { { lv yt ga } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
						∐. _none◂{} . 
							slv_r { lv { mmv mev ev ns_m ns_e il } rv tv tv_n rv_n re lc } ⊢ { lv { mmv mev ev ns_m ns_e il } rv tv tv_n rv_n re lc yr } 						
							$ yt ⊢ yt,yt0 
							t_axm.opn yt0 ⊢ yt0 
							_inc lv ⊢ lv 
							inst { tv_n tv lv yr } ⊢ { tv_n tv lv yr }
							$ yr ⊢ yr,yr0 
							unify.f { tv yt0 yr0 } ⊢ tv  
							_dec lv ⊢ lv 
							gen { tv_n tv lv yr } ⊢ { tv_n tv lv yr }
							lp1_act { { lv yt ga } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } ⊢ { { lv yt ga } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
							_none {} ⊢ go 
							ast.grm.act_cns { drl dp lc rf gr go ga } ⊢ ga 
							∎ { { lv yt ga } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }						
					∐. ast.grm.act_end◂{ drl dp lc rf gr go } .
						grm_rle { { il mmv mev mtv ns_m } gr } ⊢ { { il mmv mev mtv ns_m } gr yl }  
						RP.rcd yl ⊢ yd 
						_inc lv ⊢ lv 
						inst { tv_n tv lv yd } ⊢ { tv_n tv lv yd } 
						crt_dst_ptn { lv rv tv tv_n rv_n re dp } ⊢ { lv rv tv tv_n rv_n re dp y0 } 
						$ yd ⊢ yd,yd0 
						unify.f { tv yd0 y0 } ⊢ tv 
						_dec lv ⊢ lv 
						gen { tv_n tv lv yd } ⊢ { tv_n tv lv yd } 
						_inc lv ⊢ lv 
						crt_dst_lst { lv rv tv tv_n rv_n re drl } ⊢ { lv rv tv tv_n rv_n re drl yrl }
						act_regs {} ⊢ yal 
						$ yrl ⊢ yrl,yrl0 
						unify.f_lst { tv yal yrl0 } ⊢ tv 
						_dec lv ⊢ lv 
						gen_lst { tv_n tv lv yrl } ⊢ { tv_n tv lv yrl } 
						$ go ⊢ 
						∐ _some◂{ dpr gar } . 
							_inc lv ⊢ lv 
							newvar_l { tv_n tv lv } ⊢ { tv_n tv lv ytr }
							lp1_act { { lv ytr gar } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } ⊢ { { lv ytr gar } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
							crt_dst_ptn { lv rv tv tv_n rv_n re dpr } ⊢ { lv rv tv tv_n rv_n re dpr y0 } 
							$ ytr ⊢ ytr,ytr0 
							unify.f { tv ytr0 y0 } ⊢ tv 
							_dec lv ⊢ lv 
							gen { tv_n tv lv ytr } ⊢ { tv_n tv lv ytr } 
							slv_r { lv { mmv mev ev ns_m ns_e il } rv tv tv_n rv_n re lc } ⊢ { lv { mmv mev ev ns_m ns_e il } rv tv tv_n rv_n re lc yr }  
							$ yt ⊢ yt,yt0 
							t_axm.opn yt0 ⊢ yt0 
							_inc lv ⊢ lv 
							inst { tv_n tv lv yr } ⊢ { tv_n tv lv yr }
							$ yr ⊢ yr,yr0 
							unify.f { tv yt0 yr0 } ⊢ tv  
							_dec lv ⊢ lv 
							gen { tv_n tv lv yr } ⊢ { tv_n tv lv yr }
							_some { dpr gar } ⊢ go 
							ast.grm.act_end { drl dp lc rf gr go } ⊢ ga 
							∎ { { lv yt ga } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
						∐. _none◂{} . 
							slv_r { lv { mmv mev ev ns_m ns_e il } rv tv tv_n rv_n re lc } ⊢ { lv { mmv mev ev ns_m ns_e il } rv tv tv_n rv_n re lc yr } 						
							$ yt ⊢ yt,yt0 
							t_axm.opn yt0 ⊢ yt0 
							_inc lv ⊢ lv 
							inst { tv_n tv lv yr } ⊢ { tv_n tv lv yr }
							$ yr ⊢ yr,yr0 
							unify.f { tv yt0 yr0 } ⊢ tv  
							_dec lv ⊢ lv 
							gen { tv_n tv lv yr } ⊢ { tv_n tv lv yr }
							_none {} ⊢ go 
							ast.grm.act_end { drl dp lc rf gr go } ⊢ ga 
							∎ { { lv yt ga } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }						
				@.lp2 { g i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
					$ g ⊢ 
					∐ _cns◂{ { en yt e } g } . 
						» 0r _ ⊢ lv 
						gen { tv_n tv lv yt } ⊢ { tv_n tv lv yt } 
						lp2 { g i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } ⊢ { g i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }							
						_cns { { en yt e } g } ⊢ g 
						∎ { g i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
					∐. _nil◂{} . 
						_nil {} ⊢ g 
						∎ { g i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
				@.lp3 { g i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
					$ g ⊢ 
					∐ _cns◂{ { en yt e } g } . 
						» 0r _ ⊢ pv_n 
						_nil {} ⊢ al 
						t_axm.opn yt ⊢ yt 
						alc_type_k.hp { pv_n al tav tv_n tv yt } ⊢ { pv_n al tav tv_n tv h } 
						stt_v.opq {} ⊢ q0 
						stt_v.ref q0 ⊢ h0 
						stt_v.r64 {} ⊢ h1 
						$ h0 ⊢ h0,h2 
						$ h1 ⊢ h1,h3 
						» 0r _ ⊢ r0 
						» 1r _ ⊢ r1 
						» 2r _ ⊢ r2 
						stt_v.hp { r0 h0 } ⊢ a0
						RP.atm a0 ⊢ a0 
						stt_v.hp { r1 h1 } ⊢ a1  
						RP.atm a1 ⊢ a1 
						_nil {} ⊢ l0 
						_cns { a1 l0 } ⊢ l0 
						_cns { a0 l0 } ⊢ l0 
						RP.rcd l0 ⊢ sp0 
						» 0r _ ⊢ r0 
						» 1r _ ⊢ r1 
						stt_v.hp { r0 h2 } ⊢ a0
						RP.atm a0 ⊢ a0 
						stt_v.hp { r1 h3 } ⊢ a1 
						RP.atm a1 ⊢ a1 
						stt_v.hp { r2 h } ⊢ a2
						RP.atm a2 ⊢ a2  
						_nil {} ⊢ l0 
						_cns { a2 l0 } ⊢ l0 
						_cns { a1 l0 } ⊢ l0 
						_cns { a0 l0 } ⊢ l0 
						RP.rcd l0 ⊢ dp0 
						» 0r _ ⊢ rsp_s 
						» 0r _ ⊢ rsp_d 
						k_op { rsp_s sp0 rsp_d dp0 } ⊢ k0 
						exc_q { evv en k0 } ⊢ { evv en k0 }
						lp3 { g i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } ⊢ { g i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }							
						_cns { { en e } g } ⊢ g 
						∎ { g i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
					∐. _nil◂{} . 
						_nil {} ⊢ g 
						∎ { g i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
			∎∎ 
		§§ emt_grm  
			§ act_regs {} 
				_nil {} ⊢ l0 
				stt_v.r64 {} ⊢ h0 
				» 1r _ ⊢ r0 
				stt_v.hp { r0 h0 } ⊢ a0 
				RP.atm a0 ⊢ p0 
				_cns { p0 l0 } ⊢ l0 
				stt_v.r64 {} ⊢ h0 
				» 0r _ ⊢ r0 
				stt_v.hp { r0 h0 } ⊢ a0 
				RP.atm a0 ⊢ p0 
				_cns { p0 l0 } ⊢ l0
				∎ l0  
			§ 
				@.rf { lb_n rf } 
					$ rf ⊢ 
					∐ ast.grm.lex◂{} .
						» "" _ ⊢ e 
						∎ { lb_n e }   
					∐ ast.grm.synt◂{} . 
						$ lb_n ⊢ lb_n,lb0 
						_inc lb_n ⊢ lb_n
						$ lb_n ⊢ lb_n,lb1 
						_inc lb_n ⊢ lb_n
						$ lb_n ⊢ lb_n,lb2 
						_inc lb_n ⊢ lb_n 
						» _^ lb0,lb1,lb2 ⊢ lb0,lb1,lb2,s0 
							"\tjmp LB_" 1d' "\n" 
							"LB_" 0d' ":\n" 
							`	add r14,1 
							"LB_" 1d' ":\n" 
							`	cmp r14,r9
							"\tjge LB_" 2d' "\n" 
							`	movzx rax,BYTE [r13+8+r14]
							`	cmp rax,9 
							"\tjz LB_" 0d' "\n" 
							`	cmp rax,10 
							"\tjz LB_" 0d' "\n" 
							`	cmp rax,32 
							"\tjz LB_" 0d' "\n"
							"LB_" 2d' "\n" // 
						∎ { lb_n s0 }
					∐. ast.grm.line◂{} . 
						$ lb_n ⊢ lb_n,lb0 
						_inc lb_n ⊢ lb_n
						$ lb_n ⊢ lb_n,lb1 
						_inc lb_n ⊢ lb_n
						$ lb_n ⊢ lb_n,lb2 
						_inc lb_n ⊢ lb_n
						» _^ lb0,lb1,lb2 ⊢ lb0,lb1,lb2,s0 
							"\tjmp LB_" 1d' "\n" 
							"LB_" 0d' ":\n" 
							`	add r14,1 
							"LB_" 1d' ":\n" 
							`	cmp r14,r9
							"\tjge LB_" 2d' "\n" 
							`	movzx rax,BYTE [r13+8+r14]
							`	cmp rax,9 
							"\tjz LB_" 0d' "\n" 
							`	cmp rax,32 
							"\tjz LB_" 0d' "\n"
							"LB_" 2d' "\n" // 
						∎ { lb_n s0 }
				@.rle { ret hl tav vs0 rsp_g e0 lb0 i0 evv lb_n rf gr }  
					$ gr ⊢ 
					∐ ast.grm.ptn_cut◂gc . 
						rle_cut { ret hl tav vs0 rsp_g e0 i0 evv lb_n rf gc } ⊢|
					∐ ast.grm.ptn_seq◂{ gp gr } .
						$ rf ⊢ rf,rf0 
						rf { lb_n rf0 } ⊢ { lb_n srf } 
						rp8.add_s8 { e0 srf } ⊢ e0 
						$ lb_n ⊢ lb_n,lb1 
						_inc lb_n ⊢ lb_n 
						$ lb_n ⊢ lb_n,lb2 
						_inc lb_n ⊢ lb_n 
						$ lb1 ⊢ lb1,olb1 
						_some olb1 ⊢ olb1 
						$ rsp_g ⊢ rsp_g,rsp_g0
						ptn { tav vs0 rsp_g e0 olb1 i0 evv lb_n gp } ⊢ { h tav vs0 rsp_g e0 olb1 i0 evv lb_n } 
						» _^ lb1,lb2 ⊢ lb1,lb2,s0 
							"\tjmp LB_" 1d' "\n" 
							"LB_" 0d' ":\n" // 
						rp8.add_s8 { e0 s0 } ⊢ e0  
						rb_rle { rsp_g0 hl e0 } ⊢ { rsp_g0 hl e0 } 
						$ lb0 ⊢ lb0,lb00 
						emt.ret lb00 ⊢ ret0 
						rp8.add_s8 { e0 ret0 } ⊢ e0 
						» _^ lb2 ⊢ lb2,s0 
							"LB_" 0d' ":\n" // 
						rp8.add_s8 { e0 s0 } ⊢ e0 
						_cns { h hl } ⊢ hl 
						_inc i0 ⊢ i0 
						rle { ret hl tav vs0 rsp_g e0 lb0 i0 evv lb_n rf gr } ⊢| 
					∐. ast.grm.ptn_end◂{} . 
						∎ { ret hl tav vs0 rsp_g e0 i0 evv lb_n }
				@.rle_cut { ret hl tav vs0 rsp_g e0 i0 evv lb_n rf gc } 
					$ gc ⊢ 
					∐ _cns◂{ gp gc } .
						$ rf ⊢ rf,rf0 
						rf { lb_n rf0 } ⊢ { lb_n srf } 
						rp8.add_s8 { e0 srf } ⊢ e0 
						$ lb_n ⊢ lb_n,lb1 
						_inc lb_n ⊢ lb_n 
						$ lb_n ⊢ lb_n,lb2 
						_inc lb_n ⊢ lb_n 
						$ lb1 ⊢ lb1,olb1 
						_some olb1 ⊢ olb1 
						$ rsp_g ⊢ rsp_g,rsp_g0
						ptn { tav vs0 rsp_g e0 olb1 i0 evv lb_n gp } ⊢ { h tav vs0 rsp_g e0 olb1 i0 evv lb_n } 
						» _^ lb1,lb2 ⊢ lb1,lb2,s0 
							"\tjmp LB_" 1d' "\n" 
							"LB_" 0d' ":\n" // 
						rp8.add_s8 { e0 s0 } ⊢ e0  
						rb_rle { rsp_g0 hl e0 } ⊢ { rsp_g0 hl e0 } 
						» _^ lb2,ret ⊢ lb2,ret,s0 
							`	pop rdi
							`	pop r9 
							`	pop r14
							`	pop r13
							1'
							"LB_" 0d' ":\n" // 
						rp8.add_s8 { e0 s0 } ⊢ e0 
						_cns { h hl } ⊢ hl 
						rle_cut { ret hl tav vs0 rsp_g e0 i0 evv lb_n rf gc } ⊢| 
					∐. _nil◂{} . 
						∎ { ret hl tav vs0 rsp_g e0 i0 evv lb_n }
				@.rb_rle { rsp_g hl e0 } 
					» _^ rsp_g ⊢ rsp_g,s0 
						"\tlea rsp,[rsp+8*" 0d' "]\n" // 
					rp8.add_s8 { e0 s0 } ⊢ e0 
					∎ { rsp_g hl e0 } 
				@.ptn { tav vs0 rsp_g e0 lb0 i0 evv lb_n gp }  
					$ gp ⊢ 
					∐ ast.grm.lst◂ga . 
						$ ga ⊢ 
						∐ ast.grm.name◂en . 
							_lod_q { evv en } ⊢ { evv en k } 
							∐ k ⊢ k_op_axm◂ax0 . 
								∐ ax0'=e_axm.byt . 
									stt_v.r64 {} ⊢ h 
									$ i0 ⊢ i0,i00 
									» emt.REG_N _ ⊢ rbp0 
									_add { rbp0 rsp_g } ⊢ { rbp0 rsp_g }
									_inc rsp_g ⊢ rsp_g 
									stt_v.hp { rbp0 h } ⊢ a0 
									RP.atm a0 ⊢ a0 
									∐ lb0 ⊢ _some◂lb0 . 
										» _^ lb0 ⊢ lb0,s0 
											"\tlea rax,[r14+1]\n"
											"\tcmp rax,r9\n"
											"\tjge LB_" 0d' "\n" 
											`	movzx rdi,BYTE [r13+8+r14]
											`	push rdi 
											//
										_some lb0 ⊢ lb0
										rp8.add_s8 { e0 s0 } ⊢ e0 
										∎ { a0 tav vs0 rsp_g e0 lb0 i0 evv lb_n }
									∐. . 
										$ lb_n ⊢ lb_n,lb1 
										_inc lb_n ⊢ lb_n
										» _^ lb1 ⊢ lb1,s0 
											"\tlea rax,[r14+1]\n"
											"\tcmp rax,r9\n"
											"\tjl LB_" 0d' "\n"
											`	ret 
											"LB_" 0d' ":\n"  
											`	movzx rdi,BYTE [r13+8+r14]
											`	push rdi 
											//
										rp8.add_s8 { e0 s0 } ⊢ e0 
										∎ { a0 tav vs0 rsp_g e0 lb0 i0 evv lb_n }
								∐ ax0'=e_axm.scf_d . 
									stt_v.r64 {} ⊢ h 
									$ i0 ⊢ i0,i00 
									» emt.REG_N _ ⊢ rbp0 
									_add { rbp0 rsp_g } ⊢ { rbp0 rsp_g }
									_inc rsp_g ⊢ rsp_g 
									stt_v.hp { rbp0 h } ⊢ a0 
									RP.atm a0 ⊢ a0 
									∐ lb0 ⊢ _some◂lb0 . 
										» _^ lb0 ⊢ lb0,s0 
											"\tlea rax,[r14+1]\n"
											"\tcmp rax,r9\n"
											"\tjge LB_" 0d' "\n"
											emt.push_c_regs 
											` lea rdi,[r13+8+r14] 
											`	call scf_d
											emt.pop_c_regs 
											`	cmp rax,0 
											"\tjz LB_" 0d' "\n" 
											`	add r14,rsi
											`	push rdi 
											//
										_some lb0 ⊢ lb0
										rp8.add_s8 { e0 s0 } ⊢ e0 
										∎ { a0 tav vs0 rsp_g e0 lb0 i0 evv lb_n }
									∐. . 
										$ lb_n ⊢ lb_n,lb1 
										_inc lb_n ⊢ lb_n
										$ lb_n ⊢ lb_n,lb2 
										_inc lb_n ⊢ lb_n
										» _^ lb1,lb2 ⊢ lb1,lb2,s0 
											"\tlea rax,[r14+1]\n"
											"\tcmp rax,r9\n"
											"\tjl LB_" 0d' "\n"
											`	ret 
											"LB_" 0d' ":\n"  
											emt.push_c_regs 
											` lea rdi,[r13+8+r14] 
											`	call scf_d
											emt.pop_c_regs 
											`	cmp rax,1 
											"\tjz LB_" 0d' "\n"
											`	ret 
											"LB_" 1d' ":\n"  
											`	add r14,rsi
											`	push rdi 
											//
										rp8.add_s8 { e0 s0 } ⊢ e0 
										∎ { a0 tav vs0 rsp_g e0 lb0 i0 evv lb_n }
								∐. . 
									» "emt_grm 0" _ ⊢ ee0 
									_emt ee0 ⊢ ee0
									∎| 	 
							∐ k ⊢ k_op◂{ rsp_s ip0 rsp_d ip1 }; ip1 ⊢ RP.rcd◂l0; l0 ⊢ _cns◂{ pa0 l0 }; l0 ⊢ _cns◂{ pa1 l0 }; l0 ⊢ _cns◂{ pa2 l0 }; l0 ⊢ _nil◂{}; pa2 ⊢ RP.atm◂ah0; ah0 ⊢ stt_v.hp◂{ rh0 h0 } . 
								$ i0 ⊢ i0,i00 
								» emt.REG_N _ ⊢ r0 
								_add { r0 i00 } ⊢ { r0 i00 } 
								stt_v.hp { r0 h0 } ⊢ a0 
								RP.atm a0 ⊢ a0 
								» _^ en ⊢ en,s0 
									"\tcall GRM_" 0d' "\n"
									"\tpush r8\n" // 
								rp8.add_s8 { e0 s0 } ⊢ e0 
								∎ { a0 tav vs0 rsp_g e0 lb0 i0 evv lb_n }
							∐. . 
								» "emt_grm 1" _ ⊢ ee0 
									_emt ee0 ⊢ ee0
								∎| 			
						∐. ast.grm.s8◂s . 
							∐ lb0 ⊢ _some◂lb0 . 
								_s8_len s ⊢ { s ls } 
								» _^ ls,lb0 ⊢ ls,lb0,s0 
									"\tlea rax,[r14+" 0d' "]\n"
									"\tcmp rax,r9\n"
									"\tjge LB_" 1d' "\n"
									"\tlea rdi,[r13+8+r14]\n" // 
								rp8.add_s8 { e0 s0 } ⊢ e0  
								emt.cmp_s8.f { lb0 s } ⊢ { lb0 s e1 }
								» _^ ls ⊢ ls,s0 
									"\tadd r14," 0d' "\n"
									"\tpush unt_0\n" //
								rp8.add_s8 { e0 s0 } ⊢ e0 
								_nil {} ⊢ l0 
								stt_v.rcd l0 ⊢ q0 
								stt_v.ref q0 ⊢ h0 
								$ i0 ⊢ i0,i00 
								stt_v.hp { i00 h0 } ⊢ a0 
								RP.atm a0 ⊢ a0 
								_some lb0 ⊢ lb0
								∎ { a0 tav vs0 rsp_g e0 lb0 i0 evv lb_n } 
							∐. . 
								$ lb_n ⊢ lb_n,lb1 
								_inc lb_n ⊢ lb_n 
								$ lb_n ⊢ lb_n,lb2
								_inc lb_n ⊢ lb_n
								_s8_len s ⊢ { s ls } 
								» _^ ls,lb1 ⊢ ls,lb1,s0 
									"\tlea rax,[r14+" 0d' "]\n"
									"\tcmp rax,r9\n"
									"\tjge LB_" 1d' "\n"
									"\tlea rdi,[r13+8+r14]\n" // 
								rp8.add_s8 { e0 s0 } ⊢ e0  
								emt.cmp_s8.f { lb1 s } ⊢ { lb1 s e1 }
								» _^ ls,lb1,lb2 ⊢ ls,lb1,lb2,s0 
									"\tadd r14," 0d' "\n"
									"\tpush unt_0\n"
									"\tjmp LB_" 2d' "\n" 
									"LB_" 1d' "\n" 
									"\tret\n" 
									"LB_" 2d' "\n" //
								rp8.add_s8 { e0 s0 } ⊢ e0 
								_nil {} ⊢ l0 
								stt_v.rcd l0 ⊢ q0 
								stt_v.ref q0 ⊢ h0 
								$ i0 ⊢ i0,i00 
								stt_v.hp { i00 h0 } ⊢ a0 
								RP.atm a0 ⊢ a0 
								∎ { a0 tav vs0 rsp_g e0 lb0 i0 evv lb_n }
					∐. ast.grm.atm◂ga . 
						$ ga ⊢ 
						∐ ast.grm.name◂en . 
							_lod_q { evv en } ⊢ { evv en k } 
							∐ k ⊢ k_op_axm◂ax0 . 
								∐ ax0'=e_axm.byt . 
									$ lb0 ⊢ lb0,lb00 
									emt.ret lb00 ⊢ ret 
									$ lb_n ⊢ lb_n,lb1 
									_inc lb_n ⊢ lb_n 
									$ lb_n ⊢ lb_n,lb2 
									_inc lb_n ⊢ lb_n 
									» _^ ret,lb1,lb2 ⊢ ret,lb1,lb2,ec1 
										`	cmp r14,r9
										"\tjge LB_" 1d' "\n" 
										"\tjmp LB_" 2d' "\n" 
										"LB_" 1d' ":\n"
										`	mov r8,unt_1 
										0'
										"LB_" 2d' ":\n" 
										`	movzx rdi,BYTE [r13+8+r14]
										`	push rdi 
										`	add r14,1 
										//
									rp8.add_s8 { e0 ec1 } ⊢ e0 
									emt.mk_rbp rsp_g ⊢ { rsp_g rbp0 } 
									rset.set_t { vs0 rbp0 } ⊢ { vs0 rbp0 } 
									_inc rsp_g ⊢ rsp_g 			
									stt_v.r64_reg rbp0 ⊢ a0 			
									∎ { a0 tav vs0 rsp_g e0 lb0 i0 evv lb_n }
								∐ ax0'=e_axm.scf_d . 
									$ i0 ⊢ i0,i00 
									emt.mk_rbp rsp_g ⊢ { rsp_g rbp0 } 
									rset.set_t { vs0 rbp0 } ⊢ { vs0 rbp0 } 
									_inc rsp_g ⊢ rsp_g 
									stt_v.r64_reg rbp0 ⊢ a0 
									$ lb0 ⊢ lb0,lb00 
									emt.ret lb00 ⊢ ret0
									$ lb_n ⊢ lb_n,lbj0 
									_inc lb_n ⊢ lb_n 
									$ lb_n ⊢ lb_n,lbj1
									_inc lb_n ⊢ lb_n  
									» _^ ret0,lbj0,lbj1 ⊢ ret0,lbj0,lbj1,s0 
										`	cmp r14,r9
										"\tjge LB_" 1d' "\n"
										emt.push_c_regs 
										` lea rdi,[r13+8+r14] 
										`	call scf_d
										emt.pop_c_regs 
										`	cmp rax,0 
										"\tjz LB_" 1d' "\n" 
										`	add r14,rsi
										`	push rdi
										"\tjmp LB_" 2d' "\n"  
										"LB_" 1d' ":\n" 
										`	mov r8,unt_1
										0' 
										"LB_" 2d' ":\n" 
										//
									rp8.add_s8 { e0 s0 } ⊢ e0 
									∎ { a0 tav vs0 rsp_g e0 lb0 i0 evv lb_n }
								∐ ax0'=e_axm.scf_x . 
									$ i0 ⊢ i0,i00 
									emt.mk_rbp rsp_g ⊢ { rsp_g rbp0 } 
									rset.set_t { vs0 rbp0 } ⊢ { vs0 rbp0 } 
									_inc rsp_g ⊢ rsp_g 
									stt_v.r64_reg rbp0 ⊢ a0 
									$ lb0 ⊢ lb0,lb00 
									emt.ret lb00 ⊢ ret0
									$ lb_n ⊢ lb_n,lbj0 
									_inc lb_n ⊢ lb_n 
									$ lb_n ⊢ lb_n,lbj1
									_inc lb_n ⊢ lb_n  
									» _^ ret0,lbj0,lbj1 ⊢ ret0,lbj0,lbj1,s0 
										`	cmp r14,r9
										"\tjge LB_" 1d' "\n"
										emt.push_c_regs 
										` lea rdi,[r13+8+r14] 
										`	call scf_x
										emt.pop_c_regs 
										`	cmp rax,0 
										"\tjz LB_" 1d' "\n" 
										`	add r14,rsi
										`	push rdi
										"\tjmp LB_" 2d' "\n"  
										"LB_" 1d' ":\n" 
										`	mov r8,unt_1
										0' 
										"LB_" 2d' ":\n" 
										//
									rp8.add_s8 { e0 s0 } ⊢ e0 
									∎ { a0 tav vs0 rsp_g e0 lb0 i0 evv lb_n }
								∐. . 
									» "emt_grm 2" _ ⊢ ee0 
									_emt ee0 ⊢ ee0
									∎| 	 
							∐ k ⊢ k_op◂{ rsp_s ip0 rsp_d ip1 } . 
								∐ ip1 ⊢ RP.rcd◂l0; l0 ⊢ _cns◂{ pa0 l0 }; l0 ⊢ _cns◂{ pa1 l0 }; l0 ⊢ _cns◂{ pa2 l0 }; l0 ⊢ _nil◂{}; pa2 ⊢ RP.atm◂ah0; ah0 ⊢ stt_v.hp◂{ rh0 h0 }; h0 ⊢ stt_v.adt◂{ ax0 ql0 } . 
									_lod_q { tav ax0 } ⊢ { tav ax0 { aw o0 } } 
									∐ o0 ⊢ _some◂{ vl0 kl0 pvl0 ipl0 } . 
										$ lb0 ⊢ lb0,lb00 
										emt.ret lb00 ⊢ ret 
										$ lb_n ⊢ lb_n,lb1 
										_inc lb_n ⊢ lb_n 
										$ lb_n ⊢ lb_n,lb2 
										_inc lb_n ⊢ lb_n 
										» _^ en,ret,lb1,lb2 ⊢ en,ret,lb1,lb2,ec1 
											"\tcall GRM_" 0d' "\n" 
											"\tmovzx rax,BYTE [r8+6]\n" 
											"\tcmp rax,0\n" 
											"\tjnz LB_" 2d' "\n" 
											"\tjmp LB_" 3d' "\n" 
											"LB_" 2d' ":\n"
											1' 
											"LB_" 3d' ":\n" 
											//
										rp8.add_s8 { e0 ec1 } ⊢ e0 
										mk_adt.f { ql0 pvl0 ipl0 } ⊢ ipl0 
										» 0r _ ⊢ ia0
										lst.nth { ipl0 ia0 } ⊢ { iap0 ipl0 }
										$ iap0 ⊢ iap0,iap00 
										$ vs0 ⊢ vs0,v0
										reg_vs.f {} ⊢ vs1 
										rset.or { vs0 vs1 } ⊢ { vs0 vs1 }  
										stt_v.ptn_of_hp { vs0 iap00 } ⊢ { vs0 ipp0 } 
										rset.sub { vs0 vs1 } ⊢ { vs0 vs1 }
										» 0r _ ⊢ ir0 
										» 1r _ ⊢ ir1 
										» 3r _ ⊢ ir3 
										rset.set_t { vs0 ir0 } ⊢ { vs0 ir0 } 
										rset.set_t { vs0 ir1 } ⊢ { vs0 ir1 } 
										rset.set_t { vs0 ir3 } ⊢ { vs0 ir3 }
										rset.max_t vs0 ⊢ { vs0 rbp }
										emt.brk_rsp { rsp_g rbp } ⊢ { rsp_g rbp es1 } 
										rp8.add_s8 { e0 es1 } ⊢ e0 
										_none {} ⊢ olb1 
										» 2r _ ⊢ r0 
										∐ iap0 ⊢ stt_v.ref◂iq0 .
											stt_v.ref iq0 ⊢ iap0 
											stt_v.hp { r0 iap0 } ⊢ iy 
											RP.atm iy ⊢ iy 
											$ ipp0 ⊢ ipp0,a0 
											» "emt_grm DX3" _ ⊢ ex0 
											_emt ex0 ⊢ _  
											emt.mov_ptn.f2 { tav rsp_g v0 iy ipp0 olb1 } ⊢ { tav rsp_g v0 er }  
											rp8.cct { e0 er } ⊢ e0
											∎ { a0 tav vs0 rsp_g e0 lb0 i0 evv lb_n }
										∐. . 
											» _^ en ⊢ en,s0 
												"\tmov r8,[r8+8]\n" 
												 // 
											rp8.add_s8 { e0 s0 } ⊢ e0 
											stt_v.hp { r0 iap0 } ⊢ iy 
											RP.atm iy ⊢ iy 
											$ ipp0 ⊢ ipp0,a0 
											» "emt_grm DX2" _ ⊢ ex0 
											_emt ex0 ⊢ _  
											emt.mov_ptn.f2 { tav rsp_g v0 iy ipp0 olb1 } ⊢ { tav rsp_g v0 er } 
											» "emt_grm DX4" _ ⊢ ex0 
											_emt ex0 ⊢ _  
											rp8.cct { e0 er } ⊢ e0
											∎ { a0 tav vs0 rsp_g e0 lb0 i0 evv lb_n }
									∐. . 
										» "emt_grm 3" _ ⊢ ee0 
										_emt ee0 ⊢ ee0
										∎|
								∐. . 
									stt_v.pnt.f ip1 ⊢ sip1 
									» "emt_grm 6" _ ⊢ ee0 
									_emt ee0 ⊢ ee0
									_emt sip1 ⊢ sip1 
									∎|  
							∐. . 
								» "emt_grm 4" _ ⊢ ee0 
								_emt ee0 ⊢ ee0
								∎| 			
						∐. ast.grm.s8◂s . 
							$ lb0 ⊢ lb0,lb00 
							emt.ret lb00 ⊢ ret 
							$ lb_n ⊢ lb_n,lb1 
							_inc lb_n ⊢ lb_n 
							$ lb_n ⊢ lb_n,lb2 
							_inc lb_n ⊢ lb_n 
							_s8_len s ⊢ { s ls } 
							» _^ ls,ret,lb1,lb2 ⊢ ls,ret,lb1,lb2,ec1 
								"\tlea rax,[r14+" 0d' "]\n"
								"\tcmp rax,r9\n"
								"\tjg LB_" 2d' "\n"
								"\tjmp LB_" 3d' "\n" 
								"LB_" 2d' ":\n" 
								`	mov r8,unt_1
								1' 
								"LB_" 3d' ":\n" 
								"\tlea rdi,[r13+8+r14]\n" // 
							rp8.add_s8 { e0 ec1 } ⊢ e0
							$ lb_n ⊢ lb_n,lb3
							_inc lb_n ⊢ lb_n 
							$ lb_n ⊢ lb_n,lb4
							_inc lb_n ⊢ lb_n
							emt.cmp_s8.f { lb3 s } ⊢ { lb3 s e1 }
							rp8.cct { e0 e1 } ⊢ e0 
							» _^ ls,lb3,lb4,ret ⊢ ls,lb3,lb4,ret,s0 
								"\tjmp LB_" 2d' "\n" 
								"LB_" 1d' ":\n"
								`	mov r8,unt_1
								3' 
								"LB_" 2d' ":\n" 
								"\tadd r14," 0d' "\n" 
								//
							rp8.add_s8 { e0 s0 } ⊢ e0 
							##_nil {} ⊢ l0 
							##stt_v.rcd l0 ⊢ q0 
							##stt_v.ref q0 ⊢ h0 
							##» emt.REG_N _ ⊢ rbp0 
							##_add { rbp0 rsp_g } ⊢ { rbp0 rsp_g }
							##_inc rsp_g ⊢ rsp_g  
							##rset.set_t { vs0 rbp0 } ⊢ { vs0 rbp0 } 
							##stt_v.hp { rbp0 h0 } ⊢ a0 
							_nil {} ⊢ l0 
							RP.rcd l0 ⊢ a0
							##RP.atm a0 ⊢ a0 
							∎ { a0 tav vs0 rsp_g e0 lb0 i0 evv lb_n } 		
			§ 
				@.f { gfl ret e0 ev evv rv irv tav tv tv_n lb_n g }
					$ g ⊢ 
					∐ _cns◂{ { en e } g } . 
						∐ e ⊢ ast.grm.act◂ga .
							_lod_q { evv en } ⊢ { evv en k } 
							_lod_q { ev en } ⊢ { ev en yk }
							∐ k ⊢ k_op◂{ rsp_s ip0 rsp_d ip1 }; ip1 ⊢ RP.rcd◂l0; l0 ⊢ _cns◂{ pa0 l0 }; l0 ⊢ _cns◂{ pa1 l0 }; l0 ⊢ _cns◂{ pa2 l0 }; l0 ⊢ _nil◂{}; pa2 ⊢ RP.atm◂ah0; ah0 ⊢ stt_v.hp◂{ rh0 h0 } . 
								» 1r _ ⊢ lv0 
								newvar_l { tv_n tv lv0 } ⊢ { tv_n tv lv0 y0 }
								newvar_l { tv_n tv lv0 } ⊢ { tv_n tv lv0 y1 }
								t_axm.r64 {} ⊢ y3 
								t_axm.s8 {} ⊢ y4 
								_nil {} ⊢ l0 
								$ y0 ⊢ y0,y00 
								_cns { y0 l0 } ⊢ l0 
								_cns { y3 l0 } ⊢ l0 
								_cns { y4 l0 } ⊢ l0 
								RP.rcd l0 ⊢ yd0 
								imp { y1 yd0 } ⊢ yu0 
								RP.atm yu0 ⊢ yu0
								var yk ⊢ yk 
								RP.atm yk ⊢ yk
								inst { tv_n tv lv0 yk } ⊢ { tv_n tv lv0 yk } 
								$ yk ⊢ yk,yk0 
								unify.f { tv yu0 yk0 } ⊢ tv
								_dec lv0 ⊢ lv0 
								gen { tv_n tv lv0 yk } ⊢ { tv_n tv lv0 yk } 
								» _^ en,ret ⊢ en,ret,s0 
									"ETR_" 0d' ":\n" 
									`	mov r9,0x0000_ffff_ffff_ffff
									`	and r9,[r13]
									"\tcall GRM_" 0d' "\n" 
									1'
									"GRM_" 0d' ":\n" //
								rp8.add_s8 { e0 s0 } ⊢ e0 
								act { gfl ret y00 h0 ga e0 ev evv rv irv tav tv tv_n lb_n } ⊢ { gfl ret e0 ev evv rv irv tav tv tv_n lb_n } 
								f { gfl ret e0 ev evv rv irv tav tv tv_n lb_n g } ⊢| 
							∐. . 
								» "emt_grm 5" _ ⊢ ee0 
									_emt ee0 ⊢ ee0
								∎| 
						∐. .  
							f { gfl ret e0 ev evv rv irv tav tv tv_n lb_n g } ⊢|
					∐. _nil◂{} . 
						∎ { gfl ret e0 ev evv rv irv tav tv tv_n lb_n }
				@.act_rmf { gfl rb ret rsp_g go e0 ev evv rv irv tav tv tv_n rl lb_n }
					$ go ⊢
					∐ _none◂{} . 
						» _^ rsp_g ⊢ rsp_g,s0 
							"\tmov QWORD [rsp+8*" 0d' "],r14\n" //
						rp8.add_s8 { e0 s0 } ⊢ e0
						∎  { gfl rb ret rsp_g e0 ev evv rv irv tav tv tv_n rl lb_n } 
					∐. _some◂{ dpr gar } .
						$ dpr ⊢ dpr,dpr0 
						crt_type_k.dst_ptn { tv rv dpr0 } ⊢ { tv rv k0 }
						$ k0 ⊢ k0,k00 
						t_axm.opn k00 ⊢ ok0 
						» 0r _ ⊢ pv_n
						_nil {} ⊢ al 
						$ ok0 ⊢ ok0,ok00 
						alc_type_k.hp { pv_n al tav tv_n tv ok00 } ⊢ { pv_n al tav tv_n tv hok0 } 
						$ lb_n ⊢ lb_n,lb0
						_inc lb_n ⊢ lb_n 
						» _^ lb0 ⊢ lb0,ret_r 
							"\tjmp LB_" 0d' "\n" //
						act { gfl ret_r ok0 hok0 gar e0 ev evv rv irv tav tv tv_n lb_n } ⊢ { gfl ret_r e0 ev evv rv irv tav tv tv_n lb_n }
						» _^ lb0 ⊢ lb0,sl0 
							"LB_" 0d' ":\n" // 
						rp8.add_s8 { e0 sl0 } ⊢ e0 
						stt_v.mk_rset_env_x { irv rl } ⊢ { irv rl vs0 } 
						» 2r _ ⊢ x2 
						rset.set_t { vs0 x2 } ⊢ { vs0 x2 }
						$ k0 ⊢ k0,k00 
						alc_type_k.f { pv_n al tav tv_n tv vs0 k00 } ⊢ { pv_n al tav tv_n tv vs0 pk0 } 
						$ k0 ⊢ k0,k00 
						alc_type_k.hp { pv_n al tav tv_n tv k00 } ⊢ { pv_n al tav tv_n tv hk0 } 
						$ lb_n ⊢ lb_n,lb1 
						_inc lb_n ⊢ lb_n 
						$ lb_n ⊢ lb_n,lb2 
						_inc lb_n ⊢ lb_n 
						» _^ rb,ret,lb1,lb2 ⊢ rb,ret,lb1,lb2,ec1 
							"\tmovzx rax,BYTE [r8+6]\n" 
							"\tcmp rax,0\n" 
							"\tjnz LB_" 2d' "\n" 
							"\tjmp LB_" 3d' "\n" 
							"LB_" 2d' ":\n"
							0'
							`	add rsp,8
							`	pop r9 
							`	pop r14 
							`	pop r13
							1' 
							"LB_" 3d' ":\n" 
							//
							rp8.add_s8 { e0 ec1 } ⊢ e0 						
							» _^ rsp_g ⊢ rsp_g,s0 
								"\tmov QWORD [rsp+8*" 0d' "],r14\n" //
							rp8.add_s8 { e0 s0 } ⊢ e0
							∐ hk0 ⊢ stt_v.ref◂iq0 .
								stt_v.ref iq0 ⊢ hk0 
								stt_v.hp { x2 hk0 } ⊢ a0 
								RP.atm a0 ⊢ pr0 						 
								_none {} ⊢ olb1 
								$ pk0 ⊢ pk0,pk00 
								» "emt_grm DX5" _ ⊢ ex0 
								_emt ex0 ⊢ _  
								emt.mov_ptn.f2 { tav rsp_g vs0 pr0 pk00 olb1 } ⊢ { tav rsp_g vs0 er }  
								rp8.cct { e0 er } ⊢ e0
								_nil {} ⊢ dl 
								emt.idx.crt_ptn { irv dpr pk0 rl dl } ⊢ { irv rl dl } 																			
								∎ { gfl rb ret rsp_g e0 ev evv rv irv tav tv tv_n rl lb_n } 
							∐. . 
								» _^ _ ⊢ s0 
									"\tmov r8,[r8+8]\n" 
									 // 
								rp8.add_s8 { e0 s0 } ⊢ e0 
								stt_v.hp { x2 hk0 } ⊢ a0 
								RP.atm a0 ⊢ pr0 						 
								_none {} ⊢ olb1 
								$ pk0 ⊢ pk0,pk00
								» "emt_grm DX0" _ ⊢ ex0 
								_emt ex0 ⊢ _  
								emt.mov_ptn.f2 { tav rsp_g vs0 pr0 pk00 olb1 } ⊢ { tav rsp_g vs0 er }  
								» "emt_grm DX1" _ ⊢ ex0 
								_emt ex0 ⊢ _  
								rp8.cct { e0 er } ⊢ e0
								_nil {} ⊢ dl 
								emt.idx.crt_ptn { irv dpr pk0 rl dl } ⊢ { irv rl dl } 																			
								∎ { gfl rb ret rsp_g e0 ev evv rv irv tav tv tv_n rl lb_n } 
				@.act_mtc { gfl ret kh0 h0 { drl dp lc rf gr go } e0 ev evv rv irv tav tv tv_n lb_n }
					$ lb_n ⊢ lb_n,lb0 
					_inc lb_n ⊢ lb_n 
					» 0r _ ⊢ i0 
					_nil {} ⊢ hl
					$ lb0 ⊢ lb0,lb00 
					_some lb00 ⊢ olb0 
					rset.ini {} ⊢ vs0 
					» 0r _ ⊢ ir0 
					» 1r _ ⊢ ir1 
					» 3r _ ⊢ ir3 
					rset.set_t { vs0 ir0 } ⊢ { vs0 ir0 }
					rset.set_t { vs0 ir1 } ⊢ { vs0 ir1 }
					rset.set_t { vs0 ir3 } ⊢ { vs0 ir3 }
					» 0r _ ⊢ rsp_g 
					rle { ret hl tav vs0 rsp_g e0 olb0 i0 evv lb_n rf gr } ⊢ { ret hl tav vs0 rsp_g e0 i0 evv lb_n }  
					rp8.e {} ⊢ erb 
					rb_rle { rsp_g hl erb } ⊢ { rsp_g hl erb } 
					rp8.mk_s8 erb ⊢ { erb rb }
					rev hl ⊢ hl 
					RP.rcd hl ⊢ gp0 
					_nil {} ⊢ rl 
					_nil {} ⊢ dl 
					emt.idx.crt_ptn { irv dp gp0 rl dl } ⊢ { irv rl dl } 																			
					act_regs {} ⊢ ipl 
					emt.idx.crt_lst { irv drl ipl rl dl } ⊢ { irv rl dl } 
					act_rmf { gfl rb ret rsp_g go e0 ev evv rv irv tav tv tv_n rl lb_n }  ⊢ { gfl rb ret rsp_g e0 ev evv rv irv tav tv tv_n rl lb_n } 					
					» 2r _ ⊢ r0 
					$ h0 ⊢ h0,h00 
					stt_v.hp { r0 h00 } ⊢ a0 
					RP.atm a0 ⊢ pr0 
					» 0r _ ⊢ rsp 
					$ lb_n ⊢ lb_n,lbr 
					_inc lb_n ⊢ lb_n 
					» _^ lbr ⊢ lbr,ret0 
						"\tjmp LB_" 0d' "\n" //
					» 0r _ ⊢ rsp_d 
					_nil {} ⊢ cl
					$ lb_n ⊢ lb_n,lbe 
					_inc lb_n ⊢ lb_n 
					» _^ lbe,rsp_g ⊢ lbe,rsp_g,sc0 
						"\tmov r13,QWORD [rsp+16+8*" 1d' "]\n"
						"\tmov r14,QWORD [rsp+8*" 1d' "]\n"
						"\tjmp LB_" 0d' "\n" // 
					rp8.add_s8 { e0 sc0 } ⊢ e0 
					rp8.e {} ⊢ ee0 
					» _^ lbe ⊢ lbe,sc0 
						"LB_" 0d' "\n" // 
					rp8.add_s8 { ee0 sc0 } ⊢ ee0
					» "emt_grm DX6" _ ⊢ ex0 
					_emt ex0 ⊢ _  
					f_etr { rsp_d pr0 kh0 } ⊢ ft 
					emt.lc_code.ret_f { { gfl cl } ret0 lb_n { ev evv } rsp_g { rv irv } tav tv_n tv lc ee0 rl ft } ⊢ { { gfl cl } lb_n { ev evv } rsp_g { rv irv } tav tv_n tv ee0 rl ft } 
					» "emt_grm DX7" _ ⊢ ex0 
					_emt ex0 ⊢ _
					rp8.cct { e0 ee0 } ⊢ e0 
					» _^ lbr,lb0,ret ⊢ lbr,lb0,ret,sl0 
						"LB_" 0d' ":\n" 
						`	movzx rax,BYTE [r8+6]
						`	cmp rax,0
						"\tjnz LB_" 1d' "\n" 
						`	pop r14
						`	pop r9
						`	add rsp,8
						`	pop r13
						2'
						"LB_" 1d' ":\n" 
						//
					rp8.add_s8 { e0 sl0 } ⊢ e0 
					∎ { gfl ret e0 ev evv rv irv tav tv tv_n lb_n } 
				@.act { gfl ret kh0 h0 ga e0 ev evv rv irv tav tv tv_n lb_n } 
					» _^ _ ⊢ s0
						`	sub rsp,32
						`	mov QWORD [rsp+24],r13
						`	mov QWORD [rsp+16],r14 
						`	mov QWORD [rsp+8],r9
						// 
					rp8.add_s8 { e0 s0 } ⊢ e0 
					act_lp { gfl ret kh0 h0 ga e0 ev evv rv irv tav tv tv_n lb_n } ⊢|
				@.act_lp { gfl ret kh0 h0 ga e0 ev evv rv irv tav tv tv_n lb_n }
					$ ga ⊢ 
					∐ ast.grm.act_cns◂{ drl dp lc rf gr go ga } . 
						$ h0 ⊢ h0,h00 
						$ kh0 ⊢ kh0,kh00 
						act_mtc { gfl ret kh00 h00 { drl dp lc rf gr go } e0 ev evv rv irv tav tv tv_n lb_n } ⊢ { gfl ret e0 ev evv rv irv tav tv tv_n lb_n } 						
						act_lp { gfl ret kh0 h0 ga e0 ev evv rv irv tav tv tv_n lb_n } ⊢| 
					∐. ast.grm.act_end◂{ drl dp lc rf gr go } .
						act_mtc { gfl ret kh0 h0 { drl dp lc rf gr go } e0 ev evv rv irv tav tv tv_n lb_n } ⊢ { gfl ret e0 ev evv rv irv tav tv tv_n lb_n } 						
						» _^ _ ⊢ s0 
							`	pop rdi
							`	pop r9 
							`	pop r14
							`	pop r13
							//
						rp8.add_s8 { e0 s0 } ⊢ e0 
						$ ret ⊢ ret,ret0 
						rp8.add_s8 { e0 ret0 } ⊢ e0 
						∎ { gfl ret e0 ev evv rv irv tav tv tv_n lb_n }
			∎∎
		§ lst_v { tv_n tv } 
			_nil {} ⊢ l 
			newvar_i { tv_n tv } ⊢ { tv_n tv i0 } 
			$ i0 ⊢ i0,i1 
			var i0 ⊢ y0 
			RP.atm y0 ⊢ y0 
			t_axm.lst y0 ⊢ y0 
			abs { i1 y0 } ⊢ y0 
			RP.atm y0 ⊢ y0 
			∎ { tv_n tv y0 }  

		§ opn_v { tv_n tv } 
			_nil {} ⊢ l 
			newvar_i { tv_n tv } ⊢ { tv_n tv i0 } 
			$ i0 ⊢ i0,i1 
			var i0 ⊢ y0 
			RP.atm y0 ⊢ y0 
			t_axm.opn y0 ⊢ y0 
			abs { i1 y0 } ⊢ y0 
			RP.atm y0 ⊢ y0 
			∎ { tv_n tv y0 }  
		
		§ arr_v { tv_n tv } 
			_nil {} ⊢ l 
			newvar_i { tv_n tv } ⊢ { tv_n tv i0 } 
			$ i0 ⊢ i0,i1 
			var i0 ⊢ y0 
			RP.atm y0 ⊢ y0 
			t_axm.arr y0 ⊢ y0 
			abs { i1 y0 } ⊢ y0 
			RP.atm y0 ⊢ y0 
			∎ { tv_n tv y0 }  
		§ ss_rcd_n { n m e } 
			$ n ⊢ n,n0 
			_inc n0 ⊢ n0 
			» _^ n,m,n0 ⊢ n,m,n0,s 
				"\nSS_RCD_" 0d' "_TOP: resq 1\n"
				"\nSS_RCD_" 0d' "_VCT: resq " 2d' "*" 1' "\n"
				"\nSS_RCD_" 0d' "_BTM: resq 1\n"  
				`
				//
			rp8.add_s8 { e s } ⊢ e 
			∎ { n m e }
		§ @.ss_rcd_n_lp { n N m e } 
			∐ n'=N' . 
				∎ { N m e } 
			∐. . 
				ss_rcd_n { n m e } ⊢ { n m e } 
				_inc n ⊢ n 
				ss_rcd_n_lp { n N m e } ⊢| 
		§ ss_init_n { lb top vct null n m e }
			» _^ lb,top,vct,null,n,m ⊢ lb,top,vct,null,n,m,s 
				"\tmov QWORD [" 1' "]," 2' "\n" 
				`	mov rdi,0 
				"\tmov rax," 2' "\n" 
				"ss_lp_" 0' ":\n" 
				"\tcmp rdi," 5' "\n" 
				"\tjz ss_end_" 0' "\n" 
				`	add rdi,1 
				"\tlea rsi,[rax+8*" 4d' "]\n" 
				`	mov QWORD [rax],rsi 
				`	mov rax,rsi 
				"\tjmp ss_lp_" 0' "\n" 
				"ss_end_" 0' ":\n" 
				"\tmov rsi," 3' "\n" 
				`	mov [rax],rsi 
				// 
			rp8.add_s8 { e s } ⊢ e 
			∎ { lb top vct null n m e } 
		§ ss_init_rcd { n m e } 
			» _^ n ⊢ n,lb 
				"rcd_" 0d' // 
			» _^ n ⊢ n,top 
				"SS_RCD_" 0d' "_TOP" //
			» _^ n ⊢ n,vct 
				"SS_RCD_" 0d' "_VCT" // 
			» 0xffffffffffff0000r _ ⊢ nl 
			_add { nl n } ⊢ { nl n }
			» _^ nl ⊢ nl,null 
				0d' //
			» _^ n ⊢ n,etr 
				"\ninit_ss_rcd_" 0d' ":\n" // 
			rp8.add_s8 { e etr } ⊢ e  
			_inc n ⊢ n  
			ss_init_n { lb top vct null n m e } ⊢ { lb top vct null n m e }
			_dec n ⊢ n 
			∎ { n m e } 
		§ @.ss_init_rcd_lp { n m N e }
			∐ n'=N' . 
				∎ { m N e }  
			∐. . 	
				ss_init_rcd { n m e } ⊢ { n m e }
				_inc n ⊢ n 
				ss_init_rcd_lp { n m N e } ⊢| 
		§
			@.slv_file gel
				» t_axm.N0 _ ⊢ tx_n 
				_nil {} ⊢ ns_m 
				_nil {} ⊢ ns_t 
				_nil {} ⊢ ns_e 
				» 200r _ ⊢ max
				_mk_arr max ⊢ { max mmv }
				_mk_arr max ⊢ { max mev }
				_mk_arr max ⊢ { max mtv }
				» 8000r _ ⊢ max_r 
				_mk_arr max_r ⊢ { max_r rv }
				_mk_arr max_r ⊢ { max_r irv }
				» 1000r _ ⊢ max_e 
				_mk_arr max_e ⊢ { max_e ev }
				_mk_arr max_e ⊢ { max_e evv } 
				» 16000r _ ⊢ max_t 
				_mk_arr max_t ⊢ { max_t tv }
				» 1000r _ ⊢ max_t_aux
				_mk_arr max_t_aux ⊢ { max_t_aux tav }
				» 1000r _ ⊢ max_hp 
				_mk_arr max_hp ⊢ { max_hp hpv } 
				» 0r _ ⊢ hpv_n  
				» 1r _ ⊢ mv_n
				» 0r _ ⊢ rv_n
				» 0r _ ⊢ ev_n
				» 0r _ ⊢ tv_n
				» 0r _ ⊢ i 
				» 0r _ ⊢ lv 

				» t_axm.id.r64 _ ⊢ ix 
				t_axm.r64 {} ⊢ y0 
				» "_r64" _ ⊢ t0
				$ t0 ⊢ t0,t00 
				add_t { tv_n tv ns_t t0 y0 } ⊢ { tv_n tv ns_t }
				_none {} ⊢ o 
				_set_q { tav ix { t00 o } } ⊢ { tav ix }
				_inc ix ⊢ ix 

				t_axm.s8 {} ⊢ y0 
				» "_s8" _ ⊢ t0
				$ t0 ⊢ t0,t00 
				add_t { tv_n tv ns_t t0 y0 } ⊢ { tv_n tv ns_t }
				_none {} ⊢ o 
				_set_q { tav ix { t00 o } } ⊢ { tav ix }
				_inc ix ⊢ ix 

				lst_v { tv_n tv } ⊢ { tv_n tv y0 }  
				» "_lst" _ ⊢ t0
				$ t0 ⊢ t0,t00 
				add_t { tv_n tv ns_t t0 y0 } ⊢ { tv_n tv ns_t }
				newvar_i { tv_n tv } ⊢ { tv_n tv ia } 
				$ ia ⊢ ia,ia0 
				var ia ⊢ v 
				RP.atm v ⊢ v 
				$ v ⊢ v,v0 
				t_axm.lst v ⊢ y
				_nil {} ⊢ r0 
				_cns { y r0 } ⊢ r0 
				_cns { v0 r0 } ⊢ r0 
				RP.rcd r0 ⊢ r0 
				t_axm.unt {} ⊢ u0 
				_nil {} ⊢ l0 
				_cns { u0 l0 } ⊢ l0
				_cns { r0 l0 } ⊢ l0 
				_nil {} ⊢ a0 
				_cns { ia0 a0 } ⊢ a0
				  
				_nil {} ⊢ vl 
				» 0r _ ⊢ q0 
				$ q0 ⊢ q0,q00
				_cns { q00 vl } ⊢ vl 
				$ q0 ⊢ q0,q00 
				stt_v.pv q00 ⊢ h0 
				_nil {} ⊢ vl0 
				_cns { h0 vl0 } ⊢ vl0 
				» t_axm.id.lst  _ ⊢ id0 
				stt_v.adt { id0 vl0 } ⊢ ad0 
				_nil {} ⊢ c0 
				_cns { ad0 c0 } ⊢ c0 
				stt_v.pv q0 ⊢ h0 
				_cns { h0 c0 } ⊢ c0 
				stt_v.rcd c0 ⊢ h0 
				stt_v.ref h0 ⊢ h0 
				_nil {} ⊢ c0 
				stt_v.rcd c0 ⊢ c0 
				stt_v.ref c0 ⊢ h1 
				_nil {} ⊢ hl 
				_cns { h1 hl } ⊢ hl 
				_cns { h0 hl } ⊢ hl 
				_some { a0 l0 vl hl } ⊢ o 
				_set_q { tav ix { t00 o } } ⊢ { tav ix }
				_inc ix ⊢ ix 

				opn_v { tv_n tv } ⊢ { tv_n tv y0 }  
				» "_opn" _ ⊢ t0
				$ t0 ⊢ t0,t00 
				add_t { tv_n tv ns_t t0 y0 } ⊢ { tv_n tv ns_t }
				newvar_i { tv_n tv } ⊢ { tv_n tv ia } 
				$ ia ⊢ ia,ia0 
				var ia ⊢ v 
				RP.atm v ⊢ v 
				$ v ⊢ v,v0 
				t_axm.opn v ⊢ y 
				_nil {} ⊢ r0 
				t_axm.unt {} ⊢ u0
				_nil {} ⊢ l0 
				_cns { u0 l0 } ⊢ l0
				_cns { v0 l0 } ⊢ l0 
				_nil {} ⊢ a0 
				_cns { ia0 a0 } ⊢ a0  
				
				_nil {} ⊢ vl 
				» 0r _ ⊢ q0 
				$ q0 ⊢ q0,q00
				_cns { q0 vl } ⊢ vl 
				stt_v.pv q00 ⊢ h0 
				_nil {} ⊢ c0 
				stt_v.rcd c0 ⊢ c0 
				stt_v.ref c0 ⊢ h1 
				_nil {} ⊢ hl 
				_cns { h1 hl } ⊢ hl 
				_cns { h0 hl } ⊢ hl 
				_some { a0 l0 vl hl } ⊢ o 
				_set_q { tav ix { t00 o } } ⊢ { tav ix }
				_inc ix ⊢ ix 
				
				arr_v { tv_n tv } ⊢ { tv_n tv y0 }  
				» "_arr" _ ⊢ t0
				$ t0 ⊢ t0,t00 
				add_t { tv_n tv ns_t t0 y0 } ⊢ { tv_n tv ns_t }
				_none {} ⊢ o 
				_set_q { tav ix { t00 o } } ⊢ { tav ix }
				_inc ix ⊢ ix 

				_nil {} ⊢ il 
				» "_mk_arr" _ ⊢ se 
				_nil {} ⊢ l0 
				t_axm.r64 {} ⊢ y0 
				newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
				$ yv ⊢ yv,yv0 
				_cns { yv0 l0 } ⊢ l0 
				_cns { y0 l0 } ⊢ l0 
				RP.rcd l0 ⊢ y0 
				t_axm.r64 {} ⊢ y1 
				$ yv ⊢ yv,yv0
				t_axm.arr yv0 ⊢ ya
				_nil {} ⊢l0 
				_cns { ya l0 } ⊢ l0
				_cns { yv l0 } ⊢ l0 
				_cns { y1 l0 } ⊢ l0 
				RP.rcd l0 ⊢ yr0 
				imp { y0 yr0 } ⊢ yx  
				RP.atm yx ⊢ yx 
				» e_axm.mk_arr _ ⊢ k0
				k_op_axm k0 ⊢ k 
				add_e { tv_n tv evv ev ev_n ns_e se k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
				
				t_axm.r64 {} ⊢ y0 
				t_axm.r64 {} ⊢ y1 
				newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
				$ yv ⊢ yv,yv0 
				t_axm.arr yv0 ⊢ ya
				$ ya ⊢ ya,ya0 
				_nil {} ⊢ l0 
				$ yv ⊢ yv,yv0
				_cns { yv0 l0 } ⊢ l0 
				_cns { y0 l0 } ⊢ l0
				_cns { ya l0 } ⊢ l0
				RP.rcd l0 ⊢ y_s 
				_nil {} ⊢ l1 
				_cns { yv l1 } ⊢ l1
				_cns { y1 l1 } ⊢ l1 
				_cns { ya0 l1 } ⊢ l1   
				RP.rcd l1 ⊢ y_d 
				imp { y_s y_d } ⊢ yx 
				RP.atm yx ⊢ yx 
				» "_exc_q" _ ⊢ se
				» e_axm.exc_q _ ⊢ k0 
				k_op_axm k0 ⊢ k 
				add_e { tv_n tv evv ev ev_n ns_e se k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
						
				» "_set_q" _ ⊢ se
				t_axm.r64 {} ⊢ y0 
				t_axm.r64 {} ⊢ y1 
				newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
				$ yv ⊢ yv,yv0 
				t_axm.arr yv ⊢ ya
				$ ya ⊢ ya,ya0 
				_nil {} ⊢ l0 
				_cns { yv0 l0 } ⊢ l0 
				_cns { y0 l0 } ⊢ l0
				_cns { ya l0 } ⊢ l0
				RP.rcd l0 ⊢ y_s 
				_nil {} ⊢ l1 
				_cns { y1 l1 } ⊢ l1
				_cns { ya0 l1 } ⊢ l1   
				RP.rcd l1 ⊢ y_d 
				imp { y_s y_d } ⊢ yx 
				RP.atm yx ⊢ yx 
				» e_axm.set_q _ ⊢ k0 
				k_op_axm k0 ⊢ k 
				add_e { tv_n tv evv ev ev_n ns_e se k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
							
				» "_get_q" _ ⊢ se
				t_axm.r64 {} ⊢ y0 
				t_axm.r64 {} ⊢ y1 
				newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
				$ yv ⊢ yv,yv0 
				t_axm.arr yv ⊢ ya
				$ ya ⊢ ya,ya0 
				_nil {} ⊢ l0 
				_cns { yv0 l0 } ⊢ l0 
				_cns { y0 l0 } ⊢ l0
				_cns { ya l0 } ⊢ l0
				RP.rcd l0 ⊢ y_d 
				_nil {} ⊢ l1 
				_cns { y1 l1 } ⊢ l1
				_cns { ya0 l1 } ⊢ l1   
				RP.rcd l1 ⊢ y_s 
				imp { y_s y_d } ⊢ yx
				RP.atm yx ⊢ yx 
				» e_axm.get_q _ ⊢ k0 
				k_op_axm k0 ⊢ k 
				add_e { tv_n tv evv ev ev_n ns_e se k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
							
				» "_lod_q" _ ⊢ se
				t_axm.r64 {} ⊢ y0 
				t_axm.r64 {} ⊢ y1 
				newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
				$ yv ⊢ yv,yv0 
				t_axm.arr yv ⊢ ya
				$ ya ⊢ ya,ya0 
				_nil {} ⊢ l0 
				_cns { yv0 l0 } ⊢ l0 
				_cns { y0 l0 } ⊢ l0
				_cns { ya l0 } ⊢ l0
				RP.rcd l0 ⊢ y_d 
				_nil {} ⊢ l1 
				_cns { y1 l1 } ⊢ l1
				_cns { ya0 l1 } ⊢ l1   
				RP.rcd l1 ⊢ y_s 
				imp { y_s y_d } ⊢ yx
				RP.atm yx ⊢ yx 
				» e_axm.lod_q _ ⊢ k0 
				k_op_axm k0 ⊢ k 
				add_e { tv_n tv evv ev ev_n ns_e se k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
								
				» "_arr_of_lst" _ ⊢ se 
				newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
				$ yv ⊢ yv,yv0 				
				t_axm.arr yv0 ⊢ ya
				t_axm.lst yv ⊢ ys
				imp { ys ya } ⊢ yx  
				RP.atm yx ⊢ yx 
				» e_axm.arr_of_lst _ ⊢ k0
				k_op_axm k0 ⊢ k 
				add_e { tv_n tv evv ev ev_n ns_e se k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
				
				» "_arr_len" _ ⊢ se
				newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
				t_axm.arr yv ⊢ ya
				$ ya ⊢ ya,ya0 
				t_axm.r64 {} ⊢ y0 
				_nil {} ⊢ l0 
				_cns { y0 l0 } ⊢ l0
				_cns { ya0 l0 } ⊢ l0 
				RP.rcd l0 ⊢ y_d 
				imp { ya y_d } ⊢ yx 
				RP.atm yx ⊢ yx 
				» e_axm.arr_len _ ⊢ k0 
				k_op_axm k0 ⊢ k 
				add_e { tv_n tv evv ev ev_n ns_e se k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
						
				t_axm.s8 {} ⊢ ys 
				t_axm.lst ys ⊢ yx 
				» "_args" _ ⊢ se
				» 11111111r _ ⊢ k0 
				k_op_axm k0 ⊢ k 
				add_e { tv_n tv evv ev ev_n ns_e se k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
					
				t_axm.r64 {} ⊢ yl0 
				t_axm.r64 {} ⊢ yl1
				t_axm.s8 {} ⊢ ys 
				_nil {} ⊢ l0 
				_cns { ys l0 } ⊢ l0 
				_cns { yl1 l0 } ⊢ l0 
				RP.rcd l0 ⊢ y_d 
				imp { yl0 y_d } ⊢ yx  
				RP.atm yx ⊢ yx 
				» "_mlc_s8" _ ⊢ se
				» e_axm.mlc_s8 _ ⊢ k0 
				k_op_axm k0 ⊢ k 
				add_e { tv_n tv evv ev ev_n ns_e se k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
					
				t_axm.r64 {} ⊢ yl0 
				t_axm.s8 {} ⊢ ys
				$ ys ⊢ ys,ys0  
				_nil {} ⊢ l0 
				_cns { yl0 l0 } ⊢ l0 
				_cns { ys0 l0 } ⊢ l0 
				RP.rcd l0 ⊢ y_d 
				imp { ys y_d } ⊢ yx  
				RP.atm yx ⊢ yx 
				» "_s8_len" _ ⊢ se
				» e_axm.s8_len _ ⊢ k0 
				k_op_axm k0 ⊢ k 
				add_e { tv_n tv evv ev ev_n ns_e se k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
						
				newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
				$ yv ⊢ yv,yv0 
				imp { yv yv0 } ⊢ yx 
				RP.atm yx ⊢ yx 
				» "_emt" _ ⊢ se
				» e_axm.emt _ ⊢ k0 
				k_op_axm k0 ⊢ k  
				add_e { tv_n tv evv ev ev_n ns_e se k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
					
				t_axm.r64 {} ⊢ y0 
				t_axm.r64 {} ⊢ y1 
				imp { y0 y1 } ⊢ yx 
				RP.atm yx ⊢ yx 
				» "_inc" _ ⊢ se
				» e_axm.inc _ ⊢ k0 
				k_op_axm k0 ⊢ k 
				add_e { tv_n tv evv ev ev_n ns_e se k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
						
				t_axm.r64 {} ⊢ y0 
				t_axm.r64 {} ⊢ y1 
				imp { y0 y1 } ⊢ yx
				RP.atm yx ⊢ yx 
				» "_dec" _ ⊢ se
				» e_axm.dec _ ⊢ k0 
				k_op_axm k0 ⊢ k 
				add_e { tv_n tv evv ev ev_n ns_e se k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
					
				t_axm.r64 {} ⊢ y0 
				t_axm.r64 {} ⊢ y1 
				_nil {} ⊢ l0 
				_cns { y0 l0 } ⊢ l0 
				_cns { y1 l0 } ⊢ l0 
				RP.rcd l0 ⊢ y_d 
				t_axm.r64 {} ⊢ y0 
				t_axm.r64 {} ⊢ y1 
				_nil {} ⊢ l0 
				_cns { y0 l0 } ⊢ l0 
				_cns { y1 l0 } ⊢ l0 
				RP.rcd l0 ⊢ y_s 
				imp { y_s y_d } ⊢ yx
				RP.atm yx ⊢ yx 
				» "_add" _ ⊢ se
				» e_axm.add _ ⊢ k0 
				k_op_axm k0 ⊢ k 
				add_e { tv_n tv evv ev ev_n ns_e se k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 						
				t_axm.r64 {} ⊢ y0 
				t_axm.r64 {} ⊢ y1 
				_nil {} ⊢ l0 
				_cns { y0 l0 } ⊢ l0 
				_cns { y1 l0 } ⊢ l0 
				RP.rcd l0 ⊢ y_d 
				t_axm.r64 {} ⊢ y0 
				t_axm.r64 {} ⊢ y1 
				_nil {} ⊢ l0 
				_cns { y0 l0 } ⊢ l0 
				_cns { y1 l0 } ⊢ l0 
				RP.rcd l0 ⊢ y_s 
				imp { y_s y_d } ⊢ yx
				RP.atm yx ⊢ yx 
				» "_sub" _ ⊢ se
				» e_axm.sub _ ⊢ k0 
				k_op_axm k0 ⊢ k 
				add_e { tv_n tv evv ev ev_n ns_e se k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
					
				t_axm.r64 {} ⊢ y0 
				t_axm.r64 {} ⊢ y1 
				_nil {} ⊢ l0 
				_cns { y0 l0 } ⊢ l0 
				_cns { y1 l0 } ⊢ l0 
				RP.rcd l0 ⊢ y_d 
				t_axm.r64 {} ⊢ y0 
				t_axm.r64 {} ⊢ y1 
				_nil {} ⊢ l0 
				_cns { y0 l0 } ⊢ l0 
				_cns { y1 l0 } ⊢ l0 
				RP.rcd l0 ⊢ y_s 
				imp { y_s y_d } ⊢ yx
				RP.atm yx ⊢ yx 
				» "_imul" _ ⊢ se
				» e_axm.imul _ ⊢ k0 
				k_op_axm k0 ⊢ k 
				add_e { tv_n tv evv ev ev_n ns_e se k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
					
				t_axm.r64 {} ⊢ y0 
				t_axm.r64 {} ⊢ y1 
				t_axm.s8 {} ⊢ y2   
				_nil {} ⊢ l0 
				_cns { y0 l0 } ⊢ l0 
				_cns { y1 l0 } ⊢ l0 
				_cns { y2 l0 } ⊢ l0 
				RP.rcd l0 ⊢ y_s  
				t_axm.r64 {} ⊢ y0  
				t_axm.r64 {} ⊢ y1 
				t_axm.s8 {} ⊢ y2  
				_nil {} ⊢ l0 
				_cns { y0 l0 } ⊢ l0 
				_cns { y1 l0 } ⊢ l0
				_cns { y2 l0 } ⊢ l0  
				RP.rcd l0 ⊢ y_d 
				imp { y_s y_d } ⊢ yx
				RP.atm yx ⊢ yx 
				» "_sts" _ ⊢ se
				» e_axm.sts _ ⊢ k0 
				k_op_axm k0 ⊢ k 
				add_e { tv_n tv evv ev ev_n ns_e se k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
						
				t_axm.r64 {} ⊢ y0 
				t_axm.r64 {} ⊢ y1 
				t_axm.s8 {} ⊢ y2   
				_nil {} ⊢ l0 
				_cns { y0 l0 } ⊢ l0 
				_cns { y1 l0 } ⊢ l0 
				_cns { y2 l0 } ⊢ l0 
				RP.rcd l0 ⊢ y_d  
				t_axm.r64 {} ⊢ y0  
				t_axm.s8 {} ⊢ y1   
				_nil {} ⊢ l0 
				_cns { y0 l0 } ⊢ l0 
				_cns { y1 l0 } ⊢ l0 
				RP.rcd l0 ⊢ y_s 
				imp { y_s y_d } ⊢ yx
				RP.atm yx ⊢ yx 
				» "_lds" _ ⊢ se
				» e_axm.lds _ ⊢ k0 
				k_op_axm k0 ⊢ k  
				add_e { tv_n tv evv ev ev_n ns_e se k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
					
				t_axm.r64 {} ⊢ y0 
				t_axm.r64 {} ⊢ y1 
				_nil {} ⊢ l0 
				_cns { y0 l0 } ⊢ l0 
				_cns { y1 l0 } ⊢ l0 
				RP.rcd l0 ⊢ y_s
				t_axm.r64 {} ⊢ y0 
				t_axm.r64 {} ⊢ y1 
				t_axm.r64 {} ⊢ y2 
				_nil {} ⊢ l0 
				_cns { y2 l0 } ⊢ l0 
				_cns { y0 l0 } ⊢ l0 
				_cns { y1 l0 } ⊢ l0 
				RP.rcd l0 ⊢ y_d 
				imp { y_s y_d } ⊢ yx 
				RP.atm yx ⊢ yx 
				» "_setge" _ ⊢ se
				» e_axm.setge _ ⊢ k0 
				k_op_axm k0 ⊢ k 
				add_e { tv_n tv evv ev ev_n ns_e se k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
						
				t_axm.r64 {} ⊢ y0 
				t_axm.s8 {} ⊢ y1
				t_axm.r64 {} ⊢ y2
				t_axm.s8 {} ⊢ y3 
				t_axm.r64 {} ⊢ y4 
				_nil {} ⊢ l0 
				_cns { y4 l0 } ⊢ l0
				_cns { y3 l0 } ⊢ l0 
				_cns { y2 l0 } ⊢ l0
				_cns { y1 l0 } ⊢ l0 
				_cns { y0 l0 } ⊢ l0  
				RP.rcd l0 ⊢ y_s
				$ y_s ⊢ y_s,y_d 
				imp { y_s y_d } ⊢ yx
				RP.atm yx ⊢ yx 
				» "_rep_movsb" _ ⊢ se
				» e_axm.rep_movsb _ ⊢ k0 
				k_op_axm k0 ⊢ k 
				add_e { tv_n tv evv ev ev_n ns_e se k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
						
				newvar_q { tv_n tv lv } ⊢ { tv_n tv lv y0 }
				t_axm.lst y0 ⊢ y0  
				_nil {} ⊢ l0 
				RP.rcd l0 ⊢ y1 
				imp { y1 y0 } ⊢ yx
				RP.atm yx ⊢ yx 
				» "_nil" _ ⊢ se
				» 1r _ ⊢ ia0 
				» 2r _ ⊢ in 
				k_ctr { ia0 in } ⊢ k 
				add_e { tv_n tv evv ev ev_n ns_e se k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
						
				newvar_q { tv_n tv lv } ⊢ { tv_n tv lv y0 }
				$ y0 ⊢ y0,y1 
				t_axm.lst y0 ⊢ y0 
				$ y0 ⊢ y0,y2 
				_nil {} ⊢ l0 
				_cns { y0 l0 } ⊢ l0 
				_cns { y1 l0 } ⊢ l0 
				RP.rcd l0 ⊢ y0
				imp { y0 y2 } ⊢ yx 
				RP.atm yx ⊢ yx 
				» "_cns" _ ⊢ se
				» 0r _ ⊢ ia0 
				» 2r _ ⊢ in 
				k_ctr { ia0 in } ⊢ k 
				add_e { tv_n tv evv ev ev_n ns_e se k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
					
				newvar_q { tv_n tv lv } ⊢ { tv_n tv lv y0 } 
				$ y0 ⊢ y0,y1 
				t_axm.opn y1 ⊢ y1  
				imp { y0 y1 } ⊢ yx 				
				RP.atm yx ⊢ yx 
				» "_some" _ ⊢ se
				» 0r _ ⊢ ia0 
				» 2r _ ⊢ in 
				k_ctr { ia0 in } ⊢ k 
				add_e { tv_n tv evv ev ev_n ns_e se k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
					
				newvar_q { tv_n tv lv } ⊢ { tv_n tv lv y0 }
				t_axm.opn y0 ⊢ y0 
				_nil {} ⊢ l0 
				RP.rcd l0 ⊢ y1 
				imp { y1 y0 } ⊢ yx
				RP.atm yx ⊢ yx 
				» "_none" _ ⊢ se
				» 1r _ ⊢ ia0 
				» 2r _ ⊢ in 
				k_ctr { ia0 in } ⊢ k 
				add_e { tv_n tv evv ev ev_n ns_e se k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
					
				t_axm.s8 {} ⊢ y0 
				t_axm.s8 {} ⊢ y1 
				t_axm.s8 {} ⊢ y2 
				_nil {} ⊢ l0 
				_cns { y0 l0 } ⊢ l0 
				_cns { y1 l0 } ⊢ l0 
				RP.rcd l0 ⊢ y0 
				imp { y2 y0 } ⊢ yx 
				RP.atm yx ⊢ yx 
				» "_in_fn" _ ⊢ se
				» e_axm.in_fn _ ⊢ k0 
				k_op_axm k0 ⊢ k  
				add_e { tv_n tv evv ev ev_n ns_e se k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
				
				t_axm.s8 {} ⊢ y0 
				$ y0 ⊢ y0,y1 
				_nil {} ⊢ l0 
				_cns { y0 l0 } ⊢ l0 
				_cns { y1 l0 } ⊢ l0
				RP.rcd l0 ⊢ y0 
				$ y0 ⊢ y0,y1 
				imp { y1 y0 } ⊢ yx 
				RP.atm yx ⊢ yx 
				» "_emt_s8_to" _ ⊢ se
				» e_axm.emt_s8_to _ ⊢ k0 
				k_op_axm k0 ⊢ k 
				add_e { tv_n tv evv ev ev_n ns_e se k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
				
				t_axm.s8 {} ⊢ y0 
				$ y0 ⊢ y0,y1 
				imp { y1 y0 } ⊢ yx 
				RP.atm yx ⊢ yx 
				» "_cd" _ ⊢ se
				» e_axm.cd _ ⊢ k0 
				k_op_axm k0 ⊢ k 
				add_e { tv_n tv evv ev ev_n ns_e se k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
				
				
				_nil {} ⊢ ep
				rp8.e {} ⊢ ec 
				» 0r _ ⊢ dd 
				» 0r _ ⊢ rtm_n 
				» _^ _ ⊢ ec1 
					`bits 64 
					`%define SS_MAX 2000
					`%define SS_NULL 0xffff_ffff_ffff_0000
					`extern exit 
					`extern printf 
					`extern sprintf
					`extern malloc 
					`extern calloc
					`extern free 
					`extern isspace 
					`extern strtoul
					`extern strlen
					`section .bss 
					`	tmp: resq 64
					`	ret_vct: resq 64
					` rsp_tmp: resq 1
					`
					`; SS segments 
					`	SS_TOP: resq 1
					`	SS_VCT: resq 16*SS_MAX
					`	SS_BTM: resq 1 
					`
					`	SS_LN_TOP: resq 1
					`	SS_LN_VCT: resq 2*SS_MAX
					`	SS_LN_BTM: resq 1  
					`
					`	SS_PT_TOP: resq 1
					`	SS_PT_VCT: resq 3*SS_MAX
					`	SS_PT_BTM: resq 1 
					`
					`stat: resb 144
  				`struc STAT
    			`	.st_dev         resq 1
    			`	.st_ino         resq 1
    			`	.st_mode        resd 1
    			`	.st_nlink       resd 1
    			`	.st_uid         resd 1
    			`	.st_gid         resd 1
    			`	.st_rdev        resq 1
    			`	.pad1           resq 1
    			`	.st_size        resq 1
   				`	.st_blksize     resd 1
    			`	.pad2 resd 1
    			`	.st_blocks      resq 1
    			`	.st_atime       resq 1
    			`	.st_atime_nsec  resq 1
    			`	.st_mtime       resq 1
    			`	.st_mtime_nsec  resq 1
    			`	.st_ctime       resq 1
    			`	.st_ctime_nsec  resq 1
    			`	.__unused4  resd 1
    			`	.__unused5  resd 1
  				`endstruc
					// 

				rp8.add_s8 { ec ec1 } ⊢ ec
				» 1r _ ⊢ rnx 
				» "SS_MAX" _ ⊢ rmx 
				» 16r _ ⊢ ssN 
				ss_rcd_n_lp { rnx ssN rmx ec } ⊢ { ssN rmx ec }
			
				» _^ _ ⊢ sc1 
					`section .data
					`	err_n: dq 0
					`	fmt_err_line: db "err:%x",10,0
					`	fmt_r64: db "%dr",0
					`	fmt_s8: db 34,"%s",34,0
					`	fmt_d: db "%d",0
					`	fmt_x: db "%x",0
					`	fmt_arr_l: db "{| ",0
					`	fmt_arr_r: db "|}",0
					`	rt_err0: db "rt_err 0:",10,0 
					`	unt: dq 0x0
					`
					`	unt_0: dq 0x0 
					`	unt_1: dq 0x00_01_0000_0000_0000 
					`	unt_2: dq 0x00_02_0000_0000_0000 
					`	unt_3: dq 0x00_03_0000_0000_0000 
					`	unt_4: dq 0x00_04_0000_0000_0000 
					`	unt_5: dq 0x00_05_0000_0000_0000 
					`	unt_6: dq 0x00_06_0000_0000_0000 
					`	unt_7: dq 0x00_07_0000_0000_0000 
					`	unt_8: dq 0x00_08_0000_0000_0000 
					`
					`section .text
					`global _start
					`rpc_s8: ; rdi ⊢ rax
					`	mov rsi,0x0000_ffff_ffff_ffff
					`	and rsi,QWORD [rdi]  
					`	push rdi 
					`	push rsi 
					`	and rsi,~111b
					`	lea rdi,[rsi+16]
					`	mov rsi,1 
					`	xor rax,rax 
					`	mov QWORD [rsp_tmp],rsp 
					`	and rsp,~0xf 
					`	call calloc 
					`	mov rsp,QWORD [rsp_tmp]
					`	pop rcx 
					`	mov QWORD [rax],rcx
					`	pop rsi 
					`	add rsi,8
					`	lea rdi,[rax+8]
					`	cld 
					`	rep movsb
					`	ret
					`     
					`esc_s8: ; rdi ⊢ rax 
					`	mov rsi,0x0000_ffff_ffff_ffff
					`	and rsi,QWORD [rdi] 
					`	mov rax,rsi 
					`	shl rax,1 
					`	sub rsp,rax 
					`esc_s8_lp0: 
					`
					`arr_of_lst: 
					`	mov rsi,0 
					`arr_of_lst_r:
					`	movzx rax,BYTE [rdi+6]
					`	cmp rax,1
					`	jz arr_of_lst_end 
					`	push QWORD [rdi+8] 
					`	mov rdi,QWORD [rdi+16]
					`	add rsi,1 
					`	call arr_of_lst_r
					`	sub rsi,1 
					`	pop QWORD [rax+8+8*rsi]
					`	ret 
					`arr_of_lst_end: 
					`	push rsi 
					`	xor rax,rax
					`	mov rdi,8
					`	add rsi,1 
					`	mov QWORD [rsp_tmp],rsp 
					`	and rsp,~0xf 
					`	call calloc
					`	mov rsp,QWORD [rsp_tmp]
					`	pop rsi 
					`	mov QWORD [rax],rsi
					`	ret 
					`
					`scf_d: ; rdi=src ⊢ rax=flg rdi=dst rsi=n
					`	push rdi
					`	movzx rdi,BYTE [rdi]
					`	mov QWORD [rsp_tmp],rsp
					`	and rsp,~0xf
					`	call isspace
					`	mov rsp,QWORD [rsp_tmp]
					`	cmp rax,0
					`	jnz scf_d_err0 
					`	jmp scf_d_scf 
					`scf_d_err0: 
					`	add rsp,8
					`	mov rax,0
					`	ret
					`	scf_d_scf:
					`	mov rdi,QWORD [rsp]
					`	sub rsp,8
					`	mov rsi,rsp
					`	mov rdx,10
					`	mov rax,0
					`	mov QWORD [rsp_tmp],rsp
					`	and rsp,~0xf
					`	call strtoul
					`	mov rsp,QWORD [rsp_tmp]
					`	pop rsi
					`	pop rdi
					`	sub rsi,rdi
					`	jz scf_d_err1
					` mov rdi,rax
					`	mov rax,1 
					`	ret
					`scf_d_err1:
					`	mov rax,0 
					`	ret
					`
					`scf_x: ; rdi=src ⊢ rax=flg rdi=dst rsi=n
					`	push rdi
					`	movzx rdi,BYTE [rdi]
					`	mov QWORD [rsp_tmp],rsp
					`	and rsp,~0xf
					`	call isspace
					`	mov rsp,QWORD [rsp_tmp]
					`	cmp rax,0
					`	jnz scf_x_err0 
					`	jmp scf_x_scf 
					`scf_x_err0: 
					`	add rsp,8
					`	mov rax,0
					`	ret
					`	scf_x_scf:
					`	mov rdi,QWORD [rsp]
					`	sub rsp,8
					`	mov rsi,rsp
					`	mov rdx,16
					`	mov rax,0
					`	mov QWORD [rsp_tmp],rsp
					`	and rsp,~0xf
					`	call strtoul
					`	mov rsp,QWORD [rsp_tmp]
					`	pop rsi
					`	pop rdi
					`	sub rsi,rdi
					`	jz scf_x_err1
					` mov rdi,rax
					`	mov rax,1 
					`	ret
					`scf_x_err1:
					`	mov rax,0 
					`	ret
					`
					`mlc_s8: ; rdi=len  
					`	push rdi 
					`	and rdi,~111b
					`	lea rdi,[rdi+16] 
					`	mov rsi,1 
					`	xor rax,rax 
					`	mov QWORD [rsp_tmp],rsp 
					`	and rsp,~0xf 
					`	call calloc 
					`	mov rsp,QWORD [rsp_tmp]
					`	pop QWORD [rax] 
					`	ret
					`
					`s8_of_c_stg: 
					`	push rdi
  				`	mov QWORD [rsp_tmp],rsp
  				`	and rsp,~0xf
  				`	xor rax,rax
  				`	call strlen
  				`	mov rsp,QWORD [rsp_tmp]
  				`	push rax
  				`	mov rdi,rax
  				`	call mlc_s8
  				`	pop rcx
  				`	pop rsi
  				`	mov rdi,rax
  				`	add rdi,8
  				`	cld
  				`	rep movsb
  				`	ret
					`
					`in_fn: 
					`	mov rax,2
					`	mov rsi,2
  				`	syscall
  				`	push rax ; [rsp]=fd
  				`	mov rdi,rax
  				`	mov rax,5
  				`	mov rsi,stat
  				`	syscall
  				`	mov rdi,[stat + STAT.st_size]
  				`	call mlc_s8
  				`	mov rdi,QWORD [rsp]
					`	push rax ; [rsp]=buf
  				`	mov rsi,rax
					`	add rsi,8
  				`	mov rax,0
 				 	`	mov rdx,[stat+STAT.st_size]
  				`	syscall
  				`	mov rax,3
  				`	mov rdi,QWORD [rsp+8]
  				`	syscall
					`	mov rax,QWORD [rsp]	
					`	add rsp,16
					`	ret 
					`
					`out_fn: ; rdi=fn,rsi=src
					`	push rsi 
					`	mov rax,2
    			`	mov rsi,0x42
    			`	syscall
    			`	pop rsi 
					`	push rax
    			`	mov rdi,rax
					`	mov rdx,QWORD [rsi]
					`	mov rax,0x0000_ffff_ffff_ffff
					`	and rdx,rax
    			`	add rsi,8
    			`	mov rax,1
    			`	syscall
    			`	pop rdi
    			`	mov rax,3
    			`	syscall
    			`	ret
					`_start:
					`SS_init:
					`	mov QWORD [SS_TOP],SS_VCT
					`	mov rdi,0 
					`	mov rax,SS_VCT 
					`SS_lp: 
					`	cmp rdi,SS_MAX 
					`	jz SS_end 
					`	add rdi,1 
					`	lea rsi,[rax+8*16] 
					`	mov QWORD [rax],rsi 
					`	mov rax,rsi 
					`	jmp SS_lp 
					`SS_end:
					`	mov rsi,SS_NULL 
					`	mov [rax],rsi
					`
					`SS_LN_init:
					`	mov QWORD [SS_LN_TOP],SS_LN_VCT
					`	mov rdi,0 
					`	mov rax,SS_LN_VCT 
					`SS_LN_lp: 
					`	cmp rdi,SS_MAX 
					`	jz SS_LN_end 
					`	add rdi,1 
					`	lea rsi,[rax+8*2] 
					`	mov QWORD [rax],rsi 
					`	mov rax,rsi 
					`	jmp SS_LN_lp 
					`SS_LN_end:
					`	mov rsi,0xffff_ffff_ffff_0100 
					`	mov [rax],rsi
					`
					`SS_PT_init:
					`	mov QWORD [SS_PT_TOP],SS_PT_VCT
					`	mov rdi,0 
					`	mov rax,SS_PT_VCT 
					`SS_PT_lp: 
					`	cmp rdi,SS_MAX 
					`	jz SS_PT_end 
					`	add rdi,1 
					`	lea rsi,[rax+8*3] 
					`	mov QWORD [rax],rsi 
					`	mov rax,rsi 
					`	jmp SS_PT_lp 
					`SS_PT_end:
					`	mov rsi,0xffff_ffff_ffff_0200 
					`	mov [rax],rsi
					`
					`; _args 
					`	mov rdi,QWORD [rsp]
					` lea rdi,[rdi+1]
					`	mov rsi,8 
					`	mov QWORD [rsp_tmp],rsp
					`	and rsp,~0xf 
					`	xor rax,rax 
					`	call calloc 
					`	mov rsp,QWORD [rsp_tmp]
					`	pop r13
					`	mov QWORD [rax],r13
					`	xor r14,r14
					`	mov r15,rax
					`args_lp:
					`	cmp r14,r13
					`	jz args_lp_end
					`	pop rdi
					`	call s8_of_c_stg 
					`	mov QWORD [r15+8+8*r14],rax
					`	add r14,1 
					`	jmp args_lp 
					`args_lp_end:
					`	mov r13,r15
					`	
					//
				rp8.add_s8 { ec sc1 } ⊢ ec
				» 1r _ ⊢ ssn0 
				ss_init_rcd_lp { ssn0 rmx ssN ec } ⊢ { rmx ssN ec } 
	
				» "\tjmp RTM_0\n" _ ⊢ sc1 
				rp8.add_s8 { ec sc1 } ⊢ ec 
				» 0r _ ⊢ lb_n 
				
				» "_byt" _ ⊢ wg0 
				t_axm.r64 {} ⊢ tg0 
				» e_axm.byt _ ⊢ ak0 
				k_op_axm ak0 ⊢ k
				add_grm { { wg0 tg0 k } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep ec rtm_n lb_n } } ⊢ { i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep ec rtm_n lb_n } }

				» "_scf_d" _ ⊢ wg0 
				t_axm.r64 {} ⊢ tg0 
				» e_axm.scf_d _ ⊢ ak0 
				k_op_axm ak0 ⊢ k
				add_grm { { wg0 tg0 k } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep ec rtm_n lb_n } } ⊢ { i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep ec rtm_n lb_n } }

				» "_scf_x" _ ⊢ wg0 
				t_axm.r64 {} ⊢ tg0 
				» e_axm.scf_x _ ⊢ ak0 
				k_op_axm ak0 ⊢ k
				add_grm { { wg0 tg0 k } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep ec rtm_n lb_n } } ⊢ { i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep ec rtm_n lb_n } }

				_nil {} ⊢ gfl
				_nil {} ⊢ ns_r 
				» 0r _ ⊢ rsp 
				_nil {} ⊢ rl

				» "_args" _ ⊢ nx0 
				ast.dst_reg nx0 ⊢ dx0 
				_nil {} ⊢ rs_n 
				_cns { dx0 rs_n } ⊢ rs_n 

				t_axm.s8 {} ⊢ y0 
				t_axm.arr y0 ⊢ y0 
				_nil {} ⊢ rs_t 
				_cns { y0 rs_t } ⊢ rs_t 
				
				» 0r _ ⊢ lvx 
				_inc lvx ⊢ lvx 
				crt_dst_lst { lvx rv tv tv_n rv_n ns_r rs_n } ⊢ { lvx rv tv tv_n rv_n ns_r rs_n rs_t0 }
				unify.f_lst { tv rs_t0 rs_t } ⊢ tv 
				_dec lvx ⊢ lvx 
						
				_nil {} ⊢ rs_i 
				stt_v.opq {} ⊢ q0 
				stt_v.ref q0 ⊢ h0 
				stt_v.arr h0 ⊢ h0 
				stt_v.ref h0 ⊢ h0
				» 0r _ ⊢ rx0 
				stt_v.hp { rx0 h0 } ⊢ ax0 
				RP.atm ax0 ⊢ px0 
				_cns { px0 rs_i } ⊢ rs_i 
				_nil {} ⊢ dl
				emt.idx.crt_lst { irv rs_n rs_i rl dl } ⊢ { irv rl dl } 
				
				slv_file_lp { { rsp rl ns_r } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel gfl { dd ep ec rtm_n lb_n } } ⊢| 
			@.slv_file_lp { { rsp rl ns_r } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel gfl { dd ep0 ec0 rtm_n lb_n } }
				» "enter slv_file_lp" _ ⊢ sxe0 
				_emt sxe0 ⊢ sxe0 
				$ ep0 ⊢ ep0,ep0_0 
				s8_of_s8_lst ep0_0 ⊢ sep0 
				_emt sep0 ⊢ sep0 
				$ gel ⊢ 
				∐ _cns◂{ e gel } .
					$ e ⊢ 
					∐ ast.mdl_etr◂{ w e } .
						$ e ⊢ 
						∐ ast.mdl_def◂gel0 . 
							» "mdl_def" _ ⊢ sxe1 
							_emt sxe1 ⊢ sxe1 
							_emt w ⊢ w 
							» _^ dd,w ⊢ dd,w,ep1 
								0'*"\t" "§§ " 1' "\n" // 
							_cns { ep1 ep0 } ⊢ ep0
							_inc dd ⊢ dd 
							$ mv_n ⊢ mv_n,mv_n_0 
							_inc mv_n ⊢ mv_n
							_set_q { mmv i ns_m } ⊢ { mmv i } 
							_set_q { mev i ns_e } ⊢ { mev i } 
							_set_q { mtv i ns_t } ⊢ { mtv i } 
							_cns { i il } ⊢ il 
							_nil {} ⊢ ns_m 
							_nil {} ⊢ ns_e 
							_nil {} ⊢ ns_t 
							slv_file_lp { { rsp rl ns_r } mv_n_0 il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel0 gfl { dd ep0 ec0 rtm_n lb_n } } ⊢ { { rsp rl ns_r } mv_n_0 il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gfl { dd ep0 ec0 rtm_n lb_n } }
							_set_q { mmv mv_n_0 ns_m } ⊢ { mmv mv_n_0 } 
							_set_q { mev mv_n_0 ns_e } ⊢ { mev mv_n_0 } 
							_set_q { mtv mv_n_0 ns_t } ⊢ { mtv mv_n_0 } 
							» _^ dd ⊢ dd,ep1 
								0'*"\t" "∎∎\n" // 
							_cns { ep1 ep0 } ⊢ ep0
							_dec dd ⊢ dd 
							$ il ⊢ 
							∐ _cns◂{ i il } . 
								_some mv_n_0 ⊢ o 
								_get_q { mmv i } ⊢ { mmv i ns_m }
								_get_q { mev i } ⊢ { mev i ns_e } 
								_get_q { mtv i } ⊢ { mtv i ns_t } 
								_cns { { w o } ns_m } ⊢ ns_m
								slv_file_lp { { rsp rl ns_r } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel gfl { dd ep0 ec0 rtm_n lb_n } } ⊢| 
							∐. _nil◂{} . 
								» "slv_file_lp 0" _ ⊢ se 
								_emt se ⊢ se 
								∎| 
						∐. ast.mdl_ln◂n0 .
							$ n0 ⊢ n0,n0_0 
							ast.pnt_name n0_0 ⊢ sn0  							
							» _^ dd,w,sn0 ⊢ dd,w,sn0,ep1 
								0'*"\t" "§§ " 1' " = " 2' "\n" // 
							_cns { ep1 ep0 } ⊢ ep0
							$ n0 ⊢ n0,n0_0 
							slv_ns_m { n0 mmv ns_m il } ⊢ { mmv ns_m il i_m } 
							_some i_m ⊢ o 
							_cns { { w o } ns_m } ⊢ ns_m 
							slv_file_lp { { rsp rl ns_r } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel gfl { dd ep0 ec0 rtm_n lb_n } } ⊢|
					∐ ast.grm_etr◂g .
						slv_grm.f { g i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } } ⊢ { g i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel { dd ep0 ec0 rtm_n lb_n } }
						» "\tret\n" _ ⊢ ret_g 
						emt_grm.f { gfl ret_g ec0 ev evv rv irv tav tv tv_n lb_n g } ⊢ { gfl ret_g ec0 ev evv rv irv tav tv tv_n lb_n }
						slv_file_lp { { rsp rl ns_r } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel gfl { dd ep0 ec0 rtm_n lb_n } } ⊢|
					∐ ast.lc_etr◂{ w e } .
						» "lc_etr" _ ⊢ sxe1 
						_emt sxe1 ⊢ sxe1 
						_emt w ⊢ w 
						$ e ⊢
						∐ ast.lc_def◂{ d td lc } .
							_nil {} ⊢ ns_r_e
							» 1r _ ⊢ lv 
							crt_dst_ptn { lv rv tv tv_n rv_n ns_r_e d } ⊢ { lv rv tv tv_n rv_n ns_r_e d y } 
							$ y ⊢ y,y0 
							rtr_dst_ptn { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t y0 td } ⊢ { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t } 
							slv_r { lv { mmv mev ev ns_m ns_e il } rv tv tv_n rv_n ns_r_e lc } ⊢ { lv { mmv mev ev ns_m ns_e il } rv tv tv_n rv_n ns_r_e lc yr } 
							_dec lv ⊢ lv 
							gen { tv_n tv lv y } ⊢ { tv_n tv lv y } 
							$ y ⊢ y,y0 
							$ yr ⊢ yr,yr0 
							imp { y0 yr0 } ⊢ yx 
							RP.atm yx ⊢ yx 
							$ yx ⊢ yx,yx0 
							pnt_type_k { tv yx0 } ⊢ { tv syx } 
							_nil {} ⊢ ql0 
							$ y ⊢ y,y0
							chk_pv { tv y0 ql0 } ⊢ { tv ql0 } 
							∐ ql0 ⊢ _nil◂{} . 
								rset.ini {} ⊢ s0 
								» 0r _ ⊢ pv_n 
								_nil {} ⊢ alp 
								$ y ⊢ y,y0 
								alc_type_k.f { pv_n alp tav tv_n tv s0 y0 } ⊢ { pv_n alp tav tv_n tv s0 p0 } 
								rset.ini {} ⊢ sr0 
								$ yr ⊢ yr,yr0 
								alc_type_k.f { pv_n alp tav tv_n tv sr0 yr0 } ⊢ { pv_n alp tav tv_n tv sr0 pr0 } 
								$ p0 ⊢ p0,p00 
								stt_v.pnt.f p00 ⊢ sp0 
								$ pr0 ⊢ pr0,pr00 
								stt_v.pnt.f pr00 ⊢ spr0 
								$ p0 ⊢ p0,p00 
								_nil {} ⊢ rl_e 
								_nil {} ⊢ dl 
								emt.idx.crt_ptn { irv d p00 rl_e dl } ⊢ { irv rl_e dl } 
								$ pr0 ⊢ pr0,pr00 
								$ pr0 ⊢ pr0,pr0_0 
								emt.mk_rsp pr0_0 ⊢ rsp_d 
								$ p0 ⊢ p0,p00 
								emt.mk_rsp p00 ⊢ rsp_e 
								$ rsp_e ⊢ rsp_e,rsp0 
								$ rsp_d ⊢ rsp_d,rsp_d0 
								k_op { rsp0 p0 rsp_d pr0 } ⊢ k 
								##k_op_axm {} ⊢ k 
								$ ev_n ⊢ ev_n,en 
								» _^ dd,w,syx,sp0,spr0,en ⊢ dd,w,syx,sp0,spr0,en,ep1 
									0'*"\t" "§ " 1' "(" 5d' ") " 3' " ⊢ " 4' " : " 2' "\n" // 
								_cns { ep1 ep0 } ⊢ ep0
								_nil {} ⊢ cl 
								rp8.e {} ⊢ ee0 
								» _^ en,w,sp0,spr0,syx ⊢ en,w,sp0,spr0,syx,ec1 
									"ETR_" 0d' ": ; " 1' " " 2' " ⊢ " 3' " : " 4' "\n" //
								add_e { tv_n tv evv ev ev_n ns_e w k yx } ⊢ { tv_n tv evv ev ev_n ns_e }
								rp8.add_s8 { ee0 ec1 } ⊢ ee0 
								∐ rsp'=0r . 
									f_etr { rsp_d0 pr00 yr } ⊢ ft 
									emt.lc_code.f { { gfl cl } lb_n { ev evv } rsp_e { rv irv } tav tv_n tv lc ee0 rl_e ft } ⊢ { { gfl cl } lb_n { ev evv } rsp_e { rv irv } tav tv_n tv ee0 rl_e ft } 
									rp8.cct { ec0 ee0 } ⊢ ec0  
									slv_file_lp { { rsp rl ns_r } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel gfl { dd ep0 ec0 rtm_n lb_n } } ⊢|
								∐. . 
									» "\tadd rsp,8\n" _ ⊢ se0 
									rp8.add_s8 { ee0 se0 } ⊢ ee0 
									f_etr { rsp_d0 pr00 yr } ⊢ ft 
									emt.lc_code.f { { gfl cl } lb_n { ev evv } rsp_e { rv irv } tav tv_n tv lc ee0 rl_e ft } ⊢ { { gfl cl } lb_n { ev evv } rsp_e { rv irv } tav tv_n tv ee0 rl_e ft } 
									rp8.cct { ec0 ee0 } ⊢ ec0 
									slv_file_lp { { rsp rl ns_r } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel gfl { dd ep0 ec0 rtm_n lb_n } } ⊢|
							∐. .
								k_op_gnr { d lc } ⊢ k 
								add_e { tv_n tv evv ev ev_n ns_e w k yx } ⊢ { tv_n tv evv ev ev_n ns_e }
								slv_file_lp { { rsp rl ns_r } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel gfl { dd ep0 ec0 rtm_n lb_n } } ⊢|
						∐ ast.lc_ln◂c . 
							$ c ⊢ 
							∐ ast.cst_name◂cn . 
								$ cn ⊢ cn,cn0 
								slv_ns_e { cn0 mmv mev ev ns_m ns_e il } ⊢ { mmv mev ev ns_m ns_e il i_e } 
								_some i_e ⊢ o 
								_cns { { w o } ns_e } ⊢ ns_e 
								slv_file_lp { { rsp rl ns_r } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel gfl { dd ep0 ec0 rtm_n lb_n } } ⊢|
							∐. ast.cst_v◂v . 
								slv_cst_v v ⊢ { v yx } 
								k_cst_v v ⊢ k 
								add_e { tv_n tv evv ev ev_n ns_e w k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
								slv_file_lp { { rsp rl ns_r } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel gfl { dd ep0 ec0 rtm_n lb_n } } ⊢|
						∐. ast.lc_cst◂lc . 
							##_nil {} ⊢ ns_r 
							» 0r _ ⊢ lv 
							slv_r { lv { mmv mev ev ns_m ns_e il } rv tv tv_n rv_n ns_r lc } ⊢ { lv { mmv mev ev ns_m ns_e il } rv tv tv_n rv_n ns_r lc yr0 } 
							##add_e { tv_n tv ev ev_n ns_e w yr } ⊢ { tv_n tv ev ev_n ns_e } 
							» _^ dd ⊢ dd,ep1 
								0'*"\t" "§ _ _ ⊢ _\n" // 
							_cns { ep1 ep0 } ⊢ ep0
							##add_e { tv_n tv evv ev ev_n ns_e w k yx } ⊢ { tv_n tv evv ev ev_n ns_e }
							$ rtm_n ⊢ rtm_n,n0 
							_inc rtm_n ⊢ rtm_n 
							rp8.e {} ⊢ er0 
							» _^ n0,rtm_n ⊢ n0,rtm_n,ec1 
								"RTM_" 0d' ":\n"
								"\tpush RTM_" 1d' "\n" //
							rp8.add_s8 { er0 ec1 } ⊢ er0 
							##» 0r _ ⊢ rsp 
							##_nil {} ⊢ rl
							##_nil {} ⊢ l0 
							##RP.rcd l0 ⊢ pr0 
							##» 0r _ ⊢ rsp_d 
							##_nil {} ⊢ l0 
							##RP.rcd l0 ⊢ yr 
							f_rtm {} ⊢ ft 
							_nil {} ⊢ cl
							emt.lc_code.f { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv lc er0 rl ft } ⊢ { { gfl cl } lb_n { ev evv } rsp { rv irv } tav tv_n tv er0 rl ft } 
							rp8.cct { ec0 er0 } ⊢ ec0 
							slv_file_lp { { rsp rl ns_r } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel gfl { dd ep0 ec0 rtm_n lb_n } } ⊢|
					∐ ast.lc_qlq_etr◂q . 
						slv_lc_clq.f { { mmv mev ev ns_m ns_e il } irv tav evv rv tv tv_n ev_n rv_n q gfl { dd ep0 ec0 lb_n } } ⊢ { { mmv mev ev ns_m ns_e il } irv tav evv rv tv tv_n ev_n rv_n q gfl { dd ep0 ec0 lb_n } }
						slv_file_lp { { rsp rl ns_r } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel gfl { dd ep0 ec0 rtm_n lb_n } } ⊢|
					∐ ast.dt_etr◂{ w e } .
						$ e ⊢ 
						∐ ast.dt_def◂{ as dl } .
							$ tx_n ⊢ tx_n,x 
							$ x ⊢ x,x0 
							_inc tx_n ⊢ tx_n
							$ w ⊢ w,w0 
							slv_args_def { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t as x dl } ⊢ { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t al k yx dl ql } 
							add_t { tv_n tv ns_t w k } ⊢ { tv_n tv ns_t }
							» 0r _ ⊢ an 
							slv_dt_def { { mmv mev ns_m il } { tav evv } an mtv al yx tv tv_n ns_t ev ev_n ns_e dl { dd ep0 ec0 } } ⊢ { { mmv mev ns_m il } { tav evv } an mtv al yx tv tv_n ns_t ev ev_n ns_e { dd ep0 ec0 } ac kl }
							mk_t_aux_f { tv_n tv ql kl } ⊢ { tv_n tv ql kl }
							$ kl ⊢ kl,kl0 
							» 0r _ ⊢ pv_n 
							_nil {} ⊢ alp 
							alc_type_k.hp_lst { pv_n alp tav tv_n tv kl0 } ⊢ { pv_n alp tav tv_n tv hl }
							$ ql ⊢ ql,ql0 
							subst_lst { ql0 alp } ⊢ { ql0 alp } 
							_some { ql kl ql0 hl } ⊢ o 
							##_none {} ⊢ o 
							_set_q { tav x0 { w0 o } } ⊢ { tav x } 
							slv_file_lp { { rsp rl ns_r } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel gfl { dd ep0 ec0 rtm_n lb_n } } ⊢| 
						∐. ast.dt_ln◂{ as y } . 
							_nil {} ⊢ al
							slv_args_ln { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t as y al } ⊢ { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t al k l2 } 
							$ k ⊢ k,k0 
							pnt_type_k { tv k0 } ⊢ { tv sk } 
							» _^ dd,w,tv_n,sk ⊢ dd,w,tv_n,sk,ep1 
								0'*"\t" "¶ " 1' "(" 2d' ") ~ " 3' // 
							_cns { ep1 ep0 } ⊢ ep0 
							add_t { tv_n tv ns_t w k } ⊢ { tv_n tv ns_t } 
							slv_file_lp { { rsp rl ns_r } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel gfl { dd ep0 ec0 rtm_n lb_n } } ⊢|
					∐. ast.dt_qlq_etr◂q .
						» "dt_clq_etr" _ ⊢ sec0 
						_emt sec0 ⊢ sec0
						slv_dt_clq.f { q { mmv mev ev ns_m ns_e il } tav evv ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } } ⊢ { { mmv mev ev ns_m ns_e il } tav evv ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } }
						slv_file_lp { { rsp rl ns_r } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gel gfl { dd ep0 ec0 rtm_n lb_n } } ⊢|
				∐. _nil◂{} . 
					∎ { { rsp rl ns_r } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gfl { dd ep0 ec0 rtm_n lb_n } }
		§ emt_rtm a0 
			slv_file a0 ⊢ { { rsp rl ns_r } i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t gfl { dd ep0 ec0 rtm_n lb_n } }		
			» _^ rtm_n ⊢ rtm_n,ec1 
				"RTM_" 0d' ":\n" 	
				`	mov rdi,0
				`	mov QWORD rdi,rsp
  			`	and rsp,~0xf
				`	push rdi
  			`	call exit
				`	pop rdi
  			`	mov rsp,rdi
				`
				`err: 
				`	mov rdi,fmt_err_line
				`	mov rsi,QWORD [err_n]
				`	xor rax,rax
				`	mov QWORD [rsp_tmp],rsp
				`	and rsp,~0xf
				`	call printf
				`	mov rsp,QWORD [rsp_tmp]
  			`	mov rax,1
  			`	mov rbx,0
  			`	int 0x80
				//
			rp8.add_s8 { ec0 ec1 } ⊢ ec0 
			∎ { i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t { dd ep0 ec0 rtm_n lb_n } }		
		∎∎
	
	§ f0 «
		» _args _ ⊢ ags
		∐ ags ⊢ _cns◂{ pn tl0 }; tl0 ⊢ _cns◂{ fn0 tl1 }; tl1 ⊢ _nil◂{} .
			_in_fn fn0 ⊢ { fn0 fn0_c }
			» 0r _ ⊢ x1
			syntax.file.prs { fn0_c x1 } ⊢ { fn0_c x1 a0 }
			∐ a0 ⊢ _some◂a0 .
				$ a0 ⊢ 
				∐ syntax.prs_vld◂a0 . 
					_emt x1 ⊢ x1 
					ns.emt_rtm a0 ⊢ { i il { hpv hpv_n } { mmv mev mtv mv_n rv rv_n ev ev_n tv tv_n } irv tav evv tx_n ns_m ns_e ns_t { dd ep0 ec0 rtm_n lb_n } }		
					s8_of_s8_lst ep0 ⊢ sep0 
					_emt sep0 ⊢ sep0 
					rp8.mk_s8 ec0 ⊢ { ec0 sec0 }
					_emt sec0 ⊢ sec0 
					» "rm -f EMT.mdls.s\n" _ ⊢ sxx
					_cd sxx ⊢ sxx  
					» "touch EMT.mdls.s\n" _ ⊢ sxx1 
					_cd sxx1 ⊢ sxx1 
					» "EMT.mdls.s" _ ⊢ ff0 
					_emt_s8_to { ff0 sec0 } ⊢ { ff0 sec0 } 
					» _^ _ ⊢ sx0 
						`yasm -g dwarf2 -f elf64 EMT.mdls.s -o out.o
      			`gcc out.o -nostartfiles -no-pie -pg -g -o EMT.mdls.exe 
						`ln -f EMT.mdls.exe EMT 
						//
					_cd sx0 ⊢ sx0 
					##_emt v ⊢ v 
					\[
					» 0r _ ⊢ dn
					ast.pnt { dn a0 } ⊢ { dn sr }
					» _^ sr ⊢ sr,sr0
						"prs_vld:\n"
						0'
						 //
					_emt sr0 ⊢ sr0
					\]
					∎ {}
				∐. syntax.prs_err◂err . 
						syntax.pnt_prs_err err ⊢ s_err 
						_emt s_err ⊢ s_err 
						∎ {}
			∐. .
				» "prs_failed:\n" _ ⊢ sc0
				_emt sc0 ⊢ sc0
				∎ {}
		∐. .
			» "no argument\n:" _ ⊢ s
			_emt s ⊢ s 
			∎ {}			
∎∎
