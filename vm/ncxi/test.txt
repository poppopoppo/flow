"AA"
\"AA\"

¶ t0 < t1 ≃
  ∐ .. : ..
  ∐ .. : ..
  ∐<

%[4]◂432
¶ f +≃ a b c d e

|» { r0 r1 r2 r3 }
∇ { r0 r1 ∠r2 } ⊢ { r3 r4 }
  ∐ { c0 c1 { c2 c3 c4} }
  $ c2 ⊢ c2_0,c2_1,c2_2
  ◂ c2_0,c3 ⊢ d0
  ∎ { c3 c4 d0 }
  ∐
§ @.fact -: ℤ ⊢ ℤ
  |» x0
  $ x0 ⊢ x1,x2
  ∇ { x1 ∠x2 } ⊢ y
    ∐ { x1 _ }
    » 1 |~ y
    ∎ y
    ∐ { x1 _ }
    » $*(fact◂($-1))  |~ x1 ⊢ y
    ∎ y
  ∎ y

§ @.fact -: ℤ ⊢ ℤ
  |» x0
  $ x0 ⊢ x1,x2
  ∇ { x1 ∠x2 } ⊢|
    ∐ { x1 _ }
    » 1 |~ _ ⊢| ∎
    ∐ { x1 _ }
    » $*(fact◂($-1))  |~ x1 ⊢| ∎
;
§ @.fact -: ℤ ⊢ ℤ
  |» x
  ∇ ∠x ⊢|
    ∐ _
    » 1 |~ _ ⊢|
    ∐ x
    » ($+1)*(fact◂$) |~ x ⊢|
;
§ @.fact -: ℤ ⊢ ℤ
  |» x
  ∠ x
    ∐ _
    » 1 |~ _ ⊢|
    ∐ x
    » ($+1)*(fact◂$) |~ x ⊢|
;
§ @.fact -: ℤ ⊢ ℤ
  |» x
  $ x ⊢ x0,x1
  ∠ x0
    ∐ _
    » ! 1 |~ _ ⊢|
    ∐ _
    » ! $*(fact◂($-1)) |~ x1 ⊢|
;
§ @.fact -: ℤ ⊢ ℤ
  |» x
  $ x ⊢ x0,x1
  ∠ x0
    ∐ _
    » ! 1 |~ _ ⊢ y
    ∎ y
    ∐ _
    » ! $*(fact◂($-1)) |~ x1 ⊢ y
    ∎ y
§ @.fact_i -: { ℤ ℤ } ⊢ ℤ
  |» { x y }
  $ x ⊢ x0,x1
  ∠ x0
    ∐ _
    ∎ y
    ∐ _
    » (0'-1) (0'*1') |~ { x1 y } ⊢ { x y }
    fact_i  { x y } ⊢|
    ∐|
    ∐.? e

  ? x
  ∐ x
  ∐ e
  ∐|
@.[_].+[ a b c <]◂_ ≃∐[ .. <]
 = a +< (b +< (c +< d'))
± : -{> evo~({> in~a' st~e' }→‹e'›) init~(-a'→e') } ; create callback
{ ± &'◂a' a' }

$-syntax
+0-syntax
Σ◂g0


a|→b
{a|→b a}→(a|→b) : in
(a|→b)→‹{a|→b b}› : out

kinds
_ : toplevel types
{} : record types
{> x y .. } : restricted labeled record types
ℤ : z types
Σ : grammar types
@ : iso recursive types
a'→b' : type constructor
  ‹›::_→_  ⟦⟧::_→_
{ a0 .. an } : record kind

 l0::{> z~| w~| <} ∀ {> x~t0' y~t1' < l0' } {> s~ℤ < l0' }
 r0::{<} ∀ { ℤ ℙ < r0' }
 z0::ℤ ∀ { ℤn◂z0' ℤn◂z0' }→ℤn◂z0'
 (→)::{ _ _ }→_


 \\ { x y }
 ∐\ { a' "A" }
 ∐\ { 3 _ }
 ∐\ _
 ∐|

 |» { v0 v1 v2 }
 » _ |~ { l~v0 s~v1 } ⊢ r
 ![
 mov a,b
 usr0 ◂ { l' s' }
 xor r0,r1
 "# Hello , World !!"
 and rx,[rb],(f◂$)',rcx

 ]!
 \\ r0
  ∐\ ∠[0]◂(∠[1]◂x')
  ..
  ∎ ..
  ∐\ ⟦ "!" "ab" < tl' ⟧
  ∐\ ⟦ "L" < tl' ⟧
  ∐\ _
 ∇
§+ nt0
  |« { x y { z w } }
  +» { x y } , st0
  ..
  @.x r2 |⊢
  ∎ out , st1
  +» y z
  ..
  ∎ ⟦⟧ , { 10 "TX33" ‹› }
  +» z { w x }
  ..
  ∎ ⟦ p0 p1 p2 p3 ⟧ , {}

pkt :

§ main
  |» {}
  ..
  ∎ { .. }
nc test.mdls main



0xSffa0033cdedf
0bS0000110110010110

↑.Lb0
↑[Lb0]
`Lb0
  $ x ⊢ x,x0
  ? x
    \ ⟦⟧ ; nil◂{]
    ..
    ∎
    \ ⟦ x_hd' < x_tl' ⟧ ; = cns◂{ x_hd' x_tl' }
    ..
    ∎

a'→b' as a'
@.a' ≃∐[ a'→b' ]

§ @.fact x
  $ x ⊢ x,x0
  ? x0
    ∐\ 0 | † ‡
    » 0r1 _ ⊢ t0
    $ x ⊢ x,x0
    sub { x0 t0 } ⊢ x0
    fact x0 ⊢ y1
    mul { x y1 } ⊢ y1
    ∎ y1
    |∐\ _ |
    » 0r1 | _ ⊢ y
    ∎ y

unification of pattern
p0 ~ p1
negation
!p0
and
p0,p1
or
p0|p1

  ? x
    ∐\ p0 , eq0 , eq1 , eq2 |
    ∐\ p1 , eq .. |
    ..
    |∐\ pn , .. |
    \
    \.
§ f : ..
¶ K0x,K0y,K0z :: K0
¶ tY ◂ a'
  ..
¶ tX ◂ { a' b' }
  ∐ ..
  ..
¶ a'::K0 ∀ tY ◂ a',b'
  ..
tY :: _ → _
tX :: { _ _ } → _
tY :: K0 → _ → _
tZ :: {> < x,y~| } → _


¶ @.lstN ◂ a'
  ∐ cnsN : { a' lstN◂{a' a'} }
  ∐ nilN : {}
¶ @._ ◂ a'　:: ｌstNX
  ∐ cnsNX : { a' _◂{ a' a' } }
  ∐ nilNX : {}

¶ @._ ◂ a' :: lstX
  ∐ cnsX : { a' _◂a' }
  ∐ nilX : {}

¶' @._ ◂ a',b' :: tplX
  ∐ cnsTX : { a' b' }
  ∐ nilTX : {}

¶' k' ◂ a',b' :: CP2
  ∐ i_0_2 : a'
  ∐ i_1_2 : b'

k' :: _ → lstX ∀ (k'◂a')→z

@.lstN :: _ → _ ◂ x' =∐[ x' lstN◂{x' x'} ]
@.p' ◂ x' =∐[ x' p'◂{x' x'} ]

@._ ∐[> x~s8 y~sgn ]
@.r' ∐[> cns~{ sgn r' } nil~{} ]
@.p' x'


443244m4324


§ ..
  ..
  err s0 ⊢ e0
  ∎| e0 ; raise exception


entr:
  mov r0,r1
  mov r4,r5
  mov r9,r11
  add r0,r1
  mov r0,[r1+8]
  sub r1,r15
  jf0
  ◂* f,x ⊢ f,fx
  scc_v { s0 s1 } ⊢ { s0 s1 s2 }
  eq_v { x0 x1 } ⊢ { _ _ b }
¶+ℙ
  @.g0
  ∐ e0 : "OIJOJ" g0 "XXX" any
  ∐ e1 : ⟦g1⟧ ‹"r"› g2
  ..
  @.g1◂gx'
  ∐ ex : gx' "RTc" gx'
  ..
¶+< _ ◂ x' , t◂x'
  @.a0
  ∐ cx : c0◂{ _ b' } < c2◂{} < @.a1◂x' < _ < c4◂{ h' t' } ,h'=c5◂{ v' w' } < @.a0◂x'
  @.a1 ..
  @.a2 ..

§ fi0 .. |⊢ p0,p1,p2,p3 : _ |⊢ _,_,_,_
  ..
  |∎
  |+ { p0 p3 }
  ..
  ∎ b0
  |+ p0
  ..
  fi0.p2 { %x0 %x1 } |⊢
  ..
  ∎ b1
  |+ { %p1 %p2 %p3 }
  ..
  » fi0.p1 _ ⊢ %o0
  ∎ %b2




0 #
1 #
2 #
3 #
+ #
~ #

» "ABC" _ ⊢ s0
let s0 = "ABC"

§ f %a0
  ..
  ∀ %a1
    g { a0 a1 } ⊢ y
    ∎ y


¶ _ :: grm
  @.g0
  ∐ ..
  ..

¶ g0 :: grm
¶ g1 :: grm
¶ chr :: grm
¶ dgt :: grm
¶ u_al :: grm
¶ l_al :: grm


  » _ { %s0 %s1 } ⊢ s2
    "A" "B" " C\n"
    "\tmov r//..\n"
    "\tmov r9,3\n"
    s0' " ⊢ " s1' "," s1' //


§§ M0
..
§§.
§§ M1
..
§§.
§§ M0 \ M1 \ M2
..
§§.

v⊵{ b k }

HSH ⊵ { b ‹k› }
SET ⊵ { b bl }
ARR◂{ LNK BOX } ⊵ { r64 k }
ARR◂{ OCP UBX } ⊵ { r64 k }
SPC◂{ q' BOX } ⊵ { pt◂k k }
SPC◂{ p' UBX } ⊵ { pt◂k k }
S8◂LNK ⊵ { r64 r8 }
S8◂OCP ⊵ { r64 r8 } = s8
exc : { v'⊵{b' k'} b' k' } ⊢ { v'⊵{b' k'} b' k' }
Ocp

¶ HSH :: VCT_T
¶ ARR :: ARR_T → VCT_T
spc◂k' = SPC ⊵ { pt◂k' k' }

f64
f32
§§ _
§§ _Prm
..
§§.
§§* _Prm

§§ Mx
..
§§.

§ etr0 -: typ0 ⊢ _
  op0 src0 ⊢ dst0
  op1 src1 ⊢ dst1
  ? srcX
    ∐\ mtc0
    ..
    ∐.\ mtcN
    ..
    ∎ retX
§ M._

§ e ..
  ¬ %b0,{ %st0 %st1 .. }
    ..
    ¬∎ %b1,{ %r0 .. }
  » ..
  ? _,.. ⊢ ..
    ∐\
    ..
    ∎
§§ ! e
  § M0._
  § #.M1._

  ¶ ! t_st
    ∐ ..

  § @.e .
    ..
    #.e_lp { b st } ⊢ st
    ..
    ∎

    ! @.e_lp { %b %st } -: { bl t_st }
    ? b
    ∐\ b' ,b'=t
      ..
      e_lp { %b1 %st1 } ⊢|
    ∐.\ b' ,b'=f
      ∎ %st
§§.
§ e = e.e
fix : ((a'→a')→(a'→a'))→(a'→a')
→ : { _ _ } → _
_ : ⊵ : { vct { _ _ } } → _
_ : _ : → : { _ _ } → _


§§
  @.M0
  ..
  @.M1
  ..
  § f0 = M0.g
  § f1 = M1.h
  ..
  § h ..
  ..
  @.M2
§§.

¶¶+ℙ
  @.g0
  ∐ "X" g2
  @.g1
  ..
  @.g2
  ..

§§ g0 : grm
¶ g0.t
§ g0.c_0
§ g0.prs
§§ g1 : grm
¶ g1.t
§ g1.c_0
§ g1.c_1
§ g1.prs


module class
§§ m : C
§ f : m:C ∀ m ⊢ a
  m
.prm.ad.efds fd oijf oijejf
ls

§~ c0
  sgn {} ⊢ p0
  ∎ p0

§~ c0,c1,c2,c3,c4,c5,c6 ; execution \ compile time computation
  » { & & & & & & & } _ ⊢ { p0 p1 p2 p3 p4 p5 p6 }
  ∎ p0,p1,p2,p3,p4,p5,p6

§§§ C0 { %%arg0 %%arg1 .. %%argN } ; compile time computations
  sgn {} ⊢ %p0
  §' f ~ %p0

§§§.

_env.

§~ _
  » "Hello World!!" _ ⊢ s0
  pnt p0 |⊢
  » _env.args _ ⊢ a0
  pp a0 ⊢ p1
  pnt p1 |⊢
  ∎ {}

execution \= compile time computation

§ @.nc %n
  » nc_0 _ ⊢ p0
  rd { %n %p0 {} } |⊢
  ∎ {}

  @.nc_0 { %s {} }

°L0
Lx°
ºB
ºC
@.a' =∐[> L0~s8 B~{} ]

§= S0 _^
  ` mov r0,r1
  ` mov r2,0x0f
  ` mov r3,r4
  ` and r2,r3
  ` sub r10,34
  //
§ C0,C1,C2 «
  » "FOO" _ ⊢ s0
  » "Baa" _ ⊢ s1
  » " X Y Z " _ ⊢ s2
  ∎ s0,s1,s2

§ F0 «
  ¿ { x0 x1 x2 }
    ..
    ∎ { r0 r1 }

  f { y z } . { x +y +z } ⊢ p_f


  ? %p
  ∐\ p' ,p'=

    p'=..
    p'==q'
    p'~=..
    ~== ==~ ~==~

§ map { f l0 }
  ? l0
  ∐\ l0' ,l0'=_cns◂{ hd0' tl0' } ⊢
    $ f ⊢ f0,f1
    ◂ f0,hd0 ⊢ hd1
    map { f1 tl0 } ⊢ tl1
    _cns { hd1 tl1 } ⊢ l1
    ∎ l1
  ∐.\ l0' ,l0'=_nil◂{} ⊢
    _nil {} ⊢ l1
    ∎ l1
§§ map
  ¶ @.a
    @.b
  § @.FUN : a ⊢ b
  ⊢⊢
  § @.f l0
  ? l0
  ∐\ l0' ,l0'=_cns◂{ hd0' tl0' } ⊢
    FUN hd0 ⊢ hd1
    f tl0 ⊢ tl1
    _cns { hd1 tl1 } ⊢ l1
    ∎ l1
  ∐.\ l0' ,l0'=_nil◂{} ⊢
    _nil {} ⊢ l1
    ∎ l1
  ∎∎
§§ map0 = map ◂◂
  ¶ @.a = r64
    @.b = s8
  § @.FUN = id
  ∎∎

§ A0 = _arg0
§ A1 = .. _arg2
§ F0 = .. "\fileX.mdls"

§ f ? _
  ∐\ ..
  ..

§ f { %a0 %%a1 }
  g %a0 ⊢ ? _
  ∐\ b0' ,b0'=c0◂b1' ⊢
    ..
  ∐.\ 0' ,0'=c1◂1' ⊢

  o0 %p +⊢ %q ; : P +⊢ Q
  » o0 _ ⊢ r0 ; : P +→ Q
  +f r0 +⊢ r1 ;
  » f _ ⊢ r0 ; : A→B
  » lft◂f _ ⊢ r0 ; : A→'B

¶¶ pg0 [ 0dr1024 ]
  pg0.ini _ ⊢ s0 ; : S8◂{> len~FIX◂pg0.t }
  ◂ f,x ⊢ y ;
  _app { f x } ⊢ y
  o x +⊢ y
  f0 { %0 %1 } ⊢ { %0 %1 }
  f1 { %1 %2 } ⊢ { %4 %7 }
  f2
  $ %0 ⊢ %1
  $ %1 ⊢ %1,%4,%5
  _add { %7 %8 } ⊢ { %7 %8 }
  _sub.im_0xff %4 ⊢ %4
  _sub.im_0xaa %4 ⊢ %4
  _sub.r8 { %9 %10 } ⊢ { %9 %10 }
  _sub { %8 %4 } ⊢ { %8 %4 }
  f0 %r0 ⊢* f1 _ ⊢* f2 _ ⊢ ? _
  ∐\ ..
    ..

¶ a
  ∐* c0 : { r64 r64 }
  ∐ c1 : s8
¶¶+C str [^ a~r64 b~[^ a~r8 b~r32 ] c~r16 ]

¶ str.t = S8◂..
§ str.a : str.t ⊢ { str.t r64 }
§ str.b.a : str.t ⊢ { str.t r8 }
§ str.b.b : str.t ⊢ { str.t r32 }
§ str.cst : S8◂s' ⊢ str.t

§ f0 {= &a0 &a1 &a2 < { %x %y } =}
  g0 {= &a0 < x =} ⊢ {= &a0 < y =}
  g1 { x y } ⊢ { x y z }
  ∎ {= &a0 &a1 &a2 < { x y z } =}

  f0 f1 f2 .. fn < fd %i,%x ⊢ %y
  f0 f1 f2 .. _ .. fn < _ %i,%x ⊢|
  ? ..
  ∐\ .. , .. , .. !| ..=.. .. ⊢
  ∐\ .. *| ..=.. .. ⊢
  ∐. .. , = ..
    ∐\ x0'=0xr22,x1'= .. *| ..
      ∐\ .. ⊢
        ..
        ∎ {}
      ∐.
    \. ..
      \
      \
      \|
  ∐|
  $ x ⊢ x,x0
  ∐ %x ⊢ cN◂{ %x0 %x1 .. %xn } ;%xi ⊢ cM◂{ %y0 .. %ym } ;xj'=yk' |* xv'=34r ,xx'=xy'
    ∐ .. |

      ∎ ..
    \\
      ..
      ∎
    \|
  ∐\ .. || .. .
    ..
    ∎
  ∐\ x ⊢ w◂{ ..  }　;b'=0xffr　;c'="HELLO" .
  ∐. %x ⊢ _cN◂{ .. }\ y ⊢ _cM◂{} \ x'=z' .
    ..
    ∎

  ∐* "§§" gx "∎∎" ⊢ .. ;
    ∐ "Foo" .. "baa" ⊢ ..
      ∐ .. .

    ..
    ∐. .
  ..
  ∐

  ∐ .. ;
    ∐ .. .
    ∐. .
  ∐.
  _C.lds {= %& < { o r } =} ⊢ {= m < { o r } =}
  _get { v o } ⊢ { v o a }
  _add { x y } ⊢ { z w }
  v,o !⊵ a ⊢ v,o
  v,o ⊵ a ⊢ v,o ⊵ b
  ∐ v,o ⊢ v,o ⊵ cy◂{ x _ _ }; x ⊢ cx◂{ p q } .
    _add { x %[ 0r ] } ⊢ { x _ }
    $ %[ "HELLO" ] ⊢ %s0
    » _^ s0,s1 ⊢ s0,s1,sr
      "HELLO" 0' 1' "WORLD" //
    ◂ %[ _emt_q ],x ⊢ y
  ∐ v,o ⊢ v,o !⊵ a .

§ f { x y }
  _add { x y } ⊢ { x y }
  ?.e0 { x y z }
    _g0 ..
    ..
    ∎ ..
  ?.e1 q
      ..
  ?..e2

  ◂ %c.e1,x ⊢ c,y

  ∐  ; ; .. ;!
    ∐ ..
    ∐.
  ∐. .. .


  hanoi(1, From, To, _) :- write([From, to, To]), nl.
  hanoi(N, From, To, Via) :-
          N1 is N - 1, hanoi(N1, From, Via, To),
          write([From, to, To]), nl,
          hanoi(N1, Via, To, From).

§ Hanoi_N %N ⊢ { %From %To %Via }
  ∐ N ⊢ _S◂N0; N0 ⊢ _O◂{} .
  ∐. _dec N ⊢ N1; [#(N'-1)=N1';#] hanoi N1 ⊢ { From Via To }; hanoi N1 ⊢ { Via To From } .
  ∐. N ⊢ _S◂N1; hanoi N1 ⊢ { From Via To }; hanoi N1 ⊢ { Via To From } .

§ Hanoi_FT { %From %To } ⊢ { %N %Via }
  ∐. hanoi N ⊢ { From To Via } .

ramification

  ∐ -"∎" !| -"JI" +"FF" ⟦g0⟧ ‹"G"› !

  ∐* "A" !| "B" "C" -| "V" ;
    ∐ +| g0 ;
  -e0 e1 =
    ∐ e0 !| _fail
    ∐. e1

  +e0 e1 =
    ∐ e2 !|
    ∐. e1

    e2
    ∐ e0 !| _fail
    ∐.

comment
  ¡¡

  0x' 1x' 2x'     3d' 4d' 5s' 6p' 7b'

  0x02'    0b4' 0d'

¶ _act◂a',b'
  ∐ _ret : a'
  ∐ _nxt : b'
  ∐ _cut : {}

¶ _sum◂a',b'
  ∐ _in_l : a'
  ∐ _in_r : b'

ramified semantic action
  ∐ .. ; ⊢ { r0 r1 }
    ..
    ∎ a
    ∐ .. ⊢ r1
      op { r1 _st } ⊢ ..
      _in_l a ⊢ b
      ∎ b
    ∐.

    %_s

vector application
  op x0¦x1¦x2¦x3¦..¦xn ⊢
  vadd { { x0 x1 x2 x3 } { y0 y1 y2 y3 } }
  v4add { { x0 y0 } { x1 y1 } { x2 y2 } { x3 y3 } } ⊢

  'lb0 src ⊢ dst
  'lb1

grammer
  _emp ; empty set
  _all ; top set
  _res ;
  ∐ ..
    _some ..
    ∎ a
  ∐. _res ⊢ { {} }
    » "err" _ ⊢ s
    prs_err s ⊢ e
    _some e ⊢ a
    ∎ a
    ∐ _fail
    ∐ _ret
    ∐ _ctn

    ∐ .. ; ⊢ { .. }
      _ret r ⊢ a
      ∎ a
      ∐
      ∐.


  prs_log : { _s8 _r64 } ⊢ { _s8 _r64 a _s8 }

  » _^ ..
    0'*"\t" 3r*2' 0'*1'


      len | col agl   ; opq
tag-v len |           ; blk
    agl col tag-v len

    replicable type | non-replicable type

    {= B0 B1 .. Bn < r =}

    $ r ⊢ {> x~%v < r0 }
    $ {> x~v < r0 } ⊢ r

over-head
  malloc-free > cancelation
  arithmetic > vectolization
  error-check > vectolization,null-branching
  branching > table-jump-nization,brancing-prediction,null-branch-exp-handling,abbreviation
  sequential > multi-thread

  table call
  f0 f1 f2 .. fn < fn+1 i,x ⊢ y
  table jump call
  f0 .. fn < _ i,x ⊢|
  ◂ p0 p1 p2 .. pn < pn+1 ,i,x ⊢ y

¶ t
  ∐ c0 :
  ∐ c1 : s
  ∐ c2 : g ⊢ h
  ∐ c3 : g ⊢ h ⊢ i

¶¶ T
  ∐ t0 :
  ∐ t1 : *
  ∐ t2 : * ⊢ *
  ∐ t3 : S ⊢ U ⊢ *

_r64 = _rX◂_R64

¶¶ _RX
  ∐ _R64 :
  ∐ _R32 :
  ∐ _R16 :
  ∐ _R8 :

¶ R'::_RX ∀ _rX◂R'

_addq : { _r64 _r64 } → { _r64 _r64 }
_add : R'::_RX ∀ { _rX◂R' _rX◂R' } → { _rX◂R' _rX◂R' }
_rX : _RX → *
  {> f0~t0 f1~t1 .. fn~tn ⊢ s0 s1 .. sn }
§ add : { _rX◂a' _rX◂b' }
  ∐∐ a' ⊢ _R64; b' ⊢ _R64 .
    = addq
  ∐∐ b' ⊢ _R32; b' ⊢ _R64 .
    = addd
  ∐∐ b' ⊢ _R16; b' ⊢ _R64 .
    = addw
  ∐∐ b' ⊢ _R8; b' ⊢ _R64 .
    = add


  $ x ⊢
    ∐ c0◂.. .

    ∐ c1◂{ y z }; y ⊢
      ∐
    ∐ c2◂
    ..
    ∐. cn◂.. .

    &{ p0 p1 p2 .. pn < k }

    &{ _Et < {} }

  &{ a b c < d } : &{ _prc _chn _m8 < _r64 } 
    &.F &{ .. } 
      
      mku_rp8 ; mark upped rope 
      
      _cns { h %[ _nil ] } ⊢ l  
      _for { %[ 10r ] %st %[ lpx ] } ⊢ %st 

  op0 s0 ⊢ d0 ¦ op1 s1 ⊢ d1 ¦ op2 s2 ⊢ d2 .. ¦ opn sn ⊢ dn 

¶¶ VCT 
  ∐ vct_hsh :
  ∐ vct_arr :
  ∐ vct_s8 :
  ∐ vct_rp8 :

¶ vct t'::VCT «
  ∐ t' ⊢ %[ vct_hsh ] . 
    $ %[ hsh ] ⊢ y' 
    ∎ y' 
  ∐ t' ⊢ %[ vct_arr ] . 
    $ %[ arr ] ⊢ y' 
    ∎ y'  
  ∐ t' ⊢ %[ vct_s8 ] . 
    $ %[ s8 ] ⊢ y' 
    ∎ y'  
  ∐. t' ⊢ %[ RP8 ] .
    $ %[ rp8 ] ⊢ y' 
    ∎ y' 
  
§ lod_vct { v i } : { vct◂t' _ }  
  ∐∐ t' ⊢ vct_hsh◂h' . 
    hsh.lod { v i } ⊢ { v i a } 
    ∎ { v i a } 
  ∐∐ t' ⊢ vct_arr◂h' . 
    arr.lod { v i } ⊢ { v i a } 
    ∎ { v i a } 
  ∐∐ t' ⊢ vct_s8◂h' . 
    s8.lod { v i } ⊢ { v i a } 
    ∎ { v i a }
  ∐∐. t' ⊢ vct_rp8◂h' . 
    rp8.lod { v i } ⊢ { v i a } 
    ∎ { v i a }


Hydra + Unix = Hydrix 

Hydrix 
HEAD 
SP-HEAD

specialized HEAD processor  
hcall rX ; hcall-number 
hcall [rX] 


{ 
  °1◂{ 0x0 °1◂{} } 
  °2◂{ 
    °0◂[ 
      °0◂{ 
        °4◂[ 0x5c9 ] 
        °0◂{ 
          °4◂[ 0x5ca ] 
          °0◂{ °4◂[ 0x5cb ] °0◂{ °4◂[ 0x5cc ] °1◂{} } } 
          } 
        }  
      ] 
    °0◂[ °0◂(71037c)*{ °4◂(6bb64c)*[ 0x5ce ] °0◂(710bdc)*{ °4◂(6bb3cc)*[ 0x5cf ] °0◂(70ff3c)*{ °4◂(6bb41c)*[ 0x5d0 ] °0◂(70f19c)*{ °4◂(6bb46c)*[ 0x5d1 ] °1◂(68c5dc)*{ } } } } }  ] } } 

{ 2756''(8) _lst◂2756''(8) }→_lst◂2756''(8)
{ {2757''(8) _lst◂2758''(8) } _lst◂{2723''(1) _opn◂2724''(1) } }
→2759''(8)


§ f_G ◂◂ T v : t' :: ( * → * ) ∀ (t'◂k')→→(VCT◂k') ⊢⊢ (t'◂k') ⊢ { (t'◂k') k' k' }  
  _lod_G◂◂T { v %[ 0r ] } ⊢ { v _ a0 } 
  _lod_G◂◂T { v %[ 1r ] } ⊢ { v _ a1 }
  ∎ { v a0 a1 }


  
§ j = g◂◂{ f◂◂C_hsh u } 

¶ t a' 
  ∐∐ C0 : {} ⊢ t◂T0
  ∐∐ C1 : _r64 ⊢ t◂T1 
  ∐∐ C2 : a ⊢ t◂T2 
¶ rX ◂ r' 
  ∐∐ R64 : _r64 ⊢ rX◂R64 
  ∐∐ R32 : _r32 ⊢ rX◂R32 
  ∐∐ R16 : _r16 ⊢ rX◂R16 
  ∐∐ R8 : _r8 ⊢ rX◂R8
§ add_T { s d } 
  ∐∐ s ⊢⊢ R64◂◂s; d ⊢⊢ R64◂◂d . 
  ∐∐ s ⊢⊢ R32◂◂s; d ⊢⊢ R32◂◂d . 
  ∐∐ s ⊢⊢ R16◂◂s; d ⊢⊢ R16◂◂d . 
  ∐∐ s ⊢⊢ R8◂◂s; d ⊢⊢ R8◂◂d . 
  ∐∐|

§ C0 : {}→→t
§ C1 : _r64→→t
§ f◂◂{ C0 C1 } { x y z } 
  ∐ .. 
    ∐∐ C0 == _t . 
      $$ x ⊢⊢ 
      ∐∐ A0◂◂{ C2◂◂x0 C3◂◂x1 }; ..
        F { C4◂◂%a %b } ⊢ { c d } 
    ∐∐. C0 == _f . 


_Ext ; external type 
$ : a'::_Rpc ∀ a' ⊢ { a' a' }  

t ◂ a0,a1,..an = ∐ c0 c1 .. cn 

§ set_T { v i a } 
  ∐∐ v ⊢⊢ VCT_S8◂◂v . 
    sts { v i a } ⊢ { v i a } 
    ∎ { v i }
  ∐∐ v ⊢⊢ VCT_ARR◂◂v .
    set_q { v i a } ⊢ { v i } 
    ∎ { v i } 
  ∐∐. v ⊢⊢ VCT_HSH◂◂v . 
    hsh_tbl.set { v i a } ⊢ { v i } 
    ∎ { v i }

§ @.fld_lft_T◂◂E { a l } 
  $ l ⊢ 
  ∐ _cns◂{ hd l } . 
    E { a hd } ⊢ a 
    fld_lft_T◂◂E { a l } ⊢| 
  ∐. _nil◂{} . 
    ∎ a 

§ @.fld_lft_T3◂◂{ E0 E1 E2 } { a l } 
  $ l ⊢ 
  ∐ _cns◂{ hd l } . 
    E0 { a hd } ⊢ a 
    fld_lft_T◂◂{ E1 E2 E0 } { a l } ⊢| 
  ∐. _nil◂{} . 
    ∎ a 
¶ @.Nat 
  ∐∐ S : nat 
  ∐∐ O : {} 
  4n = _S◂◂(_S◂◂(_S◂◂(_S◂◂_O)))
  F◂◂(S◂◂(S◂◂(S◂◂O))) x ⊢ y 
§ nat_of_Nat◂◂N {}
  ∐∐ N ⊢⊢ S◂◂N . 
    nat_of_Nat◂◂N {} ⊢ n 
    _inc n ⊢ n 
    ∎ n 
  ∐∐ N ⊢⊢ O◂◂{} . 
    ∎ %[ 0r ] 

§ add_T◂◂{ N0 N1 } {} 
  ∐∐ N0 ⊢⊢ S◂◂N0 . 
    add_T◂◂{ N0 (S◂◂N1) } ⊢| 
  ∐∐ N0 ⊢⊢ O◂◂{} . 
    nat_of_Nat◂◂N1 {} ⊢| 

  C0||C1||C2||(C3&&C4)

§ and_T◂◂{ B0 B1 } =
  ∐∐ B0 == _t; B1 == _t . 
    _t 
  ∐∐. . 
    _f 
¶ _Bl 
  ∐∐ _T 
  ∐∐ _F 
§ DBG = _t 
_if_op◂◂{ B F } x 
_if_op : { _bl a'→b0x' } ⊢⊢ a' ⊢ b' 

§ if_emt◂◂B = _if_op◂◂{ B _emt }


\i0'.\i1'. ∐[ { i0' i1' } i0' ]

0x°0◂(8a44ec)*{ (8a44cc)*{ 0x258 °0◂(7d661c)*[ 0x42b ] } °0◂(8a448c)*{ (8a44ac)*{ 0x3 °0◂(7d657c)*[ 0x42a ] } °0◂(8a430c)*{ (8a42cc)*{ 0x2 °0◂(7d658c)*[ 0x429 ] } °0◂(8a43ec)*{ (8a42ec)*{ 0x4 °0◂(7d655c)*[ 0x428 ] } °0◂(8a436c)*{ (8a438c)*{ 0x259 °0◂(7d651c)*[ 0x427 ] } °0◂(8a432c)*{ (8a42ac)*{ 0x255 °0◂(7d643c)*[ 0x426 ] } °0◂(8a404c)*{ (8a434c)*{ 0x253 °0◂(7d64ec)*[ 0x425 ] } °0◂(8a424c)*{ (8a426c)*{ 0x257 °0◂(7d644c)*[ 0x424 ] } °0◂(8a428c)*{ (8a3f6c)*{ 0x299 °0◂(7d64cc)*[ 0x423 ] } °0◂(8a40cc)*{ (8a402c)*{ 0x296 °0◂(7d649c)*[ 0x422 ] } °0◂(8a422c)*{ (8a416c)*{ 0x295 °0◂(7d647c)*[ 0x421 ] } °0◂(8a420c)*{ (8a41ec)*{ 0x294 °0◂(7d646c)*[ 0x420 ] } °0◂(8a41ac)*{ (8a418c)*{ 0x29a °0◂(7d64bc)*[ 0x41f ] } °0◂(8a3f4c)*{ (8a41cc)*{ 0x29b °0◂(7d645c)*[ 0x41e ] } °0◂(8a414c)*{ (8a412c)*{ 0x28f °0◂(7d639c)*[ 0x41d ] } °0◂(8a3fcc)*{ (8a40ec)*{ 0x28c °0◂(7d640c)*[ 0x41c ] } °0◂(8a3f8c)*{ (8a3fac)*{ 0x28e °0◂(7d63ec)*[ 0x41b ] } °0◂(8a400c)*{ (8a3fec)*{ 0x29f °0◂(7d634c)*[ 0x41a ] } °1◂(6f2af4)*{ } } } } } } } } } } } } } } } } } } } 

t ◂ a' ∐ a' t◂(_lst◂a') t◂a' _r64 

{ _s8 _t34 }
_t8◂(_t13◂_t7)◂(((728''(1))))) 


_lst◂{ _s8 _t34 }→791''(1)
_lst◂((_t8◂(_t13◂_t7))◂728''(1))→835''(2)
global-segment = global-id 48bit , local-id 16bit 
global-id = process-id 
local-segment , offset 
16bit , 48bit 
segment-tag = { rd_rank~_r64 wt_rank~_r64 page_size~_r64 }
rank-stack , security rank
rret rank-decriment 
rcall rank-increment 

  Op &{ &[ %s ] Ext } &⊢ &{ &[ s ] Ext }
  Op { &[ %s ] Ext } &⊢ { &[ s ] Ext }
  _gnr : a'::_Sbt ∀ {} &⊢ { _pos◂a' _neg◂a' }
  _snd : { _neg◂a' a' } &⊢ {} 
  _rcv : _pos◂a' &⊢ a'
¶ &.cmn ◂ a' 
  ∐ _cmn :  _pos◂{ a' _cmn◂a' }
  _if_op◂◂{ DBG _emt } x ⊢ x 

¶ &@.sbt_lst a'
  ∐ sbt_cns : { a' sbt_lst◂a' }
  ∐ sbt_nil : {}

¶ t ◂ { a' b' } 
  .. 
  a'::{ _ _ } ∀ t◂a' 
  a',b' ∀ t◂{ a' b' }
§ t◂{ a' b' }

§ _fmt_d◂◂#[ 123r ]

concurrent determinism = independency of result of computation from pases of parallel computational units 
cell automaton, concurrent register machine 

r' :: {> a,b } ∀ {> a~_s8 b~_r64 < r' } ⊢ { _s8 '{> r' } }

_lds_bd : { _s8 _r64 _r64 } ⊢ { _s8 _r64 _r64 _r8 } 
; { src offset bound } 
_lds_bd_im : _r64 ⊢⊢ { _s8 _r64 } ⊢ { _s8 _r64 _r8 }



64-bit header 
8bit              | 8bit       | 48bit
GC,opq,arr .. agl | agl-number | len 
                               | len | tag-bits


¶ @.t r' = RP.t◂(t_atm◂r') 
				@.adt_id = _r64 
        @.t_atm r'
					∐ hp : { r' hp }
					∐ hp_im : ast.cst_v  
					∐ hp_im_e : _r64 
					∐ dyn_adt : { adt_id r' _r64 r' _lst◂hp }
					∐ stt_adt : { adt_id _r64 _r64 t◂r' } 
				@.agl_p
					∐ agl_unt : {} 
					∐ agl_hp : hp   
				@.hp 
					∐ ref : { t_agl ref } 
					∐ r64 : {} 
					∐ unt : t_agl
					∐ pv : {}
          ∐ adt_id : adt_id
				@.ref 
					∐ arr : hp
					∐ rcd : _arr◂hp 
          ∐ ln : hp
¶¶ t :: C ## type class 
  foo : t 
  baa : t→_r64 
  ruu : a'→{ a' a' }
  ∎∎
¶ t  
  ∐ 
  ∐ .. 

¶§ :: C 
  ¶ s8 = _arr◂_r8 
  $$ : _rpc◂t' ⊢⊢ t' ⊢ { t' t' }
§ f◂◂R x : _rpc◂t' ⊢⊢ t' ⊢ { t' t' }
  $$◂◂R x ⊢ x,x0

  _rpc.r64 : _rpc◂r64 
  _rpc.r32 
  _rpc.r16 
  _rpc.r8 
  _rpc.s8 
  _rpc.arr◂◂R : _rpc◂t' ⊢⊢ _rpc◂(_arr◂t') 
  _rpc.spc◂◂R 

¶ $$ t :: _pnt
¶ a'::_pnt,_eq ∀ t ◂ a',b'

generator = commom parts + special parts 
parametric polymorphism ; pointer 
ad hoc polymorphism ; pointer + call,ret 

¶ t ◂ .. 
  c0 : a' ⊢ _ 
  c1 : _r64 ⊢ _ 
  c2 : _ 
  c3 : _
  c4 : _r64 ⊢⊢ _ 
  t_Eq :: Eq  
  ∎
¶ t =: t_Eq :: Eq ,
¶§ t_Eq 
  m0 = f 
  m1 = g 
  ∎∎ 

¶ @.t◂a' ~= t0
  ∐ cns : { a' t0 } 
  ∐ nil : {} 

  C.[ a' b' ] ∀ { a' b' } ⊢ { a' b' }
¶¶ A.[ s' ] , B.[ t' ] ∀ C.[ s' t' u' ]
  m0 : s' 
  m1 : t' → u' 
  ∎∎  
%%cpu ## physical resion 
etr0:
  op0 r0 ⊢ r1 
  op1 r4 ⊢ r5,r8 
  op3 l5 ⊢ l7,l1 
  op4 vr0 ⊢ vr1
  op5 b2,b3 ⊢ b4,b5  
  call etr3 
  op6 .. 
  ..
  ret 
%%cpu

¶ [ t◂a' ~= t_ , s◂b' ~= s_ ]
  x : _r64 ⊢ t_  
  y : _s8 ⊢ s_ 
  X : rp8.t ⊢⊢ t_  
  C0_t_s :: C0.[ t_ s_ ] 
  ∎∎

  ^ _ s0,s1 ⊢ s0,s1,sr 
    "Hello" //