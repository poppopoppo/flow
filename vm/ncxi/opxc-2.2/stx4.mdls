§ exc_q # { v i a } 
	_alc_o { v i } ⊢ { v b } 
	_alc_i { v a } ⊢ { v i } 
	∎ { v i b }
§ to_err _ 
	∎|
§ to_err_T◂◂T _ 
	∎| 
§§ CST 
	§ KB = 1024r 
	§ MB = 1048576r 
	∎∎
§§ cla  
	§ l_i # { {} k } 
		$ k ⊢ k,k0 
		∎ { k0 k }
	§ l # { V p } 
		_clc_o { V p } ⊢ { V k } 
		$ k ⊢ k,k0 
		_clc_i { V k0 } ⊢ { V p } 
		∎ { V p k }  
	§ u # { v w } 
		∎ { {} v } 
	§ x # { v w } 
		∎ { w v }  
	∎∎
§§ Clr 
	§ u # { V { p k } } 
		_clc_o { V p } ⊢ { V _ } 
		_clc_i { V k } ⊢ { V p } 
		∎ { V p }
	∎∎ 
\\§ eml = _emt 
§ eml = _id 
§ @.arr_of_lst_i { c i l } 
	$ l ⊢ 
	∐ _cns◂{ a l } . 
		_inc c ⊢ c 
		arr_of_lst_i { c i l } ⊢ { c v }
		_dec c ⊢ c 
		exc_q { v c a } ⊢ { v c _ } 
		∎ { c v } 
	∐. _nil◂{} . 
		_mk_arr { c i } ⊢ { c _ v } 
		∎ { c v } 
§ arr_of_lst # { l i } 
	arr_of_lst_i { %[ 0r ] i l } ⊢ { c v } 
	∎ v  

§ smt o 
	∐ o ⊢ _some◂a .
		∎ a 
	∐. . 
		$ %[ "smt 0" ] ⊢ ee0 
		_emt ee0 ⊢ _ 
		∎| 
§ smt_err◂◂E o 
	∐ o ⊢ _some◂a .
		∎ a 
	∐. . 
		_emt %[ "smt_err 0" ] ⊢ _ 
		_emt %[ E ] ⊢ _ 
		∎| 
§ smt_err_r { o e } 
	∐ o ⊢ _some◂a .
		∎ a 
	∐. . 
		_emt %[ "smt_err 0" ] ⊢ _ 
		_emt e ⊢ _ 
		∎| 
§ nnt o 
	∐ o ⊢ _none◂{} .
		∎ {} 
	∐. . 
		$ %[ "nnt 0" ] ⊢ ee0 
		_emt ee0 ⊢ _ 
		∎| 
§ nnt_emt { o x } 
	∐ o ⊢ _none◂{} .
		∎ x
	∐. . 
		$ %[ "nnt_emt 0" ] ⊢ ee0 
		_emt ee0 ⊢ _ 
		_emt x ⊢ _ 
		∎| 
§ nnt_err { o e }  
	∐ o ⊢ _none◂{} .
		∎ {} 
	∐. . 
		$ %[ "nnt 0" ] ⊢ ee0 
		_emt ee0 ⊢ _ 
		_emt e ⊢ _ 
		∎| 
§ nnt_err_T◂◂E o 
	∐ o ⊢ _none◂{} . 
		∎ {} 
	∐. . 
		_emt %[ "nnt_err_T" ] ⊢ _ 
		_emt %[ E ] ⊢ _ 
		∎| 
§ setge { x y } 
	∐ y'=<x' .
		∎ { x y %[ 1r ] }
	∐. . 
		∎ { x y %[ 0r ] }
§ set_q # { v i a } 
	exc_q { v i a } ⊢ { v i _ } 
	∎ { v i }
§ set_o # { v i a } 
	$ _some◂a ⊢ o 
	set_q { v i o } ⊢ { v i } 
	∎ { v i }
§ get_q = _lod_q 
§ exc_q = exc_q
§ mk_arr = _mk_arr
§ arr_of_lst = _arr_of_lst 
§ arr_of_lst_len # l 
  arr_of_lst l ⊢ a 
  _arr_len a ⊢ { a n } 
  ∎ { a n }

§ exc_tv # { tv i v0 } 
  $ _some◂v0 ⊢ v0 
  exc_q { tv i v0 } ⊢ { tv i v0 } 
  smt_err◂◂"exc_tv" v0 ⊢ v0 
  ∎ { tv i v0 } 
§ lod_tv { tv i } 
	_lod_q { tv i } ⊢ { tv i v } 
	$ v ⊢ 
	∐ _some◂v . 
		∎ { tv i v } 
	∐. _none◂{} . 
		_emt %[ "lod_tv" ] ⊢ _ 
		_arr_len tv ⊢ { tv l } 
		_emt l ⊢ _ 
		_emt i ⊢ _ 
		∎| 

§ set_tv # { tv i v } 
  $ _some◂v ⊢ v 
  exc_q { tv i v } ⊢ { tv i v } 
  nnt v ⊢ {} 
  ∎ { tv i }
§ get_tv # { tv i } 
	exc_q { tv i ‹› } ⊢ { tv i v } 
	smt v ⊢ v
	∎ { tv i v }
§ MAX_tv = 1628000r 
§ ini_tv # {} 
  mk_arr { %[ MAX_tv ] ‹› } ⊢ { _ _ tv }
  ∎ tv 
§ ini_tv_n # n 
  mk_arr { n ‹› } ⊢ { n _ tv } 
  ∎ { n tv }
§ rep_movsb # { c0 s0 o0 s1 o1 } 
  _rep_movsb { c0 s0 o0 s1 o1 } ⊢ { c0 s0 o0 s1 o1 } 
  _add { o0 c0 } ⊢ { o0 c0 } 
  _add { o1 c0 } ⊢ { o1 c0 }
  ∎ { c0 s0 o0 s1 o1 }

§ @.byt ^= 
	∐. _byt ⊢ { b } 
		∎ _some◂b 
§§ CST 
	§ not_0 = 0xffffffffffffffffr
	∎∎
§§ chr 
	§ nl = 10r 
	§ tab = 9r 
	§ slsh = 92r 
	§ dq = 34r 
	§ sq = 39r 
	§ a = 97r
	§ n = 110r 
	§ t = 116r 
	§ z = 122r
	§ A = 65r
	§ Z = 90r
	§ d_0 = 48r 
	§ d_9 = 57r
	§ null = 0r 
	∎∎ 
§ blt◂◂S { s x } 
	_s8_len %[ S ] ⊢ { d l } 
	rep_movsb { l d %[ 0r ] s x } ⊢ { _ _ _ s x } 
	∎ { s x }
§ PS = 4096r 
§ HP = 2048r 
§ KB = 1024r 
§ non = _none 
¶ sum3 ◂ a',b',c' 
	∐ c0 : a' 
	∐ c1 : b' 
	∐ c2 : c'

¶ sum2 a0',a1' 
	∐ in0 : a0' 
	∐ in1 : a1' 
§ op_x◂◂F k 
	$ k ⊢ k,k0 
	F k0 ⊢ a 
	∎ { k a } 
§ op_x_v◂◂F # { v k } 
	$ k ⊢ k,k0 
	F { v k0 } ⊢ { v a } 
	∎ { v k a }
§ @.eof ^=
	∐ _byt !| ⊢ { _ } 
		∎ _none◂{}
	∐. ⊢ { } 
		∎ _some◂{} 
§ @.nl_eof ^=
	∐# "\n" ⊢ { {} } 
		∎ _some◂{} 
	∐.# eof ⊢ { {} } 
		∎ _some◂{}
§ @.for◂◂F { v n i }
	∐ n'<>i' . 
		$ i ⊢ i,i0 
		F { v i0 } ⊢ v 
		_inc i ⊢ i 
		for◂◂F { v n i } ⊢| 
	∐. . 
		∎ { v n } 
§ for_0◂◂F # { v n } 
	for◂◂F { v n %[ 0r ] } ⊢|

§§ bl 
	¶ t 
		∐ t : {} 
		∐ f : {}
	§ and { b0 b1 } 
		∐ b0 ⊢ t◂{}; b1 ⊢ t◂{} . 
			∎ t◂{}
		∐. . 
			∎ f◂{}
	§ or { b0 b1 } 
		∐ b0 ⊢ f◂{}; b1 ⊢ f◂{} . 
			∎ f◂{}
		∐. . 
			∎ t◂{}
	§ sub { b0 b1 } 
		∐ b1 ⊢ f◂{} . 
			∎ b0 
		∐. . 
			∎ f◂{}
	§ not b 
		∐ b ⊢ f◂{} . 
			∎ t◂{} 
		∐. . 
			∎ f◂{}
	§ is_t b 
		∐ b ⊢ t◂{} . 
			∎ {} 
		∐. . 
			_emt %[ "is_t:0" ] ⊢ _ 
			∎|
	
	∎∎
§ t = bl.t 
§ f = bl.f
§§ bst 
	¶ t k',v' 
		∐ nd : { t◂k'◂v' { k' v' } t◂k'◂v' } 
		∐ lf : {}
	¶ c l',e',r'
		∐ c_e : e'
		∐ c_l : l' 
		∐ c_r : r' 
	§ ini # {} 
		∎ lf◂{} 
	§ @.asc { t k0 } 
		$ t ⊢ 
		∐ nd◂{ l { k v } r } . 
			∐ k'=k0' . 
				$ v ⊢ v,v0
				∎ { nd◂{ l { k v } r } { k0 ‹ v0 › } }
			∐ k'=<k0' . 
				asc { r k0 } ⊢ { r { k0 o } } 
				∎ { nd◂{ l { k v } r } { k0 o } }
			∐. . 
				asc { l k0 } ⊢ { l { k0 o } } 
				∎ { nd◂{ l { k v } r } { k0 o } }
		∐. lf◂{} . 
			∎ { lf◂{} { k0 ‹› } }
	§ @.set { t { k0 v0 } } 
		$ t ⊢ 
		∐ nd◂{ l { k v } r } . 
			∐ k'=k0' . 
				∎ { nd◂{ l { k v0 } r } { k0 ‹ v › } }
			∐ k'=<k0' . 
				set { r { k0 v0 } } ⊢ { r { k0 o } }
				∎ { nd◂{ l { k v } r } { k0 o } }
			∐. . 
				set { l { k0 v0 } } ⊢ { l { k0 o } } 
				∎ { nd◂{ l { k v } r } { k0 o } }
		∐. lf◂{} . 
			$ k0 ⊢ k0,k 
			∎ { nd◂{ lf◂{} { k v0 } lf◂{} } { k0 ‹› } }
	§ @.mrg0 { t0 t1 }
		$ t0 ⊢ 
		∐ nd◂{ l0 { k0 v0 } r0 } .
			$ t1 ⊢ 
			∐ nd◂{ l1 { k1 v1 } r1 } . 
				mrg0 { r0 l1 } ⊢ t1 
				∎ nd◂{ l0 { k0 v0 } nd◂{ t1 { k1 v1 } r1 } } 
			∐. lf◂{} .
				∎ nd◂{ l0 { k0 v0 } r0 }
		∐. lf◂{} . 
			$ t1 ⊢ 
			∐ nd◂{ l1 { k1 v1 } r1 } . 
				∎ nd◂{ l1 { k1 v1 } r1 }
			∐. lf◂{} . 
				∎ lf◂{}
	§ @.get { t k0 } 
		$ t ⊢ 
		∐ nd◂{ l { k v } r } . 
			∐ k'=k0' . 
				$ k ⊢ _ 
				mrg0 { l r } ⊢ t 
				∎ { t { k0 ‹ v › } }
			∐ k'=<k0' . 
				get { r k0 } ⊢ { r { k0 o } } 
				∎ { nd◂{ l { k v } r } { k0 o } }
			∐. . 
				get { l k0 } ⊢ { l { k0 o } } 
				∎ { nd◂{ l { k v } r } { k0 o } }
		∐. lf◂{} . 
			∎ { lf◂{} { k0 ‹› } }
	∎∎
§§ bst_s8 
	¶ t v' 
		∐ nd : { t◂v' { _s8 v' } t◂v' } 
		∐ lf : {}
	§ ini # {} 
		∎ lf◂{} 
	§ @.asc { t k0 } 
		$ t ⊢ 
		∐ nd◂{ l { k v } r } . 
			_cmp_s8 { k k0 } ⊢ { k k0 c } 
			=+ c' 
			∐ 
				$ c ⊢ _ 
				asc { r k0 } ⊢ { r { k0 o } } 
				∎ { nd◂{ l { k v } r } { k0 o } }
			∐ 
				$ c ⊢ _ 
				$ v ⊢ v,v0
				∎ { nd◂{ l { k v } r } { k0 ‹ v0 › } }
			∐. 
				$ c ⊢ _ 
				asc { l k0 } ⊢ { l { k0 o } } 
				∎ { nd◂{ l { k v } r } { k0 o } }
		∐. lf◂{} . 
			∎ { lf◂{} { k0 ‹› } }
	§ @.set { t { k0 v0 } } 
		$ t ⊢ 
		∐ nd◂{ l { k v } r } . 
			_cmp_s8 { k k0 } ⊢ { k k0 c } 
			=+ c' 
			∐ 
				$ c ⊢ _ 
				set { r { k0 v0 } } ⊢ { r { k0 o } }
				∎ { nd◂{ l { k v } r } { k0 o } }
			∐  
				∎ { nd◂{ l { k v0 } r } { k0 ‹ v › } }
			∐. 
				$ c ⊢ _ 
				set { l { k0 v0 } } ⊢ { l { k0 o } } 
				∎ { nd◂{ l { k v } r } { k0 o } }
		∐. lf◂{} . 
			$ k0 ⊢ k0,k 
			∎ { nd◂{ lf◂{} { k v0 } lf◂{} } { k0 ‹› } }
	§ @.mrg0 { t0 t1 }
		$ t0 ⊢ 
		∐ nd◂{ l0 { k0 v0 } r0 } .
			mrg0 { r0 t1 } ⊢ r0 
			∎ nd◂{ l0 { k0 v0 } r0 } 
		∐. lf◂{} . 
			∎ t1  
	§ @.get { t k0 } 
		$ t ⊢ 
		∐ nd◂{ l { k v } r } . 
			_cmp_s8 { k k0 } ⊢ { k k0 c } 
			=+ c' 
			∐ 
				$ c ⊢ _ 
				get { r k0 } ⊢ { r { k0 o } } 
				∎ { nd◂{ l { k v } r } { k0 o } }
			∐ 
				$ c ⊢ _ 
				$ k ⊢ _ 
				mrg0 { l r } ⊢ t 
				∎ { t { k0 ‹ v › } }
			∐.
				$ c ⊢ _ 
				get { l k0 } ⊢ { l { k0 o } } 
				∎ { nd◂{ l { k v } r } { k0 o } }
		∐. lf◂{} . 
			∎ { lf◂{} { k0 ‹› } }
	∎∎
§§ BST_s8 
	¶ nd v'
		∐ p : { _opn◂(_pt◂(nd◂v')) { _s8 v' } _opn◂(_pt◂(nd◂v')) } 
	¶ t v' = { _Clr◂(nd◂v') _pt◂(nd◂v') }
	§ ini # {} 
		_cli {} ⊢ C 
		∎ { C ‹› } 
	§ is_empty { C T } 
		∐ T ⊢ _none◂{} . 
			∎ { { C ‹› } bl.t◂{} } 
		∐. . 
			∎ { { C T } bl.f◂{} }
	§ @.asc { { C t } k0 } 
		$ t ⊢ 
		∐ _some◂t . 
			_clc_o { C t } ⊢ { Cl p◂{ l { k v } r } } 
			_cmp_s8 { k k0 } ⊢ { k k0 c } 
			=+ c' 
			∐ 
				$ r ⊢ r,r0 
				_clc_i { Cl p◂{ l { k v } r } } ⊢ { C _ }
				asc { { C r0 } k0 } ⊢| 
			∐ 
				$ v ⊢ v,v0 
				_clc_i { Cl p◂{ l { k v } r } } ⊢ { C _ }
				∎ { C k0 ‹ v0 › }
			∐. 
				$ l ⊢ l,l0 
				_clc_i { Cl p◂{ l { k v } r } } ⊢ { C _ }
				asc { { C l0 } k0 } ⊢| 
		∐. _none◂{} . 
			∎ { C k0 ‹› }
  § asc { { C T } k0 } 
    $ T ⊢ T,t 
    asc { { C t } k0 } ⊢ { C k0 o } 
    ∎ { { C T } { k0 o } } 
	§ @.set { { C t } { k0 v0 } } 
		_clc_o { C t } ⊢ { Cl p◂{ l { k v } r } } 
		_cmp_s8 { k k0 } ⊢ { k k0 c } 
		=+ c' 
		∐ 
			$ r ⊢ 
			∐ _some◂r . 
				$ r ⊢ r,r0 
				_clc_i { Cl p◂{ l { k v } ‹ r › } } ⊢ { C _ }
				set { { C r0 } { k0 v0 } } ⊢| 
			∐. _none◂{} . 
				$ k0 ⊢ k0,k1 
				_clc_i { Cl p◂{ l { k v } ‹› } } ⊢ { C t }
				_clp { C p◂{ ‹› { k1 v0 } ‹› } } ⊢ { C r1 }
				_clc_o { C t } ⊢ { Cl p◂{ l { k v } _ } } 
				_clc_i { Cl p◂{ l { k v } ‹ r1 › } } ⊢ { C _ }
				∎ { C k0 ‹› } 
		∐  
			_clc_i { Cl p◂{ l { k v0 } r } } ⊢ { C _ }
			∎ { C k0 ‹ v › }
		∐. 
			$ l ⊢ 
			∐ _some◂l . 
				$ l ⊢ l,l0 
				_clc_i { Cl p◂{ ‹ l › { k v } r } } ⊢ { C _ }
				set { { C l0 } { k0 v0 } } ⊢| 
			∐. _none◂{} . 
				$ k0 ⊢ k0,k1 
				_clc_i { Cl p◂{ ‹› { k v } r } } ⊢ { C t }
				_clp { C p◂{ ‹› { k1 v0 } ‹› } } ⊢ { C l1 }
				_clc_o { C t } ⊢ { Cl p◂{ _ { k v } r } } 
				_clc_i { Cl p◂{ ‹ l1 › { k v } r } } ⊢ { C _ }
				∎ { C k0 ‹› } 
	§ set { { C t } { k0 v0 } }	
		$ t ⊢ 
		∐ _some◂t . 
			$ t ⊢ t,t0 
			set { { C t0 } { k0 v0 } } ⊢ { C k0 o } 
			∎ { { C ‹ t › } { k0 o } }
		∐. _none◂{} . 
			$ k0 ⊢ k0,k1 
			_clp { C p◂{ ‹› { k1 v0 } ‹› } } ⊢ { C t } 
			∎ { { C ‹ t › } { k0 ‹› } }
	§ @.get_m { { C T } l r } 
		_clc_o { C l } ⊢ { Cl p◂{ l1 { k v } r1 } }
		$ r1 ⊢ 
		∐ _some◂r1 . 
			$ r1 ⊢ r1,r2 
			_clc_i { Cl p◂{ l1 { k v } ‹ r1 › } } ⊢ { C _ } 
			get_m { { C T } r2 r } ⊢| 
		∐. _none◂{} .
			_clc_i { Cl p◂{ l1 { k v } ‹ r › } } ⊢ { C _ } 
			∎ { C T } 
	§ 
		@.get_r # { { C T } w o } 
			_clc_o { C w } ⊢ { Cl p◂{ l { k v } _ } }
			_clc_i { Cl p◂{ l { k v } o } } ⊢ { C _ } 
			∎ { C T }  
		@.get_l # { { C T } w o } 
			_clc_o { C w } ⊢ { Cl p◂{ _ { k v } r } }
			_clc_i { Cl p◂{ o { k v } r } } ⊢ { C _ } 
			∎ { C T }  
		@.get_e # { { C _ } T o } 
			∎ { C o }
	\[
  ¶ get_t l',r',e' 
    ∐ g_l : l' 
    ∐ g_r : r' 
    ∐ g_e : e'
  \]
  §	@.get_T◂◂F { { C T } x t k0 } 
			_clc_o { C t } ⊢ { Cl p◂{ l { k v } r } } 
			_cmp_s8 { k k0 } ⊢ { k k0 c } 
			=+ c' 
			∐ 
				$ r ⊢ 
				∐ _some◂r .          
          $ r ⊢ r,r0 
					_clc_i { Cl p◂{ l { k v } ‹ r › } } ⊢ { C t }
					get_T◂◂get_r { { C T } t r0 k0 } ⊢|
        ∐. _none◂{} . 
					_clc_i { Cl p◂{ l { k v } ‹› } } ⊢ { C t }
					∎ { { C T } { k0 ‹› } }
			∐  
        $ v ⊢ v,v0 
				_clc_i { Cl p◂{ ‹› { k v0 } ‹› } } ⊢ { C _ }
        ∐ l ⊢ _none◂{}; r ⊢ _none◂{} . 
					F { { C T } x ‹› } ⊢ { C T }
					∎ { { C T } { k0 ‹ v › } }
				∐ l ⊢ _some◂l; r ⊢ _none◂{} . 
					F { { C T } x ‹ l › } ⊢ { C T } 
					∎ { { C T } { k0 ‹ v › } }
				∐ l ⊢ _none◂{}; r ⊢ _some◂r . 
					F { { C T } x ‹ r › } ⊢ { C T }  
					∎ { { C T } { k0 ‹ v › } }
				∐. l ⊢ _some◂l; r ⊢ _some◂r . 
          $ l ⊢ l,l0 
					get_m { { C T } l0 r } ⊢ { C T } 
					F { { C T } x ‹ l › } ⊢ { C T } 
					∎ { { C T } { k0 ‹ v › } }			
			∐. 
				$ l ⊢ 
				∐ _some◂l . 
					$ l ⊢ l,l0 
					_clc_i { Cl p◂{ ‹ l › { k v } r } } ⊢ { C t }
					get_T◂◂get_l { { C T } t l0 k0 } ⊢|
				∐. _none◂{} . 
					_clc_i { Cl p◂{ ‹› { k v } r } } ⊢ { C t }
					∎ { { C T } { k0 ‹› } }  
		§ get { { C T } k0 } 
			$ T ⊢ 
			∐ _some◂T . 
				$ T ⊢ T,t,t0 
        get_T◂◂get_e { { C ‹ T › } t0 t k0 } ⊢| 
			∐. _none◂{} . 
				∎ { { C ‹› } { k0 ‹› } } 
	§ @.emt { C t } 
    $ t ⊢ 
    ∐ _some◂t . 
      _clc_o { C t } ⊢ { C p◂{ l { k v } r } } 
      _emt { k v } ⊢ { k v }  
      $ { l r } ⊢ { l r },{ l0 r0 } 
      _clc_i { C p◂{ l { k v } r } } ⊢ { C _ } 
      emt { C l0 } ⊢ C 
      emt { C r0 } ⊢| 
    ∐. _none◂{} . 
      ∎ C 
  § emt { C T } 
    $ T ⊢ T,t 
    emt { C t } ⊢ C 
    ∎ { C T } 
	§ @.rpc { { C t } C1 }
		$ t ⊢ 
		∐ _some◂t . 
			_clc_o { C t } ⊢ { Cl p◂{ l { k v } r } } 
			$ l ⊢ l,l0 
			$ r ⊢ r,r0 
			$ { k v } ⊢ { k v },k_v 
			_clc_i { Cl p◂{ l { k v } r } } ⊢ { C t } 
			rpc { { C l0 } C1 } ⊢ { { C _ } { C1 l1 } } 
			rpc { { C r0 } C1 } ⊢ { { C _ } { C1 r1 } } 
			_clp { C1 p◂{ l1 k_v r1 } } ⊢ { C1 t1 } 
			∎ { { C ‹ t › } { C1 ‹ t1 › } } 
		∐. _none◂{} . 
			∎ { { C ‹› } { C1 ‹› } } 
  § rpc { C T } 
		_cli {} ⊢ C1 
		rpc { { C T } C1 } ⊢| 
	§ @.itr◂◂F { { C t } e } 
		$ t ⊢ 
		∐ _some◂t . 
			_clc_o { C t } ⊢ { C p◂{ l { k v } r } } 
			$ l ⊢ l,l0 
			$ r ⊢ r,r0 
			$ { k v } ⊢ { k v },k_v 
			_clc_i { C p◂{ l { k v } r } } ⊢ { C t } 
			F { e k_v } ⊢ e 
			itr◂◂F { { C l0 } e } ⊢ { { C _ } e } 
			itr◂◂F { { C r0 } e } ⊢ { { C _ } e } 
			∎ { { C ‹ t › } e } 
		∐. _none◂{} . 
			∎ { { C ‹› } e } 
	§ @.fld_i◂◂F { { C t } e } 
		$ t ⊢ 
		∐ _some◂t . 
			_clc_o { C t } ⊢ { C p◂{ l { k v } r } } 
			_clc_d C ⊢ C 
			F { e { k v } } ⊢ e 
			fld_i◂◂F { { C l } e } ⊢ { C e } 
			fld_i◂◂F { { C r } e } ⊢ { C e } 
			∎ { C e } 
		∐. _none◂{} . 
			∎ { C e }
	§ fld◂◂F { B e } 
		fld_i◂◂F { B e } ⊢ { _ e } 
		∎ e 
	§ main0 {} 
		ini {} ⊢ B 
		set { B { %[ "" ] %[ 65r ] } } ⊢ { B _ } 
		∎ B
	§ main _ 
		main0 {} ⊢ B0 
		\\get { B0 %[ "FE" ] } ⊢ { B1 cx } 
		\\[
		$ B0 ⊢ { C T } 
		$ T ⊢ 
		∐ _some◂T . 
			$ T ⊢ T,t,t0 
       \\get_T◂◂get_e { { C ‹ T › } t0 t %[ "" ] } ⊢ _ 
			 \\∎ {}
			 $ %[ "FF" ] ⊢ k0
			 \\_clc_o { C t } ⊢ { Cl p◂{ l { k v } r } } 
			\\_cmp_s8 { k k0 } ⊢ { k k0 c } 
			\\_clc_o { C t } ⊢ { Cl p◂{ l { k v } _ } }
			\\_clc_i { Cl p◂{ l { k v } ‹› } } ⊢ { C _ } 
			get_m { { C ‹ T › } t t0 } ⊢ _
			∎ {} 
		∐. _none◂{} . 
		\\]
			∎ {} 
	∎∎
§§ BST_r64 
	¶ k = _r64 
	¶ nd v'
		∐ p : { _opn◂(_pt◂(nd◂v')) { k v' } _opn◂(_pt◂(nd◂v')) } 
	¶ t v' = { _Clr◂(nd◂v') _pt◂(nd◂v') }
	§ ini # {} 
		_cli {} ⊢ C 
		∎ { C ‹› } 
	§ is_empty { C T } 
		∐ T ⊢ _none◂{} . 
			∎ { { C ‹› } bl.t◂{} } 
		∐. . 
			∎ { { C T } bl.f◂{} }
	§ @.asc { { C t } k0 } 
		$ t ⊢ 
		∐ _some◂t . 
			_clc_o { C t } ⊢ { Cl p◂{ l { k v } r } } 
			∐ k'=k0' .
				$ v ⊢ v,v0 
				_clc_i { Cl p◂{ l { k v } r } } ⊢ { C _ }
				∎ { C k0 ‹ v0 › }
			∐ k'=<k0' .
				$ r ⊢ r,r0 
				_clc_i { Cl p◂{ l { k v } r } } ⊢ { C _ }
				asc { { C r0 } k0 } ⊢| 
			∐. .
				$ l ⊢ l,l0 
				_clc_i { Cl p◂{ l { k v } r } } ⊢ { C _ }
				asc { { C l0 } k0 } ⊢| 
		∐. _none◂{} . 
			∎ { C k0 ‹› }
  § asc { { C T } k0 } 
    $ T ⊢ T,t 
    asc { { C t } k0 } ⊢ { C k0 o } 
    ∎ { { C T } { k0 o } } 
	§ @.set { { C t } { k0 v0 } } 
		_clc_o { C t } ⊢ { Cl p◂{ l { k v } r } } 
		∐ k'=k0' . 
			_clc_i { Cl p◂{ l { k v0 } r } } ⊢ { C _ }
			∎ { C k0 ‹ v › }
		∐ k'=<k0' .
			$ r ⊢ 
			∐ _some◂r . 
				$ r ⊢ r,r0 
				_clc_i { Cl p◂{ l { k v } ‹ r › } } ⊢ { C _ }
				set { { C r0 } { k0 v0 } } ⊢| 
			∐. _none◂{} . 
				$ k0 ⊢ k0,k1 
				_clc_i { Cl p◂{ l { k v } ‹› } } ⊢ { C t }
				_clp { C p◂{ ‹› { k1 v0 } ‹› } } ⊢ { C r1 }
				_clc_o { C t } ⊢ { Cl p◂{ l { k v } _ } } 
				_clc_i { Cl p◂{ l { k v } ‹ r1 › } } ⊢ { C _ }
				∎ { C k0 ‹› } 
		∐. .
			$ l ⊢ 
			∐ _some◂l . 
				$ l ⊢ l,l0 
				_clc_i { Cl p◂{ ‹ l › { k v } r } } ⊢ { C _ }
				set { { C l0 } { k0 v0 } } ⊢| 
			∐. _none◂{} . 
				$ k0 ⊢ k0,k1 
				_clc_i { Cl p◂{ ‹› { k v } r } } ⊢ { C t }
				_clp { C p◂{ ‹› { k1 v0 } ‹› } } ⊢ { C l1 }
				_clc_o { C t } ⊢ { Cl p◂{ _ { k v } r } } 
				_clc_i { Cl p◂{ ‹ l1 › { k v } r } } ⊢ { C _ }
				∎ { C k0 ‹› } 
	§ set { { C t } { k0 v0 } }	
		$ t ⊢ 
		∐ _some◂t . 
			$ t ⊢ t,t0 
			set { { C t0 } { k0 v0 } } ⊢ { C k0 o } 
			∎ { { C ‹ t › } { k0 o } }
		∐. _none◂{} . 
			$ k0 ⊢ k0,k1 
			_clp { C p◂{ ‹› { k1 v0 } ‹› } } ⊢ { C t } 
			∎ { { C ‹ t › } { k0 ‹› } }
	§ @.get_m { { C T } l r } 
		_clc_o { C l } ⊢ { Cl p◂{ l1 { k v } r1 } }
		$ r1 ⊢ 
		∐ _some◂r1 . 
			$ r1 ⊢ r1,r2 
			_clc_i { Cl p◂{ l1 { k v } ‹ r1 › } } ⊢ { C _ } 
			get_m { { C T } r2 r } ⊢| 
		∐. _none◂{} .
			_clc_i { Cl p◂{ l1 { k v } ‹ r › } } ⊢ { C _ } 
			∎ { C T } 
	§ 
		@.get_r # { { C T } w o } 
			_clc_o { C w } ⊢ { Cl p◂{ l { k v } _ } }
			_clc_i { Cl p◂{ l { k v } o } } ⊢ { C _ } 
			∎ { C T }  
		@.get_l # { { C T } w o } 
			_clc_o { C w } ⊢ { Cl p◂{ _ { k v } r } }
			_clc_i { Cl p◂{ o { k v } r } } ⊢ { C _ } 
			∎ { C T }  
		@.get_e # { { C _ } T o } 
			∎ { C o }
	§	@.get_T◂◂F { { C T } x t k0 } 
			_clc_o { C t } ⊢ { Cl p◂{ l { k v } r } } 
			∐ k'=k0' . 
        $ v ⊢ v,v0 
				_clc_i { Cl p◂{ ‹› { k v0 } ‹› } } ⊢ { C _ }
        ∐ l ⊢ _none◂{}; r ⊢ _none◂{} . 
					F { { C T } x ‹› } ⊢ { C T }
					∎ { { C T } { k0 ‹ v › } }
				∐ l ⊢ _some◂l; r ⊢ _none◂{} . 
					F { { C T } x ‹ l › } ⊢ { C T } 
					∎ { { C T } { k0 ‹ v › } }
				∐ l ⊢ _none◂{}; r ⊢ _some◂r . 
					F { { C T } x ‹ r › } ⊢ { C T }  
					∎ { { C T } { k0 ‹ v › } }
				∐. l ⊢ _some◂l; r ⊢ _some◂r . 
          $ l ⊢ l,l0 
					get_m { { C T } l0 r } ⊢ { C T } 
					F { { C T } x ‹ l › } ⊢ { C T } 
					∎ { { C T } { k0 ‹ v › } }			
			∐ k'=<k0' .
				$ r ⊢ 
				∐ _some◂r .          
          $ r ⊢ r,r0 
					_clc_i { Cl p◂{ l { k v } ‹ r › } } ⊢ { C t }
					get_T◂◂get_r { { C T } t r0 k0 } ⊢|
        ∐. _none◂{} . 
					_clc_i { Cl p◂{ l { k v } ‹› } } ⊢ { C t }
					∎ { { C T } { k0 ‹› } }
			∐. . 
				$ l ⊢ 
				∐ _some◂l . 
					$ l ⊢ l,l0 
					_clc_i { Cl p◂{ ‹ l › { k v } r } } ⊢ { C t }
					get_T◂◂get_l { { C T } t l0 k0 } ⊢|
				∐. _none◂{} . 
					_clc_i { Cl p◂{ ‹› { k v } r } } ⊢ { C t }
					∎ { { C T } { k0 ‹› } }  
		§ get { { C T } k0 } 
			$ T ⊢ 
			∐ _some◂T . 
				$ T ⊢ T,t,t0 
        get_T◂◂get_e { { C ‹ T › } t0 t k0 } ⊢| 
			∐. _none◂{} . 
				∎ { { C ‹› } { k0 ‹› } } 
	§ @.emt { C t } 
    $ t ⊢ 
    ∐ _some◂t . 
      _clc_o { C t } ⊢ { C p◂{ l { k v } r } } 
      _emt { k v } ⊢ { k v }  
      $ { l r } ⊢ { l r },{ l0 r0 } 
      _clc_i { C p◂{ l { k v } r } } ⊢ { C _ } 
      emt { C l0 } ⊢ C 
      emt { C r0 } ⊢| 
    ∐. _none◂{} . 
      ∎ C 
  § emt { C T } 
    $ T ⊢ T,t 
    emt { C t } ⊢ C 
    ∎ { C T } 
	§ @.rpc { { C t } C1 }
		$ t ⊢ 
		∐ _some◂t . 
			_clc_o { C t } ⊢ { Cl p◂{ l { k v } r } } 
			$ l ⊢ l,l0 
			$ r ⊢ r,r0 
			$ { k v } ⊢ { k v },k_v 
			_clc_i { Cl p◂{ l { k v } r } } ⊢ { C t } 
			rpc { { C l0 } C1 } ⊢ { { C _ } { C1 l1 } } 
			rpc { { C r0 } C1 } ⊢ { { C _ } { C1 r1 } } 
			_clp { C1 p◂{ l1 k_v r1 } } ⊢ { C1 t1 } 
			∎ { { C ‹ t › } { C1 ‹ t1 › } } 
		∐. _none◂{} . 
			∎ { { C ‹› } { C1 ‹› } } 
  § rpc { C T } 
		_cli {} ⊢ C1 
		rpc { { C T } C1 } ⊢| 
	§ @.itr◂◂F { { C t } e } 
		$ t ⊢ 
		∐ _some◂t . 
			_clc_o { C t } ⊢ { C p◂{ l { k v } r } } 
			$ l ⊢ l,l0 
			$ r ⊢ r,r0 
			$ { k v } ⊢ { k v },k_v 
			_clc_i { C p◂{ l { k v } r } } ⊢ { C t } 
			F { e k_v } ⊢ e 
			itr◂◂F { { C l0 } e } ⊢ { { C _ } e } 
			itr◂◂F { { C r0 } e } ⊢ { { C _ } e } 
			∎ { { C ‹ t › } e } 
		∐. _none◂{} . 
			∎ { { C ‹› } e } 
	§ @.fld_i◂◂F { { C t } e } 
		$ t ⊢ 
		∐ _some◂t . 
			_clc_o { C t } ⊢ { C p◂{ l { k v } r } } 
			_clc_d C ⊢ C 
			F { e { k v } } ⊢ e 
			fld_i◂◂F { { C l } e } ⊢ { C e } 
			fld_i◂◂F { { C r } e } ⊢ { C e } 
			∎ { C e } 
		∐. _none◂{} . 
			∎ { C e }
	§ fld◂◂F { B e } 
		fld_i◂◂F { B e } ⊢ { _ e } 
		∎ e 
	∎∎
\[
§§ BST 
	¶ nd k',v'
		∐ p : { _opn◂(_pt◂(nd◂k'◂v')) { k' v' } _opn◂(_pt◂(nd◂k'◂v')) } 
	¶ t k',v' = { _Clr◂(nd◂k'◂v') _pt◂(nd◂k'◂v') }
	¶ c l',e',r'
		∐ c_e : e'
		∐ c_l : l' 
		∐ c_r : r' 
	§ ini # {} 
		_cli {} ⊢ C 
		∎ { C ‹› } 
	§ asc_i◂◂C { k0 p◂{ l { k v } r } } 
		C { k0 k } ⊢ { k0 k f } 
		$ f ⊢ 
		∐ c_e◂{} .
			$ v ⊢ v,v0
			∎ { { k0 c_e◂v0 } p◂{ l { k v } r } }
		∐ c_r◂{} . 
			$ r ⊢ r,r0 
			∎ { { k0 c_r◂r0 } p◂{ l { k v } r } }
		∐. c_l◂{} . 
			$ l ⊢ l,l0 
			∎ { { k0 c_l◂l0 } p◂{ l { k v } r } }
	§ @.asc◂◂C { { C t } k } 
		$ t ⊢ 
		∐ _some◂t . 
			_cla◂◂(asc_i◂◂C) { k t C } ⊢ { { k c } t C }
			$ c ⊢ 
			∐ c_e◂v . 
				∎ { C k ‹ v › }
			∐ c_l◂l . 
				asc◂◂C { { C l } k } ⊢| 
			∐. c_r◂r . 
				asc◂◂C { { C r } k } ⊢| 
		∐. _none◂{} . 
			∎ { C k ‹› } 
	§ asc◂◂C # { { C t } k } 
		$ t ⊢ t,t0 
		asc◂◂C { { C t0 } k } ⊢ { C k o } 
		∎ { { C t } k o }
	§ set_i◂◂C { { k0 v0 } p◂{ l { k v } r } } 
		C { k0 k } ⊢ { k0 k f } 
		$ f ⊢ 
		∐ c_e◂{} .
			∎ { { k0 c_e◂v } p◂{ l { k v0 } r } }
		∐ c_r◂{} . 
			$ r ⊢ r,r0 
			∎ { { k0 c_r◂{ v0 r0 } } p◂{ l { k v } r } }
		∐. c_l◂{} . 
			$ l ⊢ l,l0 
			∎ { { k0 c_l◂{ v0 l0 } } p◂{ l { k v } r } }
	\\[
	§ @.set◂◂C { { C t } { k v } } 
		$ t ⊢ 
		∐ _some◂t . 
			_cla◂◂(set_i◂◂C) { { k v } t C } ⊢ { { k c } t C }
			$ c ⊢ 
			∐ c_e◂v . 
				∎ { C k ‹ v › }
			∐ c_l◂{ v l } . 
				set◂◂C { { C l } { k v } } ⊢| 
			∐. c_r◂{ v r } . 
				set◂◂C { { C r } { k v } } ⊢| 
		∐. _none◂{} . 
			∎ { C k ‹› } 
		\\]
	§ set◂◂C # { { C t } k } 
		$ t ⊢ t,t0 
		set◂◂C { { C t0 } k } ⊢ { C k o } 
		∎ { { C t } k o }
	\[
	§ get_i◂◂C { k0 p◂{ l { k v } r } } 
		C { k0 k } ⊢ { k0 k f } 
		$ f ⊢ 
		∐ c_e◂{} .
			∎ { { k0 c_e◂v } p◂{ l { k v0 } r } }
		∐ c_r◂{} . 
			$ r ⊢ r,r0 
			∎ { { k0 c_r◂{ v0 r0 } } p◂{ l { k v } r } }
		∐. c_l◂{} . 
			$ l ⊢ l,l0 
			∎ { { k0 c_l◂{ v0 l0 } } p◂{ l { k v } r } }
	\\[
	§ @.set◂◂C { { C t } { k v } } 
		$ t ⊢ 
		∐ _some◂t . 
			_cla◂◂(set_i◂◂C) { { k v } t C } ⊢ { { k c } t C }
			$ c ⊢ 
			∐ c_e◂v . 
				∎ { C k ‹ v › }
			∐ c_l◂{ v l } . 
				set◂◂C { { C l } { k v } } ⊢| 
			∐. c_r◂{ v r } . 
				set◂◂C { { C r } { k v } } ⊢| 
		∐. _none◂{} . 
			∎ { C k ‹› } 
		\\]
		§ set◂◂C # { { C t } k } 
		$ t ⊢ t,t0 
		set◂◂C { { C t0 } k } ⊢ { C k o } 
		∎ { { C t } k o }
	\]
	§ @.rpc_p { { C0 t0 } C1 } 
		$ t0 ⊢ 
		∐ _some◂t0 . 
			cla.l { C0 t0 } ⊢ { C0 _ p◂{ l k_v r } }
			rpc_p { { C0 l } C1 } ⊢ { C0 { C1 l1 } }
			rpc_p { { C0 r } C1 } ⊢{ C0 { C1 r1 } } 
			_clp { C1 p◂{ l1 k_v r1 } } ⊢ { C1 t1 } 
			∎ { C0 { C1 ‹ t1 › } }
		∐. _none◂{} . 
			∎ { C0 { C1 ‹› } }
		§ rpc { C t }
		$ t ⊢ t,t0 
		_cli {} ⊢ C1 
		rpc_p { { C t0 } C1 } ⊢ { C { C1 t1 } }
		∎ { { C t } { C1 t1 } }
	§§ r64 
		§ cmp { x y } 
			∐ x'=<y' . 
				∐ x'=y' . 
					∎ { x y c_e◂{} }
				∐. . 
					∎ { x y c_r◂{} }
			∐. . 
				∎ { x y c_l◂{} }
		§ asc = asc◂◂cmp 
		§ set = set◂◂cmp 
		∎∎
	∎∎ 
\]
§ err # s 
	_emt s ⊢ _ 
	∎| 

§ mk_none_arr # n 
	mk_arr { n _none◂{} } ⊢ { n _ v } 
	∎ { n v }

§ mk_nil_arr # n 
	mk_arr { n _nil◂{} } ⊢ { n _ v } 
	∎ { n v }

\[
unsigned long
    hash(unsigned char *str)
    {
        unsigned long hash = 5381;
        int c;

        while (c = *str++)
            hash = ((hash << 5) + hash) + c; /* hash * 33 + c */

        return hash;
    }
\]
§§ s8 
	§ @.itr_i◂◂F { v s l i } 
		∐ l'<>i' . 
			_lds { s i } ⊢ { s i b } 
			$ i ⊢ i,i0 
			F { v i0 b } ⊢ v 
			_inc i ⊢ i 
			itr_i◂◂F { v s l i } ⊢| 
		∐. . 
			∎ { v s } 
	§ itr◂◂F # { v s } 
		_s8_len s ⊢ { s l } 
		itr_i◂◂F { v s l %[ 0r ] } ⊢| 
	\[
	§§ hsh 
		§ f_i { h i b } 
			$ h ⊢ h,h0 
			_shl { h %[ 5r ] } ⊢ { h _ } 
			_add { h h0 } ⊢ { h _ } 
			_add { h b } ⊢ { h _ } 
			∎ h 
		§ f s 
			_s8_len s ⊢ { s l } 
			itr◂◂f_i { %[ 5381r ] s } ⊢| 
		∎∎
	§§ hsh_tbl 
		¶ bgt a' = _lst◂{ _s8 a' }
		¶ t◂a' = _arr◂(bgt◂a')
		§ N = 0xffr 
		§ ini {} 
			mk_nil_arr %[ N ] ⊢ { _ v } 
			∎ v 
		
		∎∎
	\]
	∎∎
§§ rp8 
	¶ @.t 
		∐ nd : { t _r64 t } 
		∐ lf : _s8 
		∐ e : {} 
		∐ chr : _r64 
	
	§ of_s8◂s = lf◂s 
	§ len r 
		$ r ⊢ 
		∐ nd◂{ r0 l r1 } .
			$ l ⊢ l,l0 
			∎ { nd◂{ r0 l0 r1 } l }
		∐ chr◂c .
			∎ { chr◂c %[ 1r ] }  
    ∐ e◂{} . 
			∎ { e◂{} %[ 0r ] } 
		∐. lf◂s . 
			_s8_len s ⊢ { s l } 
			∎ { lf◂s l }
	§ add_s8 # { e s } 
		_s8_len s ⊢ { s l } 
		len e ⊢ { e le } 
		_add { l le } ⊢ { l le } 
		∎ nd◂{ %e %l lf◂%s }  
	§ pfx_s8 { s e } 
		_s8_len s ⊢ { s l } 
		len e ⊢ { e le } 
		_add { l le } ⊢ { l le } 
		∎ nd◂{ lf◂%s %l %e }
	§ add_chr # { e c } 
		len e ⊢ { e le } 
		_inc le ⊢ le 
		∎ nd◂{ %e %le chr◂%c } 
	§ pfx_chr # { c e } 
		len e ⊢ { e le } 
		_inc le ⊢ le 
		∎ nd◂{ chr◂%c le e } 
	§ cct # { r0 r1 }
		len r0 ⊢ { r0 l0 } 
		len r1 ⊢ { r1 l1 } 
		_add { l0 l1 } ⊢ { l0 l1 } 
		∎ nd◂{ r0 l0 r1 }
	§ @.mk_s8_i { r s i }
		$ r ⊢ 
		∐ nd◂{ r0 l r1 } .
			mk_s8_i { r0 s i } ⊢ { r0 s i } 
			mk_s8_i { r1 s i } ⊢ { r1 s i }
			∎ { nd◂{ r0 l r1 } s i }
		∐ e◂{} . 
			∎ { e◂{} s i } 
		∐ chr◂c . 
			_sts { s i c } ⊢ { s i c }
			_inc i ⊢ i
			∎ { chr◂%c s i }
		∐. lf◂s0 . 
			_s8_len s0 ⊢ { s0 l0 } 
			rep_movsb { l0 s0 %[ 0r ] s i } ⊢ { l0 s0 i0 s i }
			∎ { lf◂%s0 s i } 
	§ mk_s8 # r 
		len r ⊢ { r l }
		_mlc_s8 l ⊢ { l s }
		mk_s8_i { r s %[ 0r ] } ⊢ { r s i }
		∎ { r s }
	§ @.to_s8_i { r s i }
		$ r ⊢ 
		∐ nd◂{ r0 lm r1 } .
			$ lm ⊢ _ 
			to_s8_i { r0 s i } ⊢ { s i } 
			to_s8_i { r1 s i } ⊢|
		∐ e◂{} . 
			∎ { s i } 
		∐ chr◂c . 
			_sts { s i c } ⊢ { s i _ }
			_inc i ⊢ i
			∎ { s i }
		∐. lf◂s0 . 
			_s8_len s0 ⊢ { s0 l0 } 
			$ %[ 0r ] ⊢ i0 
			rep_movsb { l0 s0 i0 s i } ⊢ { _ _ _ s i }
			∎ { s i } 
	§ to_s8 # r 
		len r ⊢ { r l }
		_mlc_s8 l ⊢ { l s }
		to_s8_i { r s %[ 0r ] } ⊢ { s _ }
		∎ s
	§ in_s8 # x 
		to_s8 x ⊢ s 
		∎ of_s8◂s
	∎∎
§ incq # n 
	_add { n %[ 8r ] } ⊢ { n _ } 
	∎ n 

§ decq # n 
	_sub { n %[ 8r ] } ⊢ { n _ } 
	∎ n 

§ lod_o # { v i } 
	_lod_q { v i } ⊢ { v i o } 
	smt_err◂◂"lod_o" o ⊢ a 
	∎ { v i a } 
§ set_o # { v i a } 
	$ _some◂a ⊢ o 
	set_q { v i o } ⊢ { v i } 
	∎ { v i }
¶ iso a' 
	∐ iso : a' 
§ inv # a 
	$ a ⊢ iso◂a 
	∎ a  

§ KB = 1024r 
§ inc_x # x 
	$ x ⊢ x,x0 
	_inc x0 ⊢ x0 
	∎ { x x0 } 
§ max { x y } 
	∐ x'=<y' . 
		$ y ⊢ y,y0 
		∎ { x y y0 } 
	∐. . 
		$ x ⊢ x,x0 
		∎ { x y x0 }
§ min { x y } 
	∐ x'=<y' . 
		$ x ⊢ x,x0
		∎ { x y x0 } 
	∐. . 
		$ y ⊢ y,y0 
		∎ { x y y0 }
§ cns1◂a = _cns◂{ a _nil◂{} } 
§ cns2◂{ a0 a1 } = _cns◂{ a0 _cns◂{ a1 _nil◂{} } }
§ cns3◂{ a0 a1 a2 } = _cns◂{ a0 _cns◂{ a1 _cns◂{ a2 _nil◂{} } } }
§ cns4◂{ a0 a1 a2 a3 } = _cns◂{ a0 _cns◂{ a1 _cns◂{ a2 _cns◂{ a3 _nil◂{} } } } }
§ cns5◂{ a0 a1 a2 a3 a4 } = _cns◂{ a0 _cns◂{ a1 _cns◂{ a2 _cns◂{ a3 _cns◂{ a4 _nil◂{} } } } } }

§§ arr 
	§ @.mlt_i◂◂M { v0 v1 l i } 
		∐ l'=i' . 
			∎ { v0 v1 } 
		∐. . 
			_lod_q { v0 i } ⊢ { v0 i b0 } 
			_lod_q { v1 i } ⊢ { v1 i b1 }
			M { b0 b1 } ⊢ b2 
			exc_q { v0 i b2 } ⊢ { v0 i _ } 
			_inc i ⊢ i 
			mlt_i◂◂M { v0 v1 l i } ⊢|  
	§ mlt◂◂M { v0 v1 } 
		_arr_len v0 ⊢ { v0 l0 } 
		_arr_len v1 ⊢ { v1 l1 } 
		∐ l0'=l1' . 
			mlt_i◂◂M { v0 v1 l0 %[ 0r ] } ⊢| 
		∐. . 
			_emt %[ "op2 0" ] ⊢ _ 
			∎| 
	§ @.fnd_lft_i◂◂T { a l i } 
		∐ l'=i' . 
			$ _none◂{} ⊢ o
			∎ { a o } 
		∐. . 
			_lod_q { a i } ⊢ { a i v } 
			T { i v } ⊢ { i v b } 
			∐ b ⊢ bl.t◂{} . 
				$ _some◂{ i v } ⊢ o 
				∎ { a o }
			∐. . 
				_inc i ⊢ i 
				fnd_lft_i◂◂T { a l i } ⊢| 
	§ fnd_lft◂◂T # a 
		_arr_len a ⊢ { a l } 
		fnd_lft_i◂◂T { a l %[ 0r ] } ⊢|
	§ @.itr_lft_i◂◂F { a s l i } 
		∐ l'=i' . 
			∎ { a s } 
		∐. . 
			_lod_q { a i } ⊢ { a i v } 
			$ i ⊢ i,i0 
			F { s i0 v } ⊢ s 
			_inc i ⊢ i 
			itr_lft_i◂◂F { a s l i } ⊢| 
	§ itr_lft◂◂F # { a s }
		_arr_len a ⊢ { a l } 
		itr_lft_i◂◂F { a s l %[ 0r ] } ⊢| 
	∎∎

¶ @.p_lst ◂ a'
 	∐ p_cns : { a' p_lst◂a' }
	∐ p_end : a'

§ @.rev_i { l0 l1 }
	$ l1 ⊢ 
	∐ _nil◂{} .
		∎ l0
	∐. _cns◂{ hd tl } .
		rev_i { ⟦ hd < l0 ⟧ tl } ⊢|
§ rev # l
	rev_i { ⟦⟧ l } ⊢ l0
	∎ l0
§ @.apnd { l0 l1 }
	$ l0 ⊢ 
	∐ _cns◂{ hd l0 } . 
		apnd { l0 l1 } ⊢ l 
		$ _cns◂{ hd l } ⊢ l 
		∎ l 
	∐. _nil◂{} . 
		∎ l1 
§ @.rev_apnd { l0 l1 }
	$ l0 ⊢ 
	∐ _cns◂{ hd l0 } . 
		$ _cns◂{ hd l1 } ⊢ l1 
		rev_apnd { l0 l1 } ⊢|
	∐. _nil◂{} . 
		∎ l1 
§ @.pop_n { n l }
	∐ n'=0r . 
		$ _nil◂{} ⊢ r 
		∎ { r l } 
	∐. .
		_dec n ⊢ n 
		$ l ⊢ 
		∐ _cns◂{ a l } . 
			pop_n { n l } ⊢ { r l } 
			$ _cns◂{ a r } ⊢ r 
			∎ { r l } 
		∐. _nil◂{} . 
			∎ { _nil◂{} _nil◂{} }

§ @.s8_of_s8_lst_i { l sl }
	$ sl ⊢ 
	∐ _cns◂{ s sl } . 
		_s8_len s ⊢ { s b }
		_add { l b } ⊢ { l b } 
		s8_of_s8_lst_i { l sl } ⊢ { sr n } 
		$ %[ 0r ] ⊢ o0 
		$ b ⊢ b,b0 
		rep_movsb { b s o0 sr n } ⊢ { b s o0 sr n } 
		∎ { sr n } 
	∐. _nil◂{} . 
		_mlc_s8 l ⊢ { l sr } 
		$ %[ 0r ] ⊢ o 
		∎ { sr o }
§ s8_of_s8_lst # l 
	s8_of_s8_lst_i { %[ 0r ] l } ⊢ { s n } 
	∎ s 

§ @.assoc { l k }
	∐ l ⊢ _cns◂{ { k0 o0 } l } .
		∐ k'=k0' .
			∐ o0 ⊢ _some◂v0 .
				$ v0 ⊢ v0,v1
				∎ { _cns◂{ { k0 _some◂v0 } l } k _some◂v1 }
			∐. .
				∎ { _cns◂{ { k0 o0 } l } k _none◂{} }
		∐. .
			assoc { l k } ⊢ { l k r0 }
			∎ { _cns◂{ { k0 o0 } l } k r0 }
	∐. .
		∎ { l k _none◂{} }	

§§ opn 
	§ eq_T◂◂E { a b } 
		∐ a ⊢ _some◂a; b ⊢ _some◂b . 
			E { a b } ⊢ { a b t } 
			∎ { _some◂a _some◂b t } 
		∐ a ⊢ _none◂{}; b ⊢ _none◂{} . 
			∎ { _none◂{} _none◂{} bl.t◂{} } 
		∐. . 
			∎ { a b bl.f◂{} }
	§ pnt◂◂P { v o } 
		$ o ⊢ 
		∐ _some◂a . 
			P { v a } ⊢ { v s } 
			^ s ⊢ _,s 
				"_some◂" 0' // 
			∎ { v s } 
		∐. _none◂{} . 
			∎ { v %[ "_none◂{}" ] }
	§ eq_st_T◂◂E { e a b }
		∐ a ⊢ _some◂a; b ⊢ _some◂b . 
			E { e a b } ⊢ { e a b t } 
			∎ { e _some◂a _some◂b t } 
		∐ a ⊢ _none◂{}; b ⊢ _none◂{} . 
			∎ { e _none◂{} _none◂{} bl.t◂{} } 
		∐. . 
			∎ { e a b bl.f◂{} } 
	∎∎
§§ lst
	¶ t a' = _lst◂a' 
	§ assoc = assoc 
	§ rev = rev 
	§ apnd = apnd 
	
	§ 
		@.stx_line◂◂G ^= 
			∐# G stx_line◂◂G ⊢ { a l } 
				∎ _some◂_cns◂{ a l } 
			∐.# ⊢ { } 
				∎ _some◂_nil◂{}
	§
		@.stx_synt◂◂G ^= 
			∐* G stx_line◂◂G ⊢ { a l } 
				∎ _some◂_cns◂{ a l } 
			∐.* ⊢ { } 
				∎ _some◂_nil◂{}
	§
		@.stx_cmm_tl◂◂G ^=
			∐# "," !| G stx_cmm_tl◂◂G ⊢ { {} a l } 
				∎ _some◂_cns◂{ a l } 
			∐.# ⊢ { } 
				∎ _some◂_nil◂{} 
	
	§
		@.stx_cmm◂◂H ^= 
			∐# H stx_cmm_tl◂◂H ⊢ { a l } 
				∎ _some◂_cns◂{ a l } 
			∐.# ⊢ { } 
				∎ _some◂_nil◂{} 
		
		§ @.eq_v◂◂{ E D } { v l0 l1 } 
		∐ l0 ⊢ _cns◂{ p0 l0 }; l1 ⊢ _cns◂{ p1 l1 } .
			E { v p0 p1 } ⊢ { v p0 p1 b0 } 
			$ b0 ⊢ 
			∐ bl.t◂{} . 
				eq_v◂◂{ E D } { v l0 l1 } ⊢ { v l0 l1 b1 } 
				∎ { v _cns◂{ p0 l0 } _cns◂{ p1 l1 } b1 }
			∐. bl.f◂{} . 
				∎ { v _cns◂{ p0 l0 } _cns◂{ p1 l1 } bl.f◂{} }
		∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
			∎ { v _nil◂{} _nil◂{} bl.t◂{} }
		∐. . 
			D { v l0 l1 } ⊢|
	§ eq_v_exn # { v l0 l1 } 
		_emt %[ "eq_v 0" ] ⊢ _ 
		∎| 
	§ eq_v_f # { v l0 l1 } 
		∎ { v l0 l1 bl.f◂{} }
	§ eq_v_err◂◂E # { v l0 l1 } 
		eq_v◂◂{ E eq_v_exn } { v l0 l1 } ⊢|  
	§ eq_v_f◂◂E # { v l0 l1 } 
	 	eq_v◂◂{ E eq_v_f } { v l0 l1 } ⊢| 

	§ e_u◂◂E # { {} x y } 
		E { x y } ⊢ { x y b }
		∎ { {} x y b }
	§ eq◂◂E # { l0 l1 } 
		eq_v_f◂◂(e_u◂◂E) { {} l0 l1 } ⊢ { {} l0 l1 b } 
		∎ { l0 l1 b }

	§ @.fld_lr◂◂{ F0 F1 F2 } { v l } 
		$ l ⊢ 
		∐ _cns◂{ a l } .
			F0 { v a } ⊢ { v b } 
			fld_lr◂◂{ F0 F1 F2 } { v l } ⊢ w 
			F1 { w b } ⊢ w 
			∎ w 
		∐. _nil◂{} . 
			F2 v ⊢ w 
			∎ w 
	§ @.fld_l◂◂F { v l }
		$ l ⊢ 
		∐ _cns◂{ a l } .
			F { v a } ⊢ v 
			\\_emt %[ "fld_l D0" ] ⊢ _ 
			fld_l◂◂F { v l } ⊢| 
		∐. _nil◂{} . 
			\\_emt %[ "fld_l D1" ] ⊢ _ 
			∎ v
	§ @.fld_r◂◂F { v l } 
		$ l ⊢ 
		∐ _cns◂{ a l } . 
			fld_r◂◂F { v l } ⊢ v 
			F { a v } ⊢ v 
			∎ v 
		∐. _nil◂{} . 
			∎ v 
	§ @.pp_l◂◂{ F S } { e v l } 
		$ l ⊢ 
		∐ _cns◂{ a l } . 
			F { v a } ⊢ { v s }
			rp8.add_s8 { e s } ⊢ e 
			∐ l ⊢ _cns◂{ a l } . 
				rp8.add_s8 { e %[ S ] } ⊢ e 
				F { v a } ⊢ { v s }
				rp8.add_s8 { e s } ⊢ e 
				pp_l◂◂{ F S } { e v l } ⊢|
			∐. . 
				∎ { e v }
		∐. _nil◂{} . 
			∎ { e v } 
	§ @.pnt_l◂◂{ F S } { v l } 
		$ rp8.e◂{} ⊢ e 
		pp_l◂◂{ F S } { e v l } ⊢ { e v } 
		rp8.to_s8 e ⊢ s 
		∎ { v s } 
	§ @.pnt◂◂{ F S } l 
		$ l ⊢ 
		∐ _cns◂{ a l } .
			F a ⊢ s 
			∐ l ⊢ _nil◂{} . 
				∎ s
			∐. . 
				pnt◂◂{ F S } l ⊢ s1  
				^ s,s1 ⊢ _,_,sr 
					0' S 1' // 
				∎ sr  
		∐. _nil◂{} . 
			∎ %[ "" ] 
	\\[
	§ @.map_l◂◂F { v l } 
		$ l ⊢ 
		∐ _cns◂{ a l } . 
			F { v a } ⊢ { v b } 
			map_l◂◂F { v l } ⊢ { v l } 
			$ _cns◂{ b l } ⊢ l 
			∎ { v l } 
		∐. _nil◂{} .
			$ _nil◂{} ⊢ l 
			∎ { v l } 
	\\]
	\[
	§ @.map_l◂◂F { v l } 
		∐ l ⊢_cns◂{ a0 l }; l ⊢ _cns◂{ a1 l } . 
			F { v a0 } ⊢ { v b0 } 
			F { v a1 } ⊢ { v b1 } 
			map_l◂◂F { v l } ⊢ { v l } 
			∎ { v ⟦ b0 b1 < l ⟧ } 
		∐ l ⊢ _cns◂{ a0 l }; l ⊢ _nil◂{} .
			F { v a0 } ⊢ { v b0 } 
			∎ { v ⟦ b0 ⟧ } 
		∐. l ⊢ _nil◂{} .
			∎ { v ⟦⟧ } 
			\]
	§ @.map_l_x◂◂F { v l } 
		$ l ⊢ 
		∐ _cns◂{ a l } .
			F { v a } ⊢ { v b c } 
			map_l_x◂◂F { v l } ⊢ { v l lx } 
			∎ { v _cns◂{ %b l } _cns◂{ %c lx } }
		∐. _nil◂{} . 
			∎ { v _nil◂{} _nil◂{} }
	§ @.map_r◂◂F { v l } 
		$ l ⊢ 
		∐ _cns◂{ a l } . 
			map_r◂◂F { v l } ⊢ { v l } 
			F { v a } ⊢ { v b } 
			$ _cns◂{ b l } ⊢ l 
			∎ { v l } 
		∐. _nil◂{} .
			$ _nil◂{} ⊢ l 
			∎ { v l }

	§ @.len l 
		$ l ⊢ 
		∐ _cns◂{ a l } . 
			len l ⊢ { l n } 
			$ _cns◂{ a l } ⊢ l 
			_inc n ⊢ n 
			∎ { l n } 
		∐. _nil◂{} . 
			$ %[ 0r ] ⊢ n 
			$ _nil◂{} ⊢ l 
			∎ { l n }
	§ @.csm { l a } 
		$ l ⊢ 
		∐ _cns◂{ x l } . 	
			∐ x'=a' . 
				csm { l a } ⊢| 
			∐. . 
				csm { l a } ⊢ { l a } 
				$ _cns◂{ x l } ⊢ l 
				∎ { l a }
		∐. _nil◂{} . 
			$ _nil◂{} ⊢ l 
			∎ { l a }
	§ @.nth { l i } 
		$ l ⊢ 
		∐ _cns◂{ a l } . 
			∐ i'=0r . 
				∎ { a l } 
			∐. . 
				_dec i ⊢ i 
				nth { l i } ⊢ { b l } 
				$ _cns◂{ a l } ⊢ l 
				∎ { b l } 
		∐. _nil◂{} . 
			$ %[ "nth 0" ] ⊢ se 
			_emt se ⊢ se 
			∎| 
	§ @.prj { l i } 
		$ l ⊢ 
		∐ _cns◂{ a l } . 
			∐ i'=0r . 
				∎ a 
			∐. . 
				_dec i ⊢ i 
				prj { l i } ⊢|
		∐. _nil◂{} . 
			$ %[ "prj 0" ] ⊢ se 
			_emt se ⊢ se 
			_emt i ⊢ i 
			∎| 
	§ @.add { l a } 
		$ l ⊢ 
		∐ _cns◂{ b l } . 
			∐ a'=b' . 
				$ _cns◂{ b l } ⊢ l 
				∎ l 
			∐. . 
				add { l a } ⊢ l 
				$ _cns◂{ b l } ⊢ l 
				∎ l 
		∐. _nil◂{} . 
			$ _nil◂{} ⊢ l 
			$ _cns◂{ a l } ⊢ l 
			∎ l 
	∎∎
§§ log 
	¶ t = { rp8.t _lst◂rp8.t }
	§ ini◂{} = { rp8.e◂{} _nil◂{} } 
	§ push◂{ t x } = { rp8.e◂{} _cns◂{ t x } } 
	§ pop { t x } 
		$ x ⊢ 
		∐ _cns◂{ e x } . 
			∎ { t { e x } }  
		∐. _nil◂{} . 
			∎ { t { rp8.e◂{} _nil◂{} } } 
			
	§ add_s8 { { t l } s } 
		rp8.add_s8 { t s } ⊢ t
		∎ { t l } 
	§ emt_i { {} e } 
		rp8.mk_s8 e ⊢ { e s } 
		_emt s ⊢ _ 
		∎ { {} e } 
	§ emt { t l }
			lst.map_r◂◂emt_i { {} l } ⊢ { {} l } 
			rp8.mk_s8 t ⊢ { t s } 
			_emt s ⊢ _ 
			∎ { t l }
	∎∎
\\[
§ subst { sl r0 } 
	assoc { sl r0 } ⊢ { sl r0 o } 
	$ o ⊢ 
	∐ _some◂r1 . 
		∎ { sl r1 } 
	∐. _none◂{} . 
		∎ { sl r0 } 
\\]
\\§ @.subst_lst = lst.map_l◂◂subst 
§§ p_lst 
	§ @.map_l◂◂F { v l } 
		$ l ⊢ 
		∐ p_cns◂{ a l } . 
			F { v a } ⊢ { v b } 
			map_l◂◂F { v l } ⊢ { v l } 
			∎ { v p_cns◂{ b l } } 
		∐. p_end◂a .
			F { v a } ⊢ { v b } 
			∎ { v p_end◂b } 
	§ @.fld_l◂◂F { v l }
		$ l ⊢ 
		∐ p_cns◂{ a l } . 
			F { v a } ⊢ v 
			fld_l◂◂F { v l } ⊢| 
		∐. p_end◂a .
			F { v a } ⊢|
	∎∎
§§ hsh_tbl 
	§§  el
		§ @.asc { { s {} } l } 
			$ l ⊢ 
			∐ _cns◂{ { t v } l } . 
				∐ s'=t' . 
					$ v ⊢ v,v0 
					∎ { { s ‹ v0 › } ⟦ { t v } < l ⟧  }
				∐. . 
					asc { { s {} } l } ⊢ { { s o } l } 
					∎ { { s o } ⟦ { t v } < l ⟧  }
			∐. _nil◂{} . 
				∎ { { s ‹› } ⟦⟧ }
		§ @.get { { s {} } l } 
			$ l ⊢ 
			∐ _cns◂{ { t v } l } . 
				∐ s'=t' . 
					∎ { { s ‹ v › } l }
				∐. . 
					get { { s {} } l } ⊢ { { s o } l } 
					∎ { { s o } ⟦ { t v } < l ⟧ }
			∐. _nil◂{} . 
				∎ { { s ‹› } ⟦⟧ }
		§ @.set { { s w } l } 
			$ l ⊢ 
			∐ _cns◂{ { t v } l } . 
				∐ s'=t' . 
					∎ { { s ‹ v › } ⟦ { t w } < l ⟧ }
				∐. . 
					set { { s w } l } ⊢ { { s o } l } 
					∎ { { s o } ⟦ { t v } < l ⟧ }
			∐. _nil◂{} . 
				$ s ⊢ s,s0
				∎ { { s ‹› } ⟦ { s0 w } ⟧ } 
		\[
		§ @.la◂◂F { { s d } l }
			$ l ⊢ 
			∐ _cns◂{ { t v } l } . 
				∐ s'=t' . 
					$ s ⊢ s,s0 
					F { d s0 v } ⊢ { d v } 
					∎ { { s d } ⟦ { t v } < l ⟧ }
				∐. . 
					la◂◂F { { s d } l } ⊢ { { s d } l } 
					∎ { { s d } ⟦ { t v } < l ⟧ }
			∐. _nil◂{} . 
				∎ { { s d } ⟦⟧ }
				\]
		∎∎
	§ ini # n 
		_shl { %[ 1r ] n } ⊢ { l n }  
		_mk_arr { l ⟦⟧ } ⊢ { l _ a } 
		_dec l ⊢ l 
		∎ { l a } 
	§ f◂◂{ F H } # { { m a } { s v } }
		H s ⊢ { s h } 
		_and { h m } ⊢ { h m } 
		exc_q { a h ⟦⟧ } ⊢ { a h l }
		F { { s v } l } ⊢ { { s w } l }
		exc_q { a h l } ⊢ { a h _ } 
		∎ { { m a } { s w } } 
	§ asc◂◂H # { t s } 
		f◂◂{ el.asc H } { t { s {} } } ⊢| 
	§ get◂◂H # { t s } 
		f◂◂{ el.get H } { t { s {} } } ⊢|
	§ set◂◂H # { t { s v } } 
		f◂◂{ el.set H } { t { s v } } ⊢| 
	\[
	§ la◂◂{ H F } # { t { s d } }
		f◂◂{ el.la H } { t { s d } } ⊢|
	\]
	§ @.itr_i◂◂F { { { m a } n v } i } 
    ∐ n'<>i' . 
      _lod_q { a i } ⊢ { a i l } 
      lst.fld_l◂◂F { v l } ⊢ v 
      _inc i ⊢ i 
      itr_i◂◂F { { { m a } n v } i } ⊢|
    ∐. .
      ∎ { { m a } v }
  § itr◂◂F # { { m a } v }
    _arr_len a ⊢ { a n } 
  	itr_i◂◂F { { { m a } n v } %[ 0r ] } ⊢|
	§ @.rb_i◂◂F { { { m a } n v } i } 
    ∐ n'<>i' .
      exc_q { a i ⟦⟧ } ⊢ { a i l } 
      lst.fld_l◂◂F { v l } ⊢ v 
      _inc i ⊢ i 
      rb_i◂◂F { { { m a } n v } i } ⊢|
    ∐. . 
      ∎ { { m a } v }
  § rb◂◂F # { { m a } v }
    _arr_len a ⊢ { a n } 
  	rb_i◂◂F { { { m a } n v } %[ 0r ] } ⊢|
	§ @.fld_i◂◂F { { { m a } n v } i } 
    ∐ n'=i' .
      ∎ v
    ∐. . 
      exc_q { a i ⟦⟧ } ⊢ { a i l } 
      lst.fld_l◂◂F { v l } ⊢ v 
      _inc i ⊢ i 
      fld_i◂◂F { { { m a } n v } i } ⊢|
  § fld◂◂F # { v { m a } }
    _arr_len a ⊢ { a n } 
  	fld_i◂◂F { { { m a } n v } %[ 0r ] } ⊢|
	§ is_empty_i # { b _ } 
		∎ bl.f◂{} 
	§ is_empty # a 
		itr◂◂is_empty_i { a bl.t◂{} } ⊢| 
	§§ s8 
		¶ t a' = { _r64 _arr◂(_lst◂{ _s8 a' }) } 
		§ SEED = 0xf7f765d79dabbacer
		§ M = 0xc6a4a7935bd1e995r
		§ R = 47r 
		\[
		§ @.hsh_i { { s n h } i } 
			∐ i'<>n' . 
				_lds64 { s i } ⊢ { s i k } 
				_add { i %[ 8r ] } ⊢ { i _ } 
				_imul { k %[ M ] } ⊢ { k _ } 
				$ k ⊢ k,k0 
				_shr { k0 %[ R ] } ⊢ { k0 _ } 
				_xor { k k0 } ⊢ { k _ }
				_imul { k %[ M ] } ⊢ { k _ } 
				_xor { h k } ⊢ { h _ } 
				_imul { h %[ M ] } ⊢ { h _ } 
				hsh_i { { s n h } i } ⊢| 
			∐. .
				∎ { s n h }
		§ @.hsh_m { { s h m } { x n } } 
			∐ x'<>0r . 
				_dec n ⊢ n 
				_lds { s n } ⊢ { s n r } 
  	    _shl { r x } ⊢ { r x } 
				_sub { x %[ 8r ] } ⊢ { x _ } 
  	    _xor { h r } ⊢ { h _ } 
				hsh_m { { s h m } { x n } } ⊢| 
			∐. . 
				_imul { h m } ⊢ { h _ } 
				∎ { s h } 
		§ hsh s 
			_s8_len s ⊢ { s l } 
			$ l ⊢ l,n,m 
			_and { m %[ 7r ] } ⊢ { m _ } 
			_shr { n %[ 3r ] } ⊢ { n _ } 
			_shl { n %[ 3r ] } ⊢ { n _ } 
			_imul { %[ M ] l } ⊢ { h l } 
			_xor { h %[ SEED ] } ⊢ { h _ } 
  	  hsh_i { { s n h } %[ 0r ] } ⊢ { s n h } 
  	  _add { n m } ⊢ { n m } 
			hsh_m { { s h m } { %[ 48r ] n } } ⊢ { s h } 
  	  $ h ⊢ h,h0 
			_shr { h0 %[ R ] } ⊢ { h0 _ } 
			_xor { h h0 } ⊢ { h _ } 
			_imul { h %[ M ] } ⊢ { h _ } 
			$ h ⊢ h,h0 
			_shr { h0 %[ R ] } ⊢ { h0 _ } 
			_xor { h h0 } ⊢ { h _ } 
			∎ { s h }
		\]
		§ hsh = _s8_hsh 
		§ asc = asc◂◂hsh 
		§ set = set◂◂hsh 
		§ get = get◂◂hsh
		\[
		§ la◂◂F { t { s d } } 
			la◂◂{ hsh F } { t { s d } } ⊢| 
	§% 
    $ %[ "e" ] ⊢ s 
    \\_lds64 { s %[ 0r ] } ⊢ { s _ x } 
    \\_emt x ⊢ _ 
    hsh s ⊢ { _ h }  
		_emt h ⊢ _ 
		∎|
	\]
		∎∎
	§§ r64 
		§ hsh # x 
			$ x ⊢ x,h 
			_shl { h %[ 32r ] } ⊢ { h _ } 
			_add { h %[ 1r ] } ⊢ { h _ } 
			_imul { h x } ⊢ { h x } 
			∎ { x h }
		§ asc = asc◂◂hsh 
		§ set = set◂◂hsh 
		§ get = get◂◂hsh
		\[
		§ la◂◂F { t { s d } } 
			la◂◂{ hsh F } { t { s d } } ⊢| 
		\]
		∎∎
	∎∎
§
	@.esc_s8 ^= 
		∐ "\n" esc_s8 ⊢ { {} e0 }
			rp8.pfx_s8 { %[ "\\n" ] e0 } ⊢ e0 
			∎ _some◂e0 
		∐ "\t" esc_s8 ⊢ { {} e0 }
			rp8.pfx_s8 { %[ "\\t" ] e0 } ⊢ e0 
			∎ _some◂e0 		
		∐ "\\" esc_s8 ⊢ { {} e0 }
			rp8.pfx_s8 { %[ "\\\\" ] e0 } ⊢ e0 
			∎ _some◂e0
		∐ "\"" esc_s8 ⊢ { {} e0 }
			rp8.pfx_s8 { %[ "\\\"" ] e0 } ⊢ e0 
			∎ _some◂e0
		
		∐ _byt esc_s8 ⊢ { b e0 }
			∐ b'=0r . 
				rp8.pfx_s8 { %[ "\\0" ] e0 } ⊢ e0 
				∎ _some◂e0
			∐. . 
				rp8.pfx_chr { b e0 } ⊢ e0 
				∎ _some◂e0
		∐. ⊢ { } 
			∎ _some◂rp8.e◂{}
§§ esc_s8 
	§ @.lp { s es l i0 i1 }
		∐ l'=i0' . 
			∎ { s es l i1 }
		∐. . 
			_lds { s i0 } ⊢ { s i0 c } 
			_inc i0 ⊢ i0 
			∐ c'=chr.nl . 
				_sts { es i1 %[ chr.slsh ] } ⊢ { es i1 _ } 
				_inc i1 ⊢ i1 
				_sts { es i1 %[ chr.n ] } ⊢ { es i1 _ } 
				_inc i1 ⊢ i1 
				lp { s es l i0 i1 } ⊢| 
			∐ c'=chr.tab . 
				_sts { es i1 %[ chr.slsh ] } ⊢ { es i1 _ } 
				_inc i1 ⊢ i1 
				_sts { es i1 %[ chr.t ] } ⊢ { es i1 _ } 
				_inc i1 ⊢ i1 
				lp { s es l i0 i1 } ⊢| 
			∐ c'=chr.slsh . 
				_sts { es i1 %[ chr.slsh ] } ⊢ { es i1 _ } 
				_inc i1 ⊢ i1 
				_sts { es i1 %[ chr.slsh ] } ⊢ { es i1 _ } 
				_inc i1 ⊢ i1 
				lp { s es l i0 i1 } ⊢| 
			∐ c'=chr.dq . 
				_sts { es i1 %[ chr.slsh ] } ⊢ { es i1 _ } 
				_inc i1 ⊢ i1 
				_sts { es i1 %[ chr.dq ] } ⊢ { es i1 _ } 
				_inc i1 ⊢ i1 
				lp { s es l i0 i1 } ⊢| 
			∐ c'=0r . 
				_sts { es i1 %[ chr.slsh ] } ⊢ { es i1 _ } 
				_inc i1 ⊢ i1 
				_sts { es i1 %[ chr.d_0 ] } ⊢ { es i1 _ } 
				_inc i1 ⊢ i1 
				lp { s es l i0 i1 } ⊢| 
			∐. . 
				_sts { es i1 c } ⊢ { es i1 _ } 
				_inc i1 ⊢ i1 
				lp { s es l i0 i1 } ⊢| 
	§ f # s 
		_s8_len s ⊢ { s l } 
		$ l ⊢ l,x 
		_shl { x %[ 2r ] } ⊢ { x _ } 
		_mlc_s8 x ⊢ { x es0 } 
		lp { s es0 l %[ 0r ] %[ 0r ] } ⊢ { s es0 l i1 }
		_mlc_s8 i1 ⊢ { i1 es1 } 
		rep_movsb { i1 es0 %[ 0r ] es1 %[ 0r ] } ⊢ { _ _ _ es1 _ } 
		∎ { s es1 }
	∎∎
§ mk_esc_s8 = esc_s8.f 
§
	@.stg_ltr ^=
	∐. "\"" stg_ltr_seq ⊢ { {} cl }
		rp8.to_s8 cl ⊢ s
		$ _some◂s ⊢ a
		∎ a
	@.stg_ltr_seq ^=
	∐ "\n" !| ⊢ { xx } 
		$ _none◂{} ⊢ a 
		∎ a 
	∐ "\\" stg_ltr_sp stg_ltr_seq ⊢ { {} c0 cl }
		rp8.pfx_chr { c0 cl } ⊢ cl 
		$ _some◂cl ⊢ a
		∎ a
	∐ "\"" ⊢ { {} }
		∎ _some◂rp8.e◂{}
	∐. _byt stg_ltr_seq ⊢ { c0 cl }
		rp8.pfx_chr { c0 cl } ⊢ cl 
		$ _some◂cl ⊢ a
		∎ a
	@.stg_ltr_sp ^=
	∐ "\\" ⊢ { {} }
		∎ _some◂%[ 92r ]
	∐ "\"" ⊢ { {} }
		∎ _some◂%[ 34r ]
	∐ "n" ⊢ { {} }
		∎ _some◂%[ 10r ]
	∐ "t" ⊢ { {} }
		∎ _some◂%[ 9r ]
	∐. "0" ⊢ { {} }
		∎ _some◂%[ 0r ]

§
	@.dgt ^=
	∐. _byt ⊢ { c }
		∐ c'=<57r; 48r=<c' . 
			∎ _some◂c
		∐. .
			∎ _none◂{}
  §
	@.ch_l ^=
	∐. _byt ⊢ { c }
		∐ c'=<122r; 97r=<c' . 
			∎ _some◂c
		∐. .
			∎ _none◂{}

§
	@.ch_u ^=
	∐. _byt ⊢ { c }
		∐ c'=<90r; 65r=<c' . 
			$ _some◂c ⊢ a
			∎ a
		∐. .
			$ _none◂{} ⊢ a
			∎ a

§
	@.ch_a ^=
	∐ ch_u ⊢ { c }
		$ _some◂c ⊢ a
		∎ a 
	∐. ch_l ⊢ { c }
		$ _some◂c ⊢ a
		∎ a

§
	@.word ^=
	∐. ch_a word_tl ⊢ { c0 cl }
		rp8.pfx_chr { c0 cl } ⊢ cl 
		rp8.to_s8 cl ⊢ s 
		∎ ‹ s ›
	@.word_tl ^=
	∐ word_hd word_tl ⊢ { c tl }
		rp8.pfx_chr { c tl } ⊢ l 
		$ _some◂l ⊢ a
		∎ a
	∐. ⊢ { }
		$ rp8.e◂{} ⊢ l 
		$ _some◂l ⊢ a 
		∎ a
	@.word_hd ^=
	∐ ch_a ⊢ { c }
		$ _some◂c ⊢ a
		∎ a
	∐ dgt ⊢ { c }
		$ _some◂c ⊢ a
		∎ a
	∐. "_" ⊢ { {} }
		$ %[ 95r ] ⊢ c
		$ _some◂c ⊢ a
		∎ a

§
	@.prm_word ^=
	∐ "_" word ⊢ { {} s }
		^ s ⊢ s,sr 
			"_" 0' // 
		$ _some◂sr ⊢ a 
		∎ a
	∐. word ⊢ { s }
		$ _some◂s ⊢ a
		∎ a
§ 
	@.reg_word  ^=
		∐ "%" !| prm_word ⊢ { {} w }
			$ _some◂w ⊢ a 
			∎ a 
		∐. prm_word ⊢ { w } 
			$ _some◂w ⊢ a 
			∎ a 
§ 
	@.tpl_word  ^=
		∐ "%" !| word ⊢ { {} w } 
			∎ _some◂w 
		∐. word ⊢ { w } 
			∎ _some◂w 
§§ OpADL
	§§ reg_ptn
		¶ @.t ◂ a'
			∐ rcd : _lst◂(t◂a')
			∐ atm : a'
		§ atm_a p 
			∐ p ⊢ atm◂a . 
				∎ a 
			∐. . 
				∎|  
		§ 
			@.stx◂◂G ^=
				∐# "{" lst.stx_line◂◂stx◂◂G "}" ⊢ { {} l {} }
					∎ _some◂rcd◂l 
				∐.# G ⊢ { a } 
					∎ _some◂atm◂a 

		§ @.eq_v◂◂E { v c0 c1 } 
			∐ c0 ⊢ atm◂a0; c1 ⊢ atm◂a1 . 
				E { v a0 a1 } ⊢ { v a0 a1 b } 
				∎ { v atm◂a0 atm◂a1 b }
			∐ c0 ⊢ rcd◂l0; c1 ⊢ rcd◂l1 . 
				lst.eq_v_err◂◂(eq_v◂◂E) { v l0 l1 } ⊢ { v l0 l1 b } 
				∎ { v rcd◂l0 rcd◂l1 b } 
			∐. . 
				∎ { v c0 c1 f◂{} } 
		§ 
			@.map_l◂◂F { v p } 
				$ p ⊢ 
				∐ rcd◂l . 
					map_l_lst◂◂F { v l } ⊢ { v l } 
					∎ { v rcd◂l } 
				∐. atm◂a . 
					F { v a } ⊢ { v b } 
					∎ { v atm◂b } 
			@.map_l_lst◂◂F { v l } 
				$ l ⊢ 
				∐ _cns◂{ p l } . 
					map_l◂◂F { v p } ⊢ { v p } 
					map_l_lst◂◂F { v l } ⊢ { v l } 
					∎ { v _cns◂{ p l } } 
				∐. _nil◂{} . 
					∎ { v ⟦⟧ }
		§ 
			@.map_l_x◂◂F { v p } 
				$ p ⊢ 
				∐ rcd◂l . 
					map_l_x_lst◂◂F { v l } ⊢ { v l lx }
					∎ { v rcd◂%l rcd◂%lx } 
				∐. atm◂a . 
					F { v a } ⊢ { v a ax } 
					∎ { v atm◂a ax } 
			@.map_l_x_lst◂◂F { v l } 
				$ l ⊢ 
				∐ _cns◂{ p l } . 
					map_l_x◂◂F { v p } ⊢ { v p px } 
					map_l_x_lst◂◂F { v l } ⊢ { v l lx } 
					∎ { v _cns◂{ p l } _cns◂{ px lx } }
				∐. _nil◂{} . 
					∎ { v _nil◂{} _nil◂{} } 

		§ 
			@.map_l_atm◂◂F { v p }  
				$ p ⊢ 
				∐ rcd◂l . 
					map_l_atm_lst◂◂F { v l } ⊢ { v l } 
					∎ { v rcd◂l } 
				∐. atm◂a . 
					F { v a } ⊢|
			@.map_l_atm_lst◂◂F { v l } 
				$ l ⊢ 
				∐ _cns◂{ p l } . 
					map_l_atm◂◂F { v p } ⊢ { v p } 
					map_l_atm_lst◂◂F { v l } ⊢ { v l } 
					∎ { v _cns◂{ p l } } 
				∐. _nil◂{} . 
					∎ { v ⟦⟧ }
		§ 
			@.fld_l◂◂F { v p } 
				$ p ⊢ 
				∐ rcd◂l . 
					fld_l_lst◂◂F { v l } ⊢| 
				∐. atm◂a . 
					F { v a } ⊢| 
			@.fld_l_lst◂◂F { v l } 
				$ l ⊢ 
				∐ _cns◂{ p l } . 
					fld_l◂◂F { v p } ⊢ v 
					fld_l_lst◂◂F { v l } ⊢| 
				∐. _nil◂{} . 
					∎ v 
			
		§ 
			@.pp_l◂◂P { e v p } 
				$ p ⊢ 
				∐ rcd◂l . 
					rp8.add_s8 { e %[ "{ " ] } ⊢ e 
					pp_l_lst◂◂P { e v l } ⊢ { e v } 
					rp8.add_s8 { e %[ "}" ] } ⊢ e  
					∎ { e v } 
				∐. atm◂a . 
					P { v a } ⊢ { v s } 
					rp8.add_s8 { e s } ⊢ e 
					∎ { e v } 
			@.pp_l_lst◂◂P { e v l } 
				$ l ⊢ 
				∐ _cns◂{ p l } . 
					pp_l◂◂P { e v p } ⊢ { e v } 
					rp8.add_s8 { e %[ " " ] } ⊢ e 
					pp_l_lst◂◂P { e v l } ⊢| 
				∐. _nil◂{} . 
					∎ { e v }
		§ pnt_l◂◂P { v p } 
			$ rp8.e◂{} ⊢ e 
			pp_l◂◂P { e v p } ⊢ { e v } 
			rp8.to_s8 e ⊢ s 
			∎ { v s } 
		§ pnt_l_lst◂◂P { v l } 
			$ rp8.e◂{} ⊢ e 
			pp_l_lst◂◂P { e v l } ⊢ { e v } 
			rp8.to_s8 e ⊢ s 
			∎ { v s } 
		§ unt◂{} = rcd◂_nil◂{} 
		§ cns1◂a = rcd◂cns1◂a 
		§ cns2◂{ a0 a1 } = rcd◂cns2◂{ a0 a1 }
		§ cns3◂{ a0 a1 a2 } = rcd◂cns3◂{ a0 a1 a2 }
		§ cns4◂{ a0 a1 a2 a3 } = rcd◂cns4◂{ a0 a1 a2 a3 } 
		§ cns5◂{ a0 a1 a2 a3 a4 } = rcd◂cns5◂{ a0 a1 a2 a3 a4 }
		∎∎
	§§ RP = reg_ptn
	
	§§ rset
		¶ t = _arr◂bl.t 
		§ N = 80000r 
		§ ini # {} 
			mk_arr { %[ N ] bl.f◂{} } ⊢ { _ _ v } 
			∎ v 
		§ max_t_i { m i b } 
			∐ b ⊢ bl.t◂{} . 
				∎ i 
			∐. . 
				∎ m 
		§ max_t # v 
			arr.itr_lft◂◂max_t_i { v %[ 0r ] } ⊢| 

		§§ pnt 
			§ lp_i { s j b }
				∐ b ⊢ bl.t◂{} . 
					_sts { s j %[ 49r ] } ⊢ { s _ _ } 
					∎ s
				∐. . 
					_sts { s j %[ 48r ] } ⊢ { s _ _ } 
					∎ s 					 
			§ @.lp { v i s j }
				∐ i'=j' . 
					$ %[ 49r ] ⊢ c 
					_sts { s j c } ⊢ { s j c } 
					∎ { v s } 
				∐. . 
					_lod_q { v j } ⊢ { v j b } 
					∐ b ⊢ bl.t◂{} . 
						$ %[ 49r ] ⊢ c 
						_sts { s j c } ⊢ { s j c } 
						_inc j ⊢ j 
						lp { v i s j } ⊢| 
					∐. . 
						$ %[ 48r ] ⊢ c 
						_sts { s j c } ⊢ { s j c } 
						_inc j ⊢ j 
						lp { v i s j } ⊢|   
			§ f # v 
				max_t v ⊢ { v i } 
				_inc i ⊢ i 
				_mlc_s8 i ⊢ { i s } 
				_dec i ⊢ i 
				$ %[ 0r ] ⊢ j
				lp { v i s j } ⊢|
			∎∎
		§ set_t # { v0 i } 
			exc_q { v0 i t◂{} } ⊢ { v0 i b } 
			∎ { v0 i }
		§ set_f # { v0 i } 
			exc_q { v0 i f◂{} } ⊢ { v0 i b } 
			∎ { v0 i }
		§ and = arr.mlt◂◂bl.and 
		§ or = arr.mlt◂◂bl.or
		§ sub = arr.mlt◂◂bl.sub 
		§ min_f_i # { i b } 
			$ b ⊢ b,b0 
			bl.not b0 ⊢ b0 
			∎ { i b b0 } 
		§ min_f v 
			arr.fnd_lft◂◂min_f_i v ⊢ { v o } 
			smt_err◂◂"min_f" o ⊢ { i _ } 
			∎ { v i }
		§ min_f_s_i { i b } 
			∐ 8r=<i' . 
				$ b ⊢ b,b0 
				bl.not b0 ⊢ b0 
				∎ { i b b0 }
			∐. . 
				∎ { i b bl.f◂{} } 
		§ min_f_s # v 
			arr.fnd_lft◂◂min_f_s_i v ⊢ { v o } 
			smt_err◂◂"min_f_s" o ⊢ { i _ } 
			∎ { v i }
		§ min_t_i # { i b } 
			$ b ⊢ b,b0 
			∎ { i b b0 } 
		§ min_t # v 
			arr.fnd_lft◂◂min_t_i v ⊢ { v o } 
			smt_err◂◂"min_t" o ⊢ { i _ } 
			∎ { v i }
		§ is_zero_i { i b } 
			$ b ⊢ b,b0 
			∎ { i b b0 } 
		§ is_zero v 
			arr.fnd_lft◂◂is_zero_i v ⊢ { v o } 
			∐ o ⊢ _none◂{} . 
				∎ { v bl.t◂{} }
			∐. . 
				∎ { v bl.f◂{} }
		∎∎
		
		§§ type 
			\\@.id = _r64 
			¶
			@.id 
				∐ prm : _r64 
				∐ adt : _r64
			@.t_atm v'
				∐ dta : { id _lst◂(t◂v') }
				∐ imp : { t◂v' t◂v' }
				∐ ct_imp : { t◂v' t◂v' }
				∐ abs : { v' t◂v' }
				∐ var : v'
			@.pt = _pt◂(var◂p) 
			@.t v' = RP.t◂(t_atm◂v')
			@.p 
				∐ p : _pt◂(var◂p)
			@.t_p = t◂p  
			@.aux v' = { _lst◂v' _lst◂(t◂v') } 
			@.aux_vct v' = _arr◂(aux◂v')
			@.exp v'
				∐ type_k : t◂v'  
				∐ app : { exp◂v' exp◂v' }
			@.var v'
				∐ var_l : _r64
				∐ var_q : _r64 
				∐ var_ln : t◂v'
				##∐ var_app : { t◂v' t◂v' }
				∐ var_i : {}  
			§ 
				@.fld_atm◂◂{ F ABS VAR } { v k } 
					$ k ⊢ 
					∐ dta◂{ ax0 ql0 } . 
						RP.fld_l_lst◂◂(fld_atm◂◂{ F ABS VAR }) { v ql0 } ⊢| 
					∐ imp◂{ k0 k1 } . 
						RP.fld_l◂◂(fld_atm◂◂{ F ABS VAR }) { v k0 } ⊢ v 
						RP.fld_l◂◂(fld_atm◂◂{ F ABS VAR }) { v k1 } ⊢| 
					∐ imp◂{ k0 k1 } . 
						RP.fld_l◂◂(fld_atm◂◂{ F ABS VAR }) { v k0 } ⊢ v 
						RP.fld_l◂◂(fld_atm◂◂{ F ABS VAR }) { v k1 } ⊢| 
					∐ abs◂{ vv0 k0 } .
						ABS { v { vv0 k0 } } ⊢| 
					∐. var◂i0 . 
						VAR { v i0 } ⊢| 
			§ newvar_i # tv  
			_clp { tv var_i◂{} } ⊢ { tv p0 } 
			∎ { tv p0 }
		§ newvar_l # { tv lv } 
			$ lv ⊢ lv,lv0 
			_clp { tv var_l◂lv0 } ⊢ { tv p } 
			∎ { tv lv RP.atm◂var◂p◂p }
		§ newvar_q # { tv lv } 
			$ lv ⊢ lv,lv0 
			_clp { tv var_q◂lv0 } ⊢ { tv p } 
			∎ { tv lv RP.atm◂var◂p◂p }
		§ newvar_ln # { tv y } 
			_clp { tv var_ln◂y } ⊢ { tv p } 
			∎ { tv p } 
		§§ t_axm 
  		§§ id 
				§ r64 = 0r 
  			§ s8 = 1r 
				§ arr = 2r  
				§ Clr = 3r 
				§ pt = 4r 
				§ prd = 5r 
				§ grm = 6r 
				\\§ arr0 = 15r 
				§ pf = 7r 
				§ Clr_lc = 8r 
  			§ arr_lc = 9r 
				§ r8 = 10r 
				§ arr_x = 11r 
				§ ctr = 12r 
				§ mtc = 13r 
				§ mop = 14r 
				§ tj = 15r 
				
				§ lst = 0r 
  			§ opn = 1r 
				\[
				§ r32 = 8r 
				§ r16 = 9r 
				§ r8 = 10r 
  			§ r4 = 11r 
				§ r2 = 12r 

				§ ext = 13r 
				\]
				∎∎
			§ N0 = 2r 
			
			§ t_dta◂d = RP.atm◂dta◂d
			§ t_imp◂i = RP.atm◂imp◂i 
			§ t_ct_imp◂{ i0 i1 } = RP.atm◂ct_imp◂{ i0 i1 } 
			§ t_ct_imp2◂{ i0 i1 i2 } = t_ct_imp◂{ i0 t_ct_imp◂{ i1 i2 } }
			§ t_ct_imp3◂{ i0 i1 i2 i3 } = t_ct_imp◂{ i0 t_ct_imp◂{ i1 t_ct_imp◂{ i2 i3 } } }
			§ t_ctr◂{ x y } = t_dta◂{ prm◂%[ id.ctr ] ⟦ y x ⟧ }
			§ t_mtc◂{ x y } = t_dta◂{ prm◂%[ id.mtc ] ⟦ y x ⟧ }
			§ t_mop◂{ x y } = t_dta◂{ prm◂%[ id.mop ] ⟦ y x ⟧ } 
			§ t_tj◂{ x y } = t_dta◂{ prm◂%[ id.tj ] ⟦ y x ⟧ }  
			§ t_var◂i = RP.atm◂var◂p◂i 
			§ unt◂{} = RP.rcd◂_nil◂{} 
			§ r64◂{} = t_dta◂{ prm◂%[ id.r64 ] _nil◂{} } 
			§ r8◂{} = t_dta◂{ prm◂%[ id.r8 ] _nil◂{} } 
			§ arr_x◂{} = t_dta◂{ prm◂%[ id.arr_x ] _nil◂{} } 
			\\§ s8◂{} = t_dta◂{ prm◂%[ id.s8 ] _nil◂{} }
			§ s8◂{} = t_dta◂{ prm◂%[ id.arr ] ⟦ r8◂{} RP.unt◂{} ⟧ }
			§ r64_p2◂{} = RP.cns2◂{ r64◂{} r64◂{} } 
			§ r64_op2◂{} = t_imp◂{ r64_p2◂{} r64_p2◂{} } 
			§ r64_op1◂{} = t_imp◂{ r64◂{} r64◂{} } 
			§ lst◂y = t_dta◂{ adt◂%[ id.lst ] ⟦ %y ⟧ } 
			§ opn◂y = t_dta◂{ adt◂%[ id.opn ] ⟦ %y ⟧ }
			§ grm◂y = t_dta◂{ prm◂%[ id.grm ] ⟦ y ⟧ } 
			§ arr◂y = t_dta◂{ prm◂%[ id.arr ] ⟦ y RP.unt◂{} ⟧ } 
			§ arr_q◂{ y t } = t_dta◂{ prm◂%[ id.arr ] ⟦ y t ⟧ } 
			§ arr_x◂y = t_dta◂{ prm◂%[ id.arr ] ⟦ y arr_x◂{} ⟧ } 
			§ Clr◂y = t_dta◂{ prm◂%[ id.Clr ] _cns◂{ y _nil◂{} } }
			§ Clr_lc◂y = t_dta◂{ prm◂%[ id.Clr_lc ] _cns◂{ y _nil◂{} } }
			§ arr_lc◂y = t_dta◂{ prm◂%[ id.arr_lc ] ⟦ y RP.unt◂{} ⟧ }
			§ arr_lc_q◂{ y yt } = t_dta◂{ prm◂%[ id.arr_lc ] ⟦ y yt ⟧ }
			§ pt◂y = t_dta◂{ prm◂%[ id.pt ] _cns◂{ %y _nil◂{} } } 
			§ pf◂y = t_dta◂{ prm◂%[ id.pf ] _cns◂{ %y _nil◂{} } }
			\[
				§ clr y 
				∎ t_dta◂{ %[ id.clr ] _cns◂{ %y _nil◂{} } }
			§ ext {} 
				∎ t_dta◂{ %[ id.ext ] _nil◂{} } 
			\]
			§ prs◂y = t_imp◂{ RP.cns2◂{ s8◂{} r64◂{} } RP.cns3◂{ s8◂{} r64◂{} y } }
			§ prs_opn◂y = t_imp◂{ RP.cns2◂{ s8◂{} r64◂{} } RP.cns3◂{ s8◂{} r64◂{} opn◂y } }
			§ prd◂{ x r } = t_dta◂{ prm◂%[ id.prd ] _cns◂{ x _cns◂{ r _nil◂{} } } } 
			∎∎
		\[
		§ of_var # { {} i } 
			∎ { {} RP.atm◂var◂i }
		\]
		§§ X = t_axm
			§ pnt_dta_i a  
				$ a ⊢ 
				∐ prm◂a . 
					=+ a' 
					∐ 
						∎ %[ "_r64" ] 
					∐ 
						∎ %[ "_s8" ]
					∐
						∎ %[ "_arr" ] 
					∐ 
						∎ %[ "_Clr" ] 
					∐ 
						∎ %[ "_pt" ] 
					∐ 
						∎ %[ "_prd" ]
					∐ 
						∎ %[ "_grm" ] 
					∐ 
						∎ %[ "_pf" ] 
					∐ 
						∎ %[ "_Clr_lc" ]  
					∐ 
						∎ %[ "_arr_lc" ]
					∐ 
						∎ %[ "_r8" ]
					∐ 
						∎ %[ "_arr_x" ]
					∐ 
						∎ %[ "_ctr" ] 
					∐. 
						^ a ⊢ a,s 
							".p" 0d' // 
						∎ s 
				∐. adt◂a . 
					=+ a'
					∐ 
						∎ %[ "_lst" ] 
					∐ 
						∎ %[ "_opn" ] 
					∐. 
						^ a ⊢ a,s 
							".a" 0d' // 
						∎ s 
			§ @.pnt_type_k { tv k } 
			$ k ⊢ 
			∐ RP.rcd◂l .
				pnt_type_k_lst { tv l } ⊢ { tv s } 
				^ s ⊢ s,sr 
					"{ " 0' "}" // 
				∎ { tv sr } 
			∐. RP.atm◂ak . 
				$ ak ⊢ 
				∐ dta◂{ a l } . 
					pnt_dta { tv l } ⊢ { tv s }
					pnt_dta_i a ⊢ sa  
					^ sa,s ⊢ sa,s,sr 
						0' "◂" 1' // 
					∎ { tv sr } 
				∐ imp◂{ k0 k1 } . 
					pnt_type_k { tv k0 } ⊢ { tv s0 }  
					pnt_type_k { tv k1 } ⊢ { tv s1 } 
					^ s0,s1 ⊢ s0,s1,sr 
						"(" 0' "→" 1' ")" // 
					∎ { tv sr } 
				∐ ct_imp◂{ k0 k1 } . 
					pnt_type_k { tv k0 } ⊢ { tv s0 }  
					pnt_type_k { tv k1 } ⊢ { tv s1 } 
					^ s0,s1 ⊢ s0,s1,sr 
						"(" 0' "→→" 1' ")" // 
					∎ { tv sr } 
				∐ abs◂{ a k0 } . 
					pnt_type_k { tv k0 } ⊢ { tv s0 } 
					^ s0 ⊢ s0,sr 
							"\\_ . " 0' //
					∎ { tv sr }  
				∐. var◂p◂i . 
					cla.l { tv i } ⊢ { tv i v } 
					$ v ⊢ 
					∐ var_l◂lv . 
						^ lv ⊢ lv,sr 
							"l(" 0d' ")" // 
						∎ { tv sr } 
					∐ var_q◂lv .
						^ lv ⊢ lv,sr 
							"q(" 0d' ")" // 
						∎ { tv sr }
					∐ var_i◂{} . 
						^ _ ⊢ sr 
							"?()" // 
						∎ { tv sr }
					∐. var_ln◂kx . 
						pnt_type_k { tv kx } ⊢ { tv sx } 
						^ sx ⊢ sx,sr 
							"(=" 0' ")" // 
						∎ { tv sr }
			@.pnt_type_k_lst = lst.pnt_l◂◂{ pnt_type_k " " }
			@.pnt_dta # { tv l } 
				rev l ⊢ l 
				lst.pnt_l◂◂{ pnt_type_k "◂" } { tv l } ⊢| 
			
		§ @.occurs { { tv i0 lv0 } y1 } 
			∐ y1 ⊢ RP.rcd◂l1 . 
				occurs_lst { { tv i0 lv0 } l1 } ⊢| 
			∐ y1 ⊢ RP.atm◂ak; ak ⊢ dta◂{ a1 l1 } . 
				occurs_lst { { tv i0 lv0 } l1 } ⊢| 
			∐ y1 ⊢ RP.atm◂ak; ak ⊢ imp◂{ y1_0 y1_1 } . 
				occurs { { tv i0 lv0 } y1_0 } ⊢ { tv i0 lv0 } 
				occurs { { tv i0 lv0 } y1_1 } ⊢|
			∐ y1 ⊢ RP.atm◂ak; ak ⊢ ct_imp◂{ y1_0 y1_1 } . 
				occurs { { tv i0 lv0 } y1_0 } ⊢ { tv i0 lv0 } 
				occurs { { tv i0 lv0 } y1_1 } ⊢|  
			∐ y1 ⊢ RP.atm◂ak; ak ⊢ var◂p◂i1 . 
				∐ i0'=i1' . 
					_emt { i0 lv0 } ⊢ { i0 lv0 } 
					∎| 
				∐. . 
					cla.l { tv i1 } ⊢ { tv i1 v1 } 
					$ v1 ⊢ 
					∐ var_ln◂y2 . 
						occurs { { tv i0 lv0 } y2 } ⊢| 
					∐ var_l◂lv1 . 
						∐ lv1'=<lv0' . 
							∎ { tv i0 lv0 }
						∐. . 
							$ lv0 ⊢ lv0,lv0_0 
							Clr.u { tv { i1 var_l◂lv0_0 } } ⊢ { tv _ } 
							∎ { tv i0 lv0 } 
					∐ var_i◂{} .
						∎ { tv i0 lv0 } 
				
					∐. var_q◂lv1 .
						∎ { tv i0 lv0 } 
			∐. . 
				_emt { i0 lv0 } ⊢ { i0 lv0 } 
				_emt %[ "occurs 1" ] ⊢ _ 
				∎|
			@.occurs_lst = lst.fld_l◂◂occurs 
		§§ unify 
		§ 
			@.f { tv y0 y1 }
				∐ y0 ⊢ RP.atm◂ak; ak ⊢ var◂p◂i0 . 
					f_l0 { tv i0 y1 } ⊢| 
				∐ y1 ⊢ RP.atm◂ak; ak ⊢ var◂p◂i1 . 
					f_l0 { tv i1 y0 } ⊢| 
				∐ y0 ⊢ RP.rcd◂r0 ; y1 ⊢ RP.rcd◂r1 . 
					f_lst { tv r0 r1 } ⊢| 
				∐ y0 ⊢ RP.atm◂ak0; ak0 ⊢ dta◂{ a0 l0 }; y1 ⊢ RP.atm◂ak1; ak1 ⊢ dta◂{ a1 l1 } . 
					∐ a0 ⊢ prm◂a0; a1 ⊢ prm◂a1; a0'=a1' . 
						f_lst { tv l0 l1 } ⊢|
					∐ a0 ⊢ adt◂a0; a1 ⊢ adt◂a1; a0'=a1' . 
						f_lst { tv l0 l1 } ⊢| 
					∐. . 
						∎ { tv ‹ %[ 11r ] › }
				∐ y0 ⊢ RP.atm◂ak0; ak0 ⊢ imp◂{ y0_0 y0_1 }; y1 ⊢ RP.atm◂ak1; ak1 ⊢ imp◂{ y1_0 y1_1 } . 
					f { tv y0_0 y1_0 } ⊢ { tv b } 
					$ b ⊢ 
					∐ _none◂{} . 
						f { tv y0_1 y1_1 } ⊢|
					∐. _some◂e . 
						∎ { tv ‹ e › }
				∐ y0 ⊢ RP.atm◂ak0; ak0 ⊢ ct_imp◂{ y0_0 y0_1 }; y1 ⊢ RP.atm◂ak1; ak1 ⊢ ct_imp◂{ y1_0 y1_1 } . 
					f { tv y0_0 y1_0 } ⊢ { tv b }  
					$ b ⊢ 
					∐ _none◂{} . 
						f { tv y0_1 y1_1 } ⊢|
					∐. _some◂e . 
						∎ { tv ‹ e › }
				∐ y0 ⊢ RP.rcd◂l0; y1 ⊢ RP.atm◂dta◂{ prm◂d0 ld }; d0'=X.id.prd; ld ⊢ _cns◂{ t0 _cns◂{ t1 _nil◂{} } }; l0 ⊢ _cns◂{ s0 l0 } .
					f { tv s0 t0 } ⊢ { tv b } 
					$ b ⊢ 
					∐ _none◂{} . 
						f { tv RP.rcd◂l0 t1 } ⊢| 
					∐. _some◂e . 
						∎ { tv ‹ e › }
				∐ y1 ⊢ RP.rcd◂l1; y0 ⊢ RP.atm◂dta◂{ prm◂d0 ld }; d0'=X.id.prd; ld ⊢ _cns◂{ t0 _cns◂{ t1 _nil◂{} } }; l1 ⊢ _cns◂{ s0 l1 } .
					f { tv s0 t0 } ⊢ { tv b } 
					$ b ⊢ 
					∐ _none◂{} . 
						f { tv RP.rcd◂l1 t1 } ⊢| 
					∐. _some◂e . 
						∎ { tv ‹ e › }
				∐. . 
					∎ { tv ‹ %[ 1r ] › }
			@.f_lst { tv l0 l1 }
				∐ l0 ⊢ _cns◂{ y0 l0 }; l1 ⊢ _cns◂{ y1 l1 } . 
					f { tv y0 y1 } ⊢ { tv b } 
					$ b ⊢ 
					∐ _none◂{} . 
						f_lst { tv l0 l1 } ⊢|
					∐. _some◂e . 
						∎ { tv ‹ e › } 
				∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
					∎ { tv ‹› }  
				∐. . 
					∎ { tv ‹ %[ 2r ] › }  
			@.f_l0 { tv i0 y1 }   
				cla.l { tv i0 } ⊢ { tv i0 v0 } 
				∐ v0 ⊢ var_ln◂y2 . 
					f { tv y2 y1 } ⊢|
				∐ v0 ⊢ var_l◂lv .  
					f_l1 { tv i0 lv y1 } ⊢|
				∐ v0 ⊢ var_q◂lv . 
					f_lq { tv i0 lv y1 } ⊢| 
				∐. . 
					∎ { tv ‹ %[ 3r ] › }  
			@.f_lq { tv i0 lv y1 } 
				∐ y1 ⊢ RP.atm◂ak1; ak1 ⊢ var◂p◂i1 . 
					∐ i0'=i1' . 
						∎ { tv ‹› }  
					∐. .
						cla.l { tv i1 } ⊢ { tv i1 v1 } 
						∐ v1 ⊢ var_ln◂y2 . 
							f_lq { tv i0 lv y2 } ⊢|  
						∐ v1 ⊢ var_l◂lv1 . 
							Clr.u { tv { i1 var_ln◂RP.atm◂var◂p◂i0 } } ⊢ { tv _ }
							∎ { tv ‹› }  
						∐ v1 ⊢ var_q◂_ . 
							∎ { tv ‹ %[ 4r ] › }
						∐. . 
							∎ { tv ‹ %[ 5r ] › }  
				∐. .  
					∎ { tv ‹ %[ 6r ] › }  
			@.f_l1 { tv i0 lv y1 } 
				∐ y1 ⊢ RP.atm◂ak1; ak1 ⊢ var◂p◂i1 . 
					∐ i0'=i1' . 
						∎ { tv ‹› } 
					∐. .
						cla.l { tv i1 } ⊢ { tv i1 v1 } 
						∐ v1 ⊢ var_ln◂y2 . 
							f_l1 { tv i0 lv y2 } ⊢|  
						∐ v1 ⊢ var_l◂lv1 . 
							∐ lv1'=<lv' . 
								Clr.u { tv { i0 var_ln◂RP.atm◂var◂p◂i1 } } ⊢ { tv _ }
								∎ { tv ‹› }
							∐. .  
								Clr.u { tv { i1 var_ln◂RP.atm◂var◂p◂i0 } } ⊢ { tv _ }
								∎ { tv ‹› } 
						∐ v1 ⊢ var_q◂_ . 
							∎ { tv ‹ %[ 7r ] › }
						∐. . 
							∎ { tv ‹ %[ 8r ] › }
				∐. .  
					$ y1 ⊢ y1,y1_0 
					occurs { { tv i0 lv } y1 } ⊢ { tv i0 lv }
					Clr.u { tv { i0 var_ln◂y1_0 } } ⊢ { tv _ }
					∎ { tv ‹› } 
				§ f_b = f 
				§ f_b_lst = f_lst 
				\\[
				§ f { tv y0 y1 } 
					f { tv y0 y1 } ⊢ { tv b } 
					$ b ⊢ 
					∐ _some◂e . 
						_emt %[ "unify:_,_" ] ⊢ _ 
						_emt e ⊢ _ 
						∎| 
					∐. _none◂{} . 
						∎ tv 
				
				§ f_lst { tv l0 l1 } 
					f_lst { tv l0 l1 } ⊢ { tv b } 
					$ b ⊢ 
					∐ _some◂e . 
						_emt %[ "unify:lst:" ] ⊢ _ 
						_emt e ⊢ _ 
						∎| 
					∐. _none◂{} . 
						∎ tv 
			∎∎ 
		§ @.unifys { tv y0 ys } 
			$ ys ⊢ 
			∐ _cns◂{ %y1 %ys } . 
				$ y0 ⊢ y0,y00 
				unify.f { tv y0 y1 } ⊢ tv 
				unifys { tv y00 ys } ⊢|
			∐. _nil◂{} . 
				∎ { tv y0 } 	
		§ 
			@.map_k◂◂{ DTA ABS VAR } { v p }  
				$ p ⊢ 
				∐ RP.rcd◂l . 
					map_k_lst◂◂{ DTA ABS VAR } { v l } ⊢ { v l } 
					∎ { v RP.rcd◂l } 
				∐. RP.atm◂a . 
					map_k_atm◂◂{ DTA ABS VAR } { v a } ⊢|
			@.map_k_lst◂◂{ DTA ABS VAR } { v l } 
				$ l ⊢ 
				∐ _cns◂{ p l } . 
					map_k◂◂{ DTA ABS VAR } { v p } ⊢ { v p } 
					map_k_lst◂◂{ DTA ABS VAR } { v l } ⊢ { v l } 
					∎ { v _cns◂{ %p %l } } 
				∐. _nil◂{} . 
					∎ { v _nil◂{} }
			@.map_k_atm◂◂{ DTA ABS VAR } { v a } 
				$ a ⊢ 
				∐ dta◂{ ax lx } . 
					DTA { v { ax lx } } ⊢| 
				∐ imp◂{ k0 k1 } . 
					map_k◂◂{ DTA ABS VAR } { v k0 } ⊢ { v k0 } 
					map_k◂◂{ DTA ABS VAR } { v k1 } ⊢ { v k1 } 
					∎ { v RP.atm◂imp◂{ k0 k1 } }
				∐ ct_imp◂{ k0 k1 } .
					map_k◂◂{ DTA ABS VAR } { v k0 } ⊢ { v k0 } 
					map_k◂◂{ DTA ABS VAR } { v k1 } ⊢ { v k1 } 
					∎ { v RP.atm◂ct_imp◂{ k0 k1 } }
				∐ abs◂{ a0 y0 } . 
					ABS { v { a0 y0 } } ⊢| 
				∐. var◂p◂i0 . 
					VAR { v i0 } ⊢| 
		§§ inst 
			§ 
				@.al_dta # { v { a l } } 
					lst { v l } ⊢ { v l }
					∎ { v RP.atm◂dta◂{ %a %l } } 
				@.al_abs { { tv lv al } { p◂a0 y0 } }
					assoc { al a0 } ⊢ { al a0 o } 
					nnt o ⊢ {} 
					newvar_i tv ⊢ { tv ia }
					$ ia ⊢ ia,ia0 
					$ a0 ⊢ a0,a0_0 
					al { { tv lv _cns◂{ { a0 _some◂%ia } al } } y0 } ⊢ { { tv lv al } y0 } 
					$ _cns◂{ { a0_0 _none◂{} } al } ⊢ al  
					∎ { { tv lv al } RP.atm◂abs◂{ p◂%ia0 %y0 } }
				@.al_var { { tv lv al } i0 } 
					assoc { al i0 } ⊢ { al i0 o } 
					$ o ⊢ 
					∐ _some◂i1 . 
						∎ { { tv lv al } RP.atm◂var◂p◂%i1 } 
					∐. _none◂{} . 
						cla.l { tv i0 } ⊢ { tv i0 v0 } 
						∐ v0 ⊢ var_ln◂y0 . 
							al { { tv lv al } y0 } ⊢|
						∐ v0 ⊢ var_q◂lvq .
							$ lv ⊢ lv,lv0 
							_clp { tv var_l◂lv0 } ⊢ { tv p0 } 
							$ p0 ⊢ p0,p0_0 
							∎ { { tv lv _cns◂{ { %i0 _some◂%p0_0 } %al } } RP.atm◂var◂p◂p0 }  
						∐ v0 ⊢ var_i◂{} . 
							_emt %[ "inst 4" ] ⊢ se 
							∎| 
						∐. . 
							∎ { { tv lv al } RP.atm◂var◂p◂%i0 } 
				@.atm = map_k_atm◂◂{ al_dta al_abs al_var }
				@.al = map_k◂◂{ al_dta al_abs al_var } 
				@.lst = map_k_lst◂◂{ al_dta al_abs al_var }
			∎∎
		§ inst # { tv lv y } 
			$ _nil◂{} ⊢ al 
			inst.al { { tv lv al } y } ⊢ { { tv lv al } y } 
			∎ { tv lv y }   
		§ inst_lst # { tv lv l al } 
			inst.lst { { tv lv al } l } ⊢ { { tv lv al } l } 
			∎ { tv lv l al }
		§ inst_al # { tv lv t al } 
			inst.al { { tv lv al } t } ⊢ { { tv lv al } t } 
			∎ { tv lv t al }
		§§ gen 
			§ 
				@.gen_dta # { v { a l } } 
					gen_lst { v l } ⊢ { v l }
					∎ { v RP.atm◂dta◂{ %a %l } }
				@.gen_abs # { v { a y0 } } 
					gen { v y0 } ⊢ { v y0 } 
					∎ { v RP.atm◂abs◂{ %a %y0 } }
				@.gen_var { { tv lv } i }
					\\lod_tv { tv i } ⊢ { tv i v } 
					cla.l { tv i } ⊢ { tv i v } 
					$ v ⊢ 
					∐ var_ln◂y1 . 
						gen { { tv lv } y1 } ⊢|
					∐ var_l◂lv1 .
						∐ lv1'=<lv' . 
							∎ { { tv lv } RP.atm◂var◂p◂%i }
						∐. .
							$ lv ⊢ lv,lv_0 
							Clr.u { tv { i var_q◂lv_0 } } ⊢ { tv i }
							∎ { { tv lv } RP.atm◂var◂p◂%i }
					∐ var_q◂_ . 
						∎ { { tv lv } RP.atm◂var◂p◂%i } 
					∐. var_i◂{} . 
						∎ { { tv lv } RP.atm◂var◂p◂%i } 
				@.gen = map_k◂◂{ gen_dta gen_abs gen_var }
				@.gen_lst = map_k_lst◂◂{ gen_dta gen_abs gen_var }
			∎∎
		§ @.gen # { tv lv y } 
				gen.gen { { tv lv } y } ⊢ { { tv lv } y } 
				∎ { tv lv y } 
			@.gen_lst # { tv lv l } 
				gen.gen_lst { { tv lv } l } ⊢ { { tv lv } l } 
				∎ { tv lv l } 
		§	ciu # { tv y0 y1 } 
			$ y1 ⊢ y1,y1_0 
			$ y0 ⊢ y0,y00 
			inst { tv %[ 1r ] y1_0 } ⊢ { tv lv y2 } 
			unify.f_b { tv y00 y2 } ⊢ { tv b }  
			∎ { tv y0 y1 b }
    § @.ciu_lst { tv l0 l1 } 
      ∐ l0 ⊢ _cns◂{ t0 l0 }; l1 ⊢ _cns◂{ t1 l1 } . 
				ciu { tv t0 t1 } ⊢ { tv t0 t1 b } 
				$ b ⊢ 
				∐ _none◂{} . 
					ciu_lst { tv l0 l1 } ⊢ { tv l0 l1 b } 
					∎ { tv ⟦ t0 < l0 ⟧ ⟦ t1 < l1 ⟧ b } 
				∐. _some◂e . 
					∎ { tv ⟦ t0 < l0 ⟧ ⟦ t1 < l1 ⟧ bl.f◂{} }
			∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
				∎ { tv ⟦⟧ ⟦⟧ bl.t◂{} }
			∐. . 
				∎| 
		§ iug { tv lv y0 y1 } 
			_inc lv ⊢ lv 
			inst { tv lv y0 } ⊢ { tv lv y0 } 
			inst { tv lv y1 } ⊢ { tv lv y1 } 
			$ y0 ⊢ y0,y00 
			$ y1 ⊢ y1,y10
			unify.f { tv y00 y10 } ⊢ tv
			_dec lv ⊢ lv 
			gen { tv lv y0 } ⊢ { tv lv y0 }
			∎ { tv lv y0 y1 }  
		§ iug_imp { tv lv ys yd y1 } 
			_inc lv ⊢ lv 
			inst { tv lv ys } ⊢ { tv lv ys }
			inst { tv lv yd } ⊢ { tv lv yd } 
			inst { tv lv y1 } ⊢ { tv lv y1 }
			$ ys ⊢ ys,ys0
			$ yd ⊢ yd,yd0 
			$ y1 ⊢ y1,y10
			unify.f { tv RP.atm◂imp◂{ ys0 yd0 } y10 } ⊢ tv
			_dec lv ⊢ lv 
			gen { tv lv y1 } ⊢ { tv lv y1 }
			∎ { tv lv ys yd y1 }  
		§ iug_imp_d { tv lv ys y1 } 
			_inc lv ⊢ lv 
			inst { tv lv ys } ⊢ { tv lv ys }
			newvar_l { tv lv } ⊢ { tv lv yd } 
			inst { tv lv y1 } ⊢ { tv lv y1 }
			$ ys ⊢ ys,ys0
			$ yd ⊢ yd,yd0 
			$ y1 ⊢ y1,y10
			unify.f { tv RP.atm◂imp◂{ %ys0 %yd0 } y10 } ⊢ tv
			_dec lv ⊢ lv 
			gen { tv lv y1 } ⊢ { tv lv y1 }
			∎ { tv lv ys yd y1 }  
		§ iug_ctr_s { tv lv yd y1 } 
			_inc lv ⊢ lv 
			inst { tv lv yd } ⊢ { tv lv yd }
			newvar_l { tv lv } ⊢ { tv lv ys } 
			inst { tv lv y1 } ⊢ { tv lv y1 }
			$ ys ⊢ ys,ys0
			$ yd ⊢ yd,yd0 
			$ y1 ⊢ y1,y10
			unify.f { tv X.t_ctr◂{ %ys0 %yd0 } y10 } ⊢ tv
			_dec lv ⊢ lv 
			gen { tv lv y1 } ⊢ { tv lv y1 }
			∎ { tv lv ys yd y1 }  
		§ iug_ct_imp_d { tv lv ys y1 } 
			_inc lv ⊢ lv 
			inst { tv lv ys } ⊢ { tv lv ys }
			newvar_l { tv lv } ⊢ { tv lv yd } 
			inst { tv lv y1 } ⊢ { tv lv y1 }
			$ ys ⊢ ys,ys0
			$ yd ⊢ yd,yd0 
			$ y1 ⊢ y1,y10
			unify.f { tv RP.atm◂ct_imp◂{ %ys0 %yd0 } y10 } ⊢ tv
			_dec lv ⊢ lv 
			gen { tv lv y1 } ⊢ { tv lv y1 }
			∎ { tv lv ys yd y1 }  
		§ iug_ctr_d { tv lv ys y1 } 
			_inc lv ⊢ lv 
			inst { tv lv ys } ⊢ { tv lv ys }
			newvar_l { tv lv } ⊢ { tv lv yd } 
			inst { tv lv y1 } ⊢ { tv lv y1 }
			$ ys ⊢ ys,ys0
			$ yd ⊢ yd,yd0 
			$ y1 ⊢ y1,y10
			unify.f { tv X.t_ctr◂{ %ys0 %yd0 } y10 } ⊢ tv
			_dec lv ⊢ lv 
			gen { tv lv y1 } ⊢ { tv lv y1 }
			∎ { tv lv ys yd y1 }  
		§ of_var_i # { { tv lv al } v } 
			inst_al { tv lv RP.atm◂var◂p◂v al } ⊢ { tv lv v al } 
			∎ { { tv lv al } v }
		§ iug_axm # { tv vl kl yl } 
			inst_lst { tv %[ 0r ] kl ⟦⟧ } ⊢ { tv lv kl al }
			inst_lst { tv lv yl al } ⊢ { tv lv yl al }
			lst.map_l◂◂of_var_i { { tv lv al } vl } ⊢ { { tv lv al } vl }
			unify.f_lst { tv vl yl } ⊢ tv
			_dec lv ⊢ lv 
			gen_lst { tv lv kl } ⊢ { tv _ kl } 
			∎ { tv kl }
		§ iug_axm_i # { tv vl k yl } 
			inst_al { tv %[ 0r ] k ⟦⟧ } ⊢ { tv lv k al }
			inst_lst { tv lv yl al } ⊢ { tv lv yl al }
			lst.map_l◂◂of_var_i { { tv lv al } vl } ⊢ { { tv lv al } vl }
			unify.f_lst { tv vl yl } ⊢ tv
			_dec lv ⊢ lv 
			gen { tv lv k } ⊢ { tv _ k } 
			∎ { tv k }
		§ @.inst_prd { tv lv i y } 
			∐ i'=0r .
				newvar_l { tv lv } ⊢ { tv lv yl } 
				∎ { tv lv X.prd◂{ y yl } }
			∐. . 
				_dec i ⊢ i 
				inst_prd { tv lv i y } ⊢ { tv lv yr } 
				newvar_l { tv lv } ⊢ { tv lv w } 
				∎ { tv lv X.prd◂{ w yr } }
		§§ inst_cl 
			§ 
				@.cl_dta { v { a l } } 
					lst { v l } ⊢ { v l }
					∎ { v RP.atm◂dta◂{ %a %l } } 
				@.cl_abs { { tv cl } { a0 y0 } }
					_emt %[ "inst_cl.cl_abs 0" ] ⊢ _ 
					∎| 
				@.cl_var { { tv cl } i0 } 
					cla.l { tv i0 } ⊢ { tv i0 v0 } 
					∐ v0 ⊢ var_ln◂y0 . 
						cl { { tv cl } y0 } ⊢|
					∐ v0 ⊢ var_q◂lvq .
						assoc { cl i0 } ⊢ { cl i0 o } 
						$ o ⊢ 
						∐ _some◂i1 . 
							∎ { { tv cl } RP.atm◂var◂p◂%i1 } 
						∐. _none◂{} . 
							∎ { { tv cl } RP.atm◂var◂p◂%i0 }  
						∐ v0 ⊢ var_i◂{} . 
							_emt %[ "inst_cl 5" ] ⊢ _ 
							∎|
						∐. . 
							_emt %[ "inst_cl 4" ] ⊢ _ 
							∎| 
				@.atm = map_k_atm◂◂{ cl_dta cl_abs cl_var }
				@.cl = map_k◂◂{ cl_dta cl_abs cl_var } 
				@.lst = map_k_lst◂◂{ cl_dta cl_abs cl_var }
			∎∎
		§ 
			@.inst_cl # { tv y cl } 
				inst_cl.cl { { tv cl } y } ⊢ { { tv cl } y } 
				∎ { tv y cl } 
				
			@.inst_cl_lst # { tv l cl } 
				inst_cl.lst { { tv cl } l } ⊢ { { tv cl } l } 
				∎ { tv l cl }
		
		§ inst_imp { tv lv y } 
			inst { tv lv y } ⊢ { tv lv y }
			newvar_l { tv lv } ⊢ { tv lv y0 }
			newvar_l { tv lv } ⊢ { tv lv y1 } 
			$ y0 ⊢ y0,y0_0 
			$ y1 ⊢ y1,y1_0 
			unify.f { tv y X.t_imp◂{ y0_0 y1_0 } } ⊢ tv 
			∎ { tv lv y0 y1 }
		
		§ of_arr { tv y } 
			inst { tv %[ 1r ] y } ⊢ { tv lv y }
			newvar_l { tv lv } ⊢ { tv lv v } 
			$ v ⊢ v,v0 
			unify.f { tv X.arr◂v0 y } ⊢ tv 
			_dec lv ⊢ lv 
			gen { tv lv v } ⊢ { tv lv v }
			∎ { tv v }
		∎∎ 
		§§ T = type
		§§ TX = T.t_axm			
		
		§§ ast
			¶ @.name
				∐ mdl_n : { _s8 name }
				∐ fst_n : _s8
			§ @.pnt_name n
				∐ n ⊢ mdl_n◂{ w n } .
					pnt_name n ⊢ s
					^ w,s ⊢ w,s,sr
						0' "." 1' //
					∎ sr
				∐. n ⊢ fst_n◂w .
					∎ w 
		§§ hp 
			§§ id 
				§ Clr = 0r 
				§ pt = 1r 
				
				∎∎ 
			§§ arr 
				¶ t = _r64
				§ std = 2r 
				§ x = 3r
				∎∎ 
			¶ 
				@.t 
					∐ opq : arr.t
					∐ arr : { type.t_p arr.t } 
					∐ r64 : {} 
					∐ id : { _r64 type.t_p } 
			§ 
				@.pnt h
					$ h ⊢ 
					∐ r64◂{} . 
						^ _ ⊢ sr 
							"r" // 
						∎ sr 
					∐ arr◂_ .
							\\pnt h ⊢ sh 
							^ _ ⊢ s 
								"{| ? " "|}" // 
							∎ s 
					\[
					∐ Clr◂_ . 
						∎ %[ "<<| ? |>>" ]
					\]
					∐ id◂_ . 
						∎ %[ "[| _ |]" ]
					∐. opq◂_ . 
						$ %[ "{| l |}" ] ⊢ s 
						∎ s  
					@.pnt_lst # l 
						lst.pnt◂◂{ pnt "" } l ⊢| 
			∎∎ 
		¶
			@.r = _r64 
			@.rt r',e' = RP.t◂(rt_atm◂r'◂e') 
			@.tag_id = _r64
			@.rt_id = _r64
			@.rt_atm r',e'
				∐ hp : { r' hp.t }
				\\∐ r : r'
				∐ hp_im : cst◂e'  
				∐ btm : {} 
				∐ stt_adt : { _r64 _r64 rt◂r'◂e' } 
				∐ dyn_adt : { { _r64 _lst◂type.t_p } r' r' } 
				∐ rt_usr : { rt_id rt◂r'◂e' }
				\\∐ rt_t : { rt_t rt◂r'◂e' }
			\[
			@.rt_t = 
				∐ rt_id : rt_id 
				∐ rt_hp : hp.t 
			\]
			@.re_atm r',e',v' 
				∐ re_agl : { e' re_ptn◂r'◂e'◂v' }
				∐ re_reg : r' 
				∐ re_v : v' 
			@.src_reg r',e' 
				∐ src_reg : r' 
				∐ src_im : e' 
			@.mtc_reg r',e' 
				∐ mtc_reg : r' 
				∐ mtc_wc : _opn◂r'
			@.re_ptn r',e',v' = RP.t◂(re_atm◂r'◂e'◂v')
			@.src r',e' = re_atm◂r'◂e'◂(cst◂e')
			\\@.mtc_atm r',e' = re_atm◂r'◂e'◂{}
			@.mtc_atm r',e' = src◂r'◂e' 
			@.src_ptn r',e' = re_ptn◂r'◂e'◂(cst◂e')
			@.SP r',e' = src_ptn◂r'◂e'
			\\@.MP r',e' = re_ptn◂r'◂e'◂{}
			@.MP r',e' = SP◂r'◂e' 
			@.ct_ptn e' = RP.t◂(cst◂e')
			@.pt_m = _r64 
			@.ftr_id = _r64 
			@.op_v = _r64 
			\\@.cst_v e' = { op_id var cst◂e' _opn◂op_v }
			\\@.k_p t'
			\\	∐ k_p : { t' _pt◂(cst◂(k_p◂t')) }
			@.k_p t' 
				∐ k_p : { t'cst◂(_pt◂(k_p◂t')) }
			@.tpl_ptn = RP.t◂_r64
			@.TP = tpl_ptn 
			@.op_id = _r64
			@.cst e' 
				∐ k_op_gnr : { { _r64 TP } op_id TP _r64 bl.t lc◂e' type.pt }
				∐ k_op : { _opn◂{ { _r64 TP } ct_ptn◂e' } op_id  TP _r64 bl.t lc◂e' type.pt } 
				∐ k_app : { ct_ptn◂e' ct_ptn◂e' } 
				∐ k_var : { _r64 type.pt } 
				∐ k_op_axm : { _r64 _lst◂(ct_ptn◂e') } 
				∐ k_pf : _lst◂(exp_s8◂e')
				∐ k_r64 : _r64 
				∐ k_s8 : _s8 
				∐ k_arr : _arr◂(ct_ptn◂e')
				∐ k_name : e' 
				∐ k_agl : { e' ct_ptn◂e' }
				∐ k_ctr : { _r64 _r64 type.pt }
				∐ k_ply : { RP.t◂_r64 SP◂_r64◂e' }
			\\[
			@.ce v' 
				∐ ce_app : { ce◂v' ce◂v' } 
				∐ ce_atm : v' 
			@.CEP e' = RP.t◂(ce◂e')
			\\]
			@.fmt
				∐ fmt_s : {}
				∐ fmt_d : {}
				∐ fmt_x : {}
				∐ fmt_p : {}
			@.exp_s8◂e' 
				∐ exp_s8_cst : cst◂e'
				∐ exp_s8_idx : { fmt _r64 }
				∐ exp_s8_for : { _r64 cst◂e' } 
			@.lc_code r',e',m',dp'
				∐ jmp : { ct_ptn◂e' SP◂r'◂e' }
				∐ seq : { { ct_ptn◂e' SP◂r'◂e' dp' } lc_code◂r'◂e'◂m'◂dp' }
				∐ mtc : m'
				∐ op_exh : { ct_ptn◂e' SP◂r'◂e' dp' lc_code◂r'◂e'◂m'◂dp' lc_code◂r'◂e'◂m'◂dp' }
				∐ tj : { r' _lst◂(lc_code◂r'◂e'◂m'◂dp') lc_code◂r'◂e'◂m'◂dp' }
				\\∐ exn : exn◂r'◂e' 
			@.lc e' = lc_TP◂r◂e'◂(nxp◂e'◂(mtc_op◂r◂e'))
			@.lc_TP r',e',m' = lc_code◂r'◂e'◂m'◂TP
			@.lc_code_mp r',e',m'  = lc_code◂r'◂e'◂m'◂(MP◂r'◂e') 
			@.lc_TP_na r',e' = lc_TP◂r'◂e'◂(na◂r'◂e') 
			@.lc_na r',e' = lc_code_mp◂r'◂e'◂(na◂r'◂e'◂(MP◂r'◂e'))
			@.exn r',e' = _r64 
			@.nxp ◂ e',m' 
				∐ nx_m : _pt◂(p◂e'◂m')
				∐ nx_e : { _lst◂_r64 lc_TP◂_r64◂e'◂(nxp◂e'◂m') }
			@.na r',e',dp'  
				∐ na_s : { mtc_op◂r'◂e' na◂r'◂e'◂dp' }
				∐ na_p : { mtc_op◂r'◂e' na◂r'◂e'◂dp' na◂r'◂e'◂dp' }
				∐ na_e : { _lst◂r' lc_code◂r'◂e'◂(na◂r'◂e'◂dp')◂dp' }
			@.p ◂ e',m' 
				∐ p : { m' _opn◂(_pt◂(p◂e'◂m')) _opn◂(nxp◂e'◂m') nxp◂e'◂m' }  
			@.mtc_op r',e'
				∐ mtc_id : { RP.t◂r' SP◂r'◂e' }
				∐ mtc_test : { mtc_test test_var◂r'◂e' test_var◂r'◂e' }
			@.mtc_test 
				∐ test_eq : {} 
				∐ test_neq : {} 
				∐ test_cmp : {}
			@.test_var r',e'
				∐ test_cst : cst◂e'
				∐ test_var : r'
		\\§ rt_usr◂{ i p } = rt_t◂{ rt_id◂i p }
		\\§ hp◂{ r h } = rt_t◂{ rt_hp◂h RP.atm◂r }
		
		§§ EVV 
			§ set # { EVV p { i k } }
				_cls { EVV p k_p◂{ i k } } ⊢ { EVV p } 
				∎ { EVV p } 
			§ npt # EVV 
				_cln EVV ⊢ { EVV p } 
				∎ { EVV p }
			§ alc # { EVV { i0 k } } 
				_clp { EVV k_p◂{ i0 k } } ⊢ { EVV p } 
				∎ { EVV p } 
			§ lod_evv # { EVV i } 
				_clc_o { EVV i } ⊢ { EVVl k_p◂{ v k } } 
				$ k ⊢ k,k0 
				_clc_i { EVVl k_p◂{ v k } } ⊢ { EVV i } 
				∎ { EVV i k0 }
			§ lod_ev # { EVV i } 
				_clc_o { EVV i } ⊢ { EVVl k_p◂{ v k } } 
				$ v ⊢ v,v0 
				_clc_i { EVVl k_p◂{ v k } } ⊢ { EVV i } 
				∎ { EVV i v0 }
			§ exc # { EVV i { v0 k0 } } 
				_clc_o { EVV i } ⊢ { EVVl k_p◂{ v k } } 
				_clc_i { EVVl k_p◂{ v0 k0 } } ⊢ { EVV i } 
				∎ { EVV i { v k } }
			§ exc_evv # { EVV i k0 } 
				_clc_o { EVV i } ⊢ { EVVl k_p◂{ v k } } 
				_clc_i { EVVl k_p◂{ v k0 } } ⊢ { EVV i } 
				∎ { EVV i k }
			∎∎
		§ 
			@.mk_lst { l p }
				$ p ⊢ 
				∐ RP.rcd◂l0 . 
					mk_lst_lst { l l0 } ⊢| 
				∐. RP.atm◂a . 
					$ a ⊢ 
					∐ hp◂{ r h } .
						∎ ⟦ r < l ⟧ 
					∐ hp_im◂_ . 
						∎ l
					∐ btm◂{} . 
						∎ l 
					\\∐ rt_t◂{ t p } . 
					\\	mk_lst { l p } ⊢| 
					∐ rt_usr◂{ a p } . 
						mk_lst { l p } ⊢| 
					∐ dyn_adt◂{ { ax al } ri rd } .
						∎ ⟦ ri rd < l ⟧ 
					∐. stt_adt◂{ i n p } . 
						mk_lst { l p } ⊢|
			@.mk_lst_lst = lst.fld_l◂◂mk_lst
		
		\[
		§§ IRV 
			§ ini {} 
				hsh_tbl.ini %[ 5r ] ⊢| 
			§ rpc = _rpc 
			§ set = hsh_tbl.r64.set 
			§ get = hsh_tbl.r64.get 
			§ asc = hsh_tbl.r64.asc 
			§ itr = hsh_tbl.itr 
			§ fld = hsh_tbl.fld 
			§ mk_lst_i # { l { _ p } } 
				mk_lst { l p } ⊢|
			§	mk_lst_env # { irv l } 
				hsh_tbl.itr◂◂mk_lst_i { irv l } ⊢|
			§ ptns_of_env_i # { l { i p } } 
				∎ _cns◂{ p l } 
			§ ptns_of_env # v 
				fld◂◂ptns_of_env_i { ⟦⟧ v } ⊢ l 
				ini {} ⊢ v 
				∎ { v l }
				\\hsh_tbl.rb◂◂ptns_of_env_i { v ⟦⟧ } ⊢| 
			∎∎
		\]
		\\[
		
		§§ RV 
			§ ini = BST_r64.ini
			§ rpc = BST_r64.rpc 
			§ set = BST_r64.set 
			§ get = BST_r64.get 
			§ asc = BST_r64.asc 
			§ itr = BST_r64.itr 
			§ fld◂◂F { v l } 
				BST_r64.fld◂◂F { l v } ⊢| 
			∎∎
		§§ IRV 
			§ ini = BST_r64.ini
			§ rpc = BST_r64.rpc 
			§ set = BST_r64.set 
			§ get = BST_r64.get 
			§ asc = BST_r64.asc 
			§ itr = BST_r64.itr 
			\\§ itr = to_err_T 
			\\§ fld = to_err_T 
			§ fld◂◂F { v l } 
				BST_r64.fld◂◂F { l v } ⊢| 
			§ mk_lst_i # { l { _ p } } 
				\\∎| 
				mk_lst { l p } ⊢|
			§	mk_lst_env # { irv l } 
				\\∎| 
				itr◂◂mk_lst_i { irv l } ⊢|
			§ ptns_of_env_i # { l { i p } } 
				∎ _cns◂{ p l } 
			§ ptns_of_env # v 
				fld◂◂ptns_of_env_i { ⟦⟧ v } ⊢ l 
				ini {} ⊢ v 
				∎ { v l }
				\\hsh_tbl.rb◂◂ptns_of_env_i { v ⟦⟧ } ⊢| 
			∎∎
		\\]
		§§ MIRV = IRV
		
					
		§ op_call◂{ c s m } = { c s m } 
		§ op_inl◂{ c s m } = { c s m } 		
		§ 
			@.map_l_rt_reg_atm◂◂F { v a } 
				∐ a ⊢ hp◂{ r0 h } . 
					F { v r0 } ⊢ { v r0 } 
					∎ { v hp◂{ r0 h } }
				∐ a ⊢ stt_adt◂{ ia nn pa } . 
					RP.map_l◂◂(map_l_rt_reg_atm◂◂F) { v pa } ⊢ { v pa }
					∎ { v stt_adt◂{ ia nn pa } }
				∐ a ⊢ dyn_adt◂{ { ax al } ri rd } . 
					F { v ri } ⊢ { v ri } 
					F { v rd } ⊢ { v rd } 
					∎ { v dyn_adt◂{ { ax al } ri rd } }
				∐ a ⊢ rt_usr◂{ a p } . 
					RP.map_l◂◂(map_l_rt_reg_atm◂◂F) { v p } ⊢ { v p } 
					∎ { v rt_usr◂{ a p } }
				∐. . 
					∎ { v a }
		§ @.ctr_of_k { evv c } 
			∐ c ⊢ k_ctr◂c . 
				∎ { evv c } 
			∐ c ⊢ k_name◂i . 
				EVV.lod_evv { evv i } ⊢ { evv i c }
				ctr_of_k { evv c } ⊢| 
			∐. . 
				$ %[ "ast.ctr_of_k 0" ] ⊢ ee0 
				_emt ee0 ⊢ _ 
				∎|
		§ @.agl_of_cst { evv c } 
			∐ c ⊢ k_name◂i . 
				EVV.lod_evv { evv i } ⊢ { evv i c }
				agl_of_cst { evv c } ⊢| 
			∐ c ⊢ k_agl◂{ v c } . 
				ctr_of_k { evv k_name◂%v } ⊢ { evv { i n v } }
				∎ { evv { i n v c } } 
			∐. . 
				_emt %[ "agl_of_cst 0" ] ⊢ _ 
				∎| 
		§ @.rt_atm_of_ct_atm { evv c } 
			∐ c ⊢ k_agl◂{ v c } . 
				rt_of_ct { evv c } ⊢ { evv k } 
				ctr_of_k { evv k_name◂%v } ⊢ { evv { i n v } } 
				∎ { evv stt_adt◂{ i n k } } 
			∐ c ⊢ k_name◂i . 
				\\lod_evv { evv i } ⊢ { evv i c } 
				EVV.lod_evv { evv i } ⊢ { evv i c }
				rt_atm_of_ct_atm { evv c } ⊢| 
			∐. . 
				∎ { evv hp_im◂c }
			@.rt_of_ct = RP.map_l◂◂rt_atm_of_ct_atm
		§ @.op_of_k { evv c } 
			∐ c ⊢ k_name◂i . 
				EVV.lod_evv { evv i } ⊢ { evv i c } 
				op_of_k { evv c } ⊢| 
			∐. . 
				∎ { evv c }
		§ op_of_k { evv c } 
			$ c ⊢ 
			∐ RP.atm◂c . 
				op_of_k { evv c } ⊢| 
			∐. RP.rcd◂l . 
				∎| 
		¶ agl_t a',b' 
			∐ agl_s : a' 
			∐ agl_d : b' 
			∐ agl_b : {} 
		§ agl_rt { evv p }
			∐ p ⊢ RP.atm◂hp_im◂c0 . 
				agl_of_cst { evv c0 } ⊢ { evv { ia0 na0 va0 ca0 } }
				rt_of_ct { evv ca0 } ⊢ { evv pa0 } 
				∎ { evv agl_s◂{ ia0 na0 pa0 } }
			∐ p ⊢ RP.atm◂stt_adt◂{ ia na pa } . 
				∎ { evv agl_s◂{ ia na pa } }
			∐ p ⊢ RP.atm◂dyn_adt◂{ L ri rd } . 
				∎ { evv agl_d◂{ L ri rd } }
			∐ p ⊢ RP.atm◂btm◂{} . 
				∎ { evv agl_b◂{} }
			∐. . 
				∎|	
		§ 
			
			@.eq_ct_ptn = RP.eq_v◂◂eq_ct
			@.eq_ct_lst = lst.eq_v_err◂◂eq_ct_ptn 
			
			@.eq_ct { evv c0 c1 } 
				∐ c0 ⊢ k_name◂i0 . 
					EVV.lod_evv { evv i0 } ⊢ { evv i0 c2 }
					eq_ct { evv c2 c1 } ⊢ { evv _ c1 b } 
					∎ { evv k_name◂i0 c1 b } 
				∐ c1 ⊢ k_name◂i1 . 
					EVV.lod_evv { evv i1 } ⊢ { evv i1 c2 }
					eq_ct { evv c0 c2 } ⊢ { evv c0 c2 b } 
					∎ { evv c0 k_name◂i1 b }
				∐ c0 ⊢ k_op_gnr◂{ o_t0 o_n0 dp0 r_n0 ib0 lc0 v0 }; c1 ⊢ k_op_gnr◂{ o_t1 o_n1 dp1 r_n1 ib1 lc1 v1 }; o_n0'=o_n1' . 
					∎ { evv k_op_gnr◂{ o_t0 o_n0 dp0 r_n0 ib0 lc0 v0 } k_op_gnr◂{ o_t1 o_n1 dp1 r_n1 ib1 lc1 v1 } bl.t◂{} }
				∐ c0 ⊢ k_op◂{ o_t0 o_n0 dp0 r_n0 ib0 lc0 v0 }; c1 ⊢ k_op◂{ o_t1 o_n1 dp1 r_n1 ib1 lc1 v1 }; o_n0'=o_n1' . 
					∐ o_t0 ⊢ _none◂{}; o_t1 ⊢ _none◂{} . 
						∎ { evv k_op◂{ ‹› o_n0 dp0 r_n0 ib0 lc0 v0 } k_op◂{ ‹› o_n1 dp1 r_n1 ib1 lc1 v1 } bl.t◂{} }
					∐ o_t0 ⊢ _some◂{ t0 k0 }; o_t1 ⊢ _some◂{ t1 k1 } . 
						eq_ct_ptn { evv k0 k1 } ⊢ { evv k0 k1 b }
						∎ { evv k_op◂{ ‹ { t0 k0 } › o_n0 dp0 r_n0 ib0 lc0 v0 } k_op◂{ ‹ { t1 k1 } › o_n1 dp1 r_n1 ib1 lc1 v1 } b }
					∐. . 
						∎| 
				∐ c0 ⊢ k_r64◂x0; c1 ⊢ k_r64◂x1; x0'=x1' . 
					∎ { evv k_r64◂x0 k_r64◂x1 bl.t◂{} }
				∐ c0 ⊢ k_s8◂s0; c1 ⊢ k_s8◂s1; s0'=s1' . 
					∎ { evv k_s8◂s0 k_s8◂s1 t◂{} }
				∐ c0 ⊢ k_ctr◂{ i0 n0 v0 }; c1 ⊢ k_ctr◂{ i1 n1 v1 }; i0'=i1' . 
					∎ { evv k_ctr◂{ i0 n0 v0 } k_ctr◂{ i1 n1 v1 } t◂{} }
				∐ c0 ⊢ k_agl◂{ v0 k0 }; c1 ⊢ k_agl◂{ v1 k1 } . 
					EVV.lod_evv { evv v0 } ⊢ { evv v0 kv0 }
					EVV.lod_evv { evv v1 } ⊢ { evv v1 kv1 }
					eq_ct { evv kv0 kv1 } ⊢ { evv kv0 kv1 b0 } 
					$ b0 ⊢ 
					∐ bl.t◂{} . 
						eq_ct_ptn { evv k0 k1 } ⊢ { evv k0 k1 b1 } 
						∎ { evv k_agl◂{ v0 k0 } k_agl◂{ v1 k1 } b1 }
					∐. bl.f◂{} . 
						∎ { evv k_agl◂{ v0 k0 } k_agl◂{ v1 k1 } bl.f◂{} }
				∐ c0 ⊢ k_op_axm◂{ n0 l0 }; c1 ⊢ k_op_axm◂{ n1 l1 }; n0'=n1' . 
					lst.eq_v_err◂◂eq_ct_ptn { evv l0 l1 } ⊢ { evv l0 l1 b } 
					∎ { evv k_op_axm◂{ n0 l0 } k_op_axm◂{ n1 l1 } b }
				∐ c0 ⊢ k_app◂{ k0 k1 }; c1 ⊢ k_app◂{ k2 k3 } . 
					eq_ct_ptn { evv k0 k2 } ⊢ { evv k0 k2 b0 } 
					$ b0 ⊢ 
					∐ bl.t◂{} . 
						eq_ct_ptn { evv k1 k3 } ⊢ { evv k1 k3 b1 } 
						∎ { evv k_app◂{ k0 k1 } k_app◂{ k2 k3 } b1 }
					∐. bl.f◂{} .	
						∎ { evv k_app◂{ k0 k1 } k_app◂{ k2 k3 } bl.f◂{} }					
				∐. . 
					∎ { evv c0 c1 bl.f◂{} }
		§ @.r64_of_k { evv c } 
			∐ c ⊢ k_r64◂x . 
				∎ { evv x } 
			∐ c ⊢ k_name◂i . 
				\\lod_evv { evv i } ⊢ { evv i c } 
				EVV.lod_evv { evv i } ⊢ { evv i c }
				r64_of_k { evv c } ⊢| 
			∐ c ⊢ k_var◂ _ . 
				_emt %[ "ast.r64_f 1" ] ⊢ _ 
				∎| 
			∐. . 
				$ %[ "ast.r64_of 0" ] ⊢ ee0 
				_emt ee0 ⊢ _ 
				∎|
		§ @.s8_of_k { evv c } 
			∐ c ⊢ k_s8◂s . 
				∎ { evv s } 
			∐ c ⊢ k_name◂i . 
				\\lod_evv { evv i } ⊢ { evv i c } 
				EVV.lod_evv { evv i } ⊢ { evv i c }
				s8_of_k { evv c } ⊢| 
			∐. . 
				$ %[ "ast.s8_of_k 0" ] ⊢ ee0 
				_emt ee0 ⊢ _ 
				∎|    
		§§ pnt 
			§ 
				@.cst { evv c }
					∐ c ⊢ k_r64◂x . 
						^ x ⊢ x,sr
						0d' "r" //
						∎ { evv sr } 
					∐ c ⊢ k_s8◂s . 
						mk_esc_s8 s ⊢ { s ss } 
						^ ss ⊢ ss,sr
						"\"" 0' "\"" // 
						∎ { evv sr }
					∐ c ⊢ k_name◂i . 
						^  _ ⊢ si 
							"#" // 
						∎ { evv si }
					∐ c ⊢ k_op_axm◂{ ax _ } . 
						^ ax ⊢ _,sr 
							".#" 0d' //
						∎ { evv sr }
					∐ c ⊢ k_op_gnr◂{ _ _ _ _ _ _ _ } . 	
						^ _ ⊢ s 
							"→[ _ ]" // 
						∎ { evv s }	
					∐ c ⊢ k_op◂{ _ _ _ _ _ _ _ } . 
						^ _ ⊢ s 
							"→[ ]" // 
						∎ { evv s }	
					∐ c ⊢ k_app◂_ .
						∎ { evv %[ "?:k_app" ] }
					∐ c ⊢ k_var◂{ i _ } . 
						^ i ⊢ _,s 
							".T" 0d' // 
						∎ { evv s } 
					∐. .  
						$ %[ " ? " ] ⊢ sr 
						∎ { evv sr } 
			§	@.cst_n { evv c }
					∐ c ⊢ k_r64◂x . 
						^ x ⊢ x,sr
						0d' "r" //
						∎ { evv sr } 
					∐ c ⊢ k_s8◂s . 
						mk_esc_s8 s ⊢ { s ss } 
						^ ss ⊢ ss,sr
						"\"" 0' "\"" // 
						∎ { evv sr }
					∐. . 
						$ %[ " ? " ] ⊢ sr 
						∎ { evv sr } 
			§ ct_ptn = RP.pnt_l◂◂cst
			§ ct_ptn_lst = lst.pnt_l◂◂{ ct_ptn " " } 
			§
				@.src { evv s } 
					$ s ⊢ 
					∐ re_agl◂{ e sp } .
						##cst_n { evv e } ⊢ { evv se } 
						src_ptn { evv sp } ⊢ { evv ss } 
						^ ss ⊢ _,sr 
							"?◂" 0' // 
						∎ { evv sr } 
					∐ re_reg◂w .
						∎ { evv w } 
					∐. re_v◂c .
						cst_n { evv c } ⊢ { evv sc }
						^ sc ⊢ sc,sr
							"%[ " 0' " ] " // 
						∎ { evv sr }
				@.src_ptn = RP.pnt_l◂◂src 
			§	src_ptn_lst = lst.pnt_l◂◂{ src_ptn " " }
			§	
				@.mtc_atm { evv a } 
					$ a ⊢ 
					∐ re_agl◂{ n mp } .
						mtc_ptn { evv mp } ⊢ { evv smp } 
						\\pnt_name n ⊢ sn 
						^ smp ⊢ smp,sr
							"?◂" 0' // 
						∎ { evv sr }
					∐ re_reg◂w . 
						^ w ⊢ w,sr
							"%" 0' // 
						∎ { evv sr } 
					∐. re_v◂_ . 
						$ %[ "_" ] ⊢ sr
						∎ { evv sr } 
				@.mtc_ptn = RP.pnt_l◂◂mtc_atm
			§ mtc_ptn_lst = lst.pnt_l◂◂{ mtc_ptn " " }
		§	
			@.lc_code { evv dn lc ep0 }
					$ lc ⊢ 
					∐ jmp◂{ n s } . 
						src_ptn { evv s } ⊢ { evv ss } 
						^ dn,ss ⊢ dn,ss,sr 
							0'*"\t" "? " 1' " ⊢|\n" // 
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						∎ { evv dn ep0 } 
					∐ seq◂{ ll lc } .
						lc_line { evv dn ll ep0 } ⊢ { evv dn ep0 }
						lc_code { evv dn lc ep0 } ⊢|
					∐ mtc◂m .
						\\lc_mtc { { evv dn ep0 } m } ⊢|
						∎ { evv dn ep0 }
					∐ op_exh◂{ op sp dp le lx } . 
						∎ { evv dn ep0 }
					∐. tj◂{ x v r } . 
						∎ { evv dn ep0 }
					
				@.exp_s8 { evv p } 
					$ p ⊢ 
					∐ exp_s8_cst◂c . 
						cst_n { evv c } ⊢|
					∐ exp_s8_idx◂{ f x } .
						^ x ⊢ _,sr 
							0d' ".'" //
						∎ { evv sr } 
					∐. exp_s8_for◂{ n c } . 
						cst_n { evv c } ⊢ { evv sc } 
						^ n,sc ⊢ _,_,sr 
							0d' "*" 1' // 
						∎ { evv sr }  
				@.lc_line { evv dn o ep0 }
					$ o ⊢ { n s d }
						src_ptn { evv s } ⊢ { evv ss }
						mtc_ptn { evv d } ⊢ { evv sd } 
						##pnt_name n ⊢ sn
						##ct_ptn { evv n } ⊢ { evv sn } 
						^ dn,ss,sd ⊢ dn,ss,sd,sr
							0'*"\t" "? " 1' " ⊢ " 2' "\n" //
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						∎ { evv dn ep0 }
				@.rt_atm { evv a } 
					$ a ⊢ 					
					∐ hp◂{ r h } . 
						hp.pnt h ⊢ sh
						^ r,sh ⊢ r,sh,sr 
							0d' "'" "(= " 1' " )" // 
						∎ { evv sr }
					∐ hp_im◂v . 
						cst { evv v } ⊢ { evv sv } 
						^ sv ⊢ sv,sr 
							"%[ " 0' " ]" // 
						∎ { evv sr } 
					∐ btm◂{} . 
						∎ { evv %[ "-" ] }
					∐ rt_usr◂{ a p } . 
						rt { evv p } ⊢ { evv sp } 
						^ a,sp ⊢ _,_,sr 
							0d' ".(" 1' ")" //
						∎ { evv sr }
					∐ dyn_adt◂{ { ax al } ri rd } .
						^ ax,ri,rd ⊢ _,_,_,s 
							1d' "'(" 0d' ")◂" 2d' "'" // 
						∎ { evv s }  
					∐. stt_adt◂{ c n p } .
						rt { evv p } ⊢ { evv sp }  
						^ c,n,sp ⊢ c,n,sp,sr 
							0d' "(<" 1d' ")◂" 2' // 
						∎ { evv sr }  
				@.rt = RP.pnt_l◂◂rt_atm 
				@.rt_lst = lst.pnt_l◂◂{ rt " " } 
			∎∎
		¶ 
			@.type_var 
				∐ app : { type type } 
				∐ type_name : name 
				∐ type_var : _s8 
				∐ type_ln : T.t◂type 
			@.type = T.t◂type_var

		§§ grm 
			¶ 
				@.act r',e' 
					\\∐ act_cns : { _lst◂(mtc_atm◂r'◂e') MP◂r'◂e' lc_code_mp◂r'◂e'◂(lc_mtc◂r'◂e') rle_flg rle◂e' _opn◂{ MP◂r'◂e' act◂r'◂e' } act◂r'◂e' }
					\\∐ act_end : { _lst◂(mtc_atm◂r'◂e') MP◂r'◂e' lc_code_mp◂r'◂e'◂(lc_mtc◂r'◂e') rle_flg rle◂e' _opn◂{ MP◂r'◂e' act◂r'◂e' } }
					∐ act_cns : { _lst◂(mtc_atm◂r'◂e') MP◂r'◂e' lc_na◂r'◂e' rle_flg rle◂e' _opn◂{ MP◂r'◂e' act◂r'◂e' } act◂r'◂e' }
					∐ act_end : { _lst◂(mtc_atm◂r'◂e') MP◂r'◂e' lc_na◂r'◂e' rle_flg rle◂e' _opn◂{ MP◂r'◂e' act◂r'◂e' } }
				@.rle_flg
					∐ lex : {}
					∐ synt : {}
					∐ line : {}
				@.rle e'
					∐ ptn_cut : rle_cut◂e'
					∐ ptn_seq : { ct_ptn◂e' rle◂e' }
					∐ ptn_end : {}
				@.rle_cut e' = _lst◂(ptn◂e')
				@.ptn e' = ct_ptn◂e'
			§§ pnt  
				§ 
					@.act { evv dn g ep0 }
						$ g ⊢ 
						∐ act_cns◂{ dl dp lc o ps gc g } .
							pnt.mtc_ptn { evv dp } ⊢ { evv sdp } 
							^ dn,sdp ⊢ dn,sdp,sr
								0'*"\t" "∐ .. ⊢ " 1' "\n" // 
							rp8.add_s8 { ep0 sr } ⊢ ep0 
							_inc dn ⊢ dn
							pnt.lc_code { evv dn lc ep0 } ⊢ { evv dn ep0 }
							_dec dn ⊢ dn
							act { evv dn g ep0 } ⊢| 
						∐. act_end◂{ drl dp lc o ps gc } .
							pnt.mtc_ptn { evv dp } ⊢ { evv sdp } 
							^ dn,sdp ⊢ dn,sdp,sr
								0'*"\t" "∐ .. ⊢ " 1' "\n" // 
							rp8.add_s8 { ep0 sr } ⊢ ep0 
							_inc dn ⊢ dn
							pnt.lc_code { evv dn lc ep0 } ⊢ { evv dn ep0 }
							_dec dn ⊢ dn
							∎ { evv dn ep0 }
					@.rle { evv dn ps ep0 }
						$ ps ⊢ 
						∐ ptn_cut◂cps .
							^ _ ⊢ sr
								" !| " //
							rp8.add_s8 { ep0 sr } ⊢ ep0
							rle_cut { evv dn cps ep0 } ⊢| 
						∐ ptn_seq◂{ p ps } .
							^ _ ⊢ sr
								" .. "  //
							rp8.add_s8 { ep0 sr } ⊢ ep0
							rle { evv dn ps ep0 } ⊢|  
						∐. ptn_end◂{} .
							∎ { evv dn ep0 }
					@.rle_cut { evv dn ps ep0 }
						$ ps ⊢ 
						∐ _cns◂{ p ps } .
							^ _ ⊢ sr
								" .. "  //
							rp8.add_s8 { ep0 sr } ⊢ ep0 
							rle_cut { evv dn ps ep0 } ⊢|  
						∐. _nil◂{} .
							∎ { evv dn ep0 } 
				∎∎
			§ act_regs # {} 
				∎ _cns◂{ re_reg◂%[ "_n" ] _cns◂{ re_reg◂%[ "_r" ] _nil◂{} } }
			∎∎
		¶
			@.file = _lst◂glb_etr
			@.glb_etr
				∐ mdl_etr : { _s8 mdl_etr }
				∐ lc_etr : { _s8 lc_etr }
				∐ lc_qlq_etr : _lst◂{ _s8 lc_etr }
				∐ dt_etr : { _s8 dt_etr }
				∐ dt_qlq_etr : _lst◂{ _s8 dt_etr }
		\\∐ lc_cst : lc_code◂_s8◂name◂(lc_mtc◂_s8◂name)
			@.mdl_etr
				∐ mdl_def : _lst◂glb_etr
				∐ mdl_ln : name
			@.lc_etr
				∐ lc_def : { _opn◂(RP.t◂_s8) MP◂_s8◂name _opn◂type bl.t lc_na◂_s8◂name }
				∐ lc_ln : cst◂name
				∐ lc_ply : { RP.t◂_s8 SP◂_s8◂name }
				∐ lc_grm : { _opn◂(RP.t◂_s8) grm.act◂_s8◂name } 
			@.dt_etr
				∐ dt_def : { _lst◂_s8 _lst◂{ _s8 type } }
				∐ dt_ln : { _lst◂_s8 type }
		§ of_tpl_ptn_atm # { {} w } 
			∎ { {} k_name◂fst_n◂w }
		§ of_tpl_ptn # p 
			RP.map_l◂◂of_tpl_ptn_atm { {} p } ⊢ { {} p } 
			∎ p
		§§ pnt_file
			§ lc_etr0 = lc_etr 
			§ dt_etr0 = dt_etr
			§ dt_def0 = dt_def 
			§ dt_qlq_etr0 = dt_qlq_etr
			§ lc_qlq_etr0 = lc_qlq_etr
			##§ type_rcd0 = type_rcd 
			§ 
				@.f { evv dn f ep0 } 
					$ f ⊢ 
					∐ _cns◂{ hd tl } .
						glb_etr { evv dn hd ep0 } ⊢ { evv dn ep0 }
						f { evv dn tl ep0 } ⊢| 
					∐. _nil◂{} .
						∎ { evv dn ep0 }
				@.glb_etr { evv dn e ep0 }
					$ e ⊢ 
					∐ mdl_etr◂{ w me } .
						$ me ⊢ 
						∐ mdl_def◂el .
							^ dn,w ⊢ dn,w,sr
								0'*"\t" "§§ " 1' "\n" // 
							rp8.add_s8 { ep0 sr } ⊢ ep0 
							_inc dn ⊢ dn
							f { evv dn el ep0 } ⊢ { evv dn ep0 }
							_dec dn ⊢ dn
							^ dn ⊢ dn,sr 
								0'*"\t" "\t" "∎∎\n" // 
							rp8.add_s8 { ep0 sr } ⊢ ep0
							∎ { evv dn ep0 }
						∐. mdl_ln◂n .
							pnt_name n ⊢ sn
							^ dn,w,sn ⊢ dn,w,sn,sr
								0'*"\t" "§§ " 1' " = " 2' "\n" //
							rp8.add_s8 { ep0 sr } ⊢ ep0
							∎ { evv dn ep0 }
				
					∐ lc_etr0◂{ w lce } .
						^ dn,w ⊢ dn,w,sr
							0'*"\t" "§ " 1' //
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						_inc dn ⊢ dn
						lc_etr { evv dn lce ep0 } ⊢ { evv dn ep0 }
						_dec dn ⊢ dn
						∎ { evv dn ep0 }
					∐ lc_qlq_etr0◂q .
						^ dn ⊢ dn,sr
							0'*"\t" "§ \n" //
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						_inc dn ⊢ dn
						lc_qlq_etr { evv dn q ep0 } ⊢ { evv dn ep0 }
						_dec dn ⊢ dn
						∎ { evv dn ep0 }
					∐ dt_etr0◂{ w d } .
						^ dn,w ⊢ dn,w,sr
							0'*"\t" "¶ " 1' //
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						dt_etr { evv dn d ep0 } ⊢| 
					∐. dt_qlq_etr0◂q .
						^ dn ⊢ dn,sr
							0'*"\t" "¶\n" //
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						_inc dn ⊢ dn
						dt_qlq_etr { evv dn q ep0 } ⊢ { evv dn ep0 }
						_dec dn ⊢ dn
						∎ { evv dn ep0 }
				@.dt_qlq_etr { evv dn q ep0 }
					$ q ⊢ 
					∐ _cns◂{ { w d } q } .
						^ dn,w ⊢ dn,w,sr
							0'*"\t" "@." 1' "\n" // 
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						dt_etr { evv dn d ep0 } ⊢ { evv dn ep0 } 
						dt_qlq_etr { evv dn q ep0 } ⊢|
					∐. _nil◂{} .
						∎ { evv dn ep0 }
				@.dt_etr { evv dn e ep0 }
					$ e ⊢ 
					∐ dt_def0◂{ a l } .
						^ _ ⊢ sr
							"\n" //
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						_inc dn ⊢ dn
						dt_def { evv dn l ep0 } ⊢ { evv dn ep0 }
						_dec dn ⊢ dn
						∎ { evv dn ep0 }
					∐. dt_ln◂{ a t } .
						type t ⊢ st
						^ _ ⊢ sr
							" = " //
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						∎ { evv dn ep0 }
				@.dt_def { evv dn l ep0 }
					$ l ⊢ 
					∐ _cns◂{ { w t } l } .
						type t ⊢ st
						^ dn,w,st ⊢ dn,w,st,sr
							0'*"\t" "∐ " 1' " : " 2' "\n" //
						dt_def { evv dn l ep0 } ⊢|
					∐. _nil◂{} .
						∎ { evv dn ep0 }
				@.type # t 
					∎ %[ "?type" ] 

				@.lc_etr { evv dn e ep0 }
					$ e ⊢ 
					∐ lc_def◂{ o_t dp dt ib lc } .
						∐ dt ⊢ _some◂dt . 
							type dt ⊢ sdt 
							pnt.mtc_ptn { evv dp } ⊢ { evv sdp }
							^ sdp,sdt ⊢ sdp,sdt,sr
								" " 0' " : " 1' "\n" //
							rp8.add_s8 { ep0 sr } ⊢ ep0 
							_inc dn ⊢ dn
							pnt.lc_code { evv dn lc ep0 } ⊢ { evv dn ep0 }
							_dec dn ⊢ dn
							∎ { evv dn ep0 }
						∐. . 
							pnt.mtc_ptn { evv dp } ⊢ { evv sdp }
							^ sdp ⊢ sdp,sr
								" " 0' " : \n" //
							rp8.add_s8 { ep0 sr } ⊢ ep0 
							_inc dn ⊢ dn
							pnt.lc_code { evv dn lc ep0 } ⊢ { evv dn ep0 }
							_dec dn ⊢ dn
							∎ { evv dn ep0 }
					∐ lc_grm◂{ g_o ge } . 
						∎ { evv dn ep0 } 
					∐ lc_ln◂c .
						pnt.cst_n { evv c } ⊢ { evv sc }
						^ sc ⊢ sc,sr
							" = " 0' "\n" //
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						∎ { evv dn ep0 }
					∐. lc_ply◂{ x p } . 
						rp8.add_s8 { ep0 %[ "◂ .. = .." ] } ⊢ ep0
						∎ { evv dn ep0 }
					
				@.lc_qlq_etr { evv dn q ep0 }
					$ q ⊢ 
					∐ _cns◂{ { w le } q } .  
						^ dn,w ⊢ dn,w,sr
							0'*"\t" "@." //
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						lc_etr { evv dn le ep0 } ⊢ { evv dn ep0 } 
						lc_qlq_etr { evv dn q ep0 } ⊢| 
					∐. _nil◂{} .
						∎ { evv dn ep0 }				
			∎∎
		¶ k_of a',b' 
			∐ hp_of : b' 
			∐ im_of : a' 
		§ r64_of_rt { evv p }
			∐ p ⊢ RP.atm◂a . 
				∐ a ⊢ hp◂{ r0 h0 }; h0 ⊢ hp.r64◂{} . 
					∎ { evv hp_of◂r0 }
				∐ a ⊢ hp_im◂iv . 
					r64_of_k { evv iv } ⊢ { evv x } 
					∎ { evv im_of◂x } 
				∐ a ⊢ btm◂{} . 
					∎|
				∐. . 
					$ %[ "r64_of_rt 0" ] ⊢ ee0 
					_emt ee0 ⊢ _ 
					pnt.rt { evv RP.atm◂a } ⊢ { evv sp } 
					_emt sp ⊢ _ 
					∎| 
			∐. . 
				$ %[ "r64_of_rt 1" ] ⊢ ee0 
				_emt ee0 ⊢ _ 
				∎| 
		§ s8_of_rt { evv p }
			∐ p ⊢ RP.atm◂a . 
				∐ a ⊢ hp◂{ r0 h0 }; h0 ⊢ hp.opq◂d . 
					∎ { evv hp_of◂r0 }
				∐ a ⊢ hp◂r0 . 
					_emt %[ "s8_of_rt 5" ] ⊢ _ 
					∎|
				∐ a ⊢ hp_im◂iv . 
					s8_of_k { evv iv } ⊢ { evv x } 
					∎ { evv im_of◂x } 
				∐ a ⊢ btm◂{} .
					_emt %[ "s8_of_rt 2" ] ⊢ _ 
					∎|
				∐ a ⊢ stt_adt◂_ .
					_emt %[ "s8_of_rt 3" ] ⊢ _ 
					∎|
				∐ a ⊢ dyn_adt◂_ .
					_emt %[ "s8_of_rt 4" ] ⊢ _ 
					∎|
				∐. . 
					$ %[ "s8_of_rt 0" ] ⊢ ee0 
					_emt ee0 ⊢ _ 
					∎| 
			∐. . 
				$ %[ "s8_of_rt 1" ] ⊢ ee0 
				_emt ee0 ⊢ _ 
				∎|
		§ arr_of_rt { evv p }
			∐ p ⊢ RP.atm◂a; a ⊢ hp◂{ r0 h0 }; h0 ⊢ hp.arr◂{ h d } . 
				∎ { evv { r0 h d } }
			∐. . 
				_emt %[ "arr_of_rt 0" ] ⊢ _ 
				∎| 
		§ Clr_of { evv p } 
			∐ p ⊢ RP.atm◂hp◂{ j1 hp.id◂{ i y } }; i'=hp.id.Clr . 
				∎ { evv { j1 y } }
			∐. . 
				∎|
		∎∎
	§§ EVV = ast.EVV
	§§ stt_v 
		
			
			§ r64_reg◂r = RP.atm◂ast.hp◂{ %r ast.hp.r64◂{} }
			§ r64_im◂x = RP.atm◂ast.hp_im◂ast.k_r64◂%x 
			§ s8_reg◂r = RP.atm◂ast.hp◂{ %r ast.hp.opq◂%[ ast.hp.arr.std ] }  
			§ s8_im◂s = RP.atm◂ast.hp_im◂ast.k_s8◂%s
			§ arr_reg◂{ r h } = RP.atm◂ast.hp◂{ %r ast.hp.arr◂{ %h %[ ast.hp.arr.std ] } }   
			§ id_reg◂{ r i h } = RP.atm◂ast.hp◂{ r ast.hp.id◂{ i h } } 
			§ Clr_reg◂{ r h } = id_reg◂{ r %[ ast.hp.id.Clr ] h } 
			§ pt_reg◂{ r h } = id_reg◂{ r %[ ast.hp.id.pt ] h } 
			
			∎∎
	§ mk_app_i # { p a } 
		∎ RP.atm◂T.var◂ast.app◂{ p a } 
	§ mk_app = lst.fld_l◂◂mk_app_i
	§§ e_axm 
		§ mk_arr = 0r 
		§ exc_q = 1r 
		§ set_q = 2r 
			§ get_q = 3r 
			§ lod_q = 4r 
			§ args = 5r 
			§ mlc_s8 = 6r 
			§ s8_len = 7r 
			§ emt = 8r 
			§ inc = 9r 
			§ dec = 10r 
			§ add = 11r 
			§ sub = 12r 
			§ imul = 13r
			§ sts = 14r 
			§ lds = 15r 
			§ setge = 16r 
			§ rep_movsb = 17r 
			§ nil = 18r 
			§ cns = 19r 
			§ some = 20r 
			§ none = 21r
			§ in_fn = 22r
			§ emt_s8_to = 23r 
			§ cd = 24r  
			§ byt = 25r

			§ mk_clr = 26r 
			§ alp = 27r 
			§ frp = 28r 
			§ mkp = 29r
			§ dlp = 30r

			§ arr_len = 31r 
			§ arr_of_lst = 32r

			§ scf_d = 33r 
			§ scf_x = 34r 
			§ dlt0 = 35r 
			§ info = 36r 
			§ rpc = 37r
			§ getchar = 38r 

			§ shl = 39r 
			§ shr = 40r 

			§ app = 41r 
			§ and = 42r 
			§ or = 43r
			
			§ prs = 44r 
			§ opn_exn = 45r 
			§ id = 46r 
			§ c_call = 47r
			§ xor = 48r  
			§ lds64 = 49r 
			§ s8_hsh = 50r
			§ dlt = 51r
			§ cst = 52r
			§ psc = 53r  
			§ synt = 54r 
			§ line = 55r 
			§ grm = 56r
			§ grm_ftr = 57r 
			§ ftr = 58r 
			§ inl = 59r 
			§ tj = 60r 
			§ ala = 61r 

			§ cli = 62r 
			§ clp = 63r 
			§ cla = 64r 
			§ cln = 65r 
			§ cls = 66r 
			§ cmp_s8 = 67r
			§ cld = 68r 
			§ pf = 69r
			§ pf_x = 70r
			§ clc_i = 71r 
			§ clc_o = 72r
			§ clc_d = 73r 
			§ seq = 74r 
			§ alc_i = 75r 
			§ alc_o = 76r 
      § rsz = 77r 
			§ mk_arr_x = 78r 
			§ push = 79r 
			§ pop = 80r 
			§ id_par = 81r 
			§ ctr = 82r 
			§ oom = 83r 
			§ moo = 84r 
			§ mcp = 85r 
			§ mcn = 86r
			§ mop = 87r 
			§ mt_e = 88r 
			§ mt_ne = 89r
			§ mt_le = 90r 
			§ exn = 91r 
			§ tj = 92r 
			§ tjn = 93r 
			§ tjc = 94r
			\\§ _exh = 91r 
			\[
			§ mk_arr0 = 59r 
			§ set_q0 = 60r 
			§ of_arr0 = 61r 
			\]
	§ N = 95r 

	§ slv_name i  
		=+ i' 
		∐ 
			∎ %[ "_mk_arr" ] 
		∐		
			∎ %[ "_exc_q" ]
		∐ 
			∎ %[ "_set_q" ]
		∐ 		
			∎ %[  "_get_q"  ]
		∐ 			
			∎ %[  "_lod_q"  ]
		∐  		
			∎ %[  "_args"  ]
		∐ 		
			∎ %[  "_mlc_s8"  ]
		∐	
			∎ %[  "_s8_len"  ]
		∐
			∎ %[  "_emt"  ]
		∐ 		
			∎ %[  "_inc"  ]
		∐ 		
			∎ %[  "_dec"  ]
		∐ 		
			∎ %[  "_add"  ]
		∐ 		
			∎ %[  "_sub"  ]
		∐ 		
			∎ %[  "_imul"  ]
		∐  		
			∎ %[  "_sts"  ]
		∐ 
			∎ %[  "_lds"  ]
		∐ 
			∎ %[  "_setge"  ]
		∐ 
			∎ %[  "_rep_movsb"  ]
		∐ 
			∎ %[  "_nil"  ]
		∐ 
			∎ %[  "_cns"  ]
		∐ 
			∎ %[  "_some"  ]
		∐ 
			∎ %[  "_none"  ]
		∐ 
			∎ %[  "_in_fn"  ]
		∐ 
			∎ %[  "_emt_s8_to"  ]
		∐ 
			∎ %[  "_cd"  ]
		∐ 
			∎ %[  "_byt"  ]
		∐ 
			∎ %[  "_0"  ]
		∐ 
			∎ %[  "_1"  ]
		∐ 
			∎ %[  "_2"  ]
		∐ 
			∎ %[  "_3"  ]
		∐ 
			∎ %[  "_4"  ]
		∐ 
			∎ %[  "_arr_len"  ]
		∐ 
			∎ %[  "_arr_of_lst"  ]
		∐ 
			∎ %[  "_scf_d"  ]
		∐ 
			∎ %[  "_scf_x"  ]
		∐ 
			∎ %[  "_dlt0"  ]
		∐ 
			∎ %[  "_info"  ]
		∐ 
			∎ %[  "_rpc"  ]
		∐ 
			∎ %[  "_getchar"  ]
		∐ 
			∎ %[  "_shl"  ]
		∐ 
			∎ %[  "_shr"  ]
		∐ 
			∎ %[  "_app"  ]
		∐ 
			∎ %[  "_and"  ]
		∐ 
			∎ %[  "_or"  ]
		∐ 
			∎ %[  "_prs"  ]
		∐ 
			∎ %[  "_5"  ]
		∐ 
			∎ %[  "_id"  ]
		∐ 
			∎ %[  "_6"  ]
		∐ 
			∎ %[  "_xor"  ]
		∐ 
			∎ %[  "_lds64"  ]
		∐ 
			∎ %[  "_s8_hsh"  ]
		∐ 
			∎ %[  "_dlt"  ]
		∐ 
			∎ %[  "_cst"  ]
		∐ 
			∎ %[  "_psc"  ]
		∐ 
			∎ %[  "_synt"  ]
		∐ 
			∎ %[  "_line"  ]
		∐ 
			∎ %[  ".grm"  ]
		∐ 
			∎ %[  ".grm_ftr"  ]
		∐ 
			∎ %[  "_ftr"  ]
		∐ 
			∎ %[  "_inl"  ]
		∐	
			∎ %[  "_tj"  ]
		∐ 
			∎ %[ "_ala" ] 
		∐ 
			∎ %[ "_cli" ] 
		∐ 
			∎ %[ "_clp" ] 
		∐ 
			∎ %[ "_cla" ]
		∐ 
			∎ %[ "_cln" ] 
		∐ 
			∎ %[ "_cls" ]
		∐ 
			∎ %[ "_cmp_s8" ] 
		∐ 
			∎ %[ "_cld" ] 
		∐ 
			∎ %[ "_pf" ] 
		∐ 
			∎ %[ "_pf_x" ]
		∐ 
			∎ %[ "_clc_i" ]
		∐ 
			∎ %[ "_clc_o" ]
		∐ 
			∎ %[ "_clc_d" ]
		∐ 
			∎ %[ "_seq" ] 
		∐ 
			∎ %[ "_alc_i" ] 
		∐ 
			∎ %[ "_alc_o" ]
    ∐ 
      ∎ %[ "_rsz" ]
		∐ 
			∎ %[ "_mk_arr_x" ]
		∐ 
			∎ %[ "_push" ] 
		∐ 
			∎ %[ "_pop" ]  
		∐ 
			∎ %[ "_id_par" ] 
		∐ 
			∎ %[ "_ctr" ]
		∐ 
			∎ %[ "_oom" ]
		∐ 
			∎ %[ "_moo" ]
		∐ 
			∎ %[ "_mcp" ]
		∐ 
			∎ %[ "_mcn" ]
		∐ 
			∎ %[ "_mop" ] 
		∐ 
			∎ %[ "_mt_e" ] 
		∐ 
			∎ %[ "_mt_ne" ]
		∐ 
			∎ %[ "_mt_le" ]
		∐ 	
			∎ %[ "_exn" ]
		∐ 
			∎ %[ "_tj" ]
		∐ 
			∎ %[ "_tjn" ]
		∐ 
			∎ %[ "_tjc" ]
		∐. 
			∎| 
	§ slv { tv i }  
		$ %[ 0r ] ⊢ lv 
		=+ i' 
		\\ mk_arr 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv yv }
			$ yv ⊢ yv,yv0,yv1
			∎ { tv TX.t_imp◂{ RP.cns2◂{ TX.r64◂{} %yv0 } RP.cns3◂{ TX.r64◂{} %yv TX.arr◂yv1 } } }
		\\ exc_q 
		∐		
			T.newvar_q { tv lv } ⊢ { tv lv yv }
			$ yv ⊢ yv,yv0,yv1 
			T.newvar_q { tv lv } ⊢ { tv lv yt }
			$ TX.arr_q◂{ yv1 yt } ⊢ ya,ya0 
			∎ { tv TX.t_imp◂{ RP.cns3◂{ ya TX.r64◂{} yv0 } RP.cns3◂{ ya0 TX.r64◂{} yv } } }
		\\ set_q 
		∐ 			
			T.newvar_q { tv lv } ⊢ { tv lv yv }
			T.newvar_q { tv lv } ⊢ { tv lv yt }
			$ yv ⊢ yv,yv0 
			$ TX.arr_q◂{ yv yt } ⊢ ya,ya0 
			∎ { tv TX.t_imp◂{ RP.cns3◂{ ya TX.r64◂{} yv0 } RP.cns2◂{ ya0 TX.r64◂{} } } }
		∐ 		
			T.newvar_q { tv lv } ⊢ { tv lv yv }
			$ yv ⊢ yv,yv0 
			$ TX.arr◂yv ⊢ ya,ya0 
			∎ { tv TX.t_imp◂{ RP.rcd◂_cns◂{ ya0 _cns◂{ TX.r64◂{} _nil◂{} } } RP.rcd◂_cns◂{ ya _cns◂{ TX.r64◂{} _cns◂{ yv0 _nil◂{} } } } } }
		\\ lod_q 
		∐ 			
			T.newvar_q { tv lv } ⊢ { tv lv yv }
			T.newvar_q { tv lv } ⊢ { tv lv yt }
			$ yv ⊢ yv,yv0 
			$ TX.arr_q◂{ yv yt } ⊢ ya,ya0 
			∎ { tv TX.t_imp◂{ RP.cns2◂{ ya0 TX.r64◂{} } RP.cns3◂{ ya TX.r64◂{} yv0 } } }
		∐  		
			∎ { tv TX.lst◂TX.s8◂{} }  
		∐ 		
			∎ { tv TX.t_imp◂{ TX.r64◂{} RP.cns2◂{ TX.r64◂{} TX.s8◂{} } } } 
		∐	
			∎  { tv TX.t_imp◂{ TX.s8◂{} RP.cns2◂{ TX.s8◂{} TX.r64◂{} } } } 
		∐
			T.newvar_q { tv lv } ⊢ { tv lv yv }
			$ yv ⊢ yv,yv0 
			∎ { tv TX.t_imp◂{ yv yv0 } } 
		∐ 		
			∎ { tv TX.t_imp◂{ TX.r64◂{} TX.r64◂{} } } 
		∐ 		
			∎ { tv TX.t_imp◂{ TX.r64◂{} TX.r64◂{} } } 
		∐ 		
			∎ { tv TX.r64_op2◂{} } 
		∐ 		
			∎ { tv TX.r64_op2◂{} } 
		∐ 		
			∎ { tv TX.r64_op2◂{} } 
		∐  		
			∎ { tv TX.t_imp◂{ RP.cns3◂{ TX.s8◂{} TX.r64◂{} TX.r64◂{} } RP.cns3◂{ TX.s8◂{} TX.r64◂{} TX.r64◂{} } } } 
		∐ 
			∎ { tv TX.t_imp◂{ RP.cns2◂{ TX.s8◂{} TX.r64◂{} } RP.cns3◂{ TX.s8◂{} TX.r64◂{} TX.r64◂{} } } } 
		∐ 
			∎ { tv TX.t_imp◂{ RP.cns2◂{ TX.r64◂{} TX.r64◂{} } RP.cns3◂{ TX.r64◂{} TX.r64◂{} TX.r64◂{} } } } 
		∐ 
			$ RP.cns5◂{ TX.r64◂{} TX.s8◂{} TX.r64◂{} TX.s8◂{} TX.r64◂{} } ⊢ y_s
			$ y_s ⊢ y_s,y_d 
			∎ { tv TX.t_imp◂{ %y_s %y_d } } 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv y0 }
			∎ { tv TX.t_imp◂{ RP.rcd◂_nil◂{} TX.lst◂y0 } } 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv y0 }
			$ y0 ⊢ y0,y1 
			$ TX.lst◂y0 ⊢ y0,y2 
			∎ { tv TX.t_imp◂{ RP.cns2◂{ y1 y0 } %y2 } } 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv y0 }
			$ y0 ⊢ y0,y1 
			∎ { tv TX.t_imp◂{ y0 TX.opn◂y1 } } 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv y0 }
			∎ { tv TX.t_imp◂{ RP.rcd◂_nil◂{} %y0 } } 
		∐ 
			∎ { tv TX.t_imp◂{ TX.s8◂{} RP.cns2◂{ TX.s8◂{} TX.s8◂{} } } } 
		∐ 
			∎ { tv TX.t_imp◂{ RP.cns2◂{ TX.s8◂{} TX.s8◂{} } RP.cns2◂{ TX.s8◂{} TX.s8◂{} } } } 
		∐ 
			∎ { tv TX.t_imp◂{ TX.s8◂{} TX.s8◂{} } } 
		∐ 
			∎ { tv TX.grm◂TX.r64◂{} } 
		∐ 
			∎ { tv TX.grm◂TX.r64◂{} } 
		∐ 
			∎ { tv TX.grm◂TX.r64◂{} } 
		∐ 
			∎ { tv TX.grm◂TX.r64◂{} } 
		∐ 
			∎ { tv TX.grm◂TX.r64◂{} } 
		∐ 
			∎ { tv TX.grm◂TX.r64◂{} } 
		\\ arr_len 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv yv }
			T.newvar_q { tv lv } ⊢ { tv lv yt }
			$ TX.arr_q◂{ yv yt } ⊢ ya,ya0 
			∎ { tv TX.t_imp◂{ ya RP.cns2◂{ ya0 TX.r64◂{} } } } 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv yv }
			$ yv ⊢ yv,yv0 				
			∎ { tv TX.t_imp◂{ TX.lst◂yv TX.arr◂yv0 } } 
		∐ 
			∎ { tv TX.grm◂TX.r64◂{} } 
		∐ 
			∎ { tv TX.grm◂TX.r64◂{} } 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv yv }
			∎ { tv TX.t_imp◂{ yv RP.unt◂{} } } 
		∐ 
			∎ { tv TX.t_imp◂{ RP.unt◂{} RP.unt◂{} } } 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv yv }
			$ yv ⊢ yv,yv0,yv1 
			∎ { tv TX.t_imp◂{ yv RP.cns2◂{ yv0 yv1 } } } 
		∐ 
			∎ { tv TX.t_imp◂{ RP.unt◂{} TX.r64◂{} } } 
		∐ 
			∎ { tv TX.r64_op2◂{} } 
		∐ 
			∎ { tv TX.r64_op2◂{} } 
		\\ app 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv yx }
			$ yx ⊢ yx,yx0 	
			T.newvar_q { tv lv } ⊢ { tv lv yy }
			$ yy ⊢ yy,yy0
			∎ { tv TX.t_imp◂{ RP.cns2◂{ TX.t_imp◂{ yx yy } yx0 } yy0 } } 
		\\ and 
		∐ 
			∎ { tv TX.r64_op2◂{} } 
		\\ or 
		∐ 
			∎ { tv TX.r64_op2◂{} } 
		\\ prs
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv yv } 
			$ yv ⊢ yv,yv0 
			∎ { tv RP.atm◂T.ct_imp◂{ TX.grm◂yv TX.prs_opn◂yv0 } } 
		∐ 
			\\∎| 
			∎ { tv TX.grm◂TX.r64◂{} } 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv yv }
			$ yv ⊢ yv,yv0 
			∎ { tv TX.t_imp◂{ yv yv0 } } 
		\\ c_call 
		∐ 
			∎ { tv TX.grm◂TX.r64◂{} } 
		∐ 
			∎ { tv TX.r64_op2◂{} } 
		∐ 
			∎ { tv TX.t_imp◂{ RP.cns2◂{ TX.s8◂{} TX.r64◂{} } RP.cns3◂{ TX.s8◂{} TX.r64◂{} TX.r64◂{} } } } 
		\\ s8_hsh 
		∐ 
			∎ { tv TX.t_imp◂{ TX.s8◂{} RP.cns2◂{ TX.s8◂{} TX.r64◂{} } } } 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv yv }
			∎ { tv TX.t_imp◂{ yv RP.unt◂{} } } 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv yv }
			$ yv ⊢ yv,yv0 
			∎ { tv RP.atm◂T.ct_imp◂{ yv TX.t_imp◂{ RP.unt◂{} yv0 } } } 
		∐ 
			∎ { tv RP.atm◂T.ct_imp◂{ TX.s8◂{} TX.grm◂RP.unt◂{} } } 
		∐ 
			∎ { tv TX.grm◂RP.unt◂{} } 
		∐ 
			∎ { tv TX.grm◂RP.unt◂{} } 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv yv }
			$ yv ⊢ yv,yv0 
			∎ { tv RP.atm◂T.ct_imp◂{ TX.prs_opn◂yv0 TX.grm◂yv } }  
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv yv }
			T.newvar_q { tv lv } ⊢ { tv lv yw }
			$ yv ⊢ yv,yv0 
			$ yw ⊢ yw,yw0 
			∎ { tv TX.t_ct_imp◂{ TX.t_ct_imp◂{ yw TX.prs_opn◂yv0 } TX.t_ct_imp◂{ yw0 TX.grm◂yv } } }  
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv yv }
			T.newvar_q { tv lv } ⊢ { tv lv yw }
			T.newvar_q { tv lv } ⊢ { tv lv yx }
			T.newvar_q { tv lv } ⊢ { tv lv yy }
			$ yv ⊢ yv,yv0 
			$ yw ⊢ yw,yw0 
			$ yx ⊢ yx,yx0 
			∎ { tv TX.t_ct_imp3◂{ TX.t_ct_imp◂{ yv yw } TX.t_ct_imp◂{ yx yv0 } yx0 yw0 } }  
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv yv }
			T.newvar_q { tv lv } ⊢ { tv lv yw }
			$ yv ⊢ yv,yv0 
			$ yw ⊢ yw,yw0 
			∎ { tv TX.t_ct_imp◂{ TX.t_imp◂{ yv yw } TX.t_imp◂{ yv0 yw0 } } }  
		∐	
			T.newvar_q { tv lv } ⊢ { tv lv yv }
			T.newvar_q { tv lv } ⊢ { tv lv yw }
			$ yv ⊢ yv,yv0,yv1 
			$ yw ⊢ yw,yw0,yw1 
			∎ { tv TX.t_ct_imp◂{ RP.cns2◂{ TX.arr◂TX.t_imp◂{ yv yw } TX.t_imp◂{ yv1 yw1 } } TX.t_imp◂{ RP.cns2◂{ TX.r64◂{} yv0 } yw0 } } }  
		\\ ala 
		∐	
			T.newvar_q { tv lv } ⊢ { tv lv yv }
			T.newvar_q { tv lv } ⊢ { tv lv yk }
			T.newvar_q { tv lv } ⊢ { tv lv yw }
			$ yv ⊢ yv,yv0 
			$ yw ⊢ yw,yw0
			$ yk ⊢ yk,yk0,yk1,yk2
			∎ { tv TX.t_ct_imp◂{ TX.t_imp◂{ RP.cns3◂{ yv TX.r64◂{} yk } RP.cns2◂{ yw yk0 } } TX.t_imp◂{ RP.cns3◂{ yv0 TX.r64◂{} TX.arr◂yk1 } RP.cns2◂{ yw0 TX.arr◂yk2 } } } }  
		\\ cli 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv yk }
			∎ { tv TX.t_imp◂{ RP.unt◂{} TX.Clr◂yk } }  
		\\ clp 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv yk }
			$ yk ⊢ yk,yk0,yk1,yk2
			∎ { tv TX.t_imp◂{ RP.cns2◂{ TX.Clr◂yk yk0 } RP.cns2◂{ TX.Clr◂yk1 TX.pt◂yk2 } } }
		\\ cla 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv yv }
			T.newvar_q { tv lv } ⊢ { tv lv yk }
			T.newvar_q { tv lv } ⊢ { tv lv yw }
			$ yv ⊢ yv,yv0 
			$ yw ⊢ yw,yw0
			$ yk ⊢ yk,yk0,yk1,yk2,yk3,yk4,yk5
			∎ { tv TX.t_ct_imp◂{ TX.t_imp◂{ RP.cns2◂{ yv yk } RP.cns2◂{ yw yk0 } } TX.t_imp◂{ RP.cns3◂{ yv0 TX.pt◂yk4 TX.Clr◂yk1 } RP.cns3◂{ yw0 TX.pt◂yk5 TX.Clr◂yk2 } } } }  	
		\\ cln 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv yk }
			$ yk ⊢ yk,yk1,yk2
			∎ { tv TX.t_imp◂{ TX.Clr◂yk RP.cns2◂{ TX.Clr◂yk1 TX.pt◂yk2 } } }
		\\ cls 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv yk }
			$ yk ⊢ yk,yk0,yk1,yk2,yk3
			∎ { tv TX.t_imp◂{ RP.cns3◂{ TX.Clr◂yk TX.pt◂yk3 yk0 } RP.cns2◂{ TX.Clr◂yk1 TX.pt◂yk2 } } }
		\\ cmp_s8
		∐ 
			∎ { tv TX.t_imp◂{ RP.cns2◂{ TX.s8◂{} TX.s8◂{} } RP.cns3◂{ TX.s8◂{} TX.s8◂{} TX.r64◂{} } } }
		\\ cld 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv yk }
			$ yk ⊢ yk,yk1,yk2
			∎ { tv TX.t_imp◂{ RP.cns2◂{ TX.Clr◂yk1 TX.pt◂yk2 } TX.Clr◂yk  } }		  
		\\ pf 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv yk }
			$ yk ⊢ yk,yk1,yk2
			∎ { tv TX.t_ct_imp◂{ TX.pf◂yk TX.t_imp◂{ yk1 RP.cns2◂{ yk2 TX.s8◂{} } } } }			
		\\ pf_x 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv yk }
			$ yk ⊢ yk,yk1,yk2
			∎ { tv TX.t_ct_imp◂{ TX.pf◂yk TX.t_imp◂{ RP.cns3◂{ TX.s8◂{} TX.r64◂{} yk1 } RP.cns3◂{ TX.s8◂{} TX.r64◂{} yk2 } } } }			
		\\ clc_i 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv yk }
			$ yk ⊢ yk,yk1,yk2,yk3
			∎ { tv TX.t_imp◂{ RP.cns2◂{ TX.Clr_lc◂yk1 yk2 } RP.cns2◂{ TX.Clr◂yk TX.pt◂yk3 } } }
		\\ clc_o 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv yk }
			$ yk ⊢ yk,yk1,yk2,yk3
			∎ { tv TX.t_imp◂{ RP.cns2◂{ TX.Clr◂yk TX.pt◂yk3 } RP.cns2◂{ TX.Clr_lc◂yk1 yk2 } } }		  		  
		\\ clc_d 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv yk }
			$ yk ⊢ yk,yk1,yk2,yk3
			∎ { tv TX.t_imp◂{ TX.Clr_lc◂yk TX.Clr◂yk1 } }		  		  
		\\ seq 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv y0 }
			T.newvar_q { tv lv } ⊢ { tv lv y1 }
			T.newvar_q { tv lv } ⊢ { tv lv y2 }
			$ y0 ⊢ y0,y0t 
			$ y1 ⊢ y1,y1t 
			$ y2 ⊢ y2,y2t 
			∎ { tv TX.t_ct_imp◂{ RP.cns2◂{ TX.t_imp◂{ y0t y1 } TX.t_imp◂{ y1t y2t } } TX.t_imp◂{ y0 y2 } } } 
		\\ alc_i 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv yk }
			T.newvar_q { tv lv } ⊢ { tv lv yt }
			$ yt ⊢ yt,yt0 
			$ yk ⊢ yk,yk1,yk2,yk3
			∎ { tv TX.t_imp◂{ RP.cns2◂{ TX.arr_lc_q◂{ yk1 yt } yk2 } RP.cns2◂{ TX.arr_q◂{ yk yt0 } TX.r64◂{} } } }
		\\ alc_o 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv yk }
			T.newvar_q { tv lv } ⊢ { tv lv yt }
			$ yt ⊢ yt,yt0 
			$ yk ⊢ yk,yk1,yk2,yk3
			∎ { tv TX.t_imp◂{ RP.cns2◂{ TX.arr_q◂{ yk yt } TX.r64◂{} } RP.cns2◂{ TX.arr_lc_q◂{ yk1 yt0 } yk2 } } }		  		  
		\\ rsz 
    ∐ 
      ∎ { tv TX.t_imp◂{ RP.cns2◂{ TX.s8◂{} TX.r64◂{} } RP.cns2◂{ TX.s8◂{} TX.r64◂{} } } } 
    \\ mk_arr_x 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv yv }
			$ yv ⊢ yv,yv0,yv1
			∎ { tv TX.t_imp◂{ RP.cns2◂{ TX.r64◂{} %yv0 } RP.cns3◂{ TX.r64◂{} %yv TX.arr_x◂yv1 } } }
		\\ push 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv yv }
			$ yv ⊢ yv,yv0
			$ TX.arr_x◂yv0 ⊢ a0,a1
			∎ { tv TX.t_imp◂{ RP.cns2◂{ yv a0 } a1 } }
		\\ pop 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv yv }
			$ yv ⊢ yv,yv0
			$ TX.arr_x◂yv0 ⊢ a0,a1
			∎ { tv TX.t_imp◂{ a0 RP.cns2◂{ yv a1 } } }
		\\ id_par 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv y0 }
			T.newvar_q { tv lv } ⊢ { tv lv y1 }
			T.newvar_q { tv lv } ⊢ { tv lv y2 }
			$ y0 ⊢ y0,y0t 
			$ y1 ⊢ y1,y1t 
			$ y2 ⊢ y2,y2t 
			∎ { tv TX.t_ct_imp◂{ TX.t_imp◂{ y0 y1 } TX.t_imp◂{ RP.cns2◂{ y2 y0t } RP.cns2◂{ y2t y1t } } } } 		
		\\ ctr 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv y0 }
			T.newvar_q { tv lv } ⊢ { tv lv y1 }
			$ y0 ⊢ y0,y0t 
			$ y1 ⊢ y1,y1t 
			∎ { tv TX.t_ct_imp◂{ TX.t_ctr◂{ y0 y1 } TX.t_imp◂{ y0t y1t } } } 		
		\\ oom 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv y0 }
			T.newvar_q { tv lv } ⊢ { tv lv y1 }
			$ y0 ⊢ y0,y0t 
			$ y1 ⊢ y1,y1t 
			∎ { tv TX.t_ct_imp◂{ TX.t_mtc◂{ y0 y1 } TX.t_imp◂{ y0t y1t } } }
		\\ moo 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv y0 }
			T.newvar_q { tv lv } ⊢ { tv lv y1 }
			$ y0 ⊢ y0,y0t 
			$ y1 ⊢ y1,y1t 
			∎ { tv TX.t_ct_imp◂{ TX.t_imp◂{ y0t y1t } TX.t_mtc◂{ y0 y1 } } }
		\\ mcp 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv y0 }
			T.newvar_q { tv lv } ⊢ { tv lv y1 }
			T.newvar_q { tv lv } ⊢ { tv lv y2 }
			$ y0 ⊢ y0,y0t,y0s 
			$ y1 ⊢ y1,y1t 
			$ y2 ⊢ y2,y2t,y2s
			∎ { tv TX.t_ct_imp◂{ RP.cns3◂{ TX.t_mop◂{ y0 y1 } TX.t_mtc◂{ y1t y2 } TX.t_mtc◂{ y0t y2t } } TX.t_mtc◂{ y0s y2s } } }
		\\ mcn 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv y0 }
			T.newvar_q { tv lv } ⊢ { tv lv y1 }
			∎ { tv TX.t_ct_imp◂{ RP.unt◂{} TX.t_mtc◂{ y0 y1 } } }		 			
		\\ mop 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv y0 }
			T.newvar_q { tv lv } ⊢ { tv lv y1 }
			$ y0 ⊢ y0,y0t,y0s 
			$ y1 ⊢ y1,y1t 
			∎ { tv TX.t_ct_imp◂{ TX.t_ctr◂{ y1 y0 } TX.t_mop◂{ y0t y1t } } } 
		\\ mt_e 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv y0 }
			T.newvar_q { tv lv } ⊢ { tv lv y1 }
			T.newvar_q { tv lv } ⊢ { tv lv y2 }
			$ y0 ⊢ y0,y0t,y0s 
			$ y1 ⊢ y1,y1t 
			∎ { tv TX.t_ct_imp◂{ TX.t_ctr◂{ y0 RP.cns2◂{ RP.cns2◂{ y1 y1t } y2 } } TX.t_mop◂{ y0t y0s } } } 
		\\ mt_ne 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv y0 }
			T.newvar_q { tv lv } ⊢ { tv lv y1 }
			T.newvar_q { tv lv } ⊢ { tv lv y2 }
			$ y0 ⊢ y0,y0t,y0s 
			$ y1 ⊢ y1,y1t 
			∎ { tv TX.t_ct_imp◂{ TX.t_ctr◂{ y0 RP.cns2◂{ RP.cns2◂{ y1 y1t } y2 } } TX.t_mop◂{ y0t y0s } } } 
		\\ mt_le 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv y0 }
			T.newvar_q { tv lv } ⊢ { tv lv y1 }
			T.newvar_q { tv lv } ⊢ { tv lv y2 }
			$ y0 ⊢ y0,y0t,y0s 
			$ y1 ⊢ y1,y1t 
			∎ { tv TX.t_ct_imp◂{ TX.t_ctr◂{ y0 RP.cns2◂{ RP.cns2◂{ y1 y1t } y2 } } TX.t_mop◂{ y0t y0s } } } 
		\\ exn 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv y0 }
			T.newvar_q { tv lv } ⊢ { tv lv yx }
			∎ { tv TX.t_ct_imp◂{ yx TX.t_imp◂{ RP.unt◂{} y0 } } }			
		\\ tj 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv ya }
			T.newvar_q { tv lv } ⊢ { tv lv yb }
			T.newvar_q { tv lv } ⊢ { tv lv yc }
			T.newvar_q { tv lv } ⊢ { tv lv yv }
			$ ya ⊢ ya,ya0,ya1 
			$ yc ⊢ yc,yc0 
			∎ { tv TX.t_ct_imp◂{ RP.cns2◂{ TX.t_ctr◂{ ya RP.cns2◂{ yv yb } } TX.t_tj◂{ ya0 yc } } TX.t_mtc◂{ ya1 yc0 } } }
		\\ tjn 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv y0 }
			T.newvar_q { tv lv } ⊢ { tv lv y1 }
			∎ { tv TX.t_ct_imp◂{ RP.unt◂{} TX.t_tj◂{ y0 y1 } } } 
		\\ tjc 
		∐ 
			T.newvar_q { tv lv } ⊢ { tv lv ya }
			T.newvar_q { tv lv } ⊢ { tv lv yb }
			$ ya ⊢ ya,ya0,ya1 
			$ yb ⊢ yb,yb0,yb1 
			∎ { tv TX.t_ct_imp◂{ RP.cns2◂{ TX.t_mtc◂{ ya yb } TX.t_tj◂{ ya0 yb0 } } TX.t_tj◂{ ya1 yb1 } } } 
		∐. 
			∎| 
							\[
						∐ n'=e_axm.mk_arr0 .
							T.newvar_q { tv lv } ⊢ { tv lv yv }
							∎ { tv %[ "_mk_arr0" ] TX.t_imp◂{ RP.cns2◂{ TX.r64◂{} TX.r64◂{} } RP.cns3◂{ TX.r64◂{} TX.r64◂{} TX.arr0◂yv } } }
						∐ n'=e_axm.set_q0 .
							T.newvar_q { tv lv } ⊢ { tv lv yv }
							$ yv ⊢ yv,yv0 
							$ TX.arr0◂yv ⊢ ya,ya0 
							∎ { tv %[ "_set_q0" ] TX.t_imp◂{ RP.cns3◂{ ya TX.r64◂{} yv0 } RP.cns2◂{ ya0 TX.r64◂{} } } }										
						∐ n'=e_axm.of_arr0 . 
							T.newvar_q { tv lv } ⊢ { tv lv yv }
							$ yv ⊢ yv,yv0 
					g		∎ { tv %[ "_of_arr0" ] TX.t_imp◂{ TX.arr0◂yv TX.arr◂yv0 } }				
						∐. . 
							_emt n ⊢ _ 
							_emt %[ "slv_op_axm 0" ] ⊢ _ 
							∎|
						\]
			∎∎
		§§ EX = e_axm 
		§ 
		@.exc_tpl { vv t p } 
			$ t ⊢ 
			∐ RP.rcd◂l0 . 
				∐ p ⊢ RP.rcd◂l1 . 
					exc_tpl_lst { vv l0 l1 } ⊢|
				∐. . 
					_emt %[ "exc_tpl 0" ] ⊢ _ 
					∎|  
			∐. RP.atm◂i0 . 
				set_tv { vv i0 p } ⊢ { vv i0 } 
				∎ vv
			@.exc_tpl_lst { vv l0 l1 } 
				∐ l0 ⊢ _cns◂{ t l0 }; l1 ⊢ _cns◂{ p l1 } . 
					exc_tpl { vv t p } ⊢ vv
					exc_tpl_lst { vv l0 l1 } ⊢|
				∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
					∎ vv
				∐. . 
					∎| 
		
		
		§§ ip
		§ @.id_line_i { { m0 lc } ml }
			$ ml ⊢ 
			∐ _cns◂{ m1 ml } . 
				id_line_i { { m0 lc } ml } ⊢ lc 
				∎ ast.seq◂{ ast.op_call◂{ RP.atm◂ast.k_name◂ast.fst_n◂%[ "_rpc" ] RP.atm◂ast.re_reg◂%[ ".r0" ] RP.cns2◂{ RP.atm◂ast.re_reg◂%[ ".r0" ] m1 } } lc }
			∐. _nil◂{} . 
				∎ ast.seq◂{ ast.op_call◂{ RP.atm◂ast.k_name◂ast.fst_n◂%[ "_id" ] RP.atm◂ast.re_reg◂%[ ".r0" ] m0 } lc }
		§ id_line { sp ml lc } 
			$ ml ⊢ 
			∐ _cns◂{ m0 ml } . 
				∐ ml ⊢ _nil◂{} . 
					∎ ast.seq◂{ ast.op_call◂{ RP.atm◂ast.k_name◂ast.fst_n◂%[ "_id" ] sp m0 } lc }
				∐. . 
					id_line_i { { m0 lc } ml } ⊢ lc 
					∎ ast.seq◂{ ast.op_call◂{ RP.atm◂ast.k_name◂ast.fst_n◂%[ "_id" ] sp RP.atm◂ast.re_reg◂%[ ".r0" ] } lc }
			∐. _nil◂{} . 
				_emt %[ "ip.id_line 0" ] ⊢ _ 
				∎| 
		§§ grm 
			§ seq = ast.seq 
			§ reg◂n = RP.atm◂ast.re_reg◂n 
			§ reg_d◂n = RP.atm◂n 
			§ name◂n = RP.atm◂ast.k_name◂n 
			§ f_name◂n = name◂ast.fst_n◂n 
			§ ret◂p = ast.jmp◂{ f_name◂%[ "_id" ] p }
			§ ct_app◂{ f x } = RP.atm◂ast.k_app◂{ f x }
			§ opc◂{ f x y } = ast.op_call◂{ f x y } 
			§ jmp◂{ f x } = ast.jmp◂{ f x }
			§ rb_r◂lc = ast.seq◂{ opc◂{ f_name◂%[ "_dlt" ] reg◂%[ ".n" ] RP.unt◂{} } ast.seq◂{ opc◂{ f_name◂%[ "_rpc" ] reg◂%[ ".r" ] RP.cns2◂{ reg◂%[ ".r" ] reg◂%[ ".n" ] } } lc } } 
			§ ini◂{} = RP.cns2◂{ reg◂%[ ".s" ] reg◂%[ ".r" ] }
			§ ini_n◂lc = ast.seq◂{ opc◂{ f_name◂%[ "_rpc" ] reg◂%[ ".r" ] RP.cns2◂{ reg◂%[ ".r" ] reg◂%[ ".n" ] } } lc }
			§ env◂{} = RP.cns3◂{ reg◂%[ ".s" ] reg◂%[ ".r" ] reg◂%[ ".n" ] }
			§ re_none◂{} = RP.atm◂ast.re_agl◂{ ast.fst_n◂%[ "_none" ] RP.unt◂{} } 
			§ re_some◂s = RP.atm◂ast.re_agl◂{ ast.fst_n◂%[ "_some" ] s }
			§ mtc_some◂{ o s } = ast.mtc_id◂{ o re_some◂s }
			§ mtc_none◂o = ast.mtc_id◂{ o re_none◂{} }
			§ mtc_opn # { o m lc0 lc1 } 
				$ o ⊢ o,o0 
				∎ ast.mtc◂ast.na_p◂{ mtc_some◂{ o m } lc0 ast.na_s◂{ mtc_none◂o0 lc1 } }
			§ op_prs◂g = opc◂{ ct_app◂{ f_name◂%[ "_prs" ] g } RP.cns2◂{ reg◂%[ ".s" ] reg◂%[ ".n" ] } RP.cns3◂{ reg◂%[ ".s" ] reg◂%[ ".n" ] reg◂%[ ".o" ] } }
			§ op_f◂f = opc◂{ f RP.cns2◂{ reg◂%[ ".s" ] reg◂%[ ".n" ] } RP.cns3◂{ reg◂%[ ".s" ] reg◂%[ ".n" ] reg◂%[ ".o" ] } } 
			§ ret_fail◂{} = ret◂RP.cns3◂{ reg◂%[ ".s" ] reg◂%[ ".r" ] re_none◂{} }
			§ ret_succ◂a = ret◂RP.cns3◂{ reg◂%[ ".s" ] reg◂%[ ".n" ] re_some◂a }
			§ mtc_lc◂lc = ast.na_e◂{ ⟦⟧ lc } 
			§ rN # n 
				^ n ⊢ n,s 
					".r" 0d' // 
				∎ { n s } 
			§ fN # n 
				^ n ⊢ n,s 
					".f" 0d' // 
				∎ { n s }
			§ reg_n # n 
				rN n ⊢ { n s } 
				∎ { n reg◂s } 
			§ f_n { n go } 
				fN n ⊢ { n s } 
				_inc n ⊢ n 
				$ go ⊢ 
				∐ _some◂p . 
					ast.of_tpl_ptn p ⊢ p 
					∎ { n RP.atm◂ast.k_app◂{ f_name◂s p } }
				∐. _none◂{} . 
					∎ { n f_name◂s }
			§ rf { f lc } 
				$ f ⊢ 
				∐ ast.grm.line◂{} .
					∎ { ast.grm.line◂{} ast.seq◂{ op_prs◂f_name◂%[ "_line" ] seq◂{ opc◂{ f_name◂%[ "_dlt" ] reg◂%[ ".o" ] RP.unt◂{} } lc } } }
				∐ ast.grm.synt◂{} . 
					∎ { ast.grm.synt◂{} ast.seq◂{ op_prs◂f_name◂%[ "_synt" ] seq◂{ opc◂{ f_name◂%[ "_dlt" ] reg◂%[ ".o" ] RP.unt◂{} } lc } } }
				∐. ast.grm.lex◂{} .
					∎ { ast.grm.lex◂{} lc }
			§ 
				@.rle { { n f_n el go g m lc f o op_f } r }
					$ r ⊢ 
					∐ ast.grm.ptn_cut◂r . 
						rle_cut { { n f_n el go g m lc f o } r } ⊢|
					∐ ast.grm.ptn_seq◂{ p r } .
						rN n ⊢ { n r0 } 
						$ r0 ⊢ r0,r0_0 
						_inc n ⊢ n 
						$ op_f ⊢ op_f,op_f0 
						rle { { n f_n el go ⟦ reg◂r0_0 < g ⟧ m lc f o op_f0 } r } ⊢ { { n f_n el go f } lcr }
						mtc_opn { reg_d◂%[ ".o" ] reg◂r0 mtc_lc◂lcr mtc_lc◂rb_r◂jmp◂{ op_f ini◂{} } } ⊢ op0
						$ ast.seq◂{ op_prs◂p op0 } ⊢ lcr 
						rf { f lcr } ⊢ { f lcr } 
						∎ { { n f_n el go f } lcr }
					∐. ast.grm.ptn_end◂{} . 
						rev g ⊢ g  
						$ o ⊢ 
						∐ _some◂{ d a } . 
							etr { f_n el go RP.cns3◂{ m d RP.cns2◂{ reg◂%[ "_r" ] reg◂%[ "_n" ] } } lc } ⊢ { f_n el go f0 } 
							$ opc◂{ f_name◂%[ "_rpc" ] reg◂%[ ".r" ] RP.cns2◂{ reg◂%[ ".r" ] reg◂%[ "_r" ] } } ⊢ op0 
							$ opc◂{ f_name◂%[ "_rpc" ] reg◂%[ ".n" ] RP.cns2◂{ reg◂%[ ".n" ] reg◂%[ "_n" ] } } ⊢ op1 
							$ opc◂{ f0 RP.cns3◂{ RP.rcd◂g reg◂%[ ".t" ] RP.cns2◂{ reg◂%[ "_r" ] reg◂%[ "_n" ] } } reg◂%[ ".o" ] } ⊢ op2
							$ op_f ⊢ op_f,op_f0 
							mtc_opn { reg_d◂%[ ".o" ] reg◂%[".a" ] mtc_lc◂ret_succ◂reg◂%[ ".a" ] mtc_lc◂rb_r◂jmp◂{ op_f0 ini◂{} } } ⊢ op3
							$ ast.seq◂{ op0 ast.seq◂{ op1 ast.seq◂{ op2 op3 } } } ⊢ lcr

							grm { { n f_n el go } a } ⊢ { { n f_n el go } f1 } 
							mtc_opn { reg_d◂%[ ".o" ] reg◂%[ ".t" ] mtc_lc◂lcr mtc_lc◂rb_r◂jmp◂{ op_f ini◂{} } } ⊢ op0
							$ ast.seq◂{ op_f◂f1 op0 } ⊢ lcr 
							∎ { { n f_n el go f } lcr }
						∐. _none◂{} . 
							etr { f_n el go RP.cns2◂{ m RP.cns2◂{ reg◂%[ "_r" ] reg◂%[ "_n" ] } } lc } ⊢ { f_n el go f0 } 
							$ opc◂{ f_name◂%[ "_rpc" ] reg◂%[ ".r" ] RP.cns2◂{ reg◂%[ ".r" ] reg◂%[ "_r" ] } } ⊢ op0 
							$ opc◂{ f_name◂%[ "_rpc" ] reg◂%[ ".n" ] RP.cns2◂{ reg◂%[ ".n" ] reg◂%[ "_n" ] } } ⊢ op1 
							$ opc◂{ f0 RP.cns2◂{ RP.rcd◂g RP.cns2◂{ reg◂%[ "_r" ] reg◂%[ "_n" ] } } reg◂%[ ".o" ] } ⊢ op2
							mtc_opn { reg_d◂%[ ".o" ] reg◂%[".a" ] mtc_lc◂ret_succ◂reg◂%[ ".a" ] mtc_lc◂rb_r◂jmp◂{ op_f ini◂{} } } ⊢ op3
							∎ { { n f_n el go f } ast.seq◂{ op0 ast.seq◂{ op1 ast.seq◂{ op2 op3 } } } }							
				
						
				@.rle_cut { { n f_n el go g m lc f o } r }
					$ r ⊢ 
					∐ _cns◂{ p r } . 
						rN n ⊢ { n r0 } 
						$ r0 ⊢ r0,r0_0 
						_inc n ⊢ n 
						rle_cut { { n f_n el go ⟦ reg◂r0_0 < g ⟧ m lc f o } r } ⊢ { { n f_n el go f } lcr }
						mtc_opn { reg_d◂%[ ".o" ] reg◂r0 mtc_lc◂lcr mtc_lc◂ret_fail◂{} } ⊢ op0
						$ ast.seq◂{ op_prs◂p op0 } ⊢ lcr 
						rf { f lcr } ⊢ { f lcr } 
						∎ { { n f_n el go f } lcr }
					∐. _nil◂{} . 
						rev g ⊢ g  
						$ o ⊢ 
						∐ _none◂{} . 
							etr { f_n el go RP.cns2◂{ m RP.cns2◂{ reg◂%[ "_r" ] reg◂%[ "_n" ] } } lc } ⊢ { f_n el go f0 } 
							$ opc◂{ f_name◂%[ "_rpc" ] reg◂%[ ".r" ] RP.cns2◂{ reg◂%[ ".r" ] reg◂%[ "_r" ] } } ⊢ op0 
							$ opc◂{ f_name◂%[ "_rpc" ] reg◂%[ ".n" ] RP.cns2◂{ reg◂%[ ".n" ] reg◂%[ "_n" ] } } ⊢ op1 
							$ opc◂{ f0 RP.cns2◂{ RP.rcd◂g RP.cns2◂{ reg◂%[ "_r" ] reg◂%[ "_n" ] } } reg◂%[ ".o" ] } ⊢ op2
							mtc_opn { reg_d◂%[ ".o" ] reg◂%[".a" ] mtc_lc◂ret_succ◂reg◂%[ ".a" ] mtc_lc◂ret_fail◂{} } ⊢ op3
							∎ { { n f_n el go f } ast.seq◂{ op0 ast.seq◂{ op1 ast.seq◂{ op2 op3 } } } }							
						∐. _some◂{ d a } . 
							etr { f_n el go RP.cns3◂{ m d RP.cns2◂{ reg◂%[ "_r" ] reg◂%[ "_n" ] } } lc } ⊢ { f_n el go f0 } 
							$ opc◂{ f_name◂%[ "_rpc" ] reg◂%[ ".r" ] RP.cns2◂{ reg◂%[ ".r" ] reg◂%[ "_r" ] } } ⊢ op0 
							$ opc◂{ f_name◂%[ "_rpc" ] reg◂%[ ".n" ] RP.cns2◂{ reg◂%[ ".n" ] reg◂%[ "_n" ] } } ⊢ op1 
							$ opc◂{ f0 RP.cns3◂{ RP.rcd◂g reg◂%[ ".t" ] RP.cns2◂{ reg◂%[ "_r" ] reg◂%[ "_n" ] } } reg◂%[ ".o" ] } ⊢ op2
							mtc_opn { reg_d◂%[ ".o" ] reg◂%[".a" ] mtc_lc◂ret_succ◂reg◂%[ ".a" ] mtc_lc◂ret_fail◂{} } ⊢ op3
							$ ast.seq◂{ op0 ast.seq◂{ op1 ast.seq◂{ op2 op3 } } } ⊢ lcr

							grm { { n f_n el go } a } ⊢ { { n f_n el go } f1 } 
							mtc_opn { reg_d◂%[ ".o" ] reg◂%[ ".t" ] mtc_lc◂lcr mtc_lc◂ret_fail◂{} } ⊢ op0
							$ ast.seq◂{ op_f◂f1 op0 } ⊢ lcr 
							∎ { { n f_n el go f } lcr }
				@.etr { f_n el go dp lc } 
					fN f_n ⊢ { f_n s } 
					$ go ⊢ go,go0 
					f_n { f_n go0 } ⊢ { f_n e }
					$ go ⊢ go,go0
					∎ { f_n ⟦ { s ast.lc_def◂{ go0 dp ‹› bl.f◂{} lc } } < el ⟧ go e }
					
			
				@.grm { { n f_n el go } a }
					$ a ⊢ 
					∐ ast.grm.act_cns◂{ _ m lc f r o a } . 
						grm { { n f_n el go } a } ⊢ { { n f_n el go } f0 } 
						rle { { n f_n el go ⟦⟧ m lc f o f0 } r } ⊢ { { n f_n el go f } lcr }
						etr { f_n el go ini◂{} ini_n◂lcr } ⊢ { f_n el go f1 }  
						∎ { { n f_n el go } f1 }
					∐. ast.grm.act_end◂{ _ m lc f r o } . 
						etr { f_n el go ini◂{} ret_fail◂{} } ⊢ { f_n el go f0 }
						rle { { n f_n el go ⟦⟧ m lc f o f0 } r } ⊢ { { n f_n el go f } lcr }
						etr { f_n el go ini◂{} ini_n◂lcr } ⊢ { f_n el go f1 }  
						∎ { { n f_n el go } f1 }
			§ f { n f_n w go a } 
				grm { { n f_n ⟦⟧ go } a } ⊢ { { n f_n el _ } f0 } 
				∐ f0 ⊢ RP.atm◂ast.k_app◂{ f0 p } . 
					∎ { n f_n ⟦ { w ast.lc_ln◂ast.k_app◂{ RP.atm◂ast.k_app◂{ f_name◂%[ "_ftr" ] f_name◂%[ ".grm" ] } f0 } } < el ⟧ }					
				∐. . 
					∎ { n f_n ⟦ { w ast.lc_ln◂ast.k_app◂{ f_name◂%[ ".grm" ] f0 } } < el ⟧  }
			§ @.f_clq { n f_n q }
				$ q ⊢ 
				∐ _cns◂{ { w e } q } . 
					∐ e ⊢ ast.lc_grm◂{ o g } . 
						f { n f_n w o g } ⊢ { n f_n el } 
						f_clq { n f_n q } ⊢ { n f_n q } 
						rev_apnd { el q } ⊢ q 
						∎ { n f_n q } 
					∐. . 
						f_clq { n f_n q } ⊢ { n f_n q } 
						∎ { n f_n ⟦ { w e } < q ⟧ }
				∐. _nil◂{} . 
					∎ { n f_n ⟦⟧ } 
			∎∎
	
		§§ inl 
			§ 
				@.name { { evv vv n0 } c } 
					∐ c ⊢ ast.k_name◂i . 
						EVV.lod_evv { evv i } ⊢ { evv i c } 
						name { { evv vv n0 } c } ⊢|
					∐ c ⊢ ast.k_var◂{ i v } . 
						∐ i'=CST.not_0 . 
							∎ { { evv vv } RP.atm◂ast.k_name◂n0 }
						∐. . 
							lod_tv { vv i } ⊢ { vv i c }
							∎ { { evv vv } c }
					∐. . 
						cst { { evv vv } c } ⊢| 
				@.cst { { evv vv } c }
					∐ c ⊢ ast.k_name◂i . 
						EVV.lod_evv { evv i } ⊢ { evv i c } 
						name { { evv vv i } c } ⊢| 
						\\cst { { evv vv } c } ⊢|
					∐ c ⊢ ast.k_var◂{ i v } . 
						∐ i'=CST.not_0 . 
							∎ { { evv vv } RP.atm◂ast.k_var◂{ i v } }
						∐. . 
							lod_tv { vv i } ⊢ { vv i c }
							∎ { { evv vv } c } 
					∐ c ⊢ ast.k_app◂{ c0 c1 } . 
						ct_ptn { { evv vv } c0 } ⊢ { { evv vv } c0 } 
						ct_ptn { { evv vv } c1 } ⊢ { { evv vv } c1 } 
						∎ { { evv vv } RP.atm◂ast.k_app◂{ c0 c1 } }
					\[
					∐ c ⊢ ast.k_agl◂{ c p } . 
						cst { { evv vv } c } ⊢ { { evv vv } c } 
						ct_ptn { { evv vv } p } ⊢ { { evv vv } p }
						∎ { { evv vv } ast.k_agl◂{ c p } }
					\]
					∐ c ⊢ ast.k_op_axm◂{ x xl } . 
						lst.map_l◂◂ct_ptn { { evv vv } xl } ⊢ { { evv vv } xl }
						∎ { { evv vv } RP.atm◂ast.k_op_axm◂{ x xl } }
					∐ c ⊢ ast.k_pf◂pf . 
						lst.map_l◂◂exp_s8 { { evv vv } pf } ⊢ { { evv vv } pf }
						∎ { { evv vv } RP.atm◂ast.k_pf◂pf }
					∐ c ⊢ ast.k_ply◂{ x y } . 
						src_ptn { { evv vv } y } ⊢ { { evv vv } y } 
						∎ { { evv vv } RP.atm◂ast.k_ply◂{ x y } }
					∐. . 
						∎ { { evv vv } RP.atm◂c }
				@.ct_ptn = RP.map_l_atm◂◂cst
				@.exp_s8 { { evv vv } e } 
				∐ e ⊢ ast.exp_s8_cst◂c . 
					cst { { evv vv } c } ⊢ { { evv vv } c } 
					RP.atm_a c ⊢ c 
					∎ { { evv vv } ast.exp_s8_cst◂c }
				∐ e ⊢ ast.exp_s8_for◂{ i c } . 
					cst { { evv vv } c } ⊢ { { evv vv } c } 
					RP.atm_a c ⊢ c 
					∎ { { evv vv } ast.exp_s8_for◂{ i c } }
				∐. . 
					∎ { { evv vv } e } 
				@.src { { evv vv } s } 
					$ s ⊢ 
					∐ ast.re_agl◂{ e p } . 
						src_ptn { { evv vv } p } ⊢ { { evv vv } p }
						∎ { { evv vv } ast.re_agl◂{ e p } }
					∐ ast.re_reg◂r . 
						∎ { { evv vv } ast.re_reg◂r }
					∐. ast.re_v◂c . 
						cst { { evv vv } c } ⊢ { { evv vv } c }
						RP.atm_a c ⊢ c 
						∎ { { evv vv } ast.re_v◂c }
				@.src_ptn = RP.map_l◂◂src 
			§	@.mtc_atm # { { evv vv } s } 
					∎ { { evv vv } s }
				@.mtc_ptn = RP.map_l◂◂mtc_atm
			§	@.tpl_atm # s 
					∎ s 
				@.tpl_ptn = RP.map_l◂◂mtc_atm
			
			§ test_var { { evv vv } t } 
				∐ t ⊢ ast.test_cst◂c . 
					cst { { evv vv } c } ⊢ { { evv vv } c } 
					RP.atm_a c ⊢ c 
					∎ { { evv vv } ast.test_cst◂c } 
				∐. . 
					∎ { { evv vv } t }
			§ mtc_op { { evv vv } m } 
				$ m ⊢ 
				∐ ast.mtc_id◂{ s m } . 
					\\mtc_ptn { { evv vv } m } ⊢ { { evv vv } m } 
					∎ { { evv vv } ast.mtc_id◂{ s m } }
				∐. ast.mtc_test◂{ tt v0 v1 } . 
					test_var { { evv vv } v0 } ⊢ { { evv vv } v0 } 
					test_var { { evv vv } v1 } ⊢ { { evv vv } v1 } 
					∎ { { evv vv } ast.mtc_test◂{ tt v0 v1 } }
		§ 
			@.evl_ct_ptn = RP.map_l◂◂evl_ct 
			@.evl_ct_ptn_lst = lst.map_l◂◂evl_ct_ptn 
			@.evl_name { { V evv n } c } 
				∐ c ⊢ ast.k_name◂i . 
					EVV.lod_evv { evv i } ⊢ { evv i c } 
					evl_name { { V evv n } c } ⊢|
				∐ c ⊢ ast.k_var◂{ i v } . 
					∐ i'=CST.not_0 . 
						∎ { { V evv } ast.k_name◂n }
					∐. . 
						∎|
				∐. . 
					evl_ct { { V evv } c } ⊢| 
			@.evl_ct { { V evv } c } 
				∐ c ⊢ ast.k_name◂i . 
					EVV.lod_evv { evv i } ⊢ { evv i k } 
					evl_name { { V evv i } k } ⊢|
				∐ c ⊢ ast.k_op_axm◂{ a la } . 
					∐ a'=EX.ftr; la ⊢ _cns◂{ k1 la }; la ⊢ _cns◂{ k2 la }; la ⊢ _cns◂{ k3 la }; la ⊢ _nil◂{} . 
						$ ast.k_app◂{ k3 RP.atm◂ast.k_app◂{ k2 k1 } } ⊢ k0
						evl_ct { { V evv } k0 } ⊢|
					∐. . 
						∎ { { V evv } ast.k_op_axm◂{ a la } }												 
				∐ c ⊢ ast.k_arr◂v . 
					 ∎ { { V evv } ast.k_arr◂v }
				∐ c ⊢ ast.k_app◂{ c0 c1 } .
					evl_ct_ptn { { V evv } c0 } ⊢ { { V evv } c0 } 
					evl_ct_ptn { { V evv } c1 } ⊢ { { V evv } c1 }
					∐ c0 ⊢ RP.atm◂c0; c0 ⊢ ast.k_op_gnr◂{ { c_n pg } o_n dp r_ng ibg lcg v } . 
						ini_tv_n c_n ⊢ { c_n vv } 
						$ pg ⊢ pg,pg0 
						$ c1 ⊢ c1,c10 
						exc_tpl { vv pg0 c10 } ⊢ vv
						r { { V evv vv } lcg } ⊢ { { V evv _ } lcg } 
						∎ { { V evv } ast.k_op◂{ ‹ { { c_n pg } c1 } › o_n dp r_ng ibg lcg v } }
					∐ c0 ⊢ RP.atm◂c0; c0 ⊢ ast.k_op_axm◂{ ax axl } . 
						evl_ct { { V evv } ast.k_op_axm◂{ ax ⟦ c1 < axl ⟧ } } ⊢|
					∐. . 
						∎| 
				∐. . 
					∎ { { V evv } c } 
				\[
				@.gnr_inl { V evv og lc }
					$ og ⊢ 
					∐ _some◂{ { c_n pg } c1 } . 
						ini_tv_n c_n ⊢ { c_n vv } 
						exc_tpl { vv pg c1 } ⊢ vv
						r { { V evv vv } lc } ⊢ { { V evv _ } lc } 
						∎ { V evv lc } 
					∐. _none◂{} . 
						∎ { V evv lc }
						\\∎|
				\]
				@.r { { V evv vv } lc } 
					$ lc ⊢ 
					∐ ast.jmp◂{ cp sp } . 
						ct_ptn { { evv vv } cp } ⊢ { { evv vv } cp } 
						src_ptn { { evv vv } sp } ⊢ { { evv vv } sp }
						\\evl_ct_ptn { { V evv } cp } ⊢ { { V evv } cp } 
						∎ { { V evv vv } ast.jmp◂{ cp sp } } 
					∐ ast.seq◂{ { o s d } lc } . 
						r { { V evv vv } lc } ⊢ { { V evv vv } lc }
						ct_ptn { { evv vv } o } ⊢ { { evv vv } o } 
						src_ptn { { evv vv } s } ⊢ { { evv vv } s } 
						mtc_ptn { { evv vv } d } ⊢ { { evv vv } d } 
						\\evl_ct_ptn { { V evv } o } ⊢ { { V evv } o } 
						∎ { { V evv vv } ast.seq◂{ { o s d } lc } }
				
					∐ ast.mtc◂m .
						mtc { { V evv vv ‹› } m } ⊢ { { V evv vv } m } 
						∎ { { V evv vv } ast.mtc◂m } 
					∐ ast.op_exh◂{ cp sp mp lc lcx } . 
						ct_ptn { { evv vv } cp } ⊢ { { evv vv } cp } 
						src_ptn { { evv vv } sp } ⊢ { { evv vv } sp } 
						mtc_ptn { { evv vv } mp } ⊢ { { evv vv } mp } 
						r { { V evv vv } lc } ⊢ { { V evv vv } lc }  
						r { { V evv vv } lcx } ⊢ { { V evv vv } lcx } 
						∎ { { V evv vv } ast.op_exh◂{ cp sp mp lc lcx } }
					∐. ast.tj◂{ x v r } . 
						lst.map_l◂◂r { { V evv vv } v } ⊢ { { V evv vv } v } 
						r { { V evv vv } r } ⊢ { { V evv vv } r } 
						∎ { { V evv vv } ast.tj◂{ x v r } }
				
				@.mtc { { V evv vv rbp } m } 
					$ m ⊢ 
					∐ ast.nx_e◂{ rl lc } . 
						r { { V evv vv } lc } ⊢ { { V evv vv } lc } 
						∎ { { V evv vv } ast.nx_e◂{ rl lc } } 
					∐. ast.nx_m◂p . 
						cla.l { V p } ⊢ { V _ ast.p◂{ nm _ brp nxp } } 
						mtc_op { { evv vv } nm } ⊢ { { evv vv } nm } 
						_cln V ⊢ { V p } 
						$ p ⊢ p,p0
						mtc { { V evv vv ‹ p0 › } nxp } ⊢ { { V evv vv } nxp } 
						$ brp ⊢ 
						∐ _some◂brp . 
							$ p ⊢ p,p0 
							mtc { { V evv vv ‹ p0 › } brp } ⊢ { { V evv vv } brp }
							_cls { V p ast.p◂{ nm rbp ‹ brp › nxp } } ⊢ { V p } 
							∎ { { V evv vv } ast.nx_m◂p } 
						∐._none◂{} . 
							_cls { V p ast.p◂{ nm rbp ‹› nxp } } ⊢ { V p } 
							∎ { { V evv vv } ast.nx_m◂p }
		∎∎
	∎∎
	§§ syntax
	§ 
		@.wc  ^=
			∐. "_" !| ; ⊢ { {} },p 
				∎ _some◂{}
				∐ " " ⊢ { {} } 
					∎ _some◂{}
				∐ "\t" ⊢ { {} } 
					∎ _some◂{}
				∐ wc_tl !| ⊢ { xx }
					∎ _none◂{}
				∐. ⊢ { } 
					∎ _some◂{}
		@.wc_tl  ^=
			∐ "," !| ⊢ { {} }
				∎ _none◂{} 
			∐. ⊢ { }
				∎ ‹ {} ›
	§
		@.name ^=
			∐# prm_word "." name ⊢ { w {} n }
				∎ ‹ ast.mdl_n◂{ w n } ›
			∐.# prm_word ⊢ { w }
				∎ ‹ ast.fst_n◂w ›
	§
		@.nl ^=
			∐.# "\n" nl_tl ⊢ { {} nn }
				∎ ‹ {} ›
		@.nl_tl  ^=
			∐# "\n" nl_tl ⊢ { {} nn }
				∎ ‹ {} ›
			∐.# ⊢ { } 
				∎ ‹ {} › 
	¶ prs_rslt◂a'
		∐ prs_vld : a'
		∐ prs_err : _lst◂{ _r64 _r64 _s8 }  
	§ ret_vld◂a = _some◂prs_vld◂a
	§ ret_err◂e = _some◂prs_err◂e
	§ prs_add { a e } 
		$ e ⊢ 
		∐ prs_vld◂b . 
			∎ prs_vld◂{ a b }
		∐. prs_err◂e . 
			∎ prs_err◂e
	§ prs_cct { e0 e1 } 
		$ e0 ⊢
		∐ prs_vld◂a0 . 
			$ e1 ⊢ 
			∐ prs_vld◂a1 . 
				∎ prs_vld◂{ a0 a1 }
			∐. prs_err◂l1 .  
				∎ prs_err◂l1
		∐. prs_err◂l0 .
			$ e1 ⊢ 
			∐ prs_vld◂a1  . 
				∎ prs_err◂l0 
			∐. prs_err◂l1 . 
				apnd { l0 l1 } ⊢ l
				∎ prs_err◂l
	§ prs_cct2 { e0 e1 e2 } 
		prs_cct { e0 e1 } ⊢ e 
		prs_cct { e e2 } ⊢ e 
		$ e ⊢ 
		∐ prs_vld◂{ { e0 e1 } e2 } .
			∎ prs_vld◂{ e0 e1 e2 }
		∐. prs_err◂e .
			∎ prs_err◂e
	§ mk_prs_err # { n r s } 
		∎ prs_err◂⟦ { n r s } ⟧ 
	§ add_prs_err { n r s e } 
		$ e ⊢ 
		∐ prs_err◂e . 
			∎ prs_err◂_cns◂{ { n r s } e }
		∐. prs_vld◂_ . 
			∎ prs_err◂_cns◂{ { n r s } _nil◂{} } 
	§ prs_act◂◂F { s p } 
		$ p ⊢ 
		∐ prs_vld◂a . 
			F { s a } ⊢ b  
			∎ ret_vld◂b 
		∐. prs_err◂e . 
			∎ ret_err◂e 
	§ @.pnt_prs_err el 
		$ el ⊢ 
		∐ _cns◂{ { n0 n1 em } el } . 
			pnt_prs_err el ⊢ sel 
			^ n0,n1,em,sel ⊢ n0,n1,em,sel,sr 
				"prs_err " 0d' "-" 1d' ":" 2' "\n" 
				3' // 
			∎ sr   
		∐. _nil◂{} . 
			$ %[ "" ] ⊢ sr 
			∎ sr 
	§
		@.cst ^=
			∐ _scf_d "r" ⊢ { x {} }
				∎ _some◂ast.k_r64◂x
			∐ "0x" _scf_x "r" ⊢ { {} x {} }
				∎ _some◂ast.k_r64◂x  
			∐ stg_ltr ⊢ { s }
				∎ _some◂ast.k_s8◂s
			∐. name ⊢ { n }
				∎ _some◂ast.k_name◂n
	§§ ct_stx 
		§ 
			@.ptn ^= 
				∐.# atm ; ⊢ { a0 },a1
					∐ a1 ⊢ _some◂a1 . 
						∎ _some◂RP.atm◂ast.k_app◂{ a0 a1 }
					∐. . 
						∎ _some◂a0 

					∐# "◂◂" !| ptn ⊢ { {} a1 }
						∎ _some◂_some◂a1
					∐.# ⊢ { }
						∎ _some◂_none◂{}
			@.atm ^= 
				∐# name "◂◂◂" !| ptn ⊢ { n {} p } 
					∎ _some◂RP.atm◂ast.k_agl◂{ n p }
				∐# "(" ptn ")" ⊢ { {} a {} }
					∎ _some◂a
				∐# "{+" lst.stx_line◂◂ptn "}" ⊢ { {} l {} } 
					∎| 
				∐# "{" lst.stx_line◂◂ptn "}" ⊢ { {} l {} } 
					∎ _some◂RP.rcd◂l
				∐.# cst ⊢ { c } 
					∎ _some◂RP.atm◂c
		∎∎
		§ ct_ptn = ct_stx.ptn
	§ @.mtc ^= 
		∐# name "◂" !| RP.stx◂◂mtc ⊢ { n {} mp } 
			∎ _some◂ast.re_agl◂{ n mp }
		
		∐# "%" word ⊢ { {} w } 
			∎ _some◂ast.re_reg◂w 
		∐# word ⊢ { w } 
			∎ _some◂ast.re_reg◂w
		∐.# "_" ⊢ { {} }
			∎ _some◂ast.re_v◂ast.k_r64◂%[ CST.not_0 ] 
	§ mtc_ptn = RP.stx◂◂mtc
	§ mtc_ptn_lst = lst.stx_line◂◂mtc_ptn 
	§ mtc_tl = lst.stx_cmm_tl◂◂mtc 
	§ mtc_ptn_tl = lst.stx_cmm_tl◂◂mtc_ptn

	§ 
		@.src ^= 
			∐# "%[" cst "]" ⊢ { {} c {} }
				∎ _some◂ast.re_v◂c
			∐# name "◂" RP.stx◂◂src ⊢ { n {} sp } 
				∎ _some◂ast.re_agl◂{ n sp }
			∐# reg_word ⊢ { w }
				∎ _some◂ast.re_reg◂w
			∐# "‹" !| ; ⊢ { {} },sp 
				∎ _some◂sp 
				
				∐# "›" ⊢ { {} } 
					∎ _some◂ast.re_agl◂{ ast.fst_n◂%[ "_none" ] RP.unt◂{} }
				∐.# RP.stx◂◂src "›" ⊢ { sp {} } 
					∎ _some◂ast.re_agl◂{ ast.fst_n◂%[ "_some" ] sp }
			∐.# "⟦" !| src_cns "⟧" ⊢ { {} c {} }
				∎ _some◂c 
		
		@.src_cns ^= 
			∐# RP.stx◂◂src ; ⊢ { a },l 
				∎ _some◂ast.re_agl◂{ ast.fst_n◂%[ "_cns" ] RP.rcd◂_cns◂{ a _cns◂{ l _nil◂{} } } }
				
				∐# "<" reg_word ⊢ { {} w } 
					∎ _some◂RP.atm◂ast.re_reg◂w 
				∐.# src_cns ⊢ { l } 
					∎ _some◂RP.atm◂l
			∐.# ⊢ { } 
				∎ _some◂ast.re_agl◂{ ast.fst_n◂%[ "_nil" ] RP.rcd◂_nil◂{} } 

	§ src_ptn = RP.stx◂◂src 
	§ src_ptn_lst = lst.stx_line◂◂src_ptn 
	§ src_tl = lst.stx_cmm_tl◂◂src
	§ src_ptn_tl = lst.stx_cmm_tl◂◂src_ptn  
	§
		@.type ^=
			∐.# type_atm type_app_tl type_tl ⊢ { t0 t1 t2 }
				mk_app { t0 t1 } ⊢ t
				∐ t2 ⊢ _some◂t2 .
					∎ _some◂RP.atm◂T.imp◂{ t t2 }
				∐. t2 ⊢ _none◂{} .
					∎ _some◂t
		@.type_tl ^=
			∐# "→" !| type ⊢ { {} t }
				∎ _some◂_some◂%t
			∐.# ⊢ { }
				∎ _some◂_none◂{}
		@.type_app_tl ^=
			∐# "◂" !| type_atm type_app_tl ⊢ { {} t0 t1 }
				∎ _some◂_cns◂{ %t0 %t1 }
			∐.# ⊢ { }
				∎ ‹ ⟦⟧ ›
		@.type_atm ^=
			∐# "{" lst.stx_line◂◂type "}" ⊢ { {} l {} }
				∎ _some◂RP.rcd◂%l
			∐# "(" type ")" ⊢ { {} t {} }
				∎ _some◂%t
			∐# var ⊢ { v }
				∎ _some◂RP.atm◂T.var◂ast.type_var◂%v 
			∐.# name ⊢ { n }
				∎ _some◂RP.atm◂T.var◂ast.type_name◂%n
		@.var ^=
			∐. word "'" ⊢ { w {} }
				∎ _some◂%w
			
	§
		@.line_res_i ^= 
			∐# "\n" ⊢ { {} }
				∎ ‹ {} › 
			∐# _byt line_res_i ⊢ { b {} }
				∎ ‹ {} ›  
			∐.# ⊢ { }
				∎ ‹ {} › 
	§ 
		@.line_res ^= 
			∐. line_res_i ⊢ { nn } 
				∎ ‹ { _n _r } ›
	§ 
		@.line_nl ^= 
			∐# "\n" ⊢ { {} } 
				$ _some◂{} ⊢ a 
				∎ a 
			∐.# _byt line_nl ⊢ { b nn } 
				$ _some◂{} ⊢ a 
				∎ a 
	§ 
		@.nls ^= 
			∐# "\n" !| nls ⊢ { {} xx }
				∎ ret_vld◂{}
			∐# "##" !| line_res nls ⊢ { {} xx yy } 
				∎ _some◂prs_vld◂{}
			∐# "\\\\" !| line_res nls ⊢ { {} xx yy } 
				∎ _some◂prs_vld◂{}
			∐# "\\[" !| ; ⊢ { {} },p
				∎ _some◂p
				∐# "\n" cmt_in nls ⊢ { {} p0 p1 }
					prs_cct { p0 p1 } ⊢ pr 
					$ pr ⊢ 
					∐ prs_vld◂{ p0 p1 } . 
						∎ ret_vld◂{} 
					∐. prs_err◂e . 
						pnt_prs_err e ⊢ s 
						_emt s ⊢ s 
						∎| 		
				∐.# ⊢ { } 
					^ _n,_r ⊢ n,r,sr 
						"nls_err " 0d' "-" 1d' ":\n" //
					_emt sr ⊢ sr 
					∎|   
			∐.# ⊢ { } 
				∎ ret_vld◂{}
		@.cmt_in ^= 
			∐# "\\[" !| ; ⊢ { {} },p
				$ _some◂p ⊢ a 
				∎ a 
				∐# "\n" cmt_in cmt_in ⊢ { {} p0 p1 }
					prs_cct { p0 p1 } ⊢ pr 
					$ pr ⊢ 
					∐ prs_vld◂{ p0 p1 } . 
						∎ ret_vld◂{}
					∐. prs_err◂e . 
						pnt_prs_err e ⊢ s 
						_emt s ⊢ s 
						∎| 		
					
					∐.# ⊢ { } 
						∎ _some◂prs_err◂_cns◂{ { %_n %_r %[ "blk_cmt 0" ] } _nil◂{} }
			∐ "\\]" nl_eof ⊢ { {} _ } 
				∎ _some◂prs_vld◂{} 
			∐# line_nl cmt_in ⊢ { nn c }
				$ _some◂c ⊢ a 
				∎ a
			∐.# ⊢ { } 
				∎ _some◂prs_err◂_cns◂{ { %_n %_r %[ "blk_cmt 1" ] } _nil◂{} }

	§§ grm 
		§ @.fld_line◂◂{ G H F T } ^=
			∐# H G fld_line◂◂{ G H F T } ⊢ { _ a l } 
				F { a l } ⊢ l 
				∎ _some◂l
			∐.# ⊢ { } 
				∎ _some◂%[ T ] 
		§ @.fld◂◂{ G H F T } ^=
			∐ H G fld◂◂{ G H F T } ⊢ { _ a l } 
				F { a l } ⊢ l 
				∎ _some◂l
			∐. ⊢ { } 
				∎ _some◂%[ T ] 
		§ @.fld_tm◂◂{ G H F T } ^= 
			∐ T ⊢ { t } 
				∎ _some◂t 
			∐. H G fld_tm◂◂{ G H F T } ⊢ { _ a l } 
				F { a l } ⊢ l 
				∎ _some◂l 
		∎∎
	§ @.nls_lst◂◂G ^=
		∐# nls G nls_lst◂◂G ⊢ { _ a l } 
			∎ _some◂_cns◂{ a l } 
		∐.# nls ⊢ { _ } 
			∎ _some◂_nil◂{} 
	
	§ @.nls_lst_prs◂◂G ^= 
		∐# nls G nls_lst_prs◂◂G ⊢ { _ a l } 
			prs_cct { a l } ⊢ e 
			$ e ⊢ 
			∐ prs_vld◂{ a l } . 
				∎ _some◂prs_vld◂_cns◂{ a l }
			∐. prs_err◂e . 
				∎ _some◂prs_err◂e 
		∐.# nls ⊢ { _ } 
			∎ _some◂prs_vld◂_nil◂{} 
	§ @.nls_p_lst_prs◂◂{ G_E G_S } ^= 
			∐# nls G_E ⊢ { _ e } 
				$ e ⊢ 
				∐ prs_vld◂e . 
					∎ _some◂prs_vld◂p_end◂e 
				∐. prs_err◂e . 
					∎ _some◂prs_err◂e 
			∐.# nls G_S nls_p_lst_prs◂◂{ G_E G_S } ⊢ { _ e l } 
				prs_cct { e l } ⊢ p 
				$ p ⊢ 
				∐ prs_vld◂{ e l } . 
					∎ _some◂prs_vld◂p_cns◂{ e l } 
				∐. prs_err◂e . 
					∎ _some◂prs_err◂e 
		
	§ 
		@.glb_etr_ch ^= 
			∐* "§§" ⊢ { {} }
				∎ ‹ {} ›
			∐* "§" ⊢ { {} }
				∎ ‹ {} ›
			∐* "¶" ⊢ { {} }
				∎ ‹ {} ›
			∐.* "∎∎" ⊢ { {} }
				∎ ‹ {} ›
		@.glb_etr_res_ch ^= 
			∐* glb_etr_ch !| ⊢ { g }
				∎ ‹›
			∐.* _byt ⊢ { b } 
				∎ ‹ {} ›
		@.glb_etr_clq_ch ^= 
			∐* "@" !| ⊢ { {} } 
				∎ ‹› 
			∐* glb_etr_ch !| ⊢ { c } 
				∎ ‹›  
			∐.* _byt ⊢ { b } 
				∎ ‹ {} ›
		@.glb_etr_res_clq ^= 
			∐* glb_etr_clq_ch glb_etr_res_clq ⊢ { c r }
				∎ ‹ {} › 
			∐.* ⊢ { } 
				∎ ‹ {} ›
		@.glb_etr_res_line ^= 
			∐# "\n" ⊢ { n } 
				∎ ‹ {} › 
			∐# glb_etr_ch !| ⊢ { g } 
				∎ ‹› 
			∐# "@" !| ⊢ { q } 
				∎ ‹› 
			∐# _byt glb_etr_res_line ⊢ { b r } 
				∎ ‹ {} › 
			∐# _byt ⊢ { b } 
				∎ ‹ {} › 
			∐.# ⊢ { } 
				∎ ‹ {} ›
	§ @.rtm_sbl ^= 
		∐ "§~" ⊢ { {} } 
			∎ ‹ {} ›
		∐. "§%" ⊢ { {} } 
			∎ ‹ {} ›  
	§ 
		@.s8_ptn ^=
			∐* var_idx "*" !| stg_ltr ⊢ { i {} s }
				∎ _some◂ast.exp_s8_for◂{ %i ast.k_s8◂%s }
			∐* s8_ptn_line ⊢ { s }
				∎ _some◂ast.exp_s8_cst◂ast.k_s8◂%s
			∐* stg_ltr ⊢ { s }
				∎ _some◂ast.exp_s8_cst◂ast.k_s8◂%s
			∐* name ⊢ { n }
				∎ _some◂ast.exp_s8_cst◂ast.k_name◂%n
			∐.* s8_fmt ⊢ { f }
				∎ _some◂ast.exp_s8_idx◂%f
		@.var_idx ^=
			∐. _scf_d "'" ⊢ { x {} }
				∎ _some◂%x
		@.s8_fmt ^=
			∐ _scf_d "d'" ⊢ { d {} }
				∎ _some◂{ ast.fmt_d◂{} %d }
			∐ _scf_d "x'" ⊢ { d {} }
				∎ ‹ { ast.fmt_x◂{} d } ›
			∐. _scf_d "'" ⊢ { d {} }
				∎ ‹ { ast.fmt_s◂{} d } ›
		@.s8_ptn_line ^=
			∐. "`" line ⊢ { {} l }
				rp8.to_s8 l ⊢ s 
				∎ ‹ s ›
		@.line ^=
			∐ "\n" ⊢ { {} }
				rp8.pfx_chr { %[ 10r ] rp8.e◂{} } ⊢ l 
				$ _some◂l ⊢ a
				∎ a
			∐. _byt line ⊢ { b l }
				rp8.pfx_chr { b l } ⊢ l 
				$ _some◂l ⊢ a
				∎ a
	§ 
    @.s8_ptn_lst_0 ^= 
			∐# "//" ⊢ { {} } 
				∎ ‹ ⟦⟧ ›
			∐.# s8_ptn nls s8_ptn_lst_0 ⊢ { p _ l } 
				∎ ‹ ⟦ p < l ⟧ ›   
	§ @.s8_ptn_lst ^= 
		∐.# nls s8_ptn_lst_0 ⊢ { _ r } 
			∎ ‹ r ›
	§§ act
		§ lc_mtc # { {} m } 
			∎ ast.mtc◂m
		§ @.id_0_mtc { s m } 
			$ m ⊢ 
			∐ p_cns◂{ { mp l } m } . 
				$ s ⊢ s,s0 
				id_0_mtc { s0 m } ⊢ m 
				∎ ast.na_p◂{ ast.mtc_id◂{ s mp } l m }
			∐. p_end◂{ mp l } . 
				∎ ast.na_s◂{ ast.mtc_id◂{ s mp } l }
		§ id_0 { {} { s il } }
			∐ il ⊢ c0◂{ rs lc } . 
				ip.id_line { s rs lc } ⊢ lc 
				∎ lc
			∐ il ⊢ c1◂m .
				id_0_mtc { RP.atm◂%[ ".s" ] m } ⊢ m 
				∎ ast.seq◂{ { RP.atm◂ast.k_name◂ast.fst_n◂%[ "_id" ] s RP.atm◂ast.re_reg◂%[ ".s" ] } ast.mtc◂m } 
			∐. . 
				∎| 
		§ id_mtc # { {} m } 
			∎ c1◂m
		§ id_line # { { r1 rs } lc } 
			∎ c0◂{ _cns◂{ r1 rs } lc }
		
		§ lc_exh # { { op s d } { lf lx } } 
			∎ ast.op_exh◂{ op s d lf lx }
		∎∎

	§ 
		@.exp_s8_d ^= 
			∐.# mtc exp_s8_d_0 ⊢ { m o } 
				$ o ⊢ 
				∐ _some◂{ ds dd } . 
					∎ ‹ { ⟦ RP.atm◂m < ds ⟧ dd } › 
				∐. _none◂{} . 
					∎ ‹ { ⟦⟧ RP.atm◂m } › 
		@.exp_s8_d_0 ^= 
			∐# "," exp_s8_d ⊢ { {} { ds dd } } 
					∎ ‹ ‹ { ds dd } › ›
			∐.#  ⊢ { }
				∎ ‹ ‹› › 
		@.lc_exp_s8_sd ^=
			∐* wc "⊢" !| mtc ⊢ { xx {} r }
				∎ ‹ { RP.unt◂{} RP.cns2◂{ RP.unt◂{} RP.atm◂%r } } ›  
			∐.* src src_ptn_tl "⊢" exp_s8_d ⊢ { r0 rs0 {} { ds dd } }
				∎ ‹ { RP.rcd◂⟦ RP.atm◂r0 < rs0 ⟧ RP.cns2◂{ RP.rcd◂ds dd } } ›
	§ @.inl_flg ^= 
		∐# "#" ⊢ { {} } 
			∎ ‹ bl.t◂{} › 
		∐.# ⊢ { } 
			∎ ‹ bl.f◂{} ›

	§	@.tpl_reg_ptn = RP.stx◂◂tpl_word
	§	@.tpl_ptn = RP.stx◂◂word
	§ 
		@.mtc_test ^=
			∐# tpl_reg_ptn "⊢" !| mtc_ptn ⊢ { r0 {} r1 }
				∎ _some◂ast.mtc_id◂{ %r0 %r1 }
			∐# mtc_val "=<" mtc_val ⊢ { v0 {} v1 }
				∎ ‹ ast.mtc_test◂{ ast.test_cmp◂{} v0 v1 } ›  
			∐# mtc_val "<>" mtc_val ⊢ { v0 {} v1 } 
				∎ ‹ ast.mtc_test◂{ ast.test_neq◂{} v0 v1 } ›
			∐.# mtc_val "=" mtc_val ⊢ { v0 {} v1 }
				∎	_some◂ast.mtc_test◂{ ast.test_eq◂{} v0 v1 }
		@.mtc_val ^=
			∐ word "'" ⊢ { w {} }
				∎ ‹ ast.test_var◂w ›
			∐. cst ⊢ { c }
				∎ ‹ ast.test_cst◂c ›
	
	§
		@.lc_code ^=
			∐* nls "∎|" ⊢ { nn {} }
				∎ ret_vld◂ast.jmp◂{ RP.atm◂ast.k_app◂{ RP.atm◂ast.k_name◂ast.fst_n◂%[ "_exn" ] RP.atm◂ast.k_r64◂%_n } RP.unt◂{} }
			∐# nls "∎" !| ; ⊢ { nn {} },r
				∎ _some◂%r  
				∐# src_ptn "\n" ⊢ { r {} }
					∎ ret_vld◂ast.jmp◂{ RP.atm◂ast.k_name◂ast.fst_n◂%[ "_id" ] r }
				∐.# line_res ⊢ { b } 
					∎ _some◂prs_err◂_cns◂{ { %_n %_r %[ "lc_code ∎ .. " ] } _nil◂{} }
			∐* nls lc_mtc ⊢ { _ m }
				$ m ⊢ 
				∐ prs_vld◂m . 
					∎ ret_vld◂ast.mtc◂m
				∐. prs_err◂e .
					∎ ret_err◂e 
			∐# nls "$" !| ; ⊢ { nn {} },r
				prs_act◂◂act.id_0 { {} r } ⊢|

				∐# src_ptn "⊢" !| ; ⊢ { s {} },il 
					prs_add { s il } ⊢ a 
					∎ _some◂a 
					
					∐# "\n" !| nls lc_id_mtc ⊢ { {} _ m }
						prs_act◂◂act.id_mtc { {} m } ⊢|	
					∐.# mtc_ptn mtc_ptn_tl "\n" lc_code ⊢ { r1 rs {} lc }
						prs_act◂◂(act.id_line) { { r1 rs } lc } ⊢|
				∐# line_res nls lc_id_mtc ⊢ { { n r } _ lc }
					$ lc ⊢ 
					∐ prs_vld◂x . 
						mk_prs_err { n r %[ "glb_etr id_line line_res 0" ] } ⊢ l 
						∎ ‹ l ›
					∐. prs_err◂l . 
						∎ ret_err◂⟦ { n r %[ "glb_etr id_line line_res 1" ] } < l ⟧
				∐.# line_res lc_code ⊢ { { n r } lc } 
					$ lc ⊢ 
					∐ prs_vld◂x . 
						mk_prs_err { n r %[ "glb_etr id_line line_res 2" ] } ⊢ l 
						∎ ‹ l ›
					∐. prs_err◂l . 
						∎ _some◂prs_err◂_cns◂{ { n r %[ "glb_etr id_line line_res 3" ] } %l }
			∐# nls "^" !| lc_exp_s8_sd "\n" s8_ptn_lst lc_code ⊢ { nn {} { s d } {} ps lc }
				$ lc ⊢ 
				∐ prs_vld◂lc . 
					∎ ret_vld◂ast.seq◂{ { RP.atm◂ast.k_app◂{ RP.atm◂ast.k_name◂ast.fst_n◂%[ "_pf" ] RP.atm◂ast.k_pf◂ps } s d } lc }
				∐. prs_err◂e . 
					∎ ret_err◂e
			∐# nls "=+" var "\n" tj ⊢ { _ {} x {} p } 
				$ p ⊢ 
				∐ prs_vld◂{ v r } . 
					∎ ret_vld◂ast.tj◂{ x v r }  
				∐. prs_err◂e . 
					∎ ret_err◂e 
			∐# nls ct_ptn inl_flg src_ptn ; ⊢ { nn n ib r0 },o 
				$ o ⊢ 
				∐ prs_vld◂o . 
					$ o ⊢ 
					∐ c1◂{ y lc } .
						∎ _some◂prs_vld◂ast.seq◂{ { n r0 y } lc }
					∐ c2◂{ d e } . 
						prs_act◂◂act.lc_exh { { n r0 d } e } ⊢|			
					∐. c0◂{} . 
						∎ _some◂prs_vld◂ast.jmp◂{ n r0 }
				∐. prs_err◂e . 
					∎ _some◂prs_err◂e 
				
				∐* "⊢|" !| ⊢ { {} }
					∎ _some◂prs_vld◂c0◂{} 
				∐# "⊢" mtc_ptn "\n" !| lc_code ⊢ { {} r1 {} lc }
					$ lc ⊢ 
					∐ prs_vld◂lc . 
						∎ _some◂prs_vld◂c1◂{ r1 lc }
					∐. prs_err◂e . 
						∎ _some◂prs_err◂e
				∐# "⊢" "\n" !| "?" mtc_ptn "." "\n" lc_code "∐." "_" "." "\n" lc_code ⊢ { {} {} {} d {} {} lf {} {} {} {} lx }
					prs_cct { lf lx } ⊢ e 		
					∎ _some◂prs_vld◂c2◂{ d e } 
				∐.* line_res lc_code ⊢ { { nn rr } lc }
					$ lc ⊢ 
					∐ prs_vld◂_ . 
						∎ _some◂prs_err◂_cns◂{ { %nn %rr %[ "lc_code 20" ] } _nil◂{} }
					∐. prs_err◂e . 
						∎ _some◂prs_err◂_cns◂{ { %nn %rr %[ "lc_code 21" ] } %e } 
			∐.* glb_etr_res_line ; ⊢ { r },lc
				add_prs_err { _n _r %[ "lc_code 9" ] lc } ⊢ e 
				∎ _some◂e 
				
				∐* lc_code ⊢ { lc } 
					∎ _some◂%lc
				∐.* glb_etr_res_clq ⊢ { r } 
					∎ _some◂prs_err◂_cns◂{ { %_n %_r %[ "lc_code 11" ] } _nil◂{} }  
		@.tj ^= 
			∐# nls "∐." !| "\n" lc_code ⊢ { _ {} {} lc } 
				$ lc ⊢ 
				∐ prs_vld◂lc . 
					∎ ret_vld◂{ ⟦⟧ lc } 
				∐. prs_err◂e . 
					∎ ret_err◂e 
			∐.# nls "∐" "\n" lc_code tj ⊢ { _ {} {} lc p } 
				prs_cct { lc p } ⊢ e 
				$ e ⊢ 
				∐ prs_vld◂{ lc { v r } } . 
					∎ ret_vld◂{ ⟦ lc < v ⟧ r } 
				∐. prs_err◂e . 
					∎ ret_err◂e   
		@.mtc_line ^= 
			∐# "." "\n" !| nls lc_code ⊢ { {} {} _ lc } 
				$ lc ⊢ 
				∐ prs_vld◂lc . 
					∎ ret_vld◂ast.na_e◂{ ⟦⟧ lc }
				∐. prs_err◂e .	
					∎ ret_err◂e  
			∐.# mtc_test mtc_line_tl ⊢ { t l } 
				$ l ⊢ 
				∐ prs_vld◂l .
					∎ ret_vld◂ast.na_s◂{ t l }
				∐. prs_err◂e .
					∎ ret_err◂e 
		@.mtc_line_tl ^= 
			∐# "." "\n" !| nls lc_code ⊢ { {} {} _ lc } 
				$ lc ⊢ 
				∐ prs_vld◂lc . 
					∎ ret_vld◂ast.na_e◂{ ⟦⟧ lc }
				∐. prs_err◂e .	
					∎ ret_err◂e  
			∐# ";" "\n" !| nls lc_mtc ⊢ { {} {} _ m } 
				∎ ‹ m ›
			∐.# ";" mtc_test mtc_line_tl ⊢ { {} t l }
				$ l ⊢ 
				∐ prs_vld◂l .
					∎ ret_vld◂ast.na_s◂{ t l }
				∐. prs_err◂e .
					∎ ret_err◂e 
		@.lc_mtc ^= 
			∐# "∐." !| mtc_line ⊢ { {} n } 
				∎ ‹ n › 
			∐.# "∐" mtc_test mtc_line_tl nls lc_mtc ⊢ { {} t n _ m } 
				prs_cct { n m } ⊢ p 
				$ p ⊢ 
				∐ prs_vld◂{ n m } .
					∎ ret_vld◂ast.na_p◂{ t n m }
				∐. prs_err◂e .	
					∎ ret_err◂e 
		@.lc_id_mtc ^= 
			∐# "∐." !| mtc_ptn mtc_line_tl ⊢ { {} m l } 
				$ l ⊢ 
				∐ prs_vld◂l .	
					∎ ret_vld◂p_end◂{ m l }
				∐. prs_err◂e .
					∎ ret_err◂e  
			∐.# "∐" mtc_ptn mtc_line_tl nls lc_id_mtc ⊢ { {} m l _ r } 
				prs_cct { l r } ⊢ p 
				$ p ⊢ 
				∐ prs_vld◂{ l r } .
					∎ ret_vld◂p_cns◂{ { m l } r }
				∐. prs_err◂e .	
					∎ ret_err◂e 
	§	
		@.glb_etr_res ^= 
			∐* glb_etr_res_ch glb_etr_res ⊢ { c r }
				∎ _some◂{}
			∐.* ⊢ { }
				∎ _some◂{}
		@.mdl_etr_res  ^=
			∐* "∎∎" ⊢ { {} } 
				∎ _some◂{}
			∐* "§§" ; ⊢ { {} },p
				∎ _some◂{}
				∐* word "=" name mdl_etr_res ⊢ { w {} n r }
					∎ ‹ {} ›
				∐.* mdl_etr_res mdl_etr_res ⊢ { r0 r1 } 
					∎ ‹ {} ›
			∐* _byt mdl_etr_res ⊢ { b r } 
				∎ ‹ {} › 
			∐.* ⊢ { } 
				∎ ‹ {} ›
		
	§		 
		@.def_gnr ^= 
			∐# "◂◂" !| tpl_ptn ⊢ { {} p } 
				∎ _some◂_some◂p
			∐.# ⊢ { } 
				∎ _some◂_none◂{}
	
	§	@.args_tl = lst.stx_cmm_tl◂◂var 
	§	@.dt_args ^=
			∐* "◂" !| var args_tl ⊢ { {} v as }
				∎ ‹ _cns◂{ v as } ›  
			∐* var !| args_tl ⊢ { v as } 
				∎ ‹ _cns◂{ v as } ›  
			∐.* ⊢ { } 
				∎ ‹ ⟦⟧ ›
	§	@.dt_etr_coprd_i ^=
			∐.# "∐" !| word ":" type "\n" ⊢ { {} w {} t {} }
				∎ _some◂{ w t }
	§	@.dt_etr_coprd = nls_lst◂◂dt_etr_coprd_i 
	§	@.dt_etr_body ^=
			∐* word dt_args "=" !| type ⊢ { w as {} n }
				∎ ‹ { w ast.dt_ln◂{ as n } } ›
			∐.* word dt_args nls "∐" word ":" type dt_etr_coprd ⊢ { w as nn {} wc {} t d }
				∎ ‹ { w ast.dt_def◂{ as ⟦ { wc t } < d ⟧ } } ›
	§	@.qlq_dt_etr_i ^= 
			∐.# "@" !| "." dt_etr_body ⊢ { {} {} p } 
				∎ _some◂p
	§	@.qlq_dt_etr = nls_lst◂◂qlq_dt_etr_i 
	§	@.dt_etr ^=
			∐* "@" !| "." dt_etr_body qlq_dt_etr ⊢ { {} {} e q }
				∎ ‹ ast.dt_qlq_etr◂⟦ e < q ⟧ ›
			∐* dt_etr_body ⊢ { e }
				∎ ‹ ast.dt_etr◂e ›
			∐. ⊢ { }
				_emt %[ "dt_etr 0" ] ⊢ s
				∎ ‹›
	§ 
		@.grm_rle ^= 
			∐* "!|" !| lst.stx_line◂◂grm_ptn ⊢ { {} g }
				∎ ‹ ast.grm.ptn_cut◂g ›
			∐* grm_ptn grm_rle ⊢ { h g }
				∎ _some◂ast.grm.ptn_seq◂{ h g }
			∐.* ⊢ { }
				∎ _some◂ast.grm.ptn_end◂{}
		@.grm_ptn ^= 
			∐* "⟦" grm_ptn_atm "⟧" ⊢ { {} p {} }
				∎ _some◂RP.atm◂ast.k_app◂{ RP.atm◂ast.k_name◂ast.fst_n◂%[ "_pss" ] %p }
			∐.* grm_ptn_atm ⊢ { a }
				∎ _some◂%a
		@.grm_ptn_atm ^=
			∐# stg_ltr ⊢ { a }
				∎ _some◂RP.atm◂ast.k_app◂{ RP.atm◂ast.k_name◂ast.fst_n◂%[ "_psc" ] RP.atm◂ast.k_s8◂%a }
			∐.# ct_ptn ⊢ { n }
				∎ _some◂%n
	
		@.grm_ord ^= 
			∐* "∐*" ⊢ { {} }
				∎ _some◂ast.grm.synt◂{}
			∐* "∐#" ⊢ { {} }
				∎ _some◂ast.grm.line◂{}
			∐.* "∐" ⊢ { {} }
				∎ _some◂ast.grm.lex◂{}
		@.grm_ord_end ^= 
			∐* "∐.*" ⊢ { {} }
				∎ _some◂ast.grm.synt◂{}
			∐* "∐.#" ⊢ { {} }
				∎ _some◂ast.grm.line◂{}
			∐.* "∐." ⊢ { {} }
				∎ _some◂ast.grm.lex◂{}
	§ 
		@.grm_etr_def ^= 
			∐.* grm_etr_act ⊢ { g }
				∎ ‹ g ›
		@.grm_etr_act ^= 
			∐* grm_ord_end !| grm_rle grm_etr_act_act	⊢ { o l ga }
				$ ga ⊢ 
				∐ prs_vld◂{ r0 lc a } . 
					ast.grm.act_regs {} ⊢ gr
					∎ ret_vld◂ast.grm.act_end◂{ gr r0 lc o l a }
				∐. prs_err◂e . 
					∎ ret_err◂e 
			∐.* grm_ord grm_rle grm_etr_act_act grm_etr_act ⊢ { o l ga g }
				prs_cct { ga g } ⊢ e  
				$ e ⊢ 
				∐ prs_vld◂{ { r0 lc a } g } . 
					ast.grm.act_regs {} ⊢ gr
					∎ ret_vld◂ast.grm.act_cns◂{ gr r0 lc o l a g }
				∐. prs_err◂e .	
					∎ ret_err◂e
		@.grm_etr_act_act ^= 
			∐* ";" "⊢" !| mtc_ptn "," mtc_ptn lc_code grm_etr_act ⊢ { {} {} r0 {} r1 lc g }
				prs_cct { lc g } ⊢ e 
				$ e ⊢ 
				∐ prs_vld◂{ lc g } . 
					∎ ret_vld◂{ r0 lc ‹ { r1 g } › }
				∐. prs_err◂e .
					∎ ret_err◂⟦ { _n _r %[ "grm_etr_act_act 0"  ] } < e ⟧
			∐.* "⊢" !| mtc_ptn lc_code ⊢ { {} r0 lc }
				$ lc ⊢ 
				∐ prs_vld◂lc . 
					∎ ret_vld◂{ r0 lc ‹› }
				∐. prs_err◂e .
					∎ ret_err◂⟦ { _n _r %[ "grm_etr_act_act 1"  ] } < e ⟧
	§ 
		@.lc_etr_body ^=
			∐# nls "@" !| "." word lc_etr_def qlq_etr ⊢ { nn {} {} w le q }
				prs_cct { q le } ⊢ e 
				$ e ⊢ 
				∐ prs_vld◂{ q le } . 
					∎ _some◂prs_vld◂ast.lc_qlq_etr◂_cns◂{ { %w %le } %q }
				∐. prs_err◂e . 
					∎ _some◂prs_err◂%e
			∐* word lc_etr_def ⊢ { n e }
				$ e ⊢ 
				∐ prs_vld◂e . 	
					∎ ret_vld◂ast.lc_etr◂{ n e }
				∐. prs_err◂e . 
					∎ ret_err◂e
			∐. ⊢ { }
				$ %[ "lc_etr_body 0" ] ⊢ s
				_emt s ⊢ s
				∎ _none◂{}
		@.lc_clq_etr_i ^=
			∐.# "@" !| "." word lc_etr_def ⊢ { {} {} w le } 
				$ le ⊢ 
				∐ prs_vld◂le . 
					∎ _some◂prs_vld◂{ w le } 
				∐. prs_err◂e . 
					∎ _some◂prs_err◂e 
		@.qlq_etr = nls_lst_prs◂◂lc_clq_etr_i 
		@.type_rtr ^= 
			∐# ":" !| type ⊢ { {} t } 
				∎ ‹ ‹ t › › 
			∐.# ⊢ { }
				∎ ‹ ‹› › 
		@.lc_etr_def ^=
			∐# def_gnr "^=" "\n" grm_etr_def ⊢ { o_g {} {} ge } 
				$ ge ⊢ 
				∐ prs_vld◂ge . 
					∎ _some◂prs_vld◂ast.lc_grm◂{ o_g ge }
				∐. prs_err◂e .
					∎ ret_err◂e 
			∐# "=^" !| "\n" s8_ptn_lst ⊢ { {} {} l } 
				∎ ret_vld◂ast.lc_ln◂ast.k_pf◂l 
			∐# "=" !| ct_ptn "\n" ⊢ { {} c {} }
				∐ c ⊢ RP.atm◂c . 
					∎ _some◂prs_vld◂ast.lc_ln◂c
				∐. . 
					mk_prs_err { _n _r %[ "lc_etr_def 0" ] } ⊢ e 
					∎ ‹ e ›
			∐# def_gnr inl_flg mtc_ptn type_rtr "\n"  lc_code ⊢ { o_t if r0 t0 {} x0 }  
				$ x0 ⊢ 
				∐ prs_vld◂x0 . 
					∎ ret_vld◂ast.lc_def◂{ o_t r0 t0 if x0 }
				∐. prs_err◂e . 
					∎ ret_err◂e
			∐.# "◂" !| tpl_reg_ptn "=" src_ptn "\n" ⊢ { {} x {} p {} } 
				∎ _some◂prs_vld◂ast.lc_ply◂{ x p } 
	§
		@.file ^=
			∐.# nls_lst_prs◂◂glb_etr nl_eof ⊢ { gl _  } 
				∎ _some◂gl
		@.glb_etr ^=
			∐* nls "§§" !| ; ⊢ { nn {} },p 
				∎ _some◂p
				∐* word mdl_etr_def ⊢ { n d }
					$ d ⊢ 
					∐ prs_vld◂d . 
						∎ _some◂prs_vld◂ast.mdl_etr◂{ %n %d }
					∐. prs_err◂err . 
						∎ ret_err◂err 
				∐.* mdl_etr_res ⊢ { r } 
					∎ _some◂prs_err◂_cns◂{ { %_n %_r %[ "glb_etr 0.1" ] } _nil◂{} }
			∐* "§" !| ; ⊢ { {} },p 
				$ _some◂p ⊢ a 
				∎ a
				∐* lc_etr_body ⊢ { le }
					∎ _some◂le
				∐.* glb_etr_res ⊢ { bs }
					∎ _some◂prs_err◂_cns◂{ { %_n %_r %[ "glb_etr 3" ] } _nil◂{} }
			∐.* "¶" !| ; ⊢ { {} },p 
				∎ _some◂p
				∐* dt_etr ⊢ { de }
					∎ ret_vld◂de
				∐.* glb_etr_res ⊢ { bs }
					∎ _some◂prs_err◂_cns◂{ { %_n %_r %[ "glb_etr 4" ] } _nil◂{} }
		@.mdl_etr_def ^=
			∐* "=" !| name nls ⊢ { {} n nn }
				∎ ret_vld◂ast.mdl_ln◂n
			∐.* nls mdl_glb_etr ⊢ { nn m }
				$ m ⊢ 
				∐ prs_vld◂m . 
					∎ ret_vld◂ast.mdl_def◂m
				∐. prs_err◂err . 
					∎ ret_err◂err
		@.mdl_glb_etr ^=
			∐* nls "∎∎" nls ⊢ { nn0 {} nn }
				∎ ret_vld◂⟦⟧
			∐* nls glb_etr mdl_glb_etr ⊢ { nn e gl }
				prs_cct { e gl } ⊢ e0 
				$ e0 ⊢ 
				∐ prs_vld◂{ e gl } . 
					∎ ret_vld◂⟦ e < gl ⟧
				∐. prs_err◂err . 
					∎ ret_err◂err 
			∐. mdl_etr_res ⊢ { r }
				∎ _some◂prs_err◂_cns◂{ { %_n %_r %[ "glb_etr 7" ] } _nil◂{} }
		
	∎∎	
	
	§§ ns
		§ dta = T.dta 
		§ imp = T.imp 
		§ ct_imp = T.ct_imp 
		§ abs = T.abs 
		§ var = T.var 
		§ var_l = T.var_l 
		§ var_q = T.var_q 
		§ var_ln = T.var_ln 
		§ var_i = T.var_i 
		§ newvar_i = T.newvar_i 
		§ newvar_l = T.newvar_l 
		§ newvar_q = T.newvar_q 
		##§ var_app = T.var_app 
		
		
	
		¶ f_c a',c'
			∐ f_jmp : a' 
			∐ f_call : c' 
		
		§§ t_axm = T.t_axm 
		§§ inst = T.inst 
		
		§ inst = T.inst 
		§ inst_lst = T.inst_lst 
	
		§ gen = T.gen 
		§ iug_imp_d = T.iug_imp_d 
		§ inst_imp = T.inst_imp 
		§ k_ctr # { tv i n y } 
			\\T.newvar_ln { tv y } ⊢ { tv iy } 
			_clp { tv var_ln◂y } ⊢ { tv p } 
			$ ast.k_ctr◂{ i n p } ⊢ k 
			∎ { tv k } 
		 
			§ dta_n_1 { tav a } 
				_alc_o { tav a } ⊢ { tav o } 
				smt o ⊢ { w { n v k } }
				\\$ o ⊢ { w { n v k } }
				∐ n'=1r . 
					$ v ⊢ v,v0 
					$ k ⊢ k,k0 
					\\_alc_i { tav { w { n v k } } } ⊢ { tav a }
					_alc_i { tav ‹ { w { n v k } } › } ⊢ { tav a }
					∎ { tav a ‹ { v0 k0 } › }
				∐. . 
					\\_alc_i { tav { w { n v k } } } ⊢ { tav a }
					_alc_i { tav ‹ { w { n v k } } › } ⊢ { tav a }
					∎ { tav a ‹› }
			§ dta_n { tav a } 
				_alc_o { tav a } ⊢ { tav o } 
				smt o ⊢ { w { n v k } }  
				\\$ o ⊢ { w { n v k } }
				$ n ⊢ n,n0 
				$ v ⊢ v,v0 
				$ k ⊢ k,k0 
				\\_alc_i { tav { w { n v k } } } ⊢ { tav a }
				_alc_i { tav ‹ { w { n v k } } › } ⊢ { tav a }
				∎ { tav a { n0 v0 k0 } }
		
		§§ alc_type_k 
			§ alc_i # glv_n
				inc_x glv_n ⊢ { r glv_n } 
				∎ { glv_n r } 
			
			§	
				@.rcd { tv t0 }
					∐ t0 ⊢ RP.rcd◂l . 
						∎ { tv l } 
					∐ t0 ⊢ RP.atm◂a; a ⊢ dta◂{ T.prm◂a l }; a'=TX.id.prd; l ⊢ _cns◂{ y0 _cns◂{ y1 _nil◂{} } } . 
						rcd { tv y1 } ⊢ { tv l } 
						∎ { tv ⟦ y0 < l ⟧ }  
					∐ t0 ⊢ RP.atm◂a; a ⊢ var◂T.p◂i . 
						cla.l { tv i } ⊢ { tv i v } 
						∐ v ⊢ var_ln◂k . 
							rcd { tv k } ⊢| 
						∐. .
							∎| 
					∐. . 
						∎| 
			§ @.arr_t { tv yt } 
				∐ yt ⊢ RP.rcd◂_nil◂{} . 
					∎ { tv ‹ %[ ast.hp.arr.std ] › }
				∐ yt ⊢ RP.atm◂T.dta◂{ T.prm◂i _ } . 
					∐ i'=TX.id.arr_x .
						∎ { tv ‹ %[ ast.hp.arr.x ] › }
					∐. . 
						∎|
				∐ yt ⊢ RP.atm◂a; a ⊢ var◂T.p◂i . 
					cla.l { tv i } ⊢ { tv i v } 
					∐ v ⊢ var_ln◂k . 
						arr_t { tv k } ⊢| 
					∐. .
						∎ { tv ‹› }
				∐. . 
					T.pnt_type_k { tv yt } ⊢ { tv s } 
					_emt s ⊢ _ 
					∎|
			§ @.arr { tv j0 y yt }
				∐ y ⊢ RP.atm◂T.dta◂{ T.prm◂ay _ }; ay'=TX.id.r8 .
					arr_t { tv yt } ⊢ { tv i } 
					∐ i ⊢ _some◂i . 
						∎ { tv RP.atm◂ast.hp◂{ j0 ast.hp.opq◂i } }
					∐. . 
						∎ { tv RP.atm◂ast.btm◂{} }
				∐ y ⊢ RP.atm◂a; a ⊢ var◂T.p◂i . 
					cla.l { tv i } ⊢ { tv i v } 
					∐ v ⊢ var_ln◂k . 
						arr { tv j0 k yt } ⊢| 
					∐. .
						arr_t { tv yt } ⊢ { tv d } 
						∐ d ⊢ _some◂d . 
							∎ { tv RP.atm◂ast.hp◂{ j0 ast.hp.arr◂{ RP.atm◂var◂T.p◂i d } } }		
						∐. . 
							∎ { tv RP.atm◂ast.btm◂{} }
				∐. . 
					arr_t { tv yt } ⊢ { tv i }
					∐ i ⊢ _some◂i .
						∎ { tv RP.atm◂ast.hp◂{ j0 ast.hp.arr◂{ y i } } }
					∐. . 
						∎ { tv RP.atm◂ast.btm◂{} }   
			§	 
				@.f_T◂◂ALC { { tav tv s0 b } t0 }
					$ t0 ⊢ 
					∐ RP.rcd◂l . 
						lst.map_l◂◂(f_T◂◂ALC) { { tav tv s0 b } l } ⊢ { {  tav tv s0 b } l } 
						∎ { { tav tv s0 b } RP.rcd◂l }
					∐. RP.atm◂ak . 
						$ ak ⊢ 
						∐ dta◂{ a l } . 			
							$ a ⊢ 
							∐ T.prm◂a .
								=+ a' 
								∐ 
									ALC s0 ⊢ { s0 j0 }
									∎ { { tav tv s0 b } stt_v.r64_reg◂j0 }     
								∐ 
									∎| 
									\\ALC s0 ⊢ { s0 j0 }
									\\∎ { {  tav tv s0 b } stt_v.s8_reg◂j0 }
								\\ arr 
								∐ 
									ALC s0 ⊢ { s0 j0 }
									∐ l ⊢ _cns◂{ y _cns◂{ yt _nil◂{} } } . 
										arr { tv j0 y yt } ⊢ { tv p } 
										∎ { { tav tv s0 b } p }
									∐. . 
										∎| 
								\\ Clr 
								∐ 
									ALC s0 ⊢ { s0 j0 }
									∐ l ⊢ _cns◂{ y l }; l ⊢ _nil◂{} . 
										∎ { { tav tv s0 b } RP.atm◂ast.hp◂{ j0 ast.hp.id◂{ %[ ast.hp.id.Clr ] y } } }
									∐. . 
										∎|  
								\\ pt 
								∐ 	
									ALC s0 ⊢ { s0 j0 }
									∐ l ⊢ _cns◂{ y l }; l ⊢ _nil◂{} . 
										∎ { { tav tv s0 b } RP.atm◂ast.hp◂{ j0 ast.hp.id◂{ %[ ast.hp.id.pt ] y } } }
									∐. . 
										∎| 
								\\ prd 
								∐ 
									∐ l ⊢ _cns◂{ y l }; l ⊢ _nil◂{} . 
										rcd { tv y } ⊢ { tv l } 
										f_T◂◂ALC { { tav tv s0 b } RP.rcd◂l } ⊢|  
									∐. . 
										∎| 
								\\ grm 
								∐
									∎| 
								\\ pf 
								∐
									∎| 
								\\ Clr_lc 
								∐ 
									ALC s0 ⊢ { s0 j0 }
									ALC s0 ⊢ { s0 j1 }
									∐ l ⊢ _cns◂{ y _nil◂{} } . 
										$ y ⊢ y,y0 
										∎ { { tav tv s0 b } RP.cns2◂{ RP.atm◂ast.hp◂{ j0 ast.hp.id◂{ %[ ast.hp.id.pt ] y0 } } RP.atm◂ast.hp◂{ j1 ast.hp.id◂{ %[ ast.hp.id.Clr ] y } } } }
									∐. . 
										∎| 
								\\ arr_lc 
								∐ 
									ALC s0 ⊢ { s0 j0 }
									ALC s0 ⊢ { s0 j1 }
									∐ l ⊢ _cns◂{ y _cns◂{ yt _nil◂{} } } . 
										arr { tv j1 y yt } ⊢ { tv p } 
										∎ { { tav tv s0 b } RP.atm◂ast.rt_usr◂{ %[ 0r ] RP.cns2◂{ stt_v.r64_reg◂j0 p } } }
									∐. . 
										∎| 
								∐. 
									∎| 
							∐. T.adt◂a . 
								\\ adt  
								dta_n_1 { tav a } ⊢ { tav a o } 
								∐ o ⊢ _some◂{ v k } . 
									T.iug_axm { tv v k l } ⊢ { tv l }
									∐ l ⊢ _cns◂{ t _nil◂{} } . 
										f_T◂◂ALC { { tav tv s0 b } t } ⊢ { { tav tv s0 b } p } 
										∎ { { tav tv s0 b } RP.atm◂ast.stt_adt◂{ %[ 0r ] %[ 1r ] p } } 
									∐. . 
										∎| 
								∐. . 
									ALC s0 ⊢ { s0 j0 }
									ALC s0 ⊢ { s0 j1 } 
									∎ { { tav tv s0 b } RP.atm◂ast.dyn_adt◂{ { a l } j0 j1 } } 
						∐ var◂T.p◂i . 
							cla.l { tv i } ⊢ { tv i v } 
							∐ v ⊢ var_ln◂k . 
								f_T◂◂ALC { {  tav tv s0 b } k } ⊢| 
							∐. .

								∎ { { tav tv s0 %[ 0r ] } RP.atm◂ast.btm◂{} }
						∐ abs◂{ a k0 } . 
							_emt %[ "alc_type_k.f abs" ] ⊢ se 
							∎|  
						∐ ct_imp◂{ k0 k1 } .
							_emt %[ "alc_type_k.f ct_imp" ] ⊢ se 
							∎|
						∐. imp◂{ k0 k1 } .
							_emt %[ "alc_type_k.f imp" ] ⊢ _ 
							∎| 
			§ f_i # { tav tv glv_n p } 
				f_T◂◂alc_i { { tav tv glv_n %[ 1r ] } p } ⊢ { { tav tv glv_n b } p } 
				∎ { tav tv glv_n p }
			§ f_o { tav tv glv_n p } 
				f_T◂◂alc_i { { tav tv glv_n %[ 1r ] } p } ⊢ { { tav tv glv_n b } p } 
				∐ b'=0r . 
					∎ { tav tv glv_n ‹› } 
				∐. . 
					∎ { tav tv glv_n ‹ p › }
		∎∎
	§§ crt_type_k 
		§ cst { evv c }
			∐ c ⊢ ast.k_r64◂x . 
				∎ { evv TX.r64◂{} }
			∐ c ⊢ ast.k_s8◂s . 
				∎ { evv TX.s8◂{} }  
			∐ c ⊢ ast.k_name◂i . 
				EVV.lod_ev { evv i } ⊢ { evv i vi } 
				∎ { evv RP.atm◂var◂T.p◂%vi }
			∐. . 
				_emt %[ "slv cst 0" ] ⊢ _
				∎| 
		§ tpl { { evv tv rv } i } 
			ast.RV.asc { rv i } ⊢ { rv { i o } } 
			smt_err◂◂"re_atm:0" o ⊢ v 
			∎ { { evv tv rv } RP.atm◂var◂T.p◂v } 
		§ tpl_ptn = RP.map_l_atm◂◂tpl
		§ 
			@.re_atm◂◂V { { evv tv rv } r } 
				$ r ⊢ 
				∐ ast.re_v◂c0 . 
					V { { evv tv rv } c0 } ⊢ { { evv tv rv } y } 
					∎ { { evv tv rv } y } 
				∐ ast.re_agl◂{ i sp } . 
					RP.map_l_atm◂◂(re_atm◂◂V) { { evv tv rv } sp } ⊢ { { evv tv rv } ys } 
					EVV.lod_ev { evv i } ⊢ { evv i vi } 
					T.iug_ctr_d { tv %[ 0r ] ys RP.atm◂var◂T.p◂%vi } ⊢ { tv _ ys yd yi } 
					∎ { { evv tv rv } yd }
				∐. ast.re_reg◂%r . 
					ast.RV.asc { rv r } ⊢ { rv { r o } } 
					smt_err◂◂"re_atm:0" o ⊢ v 
					∎ { { evv tv rv } RP.atm◂var◂T.p◂%v } 
		§ 
	 		@.src_v # { { evv tv rv } c } 
				cst { evv c } ⊢ { evv y } 
				∎ { { evv tv rv } y }
			@.src_atm = re_atm◂◂src_v 
			@.src_ptn = RP.map_l_atm◂◂src_atm
			@.src_ptn_lst = lst.map_l◂◂src_ptn 
			
		§ 
			@.mtc_v # { { evv tv rv } o } 
				∎|
			@.mtc_atm = re_atm◂◂mtc_v 
			@.mtc_ptn = RP.map_l_atm◂◂mtc_atm 
			@.mtc_ptn_lst = lst.map_l◂◂mtc_ptn 
		∎∎	 
	
		§ @.slv_ns◂◂{ ASC_M ASC_F GET SET P0 P1 } { n MV NS m_l }
			$ n ⊢ 
			∐ ast.mdl_n◂{ w n } . 
				ASC_M { NS w } ⊢ { NS w o }
				$ o ⊢ 
				∐ _some◂i_m . 
					GET { MV i_m } ⊢ { MV i_m NS0 } 
					slv_ns◂◂{ ASC_M ASC_F GET SET P0 P1 } { n MV NS0 _nil◂{} } ⊢ { MV NS0 _ i_e }
					SET { MV i_m NS0 } ⊢ { MV _ } 
					∎ { MV NS m_l i_e }
				∐. _none◂{} . 
					$ m_l ⊢ 
					∐ _cns◂{ I m_l } .
						P0 I ⊢ { NS0 I } 
						$ ast.mdl_n◂{ w n } ⊢ n 
						slv_ns◂◂{ ASC_M ASC_F GET SET P0 P1 } { n MV NS0 m_l } ⊢ { MV NS0 m_l i_e }
						P1 { NS0 I } ⊢ I 
						$ _cns◂{ I m_l } ⊢ m_l 
						∎ { MV NS m_l i_e }
					∐. _nil◂{} . 
						^ w ⊢ _,sr 
							"slv_ns 0:not found:" 0' "\n" //
						_emt sr ⊢ sr 
						∎|  
			∐. ast.fst_n◂w . 
				ASC_F { NS w } ⊢ { NS w o } 
				$ o ⊢
				∐ _some◂i_e . 
					∎ { MV NS m_l i_e }
				∐. _none◂{} . 
					$ m_l ⊢ 
					∐ _cns◂{ I m_l } .
						$ ast.fst_n◂w ⊢ n 
						P0 I ⊢ { NS0 I } 
						slv_ns◂◂{ ASC_M ASC_F GET SET P0 P1 } { n MV NS0 m_l } ⊢ { MV NS0 m_l i_e }
						P1 { NS0 I } ⊢ I 
						$ _cns◂{ I m_l } ⊢ m_l 
						∎ { MV NS m_l i_e }
					∐. _nil◂{} . 
						_emt w ⊢ w
						^ _ ⊢ sr 
							"slv_ns 1:not found\n" //
						_emt sr ⊢ sr 
						∎|  
		§ MV_MAX = 3200r 
		§§ MMV 
			§ ini # {} 
				ini_tv_n %[ MV_MAX ] ⊢ { _ mmv } 
				∎ mmv 
			§ get = get_tv 
			§ set = set_tv
			∎∎ 
		§§ NS_M 
			§ ini = BST_s8.ini
			§ asc # { ns w } 
				BST_s8.asc { ns w } ⊢ { ns { w o } } 
				∎ { ns w o } 
			§ set = BST_s8.set 
			∎∎
		§§ MTV 
			§ ini # {} 
				ini_tv_n %[ MV_MAX ] ⊢ { _ mtv } 
				∎ mtv 
			§ asc # { ns w } 
				BST_s8.asc { ns w } ⊢ { ns { w o } } 
				∎ { ns w o } 
			§ get = get_tv 
			§ set = set_tv
			∎∎ 
		§§ NS_T 
			§ ini = BST_s8.ini 
			§ set = BST_s8.set  
			∎∎		
\\[
		§§ MEV
			§ ini # {} 
				ini_tv_n %[ MV_MAX ] ⊢ { _ mev } 
				∎ mev 
			§ get = get_tv 
			§ set = set_tv
			∎∎ 
		§§ NS_E 
			§ ini = BST_s8.ini 
			§ asc # { ns w } 
				BST_s8.asc { ns w } ⊢ { ns { w o } } 
				∎ { ns w o } 
			§ set = BST_s8.set  
			§ get = BST_s8.get
			∎∎		
	\\]
	

		§ add_e { tv evv ev_n ns e k y } 
			T.newvar_ln { tv y } ⊢ { tv i0 } 
			EVV.alc { evv { i0 k } } ⊢ { evv p } 
			$ p ⊢ p,p0 
			NS_E.set { ns { e p } } ⊢ { ns _ } 
			∎ { tv evv ev_n ns p0 }
		§ add_t # { tv ns e y } 
			T.newvar_ln { tv y } ⊢ { tv i0 } 
			NS_T.set { ns { e i0 } } ⊢ { ns _ } 
			∎ { tv ns } 
		§§ slv_ns_e 
			§ asc_m # { { m_ns t_ns } w }
				NS_M.asc { m_ns w } ⊢ { m_ns w o } 
				∎ { { m_ns t_ns } w o }
			§ asc_f # { { m_ns e_ns } w } 
				NS_E.asc { e_ns w } ⊢ { e_ns w o } 
				∎ { { m_ns e_ns } w o } 
			§ get # { { mmv mtv } i_m } 
				MMV.get { mmv i_m } ⊢ { mmv i_m m_ns }
				MEV.get { mtv i_m } ⊢ { mtv i_m t_ns } 
				∎ { { mmv mtv } i_m { m_ns t_ns } }
			§ set # { { mmv mtv } i_m { m_ns t_ns } } 
				MMV.set { mmv i_m m_ns } ⊢ { mmv i_m } 
				MEV.set { mtv i_m t_ns } ⊢ { mtv i_m } 
				∎ { { mmv mtv } i_m }
			§ p0 # { i_m_r ns_m0 ns_e0 ns_t0 } 
				∎ { { ns_m0 ns_e0 } { i_m_r ns_t0 } } 
			§ p1 # { { ns_m0 ns_e0 } { i_m_r ns_t0 } } 
				∎ { i_m_r ns_m0 ns_e0 ns_t0 }
			§ f = slv_ns◂◂{ asc_m asc_f get set p0 p1 } 
			∎∎
			§ slv_ns_e = slv_ns_e.f
		
		§§ slv_ns_t 
			§ asc_m # { { m_ns t_ns } w }
				NS_M.asc { m_ns w } ⊢ { m_ns w o } 
				∎ { { m_ns t_ns } w o }
			§ asc_f # { { m_ns t_ns } w } 
				MTV.asc { t_ns w } ⊢ { t_ns w o } 
				∎ { { m_ns t_ns } w o } 
			§ get # { { mmv mtv } i_m } 
				MMV.get { mmv i_m } ⊢ { mmv i_m m_ns } 
				MTV.get { mtv i_m } ⊢ { mtv i_m t_ns } 
				∎ { { mmv mtv } i_m { m_ns t_ns } }
			§ set # { { mmv mtv } i_m { m_ns t_ns } } 
				MMV.set { mmv i_m m_ns } ⊢ { mmv i_m } 
				MTV.set { mtv i_m t_ns } ⊢ { mtv i_m } 
				∎ { { mmv mtv } i_m }
			§ p0 # { i_m_r ns_m0 ns_e0 ns_t0 } 
				∎ { { ns_m0 ns_t0 } { i_m_r ns_e0 } } 
			§ p1 # { { ns_m0 ns_t0 } { i_m_r ns_e0 } } 
				∎ { i_m_r ns_m0 ns_e0 ns_t0 }
			§ f = slv_ns◂◂{ asc_m asc_f get set p0 p1 } 
			∎∎
			§ slv_ns_t = slv_ns_t.f

		§§ slv_ns_m 
			\\[
			§ asc_m = NS_M.asc 
			§ asc_f = NS_M.asc 
			§ get = MMV.get 
			§ set = MMV.set 
			§ p0 # { i_m_r ns_m0 ns_e0 ns_t0 } 
				∎ { ns_m0 { i_m_r ns_e0 ns_t0 } } 
			§ p1 # { ns_m0 { i_m_r ns_e0 ns_t0 } } 
				∎ { i_m_r ns_m0 ns_e0 ns_t0 }
			§ f = slv_ns◂◂{ asc_m asc_f get set p0 p1 } 
			∎∎
		§ slv_ns_m = slv_ns_m.f
		
		§ eqv { tv y0 y1 }
			T.ciu { tv y0 y1 } ⊢ { tv y0 y1 b }
			$ b ⊢ 
			∐ _none◂{} . 
				T.ciu { tv y1 y0 } ⊢ { tv y1 y0 b }
				∎ { tv y0 y1 b } 
			∐. _some◂e . 	
				∎ { tv y0 y1 ‹ e › } 
		§ @.eqv_lst { tv l0 l1 } 
			∐ l0 ⊢ _cns◂{ t0 l0 }; l1 ⊢ _cns◂{ t1 l1 } . 
				eqv { tv t0 t1 } ⊢ { tv t0 t1 b } 
				$ b ⊢ 
				∐ _none◂{} . 
					eqv_lst { tv l0 l1 } ⊢ { tv l0 l1 b } 
					∎ { tv ⟦ t0 < l0 ⟧ ⟦ t1 < l1 ⟧ b } 
				∐. _some◂e . 
					∎ { tv ⟦ t0 < l0 ⟧ ⟦ t1 < l1 ⟧ bl.f◂{} }
			∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
				∎ { tv ⟦⟧ ⟦⟧ bl.t◂{} }
			∐. . 
				∎| 
		§§ find_gf 
			§ @.e_lp { { tv evv y0 o_p } gfl } 
				$ gfl ⊢ 
				∐ _cns◂{ { lb i1 o_k y1 p0 gyd p1 } gfl } . 
					T.ciu { tv y1 y0 } ⊢ { tv y1 y0 b }
					\\eqv { tv y0 y1 } ⊢ { tv y0 y1 b } 
					$ b ⊢ 
					∐ _none◂{} . 
						opn.eq_st_T◂◂ast.eq_ct_ptn { evv o_p o_k } ⊢ { evv o_p o_k b1 } 
						∐ b1 ⊢ bl.t◂{} . 
							$ { lb i1 o_k y1 p0 gyd p1 } ⊢ A0,A1 
							∎ { { tv evv y0 o_p ‹ A1 › } _cns◂{ A0 gfl } }
						∐. . 
							$ { lb i1 o_k y1 p0 gyd p1 } ⊢ A0
							e_lp { { tv evv y0 o_p } gfl } ⊢ { { tv evv y0 o_p o0 } gfl } 
							∎ { { tv evv y0 o_p o0 } _cns◂{ A0 gfl } }
					∐. _some◂_ . 
						$ { lb i1 o_k y1 p0 gyd p1 } ⊢ A0
						e_lp { { tv evv y0 o_p } gfl } ⊢ { { tv evv y0 o_p o0 } gfl } 
						∎ { { tv evv y0 o_p o0 } _cns◂{ A0 gfl } }
				∐. _nil◂{} . 
					∎ { { tv evv y0 o_p ‹› } ⟦⟧ }
			§ e # { tv evv mfv i0 y0 o_p }
				exc_q { mfv i0 ⟦⟧ } ⊢ { mfv i0 gfl } 
				e_lp { { tv evv y0 o_p } gfl } ⊢ { { tv evv y0 o_p o } gfl } 
				exc_q { mfv i0 gfl } ⊢ { mfv i0 _ } 
				∎ { tv evv mfv i0 y0 o_p o } 
			∎∎
		
		§§ slv_n 
			§ re_itr # { l { w i } } 
				∎ _cns◂{ i l } 
     
			§§ RE 
				§ ini = BST_s8.ini 
				§ asc = BST_s8.asc 
				§ set = BST_s8.set 
				§ get = BST_s8.get 
				§ rpc = BST_s8.rpc 
				§ mk_lst = BST_s8.itr◂◂re_itr 
				§ is_empty = BST_s8.is_empty
				∎∎
			§ reg # { w rv_n re }
			  $ rv_n ⊢ rv_n,n0
			  RE.set { re { w n0 } } ⊢ { re _ } 
				_inc rv_n ⊢ rv_n 
			  ∎ { rv_n re }
      \\§ reg = reg_T◂◂RE.set
	 
			§ 
				@.cst { %env0 %c } 
		    ∐ %c ⊢ ast.k_name◂%cn . 
			    $ %env0 ⊢ { mmv mev m_ns e_ns m_l } 
			    slv_ns_e { cn { mmv mev } { m_ns e_ns } m_l } ⊢ { { mmv mev } { m_ns e_ns } m_l i_e }
			    $ { mmv mev m_ns e_ns m_l } ⊢ env0 	
			    ∎ { env0 ast.k_name◂i_e }
	    	∐ c ⊢ ast.k_r64◂x . 
		    	∎ { env0  ast.k_r64◂x }
		    ∐ c ⊢ ast.k_s8◂s . 
			    ∎ { env0  ast.k_s8◂s } 
	    	∐ c ⊢ ast.k_app◂{ c0 c1 } . 
					ct_ptn { env0  c0 } ⊢ { env0  c0 }
					ct_ptn { env0  c1 } ⊢ { env0  c1 }
					∎ { env0  ast.k_app◂{ c0 c1 } }
				∐ c ⊢ ast.k_agl◂{ i0 c0 } . 
					ct_ptn { env0  c0 } ⊢ { env0  c0 }
					$ %env0 ⊢ { %mmv %mev %m_ns %e_ns %m_l } 
			    slv_ns_e { i0 { mmv mev } { m_ns e_ns } m_l } ⊢ { { mmv mev } { m_ns e_ns } m_l i_e }
			    $ { mmv mev m_ns e_ns m_l } ⊢ env0 	
					∎ { env0 ast.k_agl◂{ i_e c0 } }
				∐ c ⊢ ast.k_pf◂pl . 
					lst.map_l◂◂exp_s8 { env0 pl } ⊢ { env0 pl } 
					∎ { env0 ast.k_pf◂pl }
				∐. . 
		    	$ %[ "slv_n:cst 0" ] ⊢ ee0 
					_emt ee0 ⊢ _ 
					∎|  	
			@.exp_s8 { env0 e } 
				$ e ⊢ 
				∐ ast.exp_s8_cst◂c . 
					cst { env0  c } ⊢ { env0  c } 
					$ ast.exp_s8_cst◂c ⊢ e 
					∎ { env0 e }
				∐ ast.exp_s8_idx◂{ p i } . 
					∐ p ⊢ ast.fmt_p◂{} .
						_emt %[ "slv_exp_s8_fmt 0" ] ⊢ _ 
						∎| 
					∐. . 
						$ ast.exp_s8_idx◂{ p i } ⊢ e 
						∎ { env0 e }
				∐. ast.exp_s8_for◂{ i c } . 
					cst { env0  c } ⊢ { env0  c } 
					$ ast.exp_s8_for◂{ i c } ⊢ e
				  ∎ { env0 e }
				@.ct_ptn = RP.map_l◂◂cst 
			§ ct_ptn_lst = lst.map_l◂◂ct_ptn 
		§ 
				@.crt_mtc { { env0 tv n re dl } a }  
					$ a ⊢ 
					∐ ast.re_reg◂w .
						RE.asc { re w } ⊢ { re { w o } } 
						nnt_emt { o w } ⊢ w 
						$ n ⊢ n,n0
						reg { w n re } ⊢ { n re } 
						∎ { { env0 tv n re dl } ast.re_reg◂n0 }
					∐ ast.re_v◂_ .
						$ n ⊢ n,n0,n1
						_inc n ⊢ n 							
						∎ { { env0 tv n re ⟦ n1 < dl ⟧ } ast.re_reg◂n0 }
					∐. ast.re_agl◂{ cn ap } . 
						crt_mtc_ptn { { env0 tv n re dl } ap } ⊢ { { env0 tv n re dl } ap } 
						$ env0 ⊢ { mmv mev m_ns e_ns m_l } 
						slv_ns_e { cn { mmv mev } { m_ns e_ns } m_l } ⊢ { { mmv mev } { m_ns e_ns } m_l i_e } 
						$ { mmv mev m_ns e_ns m_l } ⊢ env0 
						∎ { { env0 tv n re dl } ast.re_agl◂{ i_e ap } }
				@.crt_mtc_ptn = RP.map_l◂◂crt_mtc 
			§ crt_mtc_ptn_lst = lst.map_l◂◂crt_mtc_ptn 
			§ crt_mtc_lst = lst.map_l◂◂crt_mtc
			§ 
				@.crt_mtc_al { { env0 tv n re dl al adl } a }  
					$ a ⊢ 
					∐ ast.re_reg◂w .
						RE.asc { re w } ⊢ { re { w o } } 
						nnt_emt { o w } ⊢ w 
						$ n ⊢ n,n0
						reg { w n re } ⊢ { n re } 
						\\∎ { { env0 tv n re dl al adl } ast.re_reg◂n0 }
						∎ { { env0 tv n re dl al adl } n0 }
					∐ ast.re_v◂_ .
						$ n ⊢ n,n0,n1
						_inc n ⊢ n 							
						∎ { { env0 tv n re ⟦ n1 < dl ⟧ al adl } n0 }
					∐. ast.re_agl◂{ cn ap } . 
						crt_mtc_ptn { { env0 tv n re adl } ap } ⊢ { { env0 tv n re adl } ap } 
						$ env0 ⊢ { mmv mev m_ns e_ns m_l } 
						slv_ns_e { cn { mmv mev } { m_ns e_ns } m_l } ⊢ { { mmv mev } { m_ns e_ns } m_l i_e } 
						$ { mmv mev m_ns e_ns m_l } ⊢ env0 
						\\[
						$ n ⊢ n,n0,n1 
						_inc n ⊢ n 
						\\∎ { { env0 tv n re dl ⟦ { n1 i_e ap } < al ⟧ adl } ast.re_reg◂n0 }
						∎ { { env0 tv n re dl ⟦ { n1 i_e ap } < al ⟧ adl } n0 }
					
				@.crt_mtc_ptn_al = RP.map_l◂◂crt_mtc_al
		§ crt_mtc_ptn_lst_al = lst.map_l◂◂crt_mtc_ptn_al 
		§ crt_mtc_lst_al = lst.map_l◂◂crt_mtc_al
		§ 
			@.csm_src { { env0 tv re } a }
				$ a ⊢ 
				∐ ast.re_reg◂w .
					RE.get { re w } ⊢ { re { w o } } 
					^ w ⊢ w,e
						"csm_src 1:" 0' //
					smt_err_r { o e } ⊢ i 
					∎ { { env0 tv re } ast.re_reg◂i }
				∐ ast.re_agl◂{ n sp } . 
					$ %env0 ⊢ { %mmv %mev %m_ns %e_ns %m_l } 
			    slv_ns_e { n { mmv mev } { m_ns e_ns } m_l } ⊢ { { mmv mev } { m_ns e_ns } m_l i_e }
			    $ { mmv mev m_ns e_ns m_l } ⊢ env0 	
			    csm_src_ptn { { env0 tv re } sp } ⊢ { { env0 tv re } sp } 
					∎ { { env0 tv re } ast.re_agl◂{ i_e sp } }				
				∐. ast.re_v◂c .
					cst { env0 c } ⊢ { env0 c }
					∎ { { env0 tv re } ast.re_v◂c }
			@.csm_src_lst = lst.map_l◂◂csm_src 
			@.csm_src_ptn_lst = lst.map_l◂◂csm_src_ptn 
			@.csm_src_ptn = RP.map_l◂◂csm_src
		§ 
			@.tpl_ptn = RP.map_l◂◂tpl_atm 
			@.tpl_atm { { wl n } w } 		
				RE.asc { wl w } ⊢ { wl { w o } } 
				nnt_emt { o w } ⊢ w 
				inc_x n ⊢ { i n } 
				$ i ⊢ i,i0
				RE.set { wl { w i } } ⊢ { wl _ } 
				∎ { { wl n } i0 } 
			@.tpl_ptn_lst = lst.map_l◂◂tpl_atm 
		§ 
			@.csm_tpl { re w }
				RE.get { re w } ⊢ { re { w o } } 
				^ w ⊢ w,e
					"csm_src 1:" 0' //
				smt_err_r { o e } ⊢ i 
				∎ { re i }
		§ csm_tpl_lst = lst.map_l◂◂csm_tpl 
		§ csm_tpl_ptn = RP.map_l◂◂csm_tpl
		§ csm_tpl_ptn_lst = lst.map_l◂◂csm_tpl_ptn 
		
		§ dlt_i # { { i dl } d } 
			_inc i ⊢ i 
			∎ { i ⟦ RP.atm◂ast.re_reg◂d < dl ⟧ } 
		§ dlt { dl lc } 
			lst.fld_l◂◂dlt_i { { %[ 0r ] ⟦⟧ } dl } ⊢ { i dl } 
			∐ i'=0r .
				∎ lc 
			∐. . 
				∎ ast.seq◂{ { RP.atm◂ast.k_op_axm◂{ %[ EX.dlt ] ⟦⟧ } RP.rcd◂dl RP.unt◂{} } lc }
		§ iso_i # { { n sl ml } { i c p } }
			_inc n ⊢ n 
			∎ { n ⟦ RP.atm◂i < sl ⟧ ⟦ RP.atm◂ast.re_agl◂{ c p } < ml ⟧ } 
		§ iso_rl { re adl al } 
			lst.fld_l◂◂iso_i { { %[ 0r ] ⟦⟧ ⟦⟧ } al } ⊢ { n sl ml } 
			∐ n'=0r . 
				∎ { re ‹› }
			∐. .
				RE.mk_lst { re ⟦⟧ } ⊢ { re rl } 
				$ adl ⊢ adl,adl0 
				rev_apnd { adl0 rl } ⊢ rl 
				$ ast.mtc_id◂{ RP.rcd◂sl RP.rcd◂ml } ⊢ t
				∎ { re ‹ { adl rl t } › }
		§ iso { o lc } 
			∐ o ⊢ _some◂{ adl rl t } . 
				dlt { adl lc } ⊢ lc 
				∎ ast.mtc◂ast.na_s◂{ t ast.na_e◂{ rl lc } }
			∐. . 
				∎ lc 
		§ test_var { env0 n re v } 
			$ v ⊢ 
			∐ ast.test_var◂w . 
				RE.asc { re w } ⊢ { re { w o } }
				smt_err◂◂"test_var:0" o ⊢ i 
				$ ast.test_var◂i ⊢ v 
  			∎ { env0 n re v }
			∐. ast.test_cst◂c .  
				cst { env0 c } ⊢ { env0 c }
				$ ast.test_cst◂c ⊢ v 
				∎ { env0 n re v }
		§ op_line { { env0 tv n re } ll }
			$ ll ⊢ { o s d }
			ct_ptn { env0 o } ⊢ { env0 o } 
			csm_src_ptn { { env0 tv re } s } ⊢ { { env0 tv re } s }
			crt_mtc_ptn_al { { env0 tv n re ⟦⟧ ⟦⟧ ⟦⟧ } d } ⊢ { { env0 tv n re dl al adl } d }
			∎ { { env0 tv n re dl al adl } { o s d } }
		§ mtc_test { { env0 tv n re dl } t }
			$ t ⊢ 
			∐ ast.mtc_id◂{ sp mp } . 
				\\csm_src_ptn { { env0 tv re } sp } ⊢ { { env0 tv re } sp } 
				csm_tpl_ptn { re sp } ⊢ { re sp } 
				crt_mtc_ptn { { env0 tv n re dl } mp } ⊢ { { env0 tv n re dl } mp }
				∎ { { env0 tv n re dl } ast.mtc_id◂{ sp mp } } 
			∐. ast.mtc_test◂{ tt v0 v1 } .  
				test_var { env0 n re v0 } ⊢ { env0 n re v0 } 
				test_var { env0 n re v1 } ⊢ { env0 n re v1 } 
				∎ { { env0 tv n re dl } ast.mtc_test◂{ tt v0 v1 } }  
		§	@.tj { { env0 tv n re } v } 
			$ v ⊢ 
			∐ _cns◂{ lc v } . 
				RE.rpc re ⊢ { re rex } 
				r { { env0 tv n rex } lc } ⊢ { { env0 tv n _ } lc } 
				tj { { env0 tv n re } v } ⊢ { { env0 tv n re } v } 
				∎ { { env0 tv n re } ⟦ lc < v ⟧ }
			∐. _nil◂{} . 
				∎ { { env0 tv n re } ⟦⟧ }
			@.r { { env0 tv n re } lc }
			$ lc ⊢
			∐ ast.jmp◂{ en x } . 
				ct_ptn { env0 en } ⊢ { env0  en } 
				csm_src_ptn { { env0 tv re } x } ⊢ { { env0 tv re } x } 
				∎ { { env0 tv n re } ast.jmp◂{ en x } } 
			∐ ast.seq◂{ ll lc } .
				op_line { { env0 tv n re } ll } ⊢ { { env0 tv n re dl al adl } ll } 
				iso_rl { re adl al } ⊢ { re o } 
				r { { env0 tv n re } lc } ⊢ { { env0 tv n re } lc }
				iso { o lc } ⊢ lc
				dlt { dl lc } ⊢ lc 
				∎ { { env0 tv n re } ast.seq◂{ ll lc } }
			∐ ast.mtc◂lm .
				lc_mtc { { env0 tv n re ⟦⟧ } lm } ⊢ { { env0 tv n re } lm }
				∎ { { env0 tv n re } ast.mtc◂lm } 
			∐ ast.op_exh◂{ op sp dp lf lx } . 
				ct_ptn { env0 op } ⊢ { env0 op } 
				csm_src_ptn { { env0 tv re } sp } ⊢ { { env0 tv re } sp } 
				RE.rpc re ⊢ { re re0 } 
				\\crt_mtc_ptn { { env0 tv n re ⟦⟧ } dp } ⊢ { { env0 tv n re dl } dp }
				crt_mtc_ptn_al { { env0 tv n re ⟦⟧ ⟦⟧ ⟦⟧ } dp } ⊢ { { env0 tv n re dl al adl } dp }
				iso_rl { re adl al } ⊢ { re o } 
				r { { env0 tv n re } lf } ⊢ { { env0 tv n re } lf } 
				iso { o lf } ⊢ lf
				dlt { dl lf } ⊢ lf 
				r { { env0 tv n re0 } lx } ⊢ { { env0 tv n re0 } lx } 
				∎ { { env0 tv n re } ast.op_exh◂{ op sp dp lf lx } } 
			∐. ast.tj◂{ x v r } .
				RE.asc { re x } ⊢ { re { _ o } } 
				smt_err◂◂"test_var_T" o ⊢ i 
				RE.rpc re ⊢ { re rex } 
				tj { { env0 tv n rex } v } ⊢ { { env0 tv n _ } v } 				 
  			r { { env0 tv n re } r } ⊢ { { env0 tv n re } r }
				∎ { { env0 tv n re } ast.tj◂{ i v r } }
		@.lc_mtc { { env0 tv n re dl } m } 
			$ m ⊢ 
			∐ ast.na_e◂{ _ lc } .	
				RE.mk_lst { re ⟦⟧ } ⊢ { re rl } 
				$ dl ⊢ dl,dl0 
				rev_apnd { dl0 rl } ⊢ rl 
				r { { env0 tv n re } lc } ⊢ { { env0 tv n re } lc } 
				dlt { dl lc } ⊢ lc 
				∎ { { env0 tv n re } ast.na_e◂{ rl lc } } 
			∐ ast.na_s◂{ t m } .
				mtc_test { { env0 tv n re dl } t } ⊢ { { env0 tv n re dl } t } 
				lc_mtc { { env0 tv n re dl } m } ⊢ { { env0 tv n re } m }
				∎ { { env0 tv n re } ast.na_s◂{ t m } }
			∐. ast.na_p◂{ t m0 m1 } . 
				RE.rpc re ⊢ { re re0 } 
				$ dl ⊢ dl,dl0 
				mtc_test { { env0 tv n re dl } t } ⊢ { { env0 tv n re dl } t } 
				lc_mtc { { env0 tv n re dl } m0 } ⊢ { { env0 tv n re } m0 }
				lc_mtc { { env0 tv n re0 dl0 } m1 } ⊢ { { env0 tv n _ } m1 }
				∎ { { env0 tv n re } ast.na_p◂{ t m0 m1 } }
		∎∎	
	§§ slv_gl 
		§§ RV = ast.RV 
		§ pc0◂{} = RP.atm◂ast.k_ply◂{ RP.cns2◂{ RP.atm◂%[ 0r ] RP.atm◂%[ 1r ] } RP.cns2◂{ RP.atm◂ast.re_reg◂%[ 1r ] RP.atm◂ast.re_reg◂%[ 0r ] } }
		§ pc1◂{} = RP.atm◂ast.k_ply◂{ RP.cns2◂{ RP.atm◂%[ 0r ] RP.unt◂{} } RP.atm◂ast.re_reg◂%[ 0r ] } 
		§ ctr◂c = RP.atm◂ast.k_op_axm◂{ %[ EX.ctr ] ⟦ c ⟧ }
		§ pr0◂{} = ctr◂pc0◂{} 
		§ pr1◂{} = ctr◂pc1◂{} 
		§ op_k◂{ i l } = RP.atm◂ast.k_op_axm◂{ i l } 
		§ id_k◂{} = op_k◂{ %[ EX.id ] ⟦⟧ } 
		§ dlt_k◂{} = RP.atm◂ast.k_op_axm◂{ %[ EX.dlt ] ⟦⟧ }
		§ seq_k◂{ f g } = RP.atm◂ast.k_op_axm◂{ %[ EX.seq ] ⟦ RP.cns2◂{ f g } ⟧ }
		§ id_par◂f = RP.atm◂ast.k_op_axm◂{ %[ EX.id_par ] ⟦ f ⟧ } 
		§ dlt_id◂{} = seq_k◂{ pr0◂{} seq_k◂{ id_par◂dlt_k◂{} pr1◂{} } } 
		§ 
			@.f0_atm { { v n } a } 
				$ a ⊢ 
				∐ ast.re_reg◂i .
					$ n ⊢ n,n0,n1 
					_inc n ⊢ n 
					RV.set { v { i n0 } } ⊢ { v { i o } } 
					nnt o ⊢ {} 
					∎ { { v n } ast.re_reg◂n1 }				
				∐ ast.re_agl◂{ e sp } . 
					f0 { { v n } sp } ⊢ { { v n } sp } 
					∎ { { v n } ast.re_agl◂{ e sp } }				
				∐. ast.re_v◂c .
					∎ { { v n } ast.re_v◂c }
			@.f0 = RP.map_l◂◂f0_atm 
		§ f1_atm { { v n l } i } 
			RV.get { v i } ⊢ { v { i o } } 
			$ o ⊢ 
			∐ _some◂j . 
				∎ { { v n l } j }
			∐. _none◂{} . 
				$ n ⊢ n,n0,n1 
				_inc n ⊢ n 
				∎ { { v n ⟦ RP.atm◂ast.re_reg◂n0 < l ⟧ } n1 }
		§ f1 = RP.map_l◂◂f1_atm 
		§ f2_atm { { v n l ld } i } 
			RV.get { v i } ⊢ { v { i o } } 
			$ o ⊢ 
			∐ _some◂j . 
				∎ { { v n l ld } j }
			∐. _none◂{} . 
				$ n ⊢ n,n0,n1 
				_inc n ⊢ n 
				∎ { { v n ⟦ RP.atm◂ast.re_reg◂n0 < l ⟧ ⟦ RP.atm◂i < ld ⟧ } n1 }
		§ f2 = RP.map_l◂◂f2_atm 
		§ ip0 { p sp }
			RV.ini {} ⊢ v 
			f0 { { v %[ 0r ] } sp } ⊢ { { v n } sp } 
			f1 { { v n ⟦⟧ } p } ⊢ { { _ _ l } p } 
			∎ RP.atm◂ast.k_ply◂{ p RP.cns2◂{ RP.rcd◂l sp } }
		§ ip1 { p sp }
			RV.ini {} ⊢ v 
			f0 { { v %[ 0r ] } sp } ⊢ { { v n } sp } 
			f2 { { v n ⟦⟧ ⟦⟧ } p } ⊢ { { _ _ l dl } p } 
			∎ { RP.atm◂ast.k_ply◂{ p RP.cns2◂{ RP.rcd◂l sp } } RP.rcd◂dl }
		§ to_src { l i } 
			∎ ⟦ RP.atm◂ast.re_reg◂i < l ⟧ 
		§ to_tpl { l i } 
			∎ ⟦ RP.atm◂i < l ⟧ 
		
		§ id0◂d = { id_k◂{} RP.atm◂ast.re_reg◂%[ 0r ]  d } 
		§ 
			@.r { { ps q pd } lc } 
				$ lc ⊢
				∐ ast.jmp◂{ en x } . 
					ip0 { pd x } ⊢ k0 
					∎ ast.jmp◂{ seq_k◂{ q seq_k◂{ ctr◂k0 seq_k◂{ dlt_id◂{} en } } } ps }
					\\∎ ast.seq◂{ { q ps pd } ast.jmp◂{ en x } }
				∐ ast.seq◂{ { en s d } lc } .
					\\[
					ip1 { pd s } ⊢ { k0 d0 } 
					$ seq_k◂{ q seq_k◂{ ctr◂k0 id_par◂en } } ⊢ q 
					$ RP.cns2◂{ d0 d } ⊢ pd
					r { { ps q pd } lc } ⊢| 
					\\]
				\\	∎ ast.seq◂{ { q ps pd } ast.seq◂{ { en s d } lc } }
				∐ ast.mtc◂lm .
					mtc lm ⊢ lm 
					∎ ast.seq◂{ { q ps pd } ast.mtc◂lm } 
				∐ ast.op_exh◂{ op sp dp lf lx } . 
					\\r lf ⊢ { V lf } 
					\\r { V lx } ⊢ { V lx } 
					∎ ast.seq◂{ { q ps pd } ast.op_exh◂{ op sp dp lf lx } }
				∐. ast.tj◂{ x v r } .
					\\tj { V v } ⊢ { V v } 				 
  				\\r { V r } ⊢ { V r }
					∎ ast.seq◂{ { q ps pd } ast.tj◂{ x v r } }
			@.mtc lm 
				$ lm ⊢ 
				∐ ast.na_e◂{ rl lc } . 
					\\$ rl ⊢ rl,rl0,rl1 
					\\\lst.fld_l◂◂to_src { ⟦⟧ rl0 } ⊢ sl 
					\\lst.fld_l◂◂to_tpl { ⟦⟧ rl1 } ⊢ tl 
					\\r { { RP.rcd◂sl id_k◂{} RP.rcd◂tl } lc } ⊢ lc 
					∎ ast.na_e◂{ rl lc }
				∐ ast.na_s◂{ t lm } . 
					mtc lm ⊢ lm 
					∎ ast.na_s◂{ t lm } 
				∐. ast.na_p◂{ t lm0 lm1 } . 
					mtc lm0 ⊢ lm0 
					mtc lm1 ⊢ lm1 
					∎ ast.na_p◂{ t lm0 lm1 }
		∎∎ 
	§§ slv_V 
		§
			@.r { V lc }
				$ lc ⊢
				∐ ast.jmp◂{ en x } . 
					∎ { V ast.jmp◂{ en x } } 
				∐ ast.seq◂{ ll lc } .
					r { V lc } ⊢ { V lc }
					∎ { V ast.seq◂{ ll lc } }
				∐ ast.mtc◂lm .
					mtc { { V ‹› } lm } ⊢ { V m }
					∎ { V ast.mtc◂m } 
				∐ ast.op_exh◂{ op sp dp lf lx } . 
					r { V lf } ⊢ { V lf } 
					r { V lx } ⊢ { V lx } 
					∎ { V ast.op_exh◂{ op sp dp lf lx } } 
				∐. ast.tj◂{ x v r } .
					tj { V v } ⊢ { V v } 				 
  				r { V r } ⊢ { V r }
					∎ { V ast.tj◂{ x v r } }
			@.mtc { { V rbp } m } 
				$ m ⊢  
				∐ ast.na_e◂{ rl lc } . 
					r { V lc } ⊢ { V lc } 
					∎ { V ast.nx_e◂{ rl lc } }
				∐ ast.na_s◂{ mn m } .
					_cln V ⊢ { V n0 } 
					$ n0 ⊢ n0,n1 
					mtc { { V ‹ n1 › } m } ⊢ { V p1 }
					_cls { V n0 ast.p◂{ mn rbp ‹› p1 } } ⊢ { V n0 } 
					∎ { V ast.nx_m◂n0 }
				∐. ast.na_p◂{ mn mt mf } .
					_cln V ⊢ { V n0 } 
					$ n0 ⊢ n0,n1 
					mtc { { V ‹ n1 › } mt } ⊢ { V p1 }
					$ rbp ⊢ rbp,rbp0 
					mtc { { V rbp0 } mf } ⊢ { V pb } 
					_cls { V n0 ast.p◂{ mn rbp ‹ pb › p1 } } ⊢ { V n0 } 
					∎ { V ast.nx_m◂n0 }
		
			@.tj { V v } 
				$ v ⊢ 
				∐ _cns◂{ lc v } . 
					r { V lc } ⊢ { V lc } 
					tj { V v } ⊢ { V v } 
					∎ { V ⟦ lc < v ⟧ }
				∐. _nil◂{} . 
					∎ { V ⟦⟧ }
		∎∎
	§ 
		@.tpl_ptn = RP.map_l_x◂◂tpl_atm 
		@.tpl_atm { { c_n wl lv evv ev_n tv } w } 		
			assoc { wl w } ⊢ { wl w o } 
			nnt_emt { o w } ⊢ w 
			$ lv ⊢ lv,lv0 
			_clp { tv var_l◂lv0 } ⊢ { tv t0 } 
			$ t0 ⊢ t0,t0_0 
			$ RP.atm◂T.var◂T.p◂t0_0 ⊢ y 
			$ t0 ⊢ t0,t1 
			$ c_n ⊢ c_n,cv,cv0 
			_inc c_n ⊢ c_n 
			EVV.alc { evv { t0 ast.k_var◂{ cv0 t1 } } } ⊢ { evv n0 } 
			∎ { { c_n _cns◂{ { w _some◂n0 } wl } lv evv ev_n tv } cv y } 
		@.tpl_ptn_lst = lst.map_l_x◂◂tpl_atm 
	
		§§ slv 
			§ reg # { lv n0 rv tv }
				$ lv ⊢ lv,lv0 
				_clp { tv var_l◂lv0 } ⊢ { tv t0 } 
				$ t0 ⊢ t0,t0_0 
				$ RP.atm◂T.var◂T.p◂t0_0 ⊢ y 
				ast.RV.set { rv { n0 t0 } } ⊢ { rv { n0 o } } 
				nnt o ⊢ {} 
				∎ { lv n0 rv tv y }
			§ crt_tpl { { lv rv tv } n0 } 
				reg { lv n0 rv tv } ⊢ { lv n0 rv tv y } 
				∎ { { lv rv tv } n0 y }
			§ crt_tpl_ptn = RP.map_l_x◂◂crt_tpl 
			§ crt_tpl_ptn_lst = RP.map_l_x_lst◂◂crt_tpl 
			§ csm_tpl { { lv rv tv } i } 
				ast.RV.asc { rv i } ⊢ { rv { i o } } 
				smt_err◂◂"csm_tpl:0" o ⊢ vi 
				inst { tv lv RP.atm◂var◂T.p◂vi } ⊢ { tv lv y0 } 
				∎ { { lv rv tv } i y0 }
			§ csm_tpl_ptn = RP.map_l_x◂◂csm_tpl 
			§ csm_tpl_ptn_lst = RP.map_l_x_lst◂◂csm_tpl 
				
			§ 
				@.ct_abs { E y l }
					$ l ⊢ 
					∐ _cns◂{ c l } . 
						ct_ptn { E c } ⊢ { E c yc } 
						ct_abs { E TX.t_ct_imp◂{ yc y } l } ⊢ { E y l } 
						∎ { E y ⟦ c < l ⟧ }
					∐. _nil◂{} . 
						∎ { E y ⟦⟧ }
			@.op { E og v } 
				$ E ⊢ { lv evv tv } 
				$ v ⊢ v,v0
				inst { tv lv RP.atm◂var◂T.p◂v0 } ⊢ { tv lv y } 
				$ og ⊢ 
				∐ _none◂{} . 
					∎ { { lv evv tv } ‹› v y }
				∐. _some◂{ t1 c1 } . 
					ct_ptn { { lv evv tv } c1 } ⊢ { { lv evv tv } c1 y1 } 
					newvar_l { tv lv } ⊢ { tv lv yy }
					$ yy ⊢ yy,yy0 
					T.unify.f { tv RP.atm◂ct_imp◂{ y1 yy0 } y } ⊢ tv 
					∎ { { lv evv tv } ‹ { t1 c1 } › v yy }						
				
			@.cst { E c } 
				∐ c ⊢ ast.k_name◂i_e . 
					$ E ⊢ { lv evv tv } 
					EVV.lod_ev { evv i_e } ⊢ { evv i_e vi }
					inst { tv lv RP.atm◂var◂T.p◂vi } ⊢ { tv lv y } 
					∎ { { lv evv tv } ast.k_name◂i_e y }
				∐ c ⊢ ast.k_r64◂x . 
					∎ { E ast.k_r64◂x TX.r64◂{} }
				∐ c ⊢ ast.k_s8◂s . 
					∎ { E ast.k_s8◂s TX.s8◂{} } 
				∐ c ⊢ ast.k_app◂{ c0 c1 } . 
					ct_ptn { E c0 } ⊢ { E c0 y0 } 
					ct_ptn { E c1 } ⊢ { E c1 y1 } 
					$ E ⊢ { lv evv tv } 
					newvar_l { tv lv } ⊢ { tv lv yy }
					$ yy ⊢ yy,yy0 
					T.unify.f  { tv RP.atm◂ct_imp◂{ y1 yy0 } y0 } ⊢ tv    
					∎ { { lv evv tv } ast.k_app◂{ c0 c1 } yy }
				∐ c ⊢ ast.k_ctr◂{ i n v } . 
					$ E ⊢ { lv evv tv } 
					$ v ⊢ v,v0 
					inst { tv lv RP.atm◂var◂T.p◂%v0 } ⊢ { tv lv y } 
					∎ { { lv evv tv } ast.k_ctr◂{ i n v } y }
				∐ c ⊢ ast.k_agl◂{ i0 c0 } . 
					$ E ⊢ { lv evv tv } 
					EVV.lod_ev { evv i0 } ⊢ { evv i0 vi }
					inst { tv lv RP.atm◂var◂T.p◂vi } ⊢ { tv lv yi } 
					_inc lv ⊢ lv 
					ct_ptn { { lv evv tv } c0 } ⊢ { { lv evv tv } c0 ys } 
					newvar_l { tv lv } ⊢ { tv lv yd } 
					$ yd ⊢ yd,yd0 
					$ yi ⊢ yi,yi_0
					\\T.unify.f  { %tv RP.atm◂imp◂{ %ys %yd0 } %yi_0 } ⊢ tv
					T.unify.f  { %tv TX.t_ctr◂{ %ys %yd0 } %yi_0 } ⊢ tv
					_dec lv ⊢ lv 
					gen { tv lv yi } ⊢ { tv lv yi }
					inst { tv lv yd } ⊢ { tv lv yd }
					∎ { { lv evv tv } ast.k_agl◂{ i0 c0 } yd }
				∐ c ⊢ ast.k_var◂{ x v } . 
					$ E ⊢ { lv evv tv } 
					$ v ⊢ v,v0
					inst { tv lv RP.atm◂var◂T.p◂v0 } ⊢ { tv lv y } 
					∎ { { lv evv tv } ast.k_var◂{ x v } y }
				∐ c ⊢ ast.k_op_axm◂{ i l } . 
					$ E ⊢ { lv evv tv } 
					$ i ⊢ i,i0 
					EX.slv { tv i0 } ⊢ { tv y } 
					inst { tv lv y } ⊢ { tv lv y } 
					newvar_l { tv lv } ⊢ { tv lv yy }
					$ yy ⊢ yy,yy0 
					ct_abs { { lv evv tv } yy l } ⊢ { { lv evv tv } yy l } 
					T.unify.f  { tv y yy } ⊢ tv 
					∎ { { lv evv tv } ast.k_op_axm◂{ i l } yy0 }
				∐ c ⊢ ast.k_arr◂v .
					\[
					$ E ⊢ { lv evv tv } 
					newvar_l { tv lv } ⊢ { tv lv yy }
					arr.itr_lft◂◂ug { v { { lv evv tv } yy } } ⊢ { v { { lv evv tv } yy } }
					∎ { { lv evv tv } c_0 yy }
					\]
					∎| 
				∐ c ⊢ ast.k_op◂{ og o_n dp r_n ib lc v } . 
					op { E og v } ⊢ { E og v y } 
					∎ { E ast.k_op◂{ og o_n dp r_n ib lc v } y }
				∐ c ⊢ ast.k_op_gnr◂{ g o_n dp r_n ib lc v } . 
					$ E ⊢ { lv evv tv } 
					$ v ⊢ v,v0
					inst { tv lv RP.atm◂var◂T.p◂v0 } ⊢ { tv lv y } 
					∎ { { lv evv tv } ast.k_op_gnr◂{ g o_n dp r_n ib lc v } y }
				∐ c ⊢ ast.k_pf◂pl . 
					$ E ⊢ { lv evv tv } 
					newvar_l { tv lv } ⊢ { tv lv w } 
					pf { { lv evv tv w } pl } ⊢ { { lv evv tv w } pl }
					∎ { { lv evv tv } ast.k_pf◂pl TX.pf◂w }
				∐ c ⊢ ast.k_ply◂{ p0 p1 } . 
					$ E ⊢ { lv evv tv } 
					ast.RV.ini {} ⊢ rv0 
					_inc lv ⊢ lv 
					crt_tpl_ptn { { lv rv0 tv } p0 } ⊢ { { lv rv0 tv } p0 y } 
					csm_src_ptn { { lv evv rv0 tv } p1 } ⊢ { { lv evv _ tv } p1 yp } 
					_dec lv ⊢ lv 
					gen { tv lv y } ⊢ { tv lv y } 
					gen { tv lv yp } ⊢ { tv lv yp } 
					$ TX.t_ctr◂{ y yp } ⊢ y 
					\[
					$ t ⊢ t,t0 
					\]
					inst { tv lv y } ⊢ { tv lv y }
					∎ { { lv evv tv } ast.k_ply◂{ p0 p1 } y }
				∐. . 
					 $ %[ "slv.cst 0" ] ⊢ ee0 
					_emt ee0 ⊢ _ 
					∎|
				@.ct_ptn = RP.map_l_x◂◂cst
				@.ct_ptn_lst = RP.map_l_x_lst◂◂cst 
			@.pf_i { { lv evv tv w } p }
				exp_s8 { lv evv tv p } ⊢ { lv evv tv p y } 
				$ y ⊢ 
				∐ _some◂{ i t } .
					T.inst_prd { tv lv i t } ⊢ { tv lv r } 
					$ w ⊢ w,w0 
					T.unify.f { tv w0 r } ⊢ tv 
					∎ { { lv evv tv w } p }
				∐. _none◂{} . 
					∎ { { lv evv tv w } p }
			@.pf = lst.map_l◂◂pf_i 
			@.exp_s8 { lv evv tv e } 
			$ e ⊢ 
			∐ ast.exp_s8_cst◂c . 
				cst { { lv evv tv } c } ⊢ { { lv evv tv } c y } 
				T.iug { tv lv y TX.s8◂{} } ⊢ { tv lv _ _ }
				∎ { lv evv tv ast.exp_s8_cst◂%c _none◂{} }
			∐ ast.exp_s8_idx◂{ p i } . 
				$ i ⊢ i,i0 
				$ p ⊢ 
				∐ ast.fmt_s◂{} . 
					∎ { lv evv tv ast.exp_s8_idx◂{ ast.fmt_s◂{} %i } _some◂{ %i0 TX.s8◂{} } }
				∐ ast.fmt_d◂{} . 
					∎ { lv evv tv ast.exp_s8_idx◂{ ast.fmt_d◂{} %i } _some◂{ %i0 TX.r64◂{} } }
				∐ ast.fmt_x◂{} .
					∎ { lv evv tv ast.exp_s8_idx◂{ ast.fmt_x◂{} %i } _some◂{ %i0 TX.r64◂{} } } 
				∐. ast.fmt_p◂{} .
					_emt %[ "slv exp_s8_fmt 0" ] ⊢ _ 
					∎|  
			∐. ast.exp_s8_for◂{ i c } . 
				cst { { lv evv tv } c } ⊢ { { lv evv tv } c y0 } 
				T.iug { tv lv y0 TX.s8◂{} } ⊢ { tv lv _ _ }
				$ i ⊢ i,i0 
				∎ { lv evv tv ast.exp_s8_for◂{ %i %c } _some◂{ %i0 TX.r64◂{} } } 
		
		 
			@.csm_src_ptn = RP.map_l_x◂◂csm_src 
			@.csm_src_ptn_lst = RP.map_l_x_lst◂◂csm_src 
			@.csm_src { { lv evv rv tv } a }
				$ a ⊢ 
				∐ ast.re_reg◂i .
					ast.RV.asc { rv i } ⊢ { rv { i o } } 
					smt_err◂◂"csm_src:0" o ⊢ vi 
					inst { tv lv RP.atm◂var◂T.p◂vi } ⊢ { tv lv y0 } 
					∎ { { lv evv rv tv } ast.re_reg◂i y0 }
				∐ ast.re_agl◂{ e sp } .
					_inc lv ⊢ lv 
					csm_src_ptn { { lv evv rv tv } sp } ⊢ { { lv evv rv tv } sp yp } 
					EVV.lod_ev { evv e } ⊢ { evv e vi }
					inst { tv lv RP.atm◂var◂T.p◂vi } ⊢ { tv lv y } 
					newvar_l { tv lv } ⊢ { tv lv yd } 
					$ yd ⊢ yd,yd0 
					$ y ⊢ y,y0 
					T.unify.f  { tv TX.t_ctr◂{ yp yd0 } y } ⊢ tv 
					_dec lv ⊢ lv 
					gen { tv lv y0 } ⊢ { tv lv _ }
					inst { tv lv yd } ⊢ { tv lv yd } 
					∎ { { lv evv rv tv } ast.re_agl◂{ e sp } yd } 
				∐. ast.re_v◂c .
					cst { { lv evv tv } c } ⊢ { { lv evv tv } c y0 }
					∎ { { lv evv rv tv } ast.re_v◂c y0 }
		§ csm_src_lst = lst.map_l_x◂◂csm_src 
			§ 
				@.crt_mtc { { lv evv rv tv } a } 
					$ a ⊢ 
					∐ ast.re_reg◂n0 .
						reg { lv n0 rv tv } ⊢ { lv n0 rv tv y } 
						∎ { { lv evv rv tv } ast.re_reg◂%n0 y }
					∐ ast.re_v◂_ .
						∎|
					∐. ast.re_agl◂{ i_e ap } . 
						crt_mtc_ptn { { lv evv rv tv } ap } ⊢ { { lv evv rv tv } ap y } 
						EVV.lod_ev { evv i_e } ⊢ { evv i_e iv } 
						inst { tv lv RP.atm◂var◂T.p◂iv } ⊢ { tv lv yx } 
						newvar_l { tv lv } ⊢ { tv lv yy }	
						$ yy ⊢ yy,yy0 
						T.unify.f  { tv TX.t_ctr◂{ y yy } yx } ⊢ tv 
						∎ { { lv evv rv tv } ast.re_agl◂{ i_e ap } yy0 }
				@.crt_mtc_ptn = RP.map_l_x◂◂crt_mtc 
				@.crt_mtc_ptn_lst = RP.map_l_x_lst◂◂crt_mtc 
		§ crt_mtc_lst = lst.map_l_x◂◂crt_mtc 
		
		§ @.test_var { lv ev tv rv v } 
			$ v ⊢ 
			∐ ast.test_var◂i . 
				ast.RV.asc { rv i } ⊢ { rv { i o } } 
				smt_err◂◂"test_var:0" o ⊢ vi 
				inst { tv lv RP.atm◂var◂T.p◂%vi } ⊢ { tv lv yv }  
				∎ { lv ev tv rv ast.test_var◂%i yv }
			∐. ast.test_cst◂c . 
				cst { { lv ev tv } c } ⊢ { { lv ev tv } c y }
				∎ { lv ev tv rv ast.test_cst◂%c y }
		
		§ 
			@.r { V lv ev rv tv lc }
			$ lc ⊢
			∐ ast.jmp◂{ i_e x } . 
				_inc lv ⊢ lv 
				ct_ptn { { lv ev tv } i_e } ⊢ { { lv ev tv } i_e yv } 
				csm_src_ptn { { lv ev rv tv } x } ⊢ { { lv ev rv tv } x y0 } 
				newvar_l { tv lv } ⊢ { tv lv yy } 
				$ yy ⊢ yy,yy0 
				T.unify.f  { tv RP.atm◂imp◂{ y0 yy } yv } ⊢ tv 
				_dec lv ⊢ lv 
				gen { tv lv yy0 } ⊢ { tv lv yy0 } 
				∎ { V lv ev rv tv ast.jmp◂{ i_e x } yy0 } 
			∐ ast.seq◂{ ll lc } .
				$ ll ⊢ { i_e s d }
				_inc lv ⊢ lv 
				ct_ptn { { lv ev tv } i_e } ⊢ { { lv ev tv } i_e yo } 
				csm_src_ptn { { lv ev rv tv } s } ⊢ { { lv ev rv tv } s y_s }
				crt_tpl_ptn { { lv rv tv } d } ⊢ { { lv rv tv } d y_d }
				$ yo ⊢ yo,yo0 
				T.unify.f  { tv yo0 TX.t_imp◂{ y_s y_d } } ⊢ tv 
				_dec lv ⊢ lv 
				gen { tv lv yo } ⊢ { tv lv yo } 
				r { V lv ev rv tv lc } ⊢ { V lv ev rv tv lc yr }
				∎ { V lv ev rv tv ast.seq◂{ { i_e s d } lc } yr }
			∐ ast.mtc◂p .
				$ p ⊢ p,p0 
				mtc { V lv ev rv tv p0 } ⊢ { V lv ev rv tv yr }
				∎ { V lv ev rv tv ast.mtc◂p yr } 
			∐ ast.op_exh◂{ op s d lf lx } . 
				_inc lv ⊢ lv 
				ct_ptn { { lv ev tv } op } ⊢ { { lv ev tv } op yo } 
				csm_src_ptn { { lv ev rv tv } s } ⊢ { { lv ev rv tv } s y_s }
				crt_tpl_ptn { { lv rv tv } d } ⊢ { { lv rv tv } d y_d }
				$ yo ⊢ yo,yo0 
				T.unify.f  { tv yo0 TX.t_imp◂{ y_s y_d } } ⊢ tv 
				_dec lv ⊢ lv 
				gen { tv lv yo } ⊢ { tv lv yo } 
				r { V lv ev rv tv lf } ⊢ { V lv ev rv tv lf yf }
				r { V lv ev rv tv lx } ⊢ { V lv ev rv tv lx yx }
				T.iug { tv lv yf yx } ⊢ { tv lv yf _ }
				∎ { V lv ev rv tv ast.op_exh◂{ op s d lf lx } yf }				
			∐. ast.tj◂{ x v r } . 
				_inc lv ⊢ lv 
				ast.RV.asc { rv x } ⊢ { rv { x o } } 
				smt_err◂◂"test_var:0" o ⊢ vi 
				inst { tv lv RP.atm◂var◂T.p◂%vi } ⊢ { tv lv yv }  
				$ yv ⊢ yv,yv0 
				T.unify.f { tv yv TX.r64◂{} } ⊢ tv 
				_dec lv ⊢ lv 
				gen { tv lv yv0 } ⊢ { tv lv _ } 
				r { V lv ev rv tv r } ⊢ { V lv ev rv tv r yr }
				tj { { V lv ev rv tv yr } v } ⊢ { { V lv ev rv tv yr } v } 
				_dec lv ⊢ lv 
				gen { tv lv yr } ⊢ { tv lv yr } 
				∎ { V lv ev rv tv ast.tj◂{ x v r } yr }
		@.tj { { V lv ev rv tv yr } v } 
			$ v ⊢ 
			∐ _cns◂{ lc v } . 
				r { V lv ev rv tv lc } ⊢ { V lv ev rv tv lc yf }
				tj { { V lv ev rv tv yr } v } ⊢ { { V lv ev rv tv yr } v } 
				inst { tv lv yf } ⊢ { tv lv yf } 
				$ yr ⊢ yr,yr0 
				T.unify.f { tv yr0 yf } ⊢ tv 
				\\T.iug { tv lv yr yf } ⊢ { tv lv yr _ } 
				∎ { { V lv ev rv tv yr } _cns◂{ lc v } } 
			∐. _nil◂{} . 
				_inc lv ⊢ lv 
				inst { tv lv yr } ⊢ { tv lv yr } 
				∎ { { V lv ev rv tv yr } ⟦⟧ } 
		@.mtc { V lv ev rv tv m } 
			$ m ⊢ 
			∐ ast.nx_e◂{ rl lc } .
				r { V lv ev rv tv lc } ⊢ { V lv ev rv tv _ yr }
				∎ { V lv ev rv tv yr }
			∐. ast.nx_m◂p . 
				cla.l { V p } ⊢ { V _ ast.p◂{ nm rbp brp nxp } } 
				mtc_test { { lv ev rv tv } nm } ⊢ { { lv ev rv tv } nm }
				mtc { V lv ev rv tv nxp } ⊢ { V lv ev rv tv y0 } 
				$ brp ⊢ 
				∐ _some◂m0 . 
					mtc { V lv ev rv tv m0 } ⊢ { V lv ev rv tv y1 } 
					T.iug { tv lv y0 y1 } ⊢ { tv lv y0 _ }
					∎ { V lv ev rv tv y0 } 
				∐. _none◂{} . 
					∎ { V lv ev rv tv y0 }
		
		@.mtc_test { { lv ev rv tv } t } 
			$ t ⊢ 
			∐ ast.mtc_id◂{ sp mp } . 
				_inc lv ⊢ lv 
				csm_tpl_ptn { { lv rv tv } sp } ⊢ { { lv rv tv } sp y0 } 
				crt_mtc_ptn { { lv ev rv tv } mp } ⊢ { { lv ev rv tv } mp y }
				_dec lv ⊢ lv 
				$ y0 ⊢ y0,y0_0 
				T.unify.f  { tv y0_0 y } ⊢ tv 
				gen { tv lv y0 } ⊢ { tv lv y0 } 
				∎ { { lv ev rv tv } ast.mtc_id◂{ sp mp } }
			∐. ast.mtc_test◂{ tt v0 v1 } .  
				_inc lv ⊢ lv 
				test_var { lv ev tv rv v0 } ⊢ { lv ev tv rv v0 y0 } 
				test_var { lv ev tv rv v1 } ⊢ { lv ev tv rv v1 y1 } 
				_dec lv ⊢ lv 
				$ y0 ⊢ y0,y0_0 
				T.unify.f { tv y0_0 y1 } ⊢ tv  
				gen { tv lv y0 } ⊢ { tv lv y0 } 
				∎ { { lv ev rv tv } ast.mtc_test◂{ tt v0 v1 } } 
		∎∎
	
	§§ slv_type 
			§ 
				@.f = RP.map_l_atm◂◂f_atm 
				@.f_atm { ENV a }
					$ a ⊢ 
					∐ T.imp◂{ t0 t1 } .
						f { ENV t0 } ⊢ { ENV t0 } 
						f { ENV t1 } ⊢ { ENV t1 } 
						∎ { ENV RP.atm◂T.imp◂{ t0 t1} } 
					∐ T.ct_imp◂{ t0 t1 } . 
						f { ENV t0 } ⊢ { ENV t0 } 
						f { ENV t1 } ⊢ { ENV t1 } 
						∎ { ENV RP.atm◂T.ct_imp◂{ t0 t1} } 
					∐ T.dta◂{ ax tl } . 
						∎|
					∐ T.abs◂{ i t } . 
						∎| 
					∐. T.var◂v . 
						f_v { ENV v } ⊢| 
				@.f_v { ENV v } 
					$ v ⊢ 
					∐ ast.app◂{ t0 t1 } . 
						f { ENV t0 } ⊢ { ENV t0 } 
						f { ENV t1 } ⊢ { ENV t1 } 
						f_app { ENV { t0 t1 } } ⊢| 
					∐ ast.type_name◂n . 
						$ ENV ⊢ { env0 mtv tv t_ns al l2 } 
						$ env0 ⊢ { mmv mev m_ns e_ns m_l } 
						slv_ns_t { n { mmv mtv } { m_ns t_ns } m_l } ⊢ { { mmv mtv } { m_ns t_ns } m_l iv }
						$ { mmv mev m_ns e_ns m_l } ⊢ env0 	
						assoc { l2 iv } ⊢ { l2 iv o } 
						∐ o ⊢ _some◂o; o ⊢ _some◂{ w as y } .
							$ iv ⊢ iv,i0_0 
							$ _cns◂{ { i0_0 _some◂_none◂{} } l2 } ⊢ l2 
							args_ln { { env0 mtv tv t_ns as _nil◂{} l2 } y } ⊢ { { env0 mtv tv t_ns al0 l2 } k } 
							$ iv ⊢ iv,i0_0 
							$ _cns◂{ { i0_0 _none◂{} } l2 } ⊢ l2 
							_cls { tv iv T.var_ln◂k } ⊢ { tv iv } 
							∎ { { env0 mtv tv t_ns al l2 } RP.atm◂T.var◂T.p◂iv } 
						∐ o ⊢ _some◂o; o ⊢ _none◂{} . 
							_emt %[ "slv_type 0" ] ⊢ se 
							∎| 
						∐. . 
							inst { tv %[ 1r ] RP.atm◂T.var◂T.p◂iv } ⊢ { tv lv k }
							_dec lv ⊢ lv  
							gen { tv lv k } ⊢ { tv lv k } 
							∎ { { env0 mtv tv t_ns al l2 } k }
					∐ ast.type_ln◂_ .
						∎| 
					∐. ast.type_var◂s . 
						$ ENV ⊢ { env0 mtv tv t_ns al l2 } 
						assoc { al s } ⊢ { al s o } 
						smt_err◂◂"slv_type" o ⊢ i 
						∎ { { env0 mtv tv t_ns al l2 } RP.atm◂var◂T.p◂i }
			@.f_app { { env0 mtv tv t_ns al l2 } { k0 k1 } } 
				$ k0 ⊢ 
				∐ RP.rcd◂l . 
					T.pnt_type_k { tv RP.rcd◂l } ⊢ { tv s0 } 
					_emt s0 ⊢ _ 
					∎| 
				∐. RP.atm◂k0 . 
					∐ k0 ⊢ abs◂{ T.p◂a k0 } . 
						Clr.u { tv { a var_ln◂k1 } } ⊢ { tv _ } 
						∎ { { env0 mtv tv t_ns al l2 } k0 } 
					∐ k0 ⊢ var◂T.p◂i . 
						cla.l { tv i } ⊢ { tv i v } 
						∐ v ⊢ var_ln◂k2 . 
							f_app { { env0 mtv tv t_ns al l2 } { k2 k1 } } ⊢|
						∐. . 
							T.pnt_type_k { tv k1 } ⊢ { tv s0 } 
							$ %[ "slv_type_app 1" ] ⊢ se 
							_emt se ⊢ se 
							_emt s0 ⊢ s0 
							∎|
					∐. . 
						T.pnt_type_k { tv RP.atm◂k0 } ⊢ { tv s0 } 
						_emt %[ "slv_type_app 0" ] ⊢ _ 
						_emt s0 ⊢ s0 
						∎| 
			@.args_ln { { env0 mtv tv t_ns as al l2 } t } 
				$ as ⊢ 
				∐ _cns◂{ a as } . 
					assoc { al a } ⊢ { al a o } 
					nnt o ⊢ {} 
					T.newvar_i tv ⊢ { tv i } 
					$ i ⊢ i,i0 
					args_ln { { env0 mtv tv t_ns as _cns◂{ { a _some◂i } al } l2 } t } ⊢ { { env0 mtv tv t_ns al l2 } k } 
					∎ { { env0 mtv tv t_ns al l2 } RP.atm◂T.abs◂{ T.p◂i0 k } }		
				∐. _nil◂{} .  
					f { { env0 mtv tv t_ns al l2 } t } ⊢|	
			∎∎ 
		§ slv_args_ln # { { env0 mtv tv t_ns as l2 } t } 
			slv_type.args_ln { { env0 mtv tv t_ns as _nil◂{} l2 } t } ⊢| 
		§ @.slv_args_def_0 SAD
			inv SAD ⊢ { mtv tv t_ns as al x xl ql dl } 
			$ as ⊢ 
			∐ _cns◂{ a as } . 
				assoc { al a } ⊢ { al a o } 
				nnt o ⊢ {} 
				T.newvar_i tv ⊢ { tv i } 
				_clp { tv var_q◂%[ 0r ] } ⊢ { tv q } 
				$ q ⊢ q,q0,qi 
				$ i ⊢ i,i1 
				$ RP.atm◂var◂T.p◂q ⊢ q 
				$ iso◂{ mtv tv t_ns as _cns◂{ { a _some◂q0 } al } x _cns◂{ RP.atm◂var◂T.p◂i1 xl } _cns◂{ q ql } dl } ⊢ SAD 
				slv_args_def_0 SAD ⊢ { mtv tv t_ns al k yx dl ql } 
				∎ { mtv tv t_ns al RP.atm◂abs◂{ T.p◂i k } yx dl _cns◂{ qi ql } }
			∐. _nil◂{} .  
				$ x ⊢ x,x0 
				∎ { mtv tv t_ns al RP.atm◂dta◂{ T.adt◂x xl } RP.atm◂dta◂{ T.adt◂x0 ql } dl _nil◂{} }
		§ slv_args_def # { mtv tv t_ns as x dl } 
			$ iso◂{ mtv tv t_ns as _nil◂{} x _nil◂{} _nil◂{} dl } ⊢ SAD 
			slv_args_def_0 SAD ⊢ { mtv tv t_ns al k yx dl ql0 } 
			rev ql0 ⊢ ql0  
			∎ { mtv tv t_ns al k yx dl ql0 }
	§ rtr_dst_ptn { env0 mtv tv ns_t y td } 
			∐ td ⊢ _some◂td . 
				slv_type.f { { env0 mtv tv ns_t _nil◂{} _nil◂{} } td } ⊢ { { env0 mtv tv ns_t al l2 } kd } 
				T.unify.f { tv y kd } ⊢ tv
				∎ { env0 mtv tv ns_t }
			∐. . 
				∎ { env0 mtv tv ns_t }
	
		§ @.slv_dt_def { { mmv mev ns_m il } { tav evv } an mtv al yx tv ns_t ev_n ns_e dl { dd ep0 } } 
			$ dl ⊢ 
			∐ _cns◂{ { cn y } dl } . 
				$ _nil◂{} ⊢ l2 
				slv_type.f { { { mmv mev ns_m ns_e il } mtv tv ns_t al l2 } y } ⊢ { { { mmv mev ns_m ns_e il } mtv tv ns_t al l2 } k } 
				$ %[ 0r ] ⊢ lv 
				$ yx ⊢ yx,yx0 
				##$ k ⊢ k,k0 
				$ k ⊢ k,k0 
				$ TX.t_ctr◂{ k yx0 } ⊢ yy,yy0 
				T.pnt_type_k { tv yy0 } ⊢ { tv syy }
				^ dd,ev_n,cn,syy ⊢ dd,ev_n,cn,syy,ep1 
					0'*"\t" "§ " 2' "(" 1d' ") : " 3' "\n" // 
				_inc an ⊢ an 
				slv_dt_def { { mmv mev ns_m il } { tav evv } an mtv al yx tv ns_t ev_n ns_e dl { dd ep0 } } ⊢ { { mmv mev ns_m il } { tav evv } an mtv al yx tv ns_t ev_n ns_e { dd ep0 } ac kl }  
				_dec an ⊢ an 
				$ _cns◂{ k0 kl } ⊢ kl 
				$ ac ⊢ ac,ac0 
				$ an ⊢ an,an0 
				$ yy ⊢ yy,yy0 
				k_ctr { tv an0 ac0 yy0 } ⊢ { tv k } 
				add_e { tv evv ev_n ns_e cn k yy } ⊢ { tv evv ev_n ns_e _ } 
				$ _cns◂{ ep1 ep0 } ⊢ ep0 
				∎ { { mmv mev ns_m il } { tav evv } an mtv al yx tv ns_t ev_n ns_e { dd ep0 } ac kl } 
			∐. _nil◂{} . 
				$ an ⊢ an,ac 
				$ _nil◂{} ⊢ kl 
				∎ { { mmv mev ns_m il } { tav evv } an mtv al yx tv ns_t ev_n ns_e { dd ep0 } ac kl }
	
		§§ slv_dt_clq 
			§	@.lp0 { q { l0 l1 l2 } tx_n mtv tv ns_t } 
					$ q ⊢ 
					∐ _cns◂{ { w d } q } . 
						$ d ⊢ 
						∐ ast.dt_def◂{ as dl } .
							$ tx_n ⊢ tx_n,x,x0 
							$ w ⊢ w,w0 
							_inc tx_n ⊢ tx_n 
							slv_args_def { mtv tv ns_t as x dl } ⊢ { mtv tv ns_t al k yx dl ql } 
							add_t { tv ns_t w k } ⊢ { tv ns_t }
							lp0 { q { _cns◂{ { al yx dl x0 w0 ql } l0 } l1 l2 } tx_n mtv tv ns_t } ⊢| 
						∐. ast.dt_ln◂{ as y } . 
							$ w ⊢ w,w0 
							_cln tv ⊢ { tv t0 } 
							$ t0 ⊢ t0,t1,t2 
							NS_T.set { ns_t { w t2 } } ⊢ { ns_t _ } 
							lp0 { q { l0 ⟦ { t1 _some◂_some◂{ w0 as y } } < l1 ⟧ ⟦ t0 < l2 ⟧ } tx_n mtv tv ns_t } ⊢| 
					∐. _nil◂{} .
						∎ { { l0 l1 l2 } tx_n mtv tv ns_t } 
			§	@.lp0_ln { { l1 l2 } { mmv mev ns_m ns_e il } ev_n tx_n mtv tv ns_t { dd ep0 } }  
					$ l2 ⊢ 
					∐ _cns◂{ i0 l2 } . 
						assoc { l1 i0 } ⊢ { l1 i0 o } 
						∐ o ⊢ _some◂o; o ⊢ _some◂{ w as y } . 
							$ i0 ⊢ i0,i0_0 
							slv_args_ln { { { mmv mev ns_m ns_e il } mtv tv ns_t as _cns◂{ { i0_0 ‹ ‹› › } l1 } } y } ⊢ { { { mmv mev ns_m ns_e il } mtv tv ns_t al l1 } k } 
							$ i0 ⊢ i0,i0_0 
							$ k ⊢ k,k0 
							T.pnt_type_k { tv k0 } ⊢ { tv sv } 
							^ dd,w,sv ⊢ dd,w,sv,ep1 
								0'*"\t" "¶ " 1' " ~ " 2' // 
							$ _cns◂{ ep1 ep0 } ⊢ ep0 
							_cls { tv i0 var_ln◂k } ⊢ { tv i0 } 
							lp0_ln { { _cns◂{ { i0_0 _none◂{} } l1 } l2 } { mmv mev ns_m ns_e il } ev_n tx_n mtv tv ns_t { dd ep0 } } ⊢|
						∐ o ⊢ _some◂o; o ⊢ _none◂{} . 
							$ %[ "lp0_ln 0" ] ⊢ se 
							_emt se ⊢ se 
							∎|	  
						∐. .
							lp0_ln { { l1 l2 } { mmv mev ns_m ns_e il } ev_n tx_n mtv tv ns_t { dd ep0 } } ⊢|
					∐. _nil◂{} . 
						∎ { { mmv mev ns_m ns_e il } ev_n tx_n mtv tv ns_t { dd ep0 } } 
			§ @.lp0_def { l0 { mmv mev ns_m ns_e il } tav evv ev_n tx_n mtv tv ns_t { dd ep0 } } 
					$ l0 ⊢ 
					∐ _cns◂{ { al yx dl x w ql } l0 } . 
						slv_dt_def { { mmv mev ns_m il } { tav evv } %[ 0r ] mtv al yx tv ns_t ev_n ns_e dl { dd ep0 } } ⊢ { { mmv mev ns_m il } { tav evv } an mtv al yx tv ns_t ev_n ns_e { dd ep0 } ac kl }
						set_tv { tav x { w { ac ql kl } } } ⊢ { tav _ } 
						\\_push { { w { ac ql kl } } tav } ⊢ tav 
						lp0_def { l0 { mmv mev ns_m ns_e il } tav evv ev_n tx_n mtv tv ns_t { dd ep0 } } ⊢| 
					∐. _nil◂{} .
						∎ { { mmv mev ns_m ns_e il } tav evv ev_n tx_n mtv tv ns_t { dd ep0 } }	
			§ f # { q { mmv mev ns_m ns_e il } tx_n tav evv ev_n mtv tv ns_t { dd ep0 } }
				\\_arr_len tav ⊢ { tav tx_n } 
				lp0 { q { ⟦⟧ ⟦⟧ ⟦⟧ } tx_n mtv tv ns_t } ⊢ { { l0 l1 l2 } tx_n mtv tv ns_t }
				lp0_ln { { l1 l2 } { mmv mev ns_m ns_e il } ev_n tx_n mtv tv ns_t { dd ep0 } } ⊢ { { mmv mev ns_m ns_e il } ev_n tx_n mtv tv ns_t { dd ep0 } } 
				lst.rev l0 ⊢ l0 
				lp0_def { l0 { mmv mev ns_m ns_e il } tav evv ev_n tx_n mtv tv ns_t { dd ep0 } } ⊢ { { mmv mev ns_m ns_e il } tav evv ev_n tx_n mtv tv ns_t { dd ep0 } }
				∎ { { mmv mev ns_m ns_e il } tx_n tav evv ev_n mtv tv ns_t { dd ep0 } }
			∎∎
	§ @.tpl_push { NS wl wl0 } 
		∐ wl ⊢ _cns◂{ { w _some◂k } wl } . 
			NS_E.set { NS { w k } } ⊢ { NS { w k0 } } 
			tpl_push { NS wl ⟦ { w k0 } < wl0 ⟧ } ⊢|
		∐ wl ⊢ _nil◂{} . 
			∎ { NS ⟦⟧ } 
		∐. . 
			∎|
	§ tpl_push # { NS wl } 
		tpl_push { NS wl ⟦⟧ } ⊢| 
	§ @.tpl_pop { NS wl } 
		$ wl ⊢ 
		∐ _cns◂{ { w k } wl } . 
			$ k ⊢ 
			∐ _some◂k . 
				NS_E.set { NS { w k } } ⊢ { NS _ } 
				tpl_pop { NS wl } ⊢|
			∐. _none◂{} . 
				NS_E.get { NS w } ⊢ { NS _ } 
				tpl_pop { NS wl } ⊢|  
		∐. _nil◂{} . 
			∎ NS  
	§§ slv_lc_clq 
			§ f_l0_i { { env0 evv tv ev_n cl { fl ql gl } } { w le } }
					assoc { cl w } ⊢ { cl w o } 
					nnt_emt { o w } ⊢ w 
					$ w ⊢ w,w0 
					$ _cns◂{ { w0 _some◂{} } cl } ⊢ cl 
					$ env0 ⊢ { mmv mev ns_m ns_e il }
					newvar_l { tv %[ 1r ] } ⊢ { tv lv yx }
					\\_emt %[ "slv_lc_clq D0.0" ] ⊢ _ 
					∐ le ⊢ ast.lc_def◂{ o_t d td if lc } . 
						$ w ⊢ w,w0
						$ yx ⊢ yx,yx0 
						T.newvar_ln { tv yx0 } ⊢ { tv iy } 
						$ yx ⊢ yx,yx0 
						add_e { tv evv ev_n ns_e w ast.k_var◂{ %[ CST.not_0 ] iy } yx } ⊢ { tv evv ev_n ns_e en0 }
						$ { mmv mev ns_m ns_e il } ⊢ env0 
						$ lv ⊢ _  
						$ td ⊢ _ 
						∎ { env0 evv tv ev_n cl { ⟦ { o_t en0 w0 yx0 d if lc } < fl ⟧ ql gl } }
					∐ le ⊢ ast.lc_grm◂ _ .
						_emt %[ "slv_lc_clq lc_grm 0" ] ⊢ _ 
						∎|
					∐ le ⊢ ast.lc_ln◂c .
						EVV.npt evv ⊢ { evv en } 
						$ en ⊢ en,i0 
						$ w ⊢ w,w0 
						NS_E.set { ns_e { w i0 } } ⊢ { ns_e _ } 
						$ { mmv mev ns_m ns_e il } ⊢ env0 
						∎ { env0 evv tv ev_n cl { fl ⟦ { w0 en c yx } < ql ⟧ gl } }
					∐. . 
						_emt %[ "slv_lc_clq D0.0.1" ] ⊢ _ 
						∎|
			§ f_l0 = lst.fld_l◂◂f_l0_i 
			§ @.f_l1_q { env0 ev_n evv tv ql }
					$ env0 ⊢ { mmv mev ns_m ns_e il }
					$ ql ⊢ 
					∐ _cns◂{ { w en c yx } ql } . 
						slv_n.cst { { mmv mev ns_m ns_e il } c } ⊢ { { mmv mev ns_m ns_e il } c }   
						$ yx ⊢ yx,yx0 
						T.newvar_ln { tv yx0 } ⊢ { tv v0 } 
						$ c ⊢ c,c0 
						EVV.set { evv en { v0 c } } ⊢ { evv en } 
						f_l1_q { { mmv mev ns_m ns_e il } ev_n evv tv ql } ⊢ { { mmv mev ns_m ns_e il } ev_n evv tv ql }
						slv.cst { { %[ 1r ] evv tv } c0 } ⊢ { { lv evv tv } c0 y0 } 
						$ yx ⊢ yx,yx0 
						T.unify.f { tv yx0 y0 } ⊢ tv 
						$ _cns◂{ { w en c0 yx } ql } ⊢ ql 
						∎ { { mmv mev ns_m ns_e il } ev_n evv tv ql } 
					∐. _nil◂{} .  
						$ _nil◂{} ⊢ ql
						∎ { { mmv mev ns_m ns_e il } ev_n evv tv ql }
			§ f_l2_q_i # { { tv dd ep0 } { w en c y } } 
					gen { tv %[ 0r ] y } ⊢ { tv _ y } 
					$ y ⊢ y,y0 
					T.pnt_type_k { tv y0 } ⊢ { tv sy }
					^ dd,w,sy ⊢ dd,w,sy,ep1 
						0'*"\t" "§ " 1' " : " 2' "\n" // 
					\\_emt ep1 ⊢ ep1 
					rp8.add_s8 { ep0 ep1 } ⊢ ep0 
					∎ { tv dd ep0 }
			§ f_l2_q = lst.fld_l◂◂f_l2_q_i 
			§ f_l1_i { { V lv env0 ev_n evv tv } { o_t en w yx d if lc } } 
					slv_n.RE.ini {} ⊢ re 
					$ o_t ⊢ 
					∐ _none◂{} . 
						$ _none◂{} ⊢ o_t 
						$ %[ 1r ] ⊢ r_n 
						slv_n.crt_mtc_ptn_al { { env0 tv r_n re ⟦⟧ ⟦⟧ ⟦⟧ } d } ⊢ { { env0 tv r_n re dl al adl } d } 
						slv_n.iso_rl { re adl al } ⊢ { re o } 
						slv_n.r { { env0 tv r_n re } lc } ⊢ { { env0 tv r_n _ } lc } 
						slv_n.iso { o lc } ⊢ lc 
						slv_n.dlt { dl lc } ⊢ lc 
						$ RP.atm◂%[ 0r ] ⊢ dd 
						$ RP.atm◂ast.re_reg◂%[ 0r ] ⊢ ss 
						slv_gl.r { { ss slv_gl.id_k◂{} d } lc } ⊢ lc
						$ dd ⊢ d 
						slv_V.r { V lc } ⊢ { V lc } 
						ast.RV.ini {} ⊢ rv 
						$ env0 ⊢ { mmv mev ns_m ns_e il }
						slv.crt_tpl_ptn { { lv rv tv } d } ⊢ { { lv rv tv } d y0 } 
						slv.r { V lv evv rv tv lc } ⊢ { V lv evv rv tv lc yr } 
						$ { mmv mev ns_m ns_e il } ⊢ env0
						inst { tv lv yr } ⊢ { tv lv yr } 
						$ y0 ⊢ y0,y00 
						$ yr ⊢ yr,yr0 
						$ yx ⊢ yx,yx0
						T.unify.f { tv RP.atm◂imp◂{ y00 yr0 } yx } ⊢ tv 
						∎ { { V lv env0 ev_n evv tv } { o_t en r_n rv if lc w { d y0 yr yx0 } } } 
					∐. _some◂p . 
						$ env0 ⊢ { mmv mev ns_m ns_e il }
						tpl_ptn { { %[ 0r ] _nil◂{} lv evv ev_n tv } p } ⊢ { { c_n wl lv evv ev_n tv } p y_c } 
						$ c_n ⊢ c_n,c_n0 
						$ _some◂{ c_n0 p } ⊢ o_t 
						tpl_push { ns_e wl } ⊢ { ns_e wl } 
						$ %[ 1r ] ⊢ r_n 
						slv_n.crt_mtc_ptn_al { { { mmv mev ns_m ns_e il } tv r_n re ⟦⟧ ⟦⟧ ⟦⟧ } d } ⊢ { { { mmv mev ns_m ns_e il } tv r_n re dl al adl } d } 
						slv_n.iso_rl { re adl al } ⊢ { re o } 
						slv_n.r { { { mmv mev ns_m ns_e il } tv r_n re } lc } ⊢ { { { mmv mev ns_m ns_e il } tv r_n _ } lc } 
						slv_n.iso { o lc } ⊢ lc 
						slv_n.dlt { dl lc } ⊢ lc 
						tpl_pop { ns_e wl } ⊢ ns_e 
						$ RP.atm◂%[ 0r ] ⊢ dd 
						$ RP.atm◂ast.re_reg◂%[ 0r ] ⊢ ss 
						slv_gl.r { { ss slv_gl.id_k◂{} d } lc } ⊢ lc
						$ dd ⊢ d 
						slv_V.r { V lc } ⊢ { V lc } 
						ast.RV.ini {} ⊢ rv  
						slv.crt_tpl_ptn { { lv rv tv } d } ⊢ { { lv rv tv } d y0 } 
						slv.r { V lv evv rv tv lc } ⊢ { V lv evv rv tv lc yr } 
						$ { mmv mev ns_m ns_e il } ⊢ env0
						inst { tv lv yr } ⊢ { tv lv yr } 
						$ y0 ⊢ y0,y00 
						$ yr ⊢ yr,yr0 
						$ yx ⊢ yx,yx0 
						T.unify.f { tv RP.atm◂ct_imp◂{ %y_c RP.atm◂imp◂{ y00 yr0 } } yx } ⊢ tv 
						∎ { { V lv env0 ev_n evv tv } { o_t en r_n rv if lc w { d y0 yr yx0 } } } 
				§ f_l1 = lst.map_l◂◂f_l1_i 				
				§ @.f_l2 { V env0 tav evv ev_n tv yl { dd ep0 } }  
					$ yl ⊢ 
					∐ _cns◂{ { o_t en r_n rv if lc w { d ys yd yx } } yl } .
						\\_emt %[ "f_l2 0" ] ⊢ _
						gen { tv %[ 0r ] yx } ⊢ { tv lv yx } 
						$ ys ⊢ ys,ys0 
						$ _nil◂{} ⊢ ql0 
						$ yx ⊢ yx,yx0 
						T.pnt_type_k { tv yx0 } ⊢ { tv syx }
						$ yx ⊢ yx,yx0 
						T.newvar_ln { tv yx0 } ⊢ { tv iy0 } 
						inc_x ev_n ⊢ { o_n ev_n } 
						$ o_t ⊢ 
						∐ _some◂g .
							EVV.exc_evv { evv en ast.k_op_gnr◂{ g o_n d r_n if lc iy0 } } ⊢ { evv en _ } 
							^ dd,w,syx ⊢ dd,w,syx,ep1 
								0'*"\t" "§ " 1' " : " 2' "\n" // 
							rp8.add_s8 { ep0 ep1 } ⊢ ep0 
							f_l2 { V env0 tav evv ev_n tv yl { dd ep0 } } ⊢| 
						∐. _none◂{} .
							_mk_arr { %[ 0r ] ‹› } ⊢ { _ _ vv }
							ip.inl.r { { V evv vv } lc } ⊢ { { V evv _ } lc } 
							EVV.exc_evv { evv en ast.k_op◂{ ‹› o_n d r_n if lc iy0 } } ⊢ { evv en _ } 
							^ dd,w,syx ⊢ dd,w,syx,ep1 
								0'*"\t" "§ " 1' " : " 2' "\n" // 
							rp8.add_s8 { ep0 ep1 } ⊢ ep0 
							f_l2 { V env0 tav evv ev_n tv yl { dd ep0 } } ⊢| 
					∐. _nil◂{} . 
						∎ { V env0 tav evv ev_n tv ⟦⟧ { dd ep0 } }
				§	@.f { V { mtv mv_n ns_t i } env0 tav evv tv ev_n q { dd ep0 } } 
					$ rp8.e◂{} ⊢ eq0 
					f_l0 { { env0 evv tv ev_n ⟦⟧ { ⟦⟧ ⟦⟧ ⟦⟧ } } q } ⊢ { env0 evv tv ev_n cl { q ql gl } } 
					$ cl ⊢ _ 
					f_l1_q { env0 ev_n evv tv ql } ⊢ { env0 ev_n evv tv ql }
					f_l1 { { V %[ 1r ] env0 ev_n evv tv } q } ⊢ { { V _ env0 ev_n evv tv } yl } 
					f_l2_q { { tv dd eq0 } ql } ⊢ { tv dd eq0 } 
					f_l2 { V env0 tav evv ev_n tv yl { dd eq0 } } ⊢ { V env0 tav evv ev_n tv yl { dd eq0 } } 
					rp8.to_s8 eq0 ⊢ es0 
					eml es0 ⊢ es0 
					$ ⟦ es0 < ep0 ⟧ ⊢ ep0
					∎ { V { mtv mv_n ns_t i } env0 tav evv tv ev_n { dd ep0 } gl } 
				∎∎ 
		§ iso_env # { mmv mev m_ns e_ns m_l } 
			$ { mmv mev m_ns e_ns m_l } ⊢ env 
			∎ env 
		§ inv_env # env 
			$ env ⊢ env 
			∎ env 
		§ iso_file # { { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } {   ev_n tv tav evv } { el dd ep } }
			$ iso◂{ mmv mev mtv mfv mv_n } ⊢ MV 
			$ iso◂{ ns_m ns_e ns_t } ⊢ NS
			$ iso◂{ ev_n tv tav evv } ⊢ LCV 
			$ iso◂{ el dd ep } ⊢ EC
			∎ { MV NS LCV EC } 
		§ inv_file # { MV NS LCV EC }	
			inv MV ⊢ { mmv mev mtv mfv mv_n } 
			inv NS ⊢ { ns_m ns_e ns_t }
			inv LCV ⊢ {   ev_n tv tav evv }
			inv EC ⊢ { el dd ep }
			∎ { { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } {   ev_n tv tav evv } { el dd ep } }

		§  
			@.slv_file_lp { V i il MV LCV tx_n NS gel EC }
				inv_file {  MV NS LCV EC } ⊢ { { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } {    ev_n tv tav evv } { el dd ep0 } }
				\\$ %[ "enter slv_file_lp" ] ⊢ sxe0 
				\\_emt sxe0 ⊢ _
				s8_of_s8_lst ep0 ⊢ sep0 
				$ ⟦ sep0 ⟧ ⊢ ep0 
				$ gel ⊢ 
				∐ _cns◂{ e gel } .
					$ e ⊢ 
					∐ ast.mdl_etr◂{ w e } .
						$ e ⊢ 
						∐ ast.mdl_def◂gel0 . 
							$ %[ "mdl_def" ] ⊢ sxe1 
							_emt sxe1 ⊢ sxe1 
							_emt w ⊢ w 
							^ dd,w ⊢ dd,w,ep1 
								0'*"\t" "§§ " 1' "\n" // 
							$ _cns◂{ ep1 ep0 } ⊢ ep0
							_inc dd ⊢ dd 
							inc_x mv_n ⊢ { mv_n_0 mv_n }
							$ _cns◂{ { i ns_m ns_e ns_t } il } ⊢ il 
							NS_M.ini {} ⊢ ns_m 
							NS_E.ini {} ⊢ ns_e 
							NS_T.ini {} ⊢ ns_t 
							iso_file { { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } {    ev_n tv tav evv } { el dd ep0 } } ⊢ {  MV NS0 LCV EC }
							slv_file_lp { V mv_n_0 il MV LCV tx_n NS0 gel0 EC } ⊢ { V mv_n_0 il MV LCV tx_n NS0 EC }
							inv_file { MV NS0 LCV EC } ⊢ { { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } {    ev_n tv tav evv } { el dd ep0 } }
							MMV.set { mmv mv_n_0 ns_m } ⊢ { mmv mv_n_0 } 
							MTV.set { mtv mv_n_0 ns_t } ⊢ { mtv mv_n_0 } 
							MEV.set { mev mv_n_0 ns_e } ⊢ { mev mv_n_0 } 
							^ dd ⊢ dd,ep1 
								0'*"\t" "∎∎\n" // 
							$ _cns◂{ ep1 ep0 } ⊢ ep0
							_dec dd ⊢ dd 
							$ il ⊢ 
							∐ _cns◂{ { i ns_m ns_e ns_t } il } . 
								NS_M.set { ns_m { w mv_n_0 } } ⊢ { ns_m _ }
								iso_file { { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } {    ev_n tv tav evv } { el dd ep0 } } ⊢ {  MV NS LCV EC }
								slv_file_lp { V i il MV LCV tx_n NS gel  EC } ⊢|
							∐. _nil◂{} . 
								$ %[ "slv_file_lp 0" ] ⊢ se 
								_emt se ⊢ se 
								∎| 
						∐. ast.mdl_ln◂n0 .						
							$ n0 ⊢ n0,n0_0 
							ast.pnt_name n0_0 ⊢ sn0  							
							^ dd,w,sn0 ⊢ dd,w,sn0,ep1 
								0'*"\t" "§§ " 1' " = " 2' "\n" // 
							$ _cns◂{ ep1 ep0 } ⊢ ep0
							$ n0 ⊢ n0,n0_0 
							slv_ns_m { n0 mmv ns_m il } ⊢ { mmv ns_m il i_m } 
							\\$ _cns◂{ { w ‹ i_m › } ns_m } ⊢ ns_m 
							BST_s8.set { ns_m { w i_m } } ⊢ { ns_m _ } 
							iso_file { { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } { ev_n tv tav evv } { el dd ep0 } } ⊢ {  MV NS LCV EC }
							slv_file_lp { V   i il MV LCV tx_n NS gel  EC } ⊢|
					∐ ast.lc_etr◂{ w e } .
						\\_emt %[ "lc_etr" ] ⊢ _ 
						\\_emt w ⊢ w 
						$ e ⊢
						∐ ast.lc_def◂{ o_t d td if lc } .
							$ %[ 1r ] ⊢ lv 
							slv_n.RE.ini {} ⊢ ns_r_e 
							∐ o_t ⊢ _none◂{} . 
								$ %[ 1r ] ⊢ r_n 
								slv_n.crt_mtc_ptn_al { { { mmv mev ns_m ns_e il } tv r_n ns_r_e ⟦⟧ ⟦⟧ ⟦⟧ } d } ⊢ { { { mmv mev ns_m ns_e il } tv rv_n_e ns_r_e dl al adl } d } 
								slv_n.iso_rl { ns_r_e adl al } ⊢ { ns_r_e o }  
								slv_n.r { { { mmv mev ns_m ns_e il } tv rv_n_e ns_r_e } lc } ⊢ { { { mmv mev ns_m ns_e il } tv rv_n_e _ } lc } 
								slv_n.iso { o lc } ⊢ lc 
								slv_n.dlt { dl lc } ⊢ lc 
								$ RP.atm◂%[ 0r ] ⊢ di 
								$ RP.atm◂ast.re_reg◂%[ 0r ] ⊢ si 
								slv_gl.r { { si slv_gl.id_k◂{} d } lc } ⊢ lc
								$ di ⊢ d 
								slv_V.r { V lc } ⊢ { V lc } 
								ast.RV.ini {} ⊢ rv_e  
								slv.crt_tpl_ptn { { lv rv_e tv } d } ⊢ { { lv rv_e tv } d y } 
								$ y ⊢ y,y0 
								rtr_dst_ptn { { mmv mev ns_m ns_e il } mtv tv ns_t y0 td } ⊢ { { mmv mev ns_m ns_e il } mtv tv ns_t } 
								$ lc ⊢ lc,lc0 
								slv.r { V lv evv rv_e tv lc } ⊢ { V lv evv _ tv lc yr } 
								_dec lv ⊢ lv 
								gen { tv lv y } ⊢ { tv lv y } 
								$ RP.atm◂imp◂{ y yr } ⊢ yx,yx0 
								T.pnt_type_k { tv yx0 } ⊢ { tv syx } 
								$ yx ⊢ yx,yx0 
								T.newvar_ln { tv yx0 } ⊢ { tv iy0 } 
								^ dd,ev_n,w,syx ⊢ dd,ev_n,w,syx,ep1 
									0'*"\t" "§ " 2' "(" 1d' ") : " 3' "\n" // 
								eml ep1 ⊢ ep1 
								$ _cns◂{ ep1 ep0 } ⊢ ep0 
								_mk_arr { %[ 0r ] ‹› } ⊢ { _ _ vv }
								ip.inl.r { { V evv vv } lc } ⊢ { { V evv _ } lc } 
								inc_x ev_n ⊢ { o_n ev_n } 
								add_e { tv evv ev_n ns_e w ast.k_op◂{ _none◂{} o_n d rv_n_e if lc iy0 } yx } ⊢ { tv evv ev_n ns_e _ }
								iso_file { { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } {    ev_n tv tav evv } { el dd ep0 } } ⊢ {  MV NS LCV EC }
								slv_file_lp { V  i il MV LCV tx_n NS gel  EC } ⊢|
							∐. o_t ⊢ _some◂p . 
								tpl_ptn { { %[ 0r ] _nil◂{} lv evv ev_n tv } p } ⊢ { { c_n wl lv evv ev_n tv } p y_c } 
								tpl_push { ns_e wl } ⊢ { ns_e wl } 
								$ %[ 1r ] ⊢ r_n 
								slv_n.crt_mtc_ptn_al { { { mmv mev ns_m ns_e il } tv r_n ns_r_e ⟦⟧ ⟦⟧ ⟦⟧ } d } ⊢ { { { mmv mev ns_m ns_e il } tv rv_n_e ns_r_e dl al adl } d } 
								slv_n.iso_rl { ns_r_e adl al } ⊢ { ns_r_e o }
								slv_n.r { { { mmv mev ns_m ns_e il } tv rv_n_e ns_r_e } lc } ⊢ { { { mmv mev ns_m ns_e il } tv rv_n_e _ } lc } 
								slv_n.iso { o lc } ⊢ lc 
								slv_n.dlt { dl lc } ⊢ lc 
								$ RP.atm◂%[ 0r ] ⊢ di 
								$ RP.atm◂ast.re_reg◂%[ 0r ] ⊢ si 
								slv_gl.r { { si slv_gl.id_k◂{} d } lc } ⊢ lc
								$ di ⊢ d 
								slv_V.r { V lc } ⊢ { V lc } 
								ast.RV.ini {} ⊢ rv_e  
								slv.crt_tpl_ptn { { lv rv_e tv } d } ⊢ { { lv rv_e tv } d y } 
								$ y ⊢ y,y0 
								rtr_dst_ptn { { mmv mev ns_m ns_e il } mtv tv ns_t y0 td } ⊢ { { mmv mev ns_m ns_e il } mtv tv ns_t } 
								tpl_pop { ns_e wl } ⊢ ns_e 
								$ c_n ⊢ c_n0 
								slv.r { V lv evv rv_e tv lc } ⊢ { V lv evv rv_e tv lc yr } 
								_dec lv ⊢ lv 
								gen { tv lv y } ⊢ { tv lv y } 
								gen { tv lv y_c } ⊢ { tv lv y_c } 
								$ RP.atm◂ct_imp◂{ y_c TX.t_imp◂{ y yr } } ⊢ yx,yx0 
								T.pnt_type_k { tv yx0 } ⊢ { tv syx } 
								$ yx ⊢ yx,yx0 
								T.newvar_ln { tv yx0 } ⊢ { tv iy0 } 
								^ dd,w,syx ⊢ dd,w,syx,ep1 
									0'*"\t" "§ " 1' " : " 2' "\n" // 
								eml ep1 ⊢ ep1 
								$ _cns◂{ ep1 ep0 } ⊢ ep0 
								inc_x ev_n ⊢ { o_n ev_n }
								add_e { tv evv ev_n ns_e w ast.k_op_gnr◂{ { c_n0 p } o_n d rv_n_e if lc iy0 } yx } ⊢ { tv evv ev_n ns_e _ }
								iso_file { { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } {    ev_n tv tav evv } { el dd ep0 } } ⊢ {  MV NS LCV EC }
								slv_file_lp { V   i il MV LCV tx_n NS gel  EC } ⊢|	
						∐ ast.lc_grm◂{ g_o ge } . 
							∎| 
						∐ ast.lc_ln◂c . 
							$ %[ 1r ] ⊢ lv 
							slv_n.cst { { mmv mev ns_m ns_e il } c } ⊢ { { mmv mev ns_m ns_e il } c } 
							slv.cst { { lv evv tv } c } ⊢ { { lv evv tv } c yx } 
							_dec lv ⊢ lv 
							gen { tv lv yx } ⊢ { tv lv yx } 
							add_e { tv evv ev_n ns_e w c yx } ⊢ { tv evv ev_n ns_e _ } 
							iso_file { { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } {    ev_n tv tav evv } { el dd ep0 } } ⊢ {  MV NS LCV EC }
							slv_file_lp { V   i il MV LCV tx_n NS gel  EC } ⊢|
						∐ ast.lc_ply◂{ x p } . 
							ast.RV.ini {} ⊢ rv_t 
							slv_n.RE.ini {} ⊢ ns_r_t 
							\\tpl_reg_ptn { { ns_r_t %[ 1r ] rv_t %[ 0r ] tv } x } ⊢ { { ns_r_t lv rv_t rv_t_n tv } x y }
							slv_n.tpl_ptn { { ns_r_t %[ 0r ] } x } ⊢ { { ns_r_t rv_t_n } x }
							slv_n.csm_src_ptn { { { mmv mev ns_m ns_e il } tv ns_r_t } p } ⊢ { { { mmv mev ns_m ns_e il } tv ns_r_t } p }
							slv_n.RE.is_empty ns_r_t ⊢ { _ b } 
							bl.is_t b ⊢ {} 
							slv.crt_tpl_ptn { { %[ 1r ] rv_t tv } x } ⊢ { { lv rv_t tv } x y } 
							slv.csm_src_ptn { { lv evv rv_t tv } p } ⊢ { { lv evv _ tv } p yp } 
							_dec lv ⊢ lv 
							gen { tv lv y } ⊢ { tv lv y } 
							gen { tv lv yp } ⊢ { tv lv yp } 
							$ TX.t_ctr◂{ y yp } ⊢ yi 
							\\T.newvar_ln { tv yi0 } ⊢ { tv v0 } 
							$ yi ⊢ yi,yi0 
							T.pnt_type_k { tv yi0 } ⊢ { tv syi } 
							^ dd,ev_n,w,syi ⊢ dd,ev_n,w,_,ep1 
								0'*"\t" "§ " 2' "(" 1d' ") : " 3' "\n" // 
							eml ep1 ⊢ ep1 
							$ _cns◂{ ep1 ep0 } ⊢ ep0 
							add_e { tv evv ev_n ns_e w ast.k_ply◂{ x p } yi } ⊢ { tv evv ev_n ns_e _ }
							iso_file { { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } {    ev_n tv tav evv } { el dd ep0 } } ⊢ {  MV NS LCV EC }
							slv_file_lp { V   i il MV LCV tx_n NS gel  EC } ⊢|	
						∐. ast.lc_grm◂{ o_g g } . 
							_emt %[ "lc_grm 0" ] ⊢ _ 
							∎| 
					
					∐ ast.lc_qlq_etr◂q . 
						\\_emt %[ "lc_qlq_etr E0" ] ⊢ _ 
						ip.grm.f_clq { %[ 0r ] %[ 0r ] q } ⊢ { _ _ q }
						slv_lc_clq.f { V { mtv mv_n ns_t i } { mmv mev ns_m ns_e il } tav evv tv ev_n q { dd ep0 } } ⊢ { V { mtv mv_n ns_t i } { mmv mev ns_m ns_e il } tav evv tv ev_n { dd ep0 } gl }
						iso_file { { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } {    ev_n tv tav evv } { el dd ep0 } } ⊢ {  MV NS LCV EC }
						slv_file_lp { V   i il MV LCV tx_n NS gel  EC } ⊢|
					∐ ast.dt_etr◂{ w e } .
						$ e ⊢ 
						∐ ast.dt_def◂{ as dl } .
							\\_arr_len tav ⊢ { tav x } 
							\\$ x ⊢ x,x0 
							$ tx_n ⊢ tx_n,x,x0 
							_inc tx_n ⊢ tx_n
							$ w ⊢ w,w0 
							slv_args_def { mtv tv ns_t as x dl } ⊢ { mtv tv ns_t al k yx dl ql } 
							add_t { tv ns_t w k } ⊢ { tv ns_t }
							slv_dt_def { { mmv mev ns_m il } { tav evv } %[ 0r ] mtv al yx tv ns_t ev_n ns_e dl { dd ep0 } } ⊢ { { mmv mev ns_m il } { tav evv } an mtv al yx tv ns_t ev_n ns_e { dd ep0 } ac kl }
							set_tv { tav x0 { w0 { ac ql kl } } } ⊢ { tav x } 
							\\_push { { w0 { ac ql kl } } tav } ⊢ tav 
							iso_file { { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } {    ev_n tv tav evv } { el dd ep0 } } ⊢ {  MV NS LCV EC }
							slv_file_lp { V  i il MV LCV tx_n NS gel  EC } ⊢|
						∐. ast.dt_ln◂{ as y } . 
							$ _nil◂{} ⊢ al
							slv_args_ln { { { mmv mev ns_m ns_e il } mtv tv ns_t as al } y } ⊢ { { { mmv mev ns_m ns_e il } mtv tv ns_t al l2 } k } 
							$ k ⊢ k,k0 
							T.pnt_type_k { tv k0 } ⊢ { tv sk } 
							^ dd,w,sk ⊢ dd,w,sk,ep1 
								0'*"\t" "¶ " 1' " ~ " 2' // 
							$ _cns◂{ ep1 ep0 } ⊢ ep0 
							add_t { tv ns_t w k } ⊢ { tv ns_t } 
							iso_file { { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } {    ev_n tv tav evv } { el dd ep0 } } ⊢ {  MV NS LCV EC }
							slv_file_lp { V   i il MV LCV tx_n NS gel  EC } ⊢|
					∐. ast.dt_qlq_etr◂q .
						slv_dt_clq.f { q { mmv mev ns_m ns_e il } tx_n tav evv ev_n mtv tv ns_t { dd ep0 } } ⊢ { { mmv mev ns_m ns_e il } tx_n tav evv ev_n mtv tv ns_t { dd ep0 } }
						iso_file {  { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } {    ev_n tv tav evv } { el dd ep0 } } ⊢ {  MV NS LCV EC }
						slv_file_lp { V   i il MV LCV tx_n NS gel  EC } ⊢|
				∐. _nil◂{} . 
					iso_file {  { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } {    ev_n tv tav evv } { el dd ep0 } } ⊢ {  MV NS LCV EC }
					∎ { V i il MV LCV tx_n NS  EC }
		§ @.slv_op_axm { { tv evv ev_n ns_e } x }
			∐ x'=EX.N .
				∎ { { tv evv ev_n ns_e } x }
			∐ x'=18r . 
				$ %[ 0r ] ⊢ lv 
				newvar_q { tv lv } ⊢ { tv lv y0 }
				$ TX.t_ctr◂{ RP.rcd◂_nil◂{} TX.lst◂y0 } ⊢ yx,yx0 
				k_ctr { tv %[ 1r ] %[ 2r ] yx0 } ⊢ { tv k } 
				add_e { tv evv ev_n ns_e %[ "_nil" ] k yx } ⊢ { tv evv ev_n ns_e _ } 
						
				newvar_q { tv lv } ⊢ { tv lv y0 }
				$ y0 ⊢ y0,y1 
				$ TX.lst◂y0 ⊢ y0,y2 
				$ TX.t_ctr◂{ RP.cns2◂{ y1 y0 } %y2 } ⊢ yx,yx0 
				k_ctr { tv %[ 0r ] %[ 2r ] yx0 } ⊢ { tv k } 
				add_e { tv evv ev_n ns_e %[ "_cns" ] k yx } ⊢ { tv evv ev_n ns_e _ } 
					
				newvar_q { tv lv } ⊢ { tv lv y0 } 
				$ y0 ⊢ y0,y1 
				$ TX.t_ctr◂{ y0 TX.opn◂y1 } ⊢ yx,yx0 
				k_ctr { tv %[ 0r ] %[ 2r ] yx0 } ⊢ { tv k } 
				add_e { tv evv ev_n ns_e %[ "_some" ] k yx } ⊢ { tv evv ev_n ns_e _ } 
				
				newvar_q { tv lv } ⊢ { tv lv y0 }
				$ TX.opn◂y0 ⊢ y0 
				$ TX.t_ctr◂{ RP.rcd◂_nil◂{} %y0 } ⊢ yx,yx0
				k_ctr { tv %[ 1r ] %[ 2r ] yx0 } ⊢ { tv k } 
				add_e { tv evv ev_n ns_e %[ "_none" ] k yx } ⊢ { tv evv ev_n ns_e _ } 
					
				slv_op_axm { { tv evv ev_n ns_e } %[ 22r ] } ⊢|
			∐. . 
				$ x ⊢ x,x0 
				EX.slv { tv x0 } ⊢ { tv y } 
				$ x ⊢ x,x0 
				EX.slv_name x0 ⊢ w  
				$ x ⊢ x,x0 
				_inc x ⊢ x 
				add_e { tv evv ev_n ns_e w ast.k_op_axm◂{ x0 ⟦⟧ } y } ⊢ { tv evv ev_n ns_e _ } 
				slv_op_axm { { tv evv ev_n ns_e } x } ⊢| 
		§ slv_file gel
				_cli {} ⊢ V 
				$ %[ TX.N0 ] ⊢ tx_n 
				NS_M.ini {} ⊢ ns_m 
				NS_T.ini {} ⊢ ns_t 
				NS_E.ini {} ⊢ ns_e 
				$ %[ 3200r ] ⊢ max 
				MMV.ini {} ⊢ mmv 
				MTV.ini {} ⊢ mtv 
				MEV.ini {} ⊢ mev 
				mk_nil_arr %[ 162807r ] ⊢ { _ mfv } 
				_cli {} ⊢ evv 
				_cli {} ⊢ tv 
				$ %[ 1r ] ⊢ mv_n
				$ %[ 0r ] ⊢ ev_n
				$ %[ 0r ] ⊢ i 
				$ %[ 0r ] ⊢ lv 

				
				add_t { tv ns_t %[ "_r64" ] TX.r64◂{} } ⊢ { tv ns_t }
				add_t { tv ns_t %[ "_r8" ] TX.r8◂{} } ⊢ { tv ns_t }
				add_t { tv ns_t %[ "_s8" ] TX.s8◂{} } ⊢ { tv ns_t }

				T.newvar_i tv ⊢ { tv i0 } 
				$ i0 ⊢ i0,i1 
				$ RP.atm◂abs◂{ T.p◂%i1 TX.lst◂ RP.atm◂var◂T.p◂%i0 } ⊢ y0 
				add_t { tv ns_t %[ "_lst" ] y0 } ⊢ { tv ns_t }				
				_clp { tv var_q◂%[ 0r ] } ⊢ { tv t0 } 
				$ t0 ⊢ ia0,t0_0 
				$ RP.atm◂T.var◂T.p◂t0_0 ⊢ v 
				$ v ⊢ v,v0 
				ini_tv_n %[ 800r ] ⊢ { _ tav }
				\\_mk_arr_x { %[ 1r ] { %[ "_lst" ] { %[ 2r ] ⟦ ia0 ⟧ ⟦ RP.cns2◂{ v0 TX.lst◂v } TX.unt◂{} ⟧ } } } ⊢ { _ _ tav }
				set_tv { tav %[ TX.id.lst ] { %[ "_lst" ] { %[ 2r ] ⟦ ia0 ⟧ ⟦ RP.cns2◂{ v0 TX.lst◂v } TX.unt◂{} ⟧ } } } ⊢ { tav _ }

				newvar_i tv ⊢ { tv i0 } 
				$ i0 ⊢ i0,i1 
				$ RP.atm◂abs◂{ T.p◂%i1 TX.opn◂RP.atm◂var◂T.p◂%i0 } ⊢ y0
				add_t { tv ns_t %[ "_opn" ] y0 } ⊢ { tv ns_t }
				_clp { tv var_q◂%[ 0r ] } ⊢ { tv t0 } 
				$ t0 ⊢ ia0,t0_0 
				$ RP.atm◂T.var◂T.p◂t0_0 ⊢ v 
				set_tv { tav %[ TX.id.opn ] { %[ "_opn" ] { %[ 2r ] ⟦ ia0 ⟧ ⟦ v TX.unt◂{} ⟧ } } } ⊢ { tav _ }
				\\_push { { %[ "_opn" ] { %[ 2r ] ⟦ ia0 ⟧ ⟦ v TX.unt◂{} ⟧ } } tav } ⊢ tav
				
				newvar_i tv ⊢ { tv i0 } 
				$ i0 ⊢ i0,i1 
				$ RP.atm◂abs◂{ T.p◂i1 TX.arr◂RP.atm◂var◂T.p◂i0 } ⊢ y0  
				$ %[ "_arr" ] ⊢ t0 
				add_t { tv ns_t t0 y0 } ⊢ { tv ns_t }

				newvar_i tv ⊢ { tv i0 } 
				$ i0 ⊢ i0,i1 
				$ RP.atm◂abs◂{ T.p◂i1 TX.Clr◂RP.atm◂var◂T.p◂i0 } ⊢ y0		
				$ %[ "_Clr" ] ⊢ t0 
				add_t { tv ns_t t0 y0 } ⊢ { tv ns_t }

				newvar_i tv ⊢ { tv i0 } 
				$ i0 ⊢ i0,i1 
				$ RP.atm◂abs◂{ T.p◂i1 TX.pt◂RP.atm◂var◂T.p◂i0 } ⊢ y0
				$ %[ "_pt" ] ⊢ t0 
				add_t { tv ns_t t0 y0 } ⊢ { tv ns_t }

				$ _nil◂{} ⊢ il 
				slv_op_axm { { tv evv ev_n ns_e } %[ 0r ] } ⊢ { { tv evv ev_n ns_e } x }

				
			
				$ iso◂{ mmv mev mtv mfv mv_n } ⊢ MV 
				$ iso◂{ ns_m ns_e ns_t } ⊢ NS
				$ iso◂{ ev_n tv tav evv } ⊢ LCV 
				$ iso◂{ log.ini◂{} %[ 0r ] ⟦⟧ } ⊢ EC
				slv_file_lp { V i il MV LCV tx_n NS gel EC } ⊢| 
  §§ asm 
    § BUF_SIZE = 40000000r
    ¶ lb = _r64
    ¶ a
      ∐ s8 : _s8  
      ∐ ret : {} 
      ∐ call_lb : lb
      ∐ etr_lb : lb 
      ∐ jmp_lb : lb 
      ∐ jz_lb : lb 
      ∐ jnz_lb : lb 
      ∐ jz_bl_lb : { bl.t lb } 
      ∐ jl_lb : lb
			∐ jle_lb : lb  
      ∐ jg_lb : lb 
      ∐ alc_rcd : { _r64 _s8 }
      ∐ free_rcd : { _r64 _s8 }
    ¶ @.t 
      ∐ nd : { t t }
      ∐ e : {} 
      ∐ lf : a 
    §§ pf 
      § s8 =^ 
        0' //
      § ret =^
        ` ret 
        //
      § call_lb =^
        "\tcall LB_" 0d' "\n" //
      § call_lb =^
        "\tcall LB_" 0d' "\n" //
      § etr_lb =^
        "LB_" 0d' "\n" //
      § jmp_lb =^
        "\tjmp LB_" 0d' "\n" //
      § jz_lb =^
        "\tjz LB_" 0d' "\n" //
      § jnz_lb =^
        "\tjnz LB_" 0d' "\n" //
      § jl_lb =^
        "\tjl LB_" 0d' "\n" //
      § jle_lb =^
        "\tjle LB_" 0d' "\n" //
			§ jg_lb =^
        "\tjg LB_" 0d' "\n" //
      § alc_rcd =^
        "\tALC_RCD " 0d' "," 1' "\n" //
      § free_rcd =^
        "\tFREE_RCD " 0d' "," 1' "\n" //
      ∎∎ 
    § cct # { a0 a1 } 
      ∎ nd◂{ a0 a1 }
    § of_s8◂s = lf◂s8◂s
    § add_s8 # { e s }
      ∎ nd◂{ e of_s8◂s }
    § pfx_s8 { s e }
      ∎ nd◂{ of_s8◂s e }
    § @.to_s8_a { a b i } 
      $ a ⊢ 
      ∐ s8◂s . 
        _pf_x◂◂pf.s8 { b i { s } } ⊢ { b i _ }
        ∎ { b i }  
      ∐ ret◂{} . 
        _pf_x◂◂pf.ret { b i {} } ⊢ { b i _ }
        ∎ { b i } 
      ∐ call_lb◂lb . 
        _pf_x◂◂pf.call_lb { b i { lb } } ⊢ { b i _ }
        ∎ { b i } 
      ∐ etr_lb◂lb . 
        _pf_x◂◂pf.etr_lb { b i { lb } } ⊢ { b i _ }
        ∎ { b i }  
      ∐ jmp_lb◂lb . 
        _pf_x◂◂pf.jmp_lb { b i { lb } } ⊢ { b i _ }
        ∎ { b i }  
      ∐ jz_lb◂lb . 
        _pf_x◂◂pf.jz_lb { b i { lb } } ⊢ { b i _ }
        ∎ { b i }  
      ∐ jnz_lb◂lb . 
        _pf_x◂◂pf.jnz_lb { b i { lb } } ⊢ { b i _ }
        ∎ { b i }  
      ∐ jz_bl_lb◂{ f lb } .
        $ f ⊢ 
        ∐ bl.t◂{} . 
          _pf_x◂◂pf.jz_lb { b i { lb } } ⊢ { b i _ }
          ∎ { b i }  
        ∐. bl.f◂{} . 
          _pf_x◂◂pf.jnz_lb { b i { lb } } ⊢ { b i _ }
          ∎ { b i }  
      ∐ jl_lb◂lb . 
        _pf_x◂◂pf.jl_lb { b i { lb } } ⊢ { b i _ }
        ∎ { b i }  
			∐ jle_lb◂lb . 
        _pf_x◂◂pf.jle_lb { b i { lb } } ⊢ { b i _ }
        ∎ { b i }  
      ∐ jg_lb◂lb . 
        _pf_x◂◂pf.jg_lb { b i { lb } } ⊢ { b i _ }
        ∎ { b i }  
      ∐ alc_rcd◂{ c r } . 
        _pf_x◂◂pf.alc_rcd { b i { c r } } ⊢ { b i _ }
        ∎ { b i }  
      ∐. free_rcd◂{ c r } .
        _pf_x◂◂pf.free_rcd { b i { c r } } ⊢ { b i _ }
        ∎ { b i }  
    § @.to_s8_i { e b i } 
      $ e ⊢ 
      ∐ e◂{} . 
        ∎ { b i }
      ∐ nd◂{ e0 e1 } .
        to_s8_i { e0 b i } ⊢ { b i } 
        to_s8_i { e1 b i } ⊢| 
      ∐. lf◂a . 
        to_s8_a { a b i } ⊢| 
    § mlc_buf L 
			_mlc_s8 L ⊢ { _ B } 
			∎ B 
		§ to_s8 # e
      eml %[ "mb:0" ] ⊢ _ 
			mlc_buf %[ BUF_SIZE ] ⊢ b
      eml %[ "mb:1" ] ⊢ _ 
      to_s8_i { e b %[ 0r ] } ⊢ { b l }
      eml %[ "mb:2" ] ⊢ _ 
      _rsz { b l } ⊢ { b _ } 
			_emt %[ "mb:3" ] ⊢ _ 
      ∎ b
    § main _
			$ e◂{} ⊢ B 
      add_s8 { B %[ "JIOJ\n" ] } ⊢ B 
      cct { B lf◂jmp_lb◂%[ 45r ] } ⊢ B 
			cct { B lf◂ret◂{} } ⊢ B 
			cct { B lf◂s8◂%[ "\tpop rbx\n" ] } ⊢ B
      \\to_s8 B ⊢ s 
			mlc_buf %[ BUF_SIZE ] ⊢ s
  		to_s8_i { B s %[ 0r ] } ⊢ { s l }
      \\_rsz { s l } ⊢ { s _ } 
      \[
      _s8_len s ⊢ { s l } 
			_emt l ⊢  _
			_emt s ⊢ _ 
      \]
			∎ {}
    ∎∎
  \\§ e = asm.e
	\\§§ asm = rp8
	§§ gnr
		\[
		§§ reg_idx  
			§ r13 = 0r 
			§ r14 = 1r 
			§ r8 = 2r 
			§ r9 = 3r 
			§ r10 = 4r 
			§ r11 = 5r 
			§ rcx = 6r 
			§ rdx = 7r 
			∎∎ 
		\]
		§ op1_e # { o s e } 
			^ o,s ⊢ o,s,c 
				"\t" 0' " " 1' "\n" //
			asm.add_s8 { e c } ⊢ e 
			∎ { o s e }
		§ push_e # { s e } 
			op1_e { %[ "push" ] s e } ⊢ { _ s e } 
			∎ { s e }
		§ pop_e # { s e } 
			op1_e { %[ "pop" ] s e } ⊢ { _ s e } 
			∎ { s e }
		§ call_lb # { lb e } 
		  \\[
			$ lb ⊢ lb,lb0 
      asm.cct { e asm.lf◂asm.call_lb◂lb0 } ⊢ e 
			∎ { lb e }
		§ lb_etr # { lb e } 
			$ lb ⊢ lb,lb0 
			asm.cct { e asm.lf◂asm.etr_lb◂lb0 } ⊢ e 
			∎ { lb e }
		§ jmp_lb # { lb e } 
			$ lb ⊢ lb,lb0 
			asm.cct { e asm.lf◂asm.jmp_lb◂lb0 } ⊢ e 
			∎ { lb e }
		§ jg_lb # { lb e } 
			$ lb ⊢ lb,lb0 
			asm.cct { e asm.lf◂asm.jg_lb◂lb0 } ⊢ e 
			∎ { lb e }
		§ jnz_lb # { lb e } 
			$ lb ⊢ lb,lb0 
			asm.cct { e asm.lf◂asm.jnz_lb◂lb0 } ⊢ e 
			∎ { lb e } 
		§ jz_lb # { lb e } 
			$ lb ⊢ lb,lb0 
			asm.cct { e asm.lf◂asm.jz_lb◂lb0 } ⊢ e 
			∎ { lb e } 
		§ jz_bl_lb { b lb e }
			$ b ⊢ 
			∐ bl.t◂{} . 
				jz_lb { lb e } ⊢| 
			∐. bl.f◂{} . 
				jnz_lb { lb e } ⊢|  
		§ jl_lb # { lb e } 
			$ lb ⊢ lb,lb0 
			asm.cct { e asm.lf◂asm.jl_lb◂lb0 } ⊢ e 
			∎ { lb e } 
		§ jle_lb # { lb e } 
			$ lb ⊢ lb,lb0 
			asm.cct { e asm.lf◂asm.jle_lb◂lb0 } ⊢ e 
			∎ { lb e } 
		§ alc_rcd◂◂R # { i e }
			$ i ⊢ i,i0 
			asm.cct { e asm.lf◂asm.alc_rcd◂{ i0 %[ R ] } } ⊢ e 
			∎ { i e }
		§ free_rcd◂◂R # { c e } 
      $ c ⊢ c,c0 
			asm.cct { e asm.lf◂asm.free_rcd◂{ c0 %[ R ] } } ⊢ e 
			∎ { c e }
		§ ret e 
			asm.cct { e asm.lf◂asm.ret◂{} } ⊢ e 
			∎ e  
		§ @.mk_jmp_tbl { lb_n n e } 			 
			∐ n'=0r .
				∎| 
			∐ n'=1r .
				^ lb_n ⊢ lb_n,s
					"LB_" 0d' // 
				inc_x lb_n ⊢ { lb0 lb_n } 
				rp8.add_s8 { e s } ⊢ e 
				rp8.to_s8 e ⊢ s 
				∎ { lb_n s p_end◂lb0 }
			∐. . 
				inc_x lb_n ⊢ { lb0 lb_n } 
				^ lb0 ⊢ lb0,s 
					"LB_" 0d' "," //
				rp8.add_s8 { e s } ⊢ e 
				_dec n ⊢ n 
				mk_jmp_tbl { lb_n n e } ⊢ { lb_n s lbl } 
				∎ { lb_n s p_cns◂{ lb0 lbl } }
		§ mk_jmp_tbl # { lb_n n }
			mk_jmp_tbl { lb_n n rp8.e◂{} } ⊢| 
		§ REG_N = 8r 
		§ c_call # e 
			^ e ⊢ e,r 				
				"\tC_CALL " 0' "\n" 
				// 
			∎ { e r }
		§ push_c_regs = "\tC_PUSH_REGS\n" 
		§ pop_c_regs = "\tC_POP_REGS\n" 
		\\[
		
		§ mlc_s8 l 
			$ l ⊢ l,l0 
			_shr { l0 %[ 3r ] } ⊢ { l0 x0 } 
			_inc l0 ⊢ l0  
			$ l0 ⊢ l0,l1 
			_inc l0 ⊢ l0 
			_shl { l0 x0 } ⊢ { l0 _ } 
			^ l,l0 ⊢ l,_,e 
				`	mov rsi,1  
				"\tmov rdi," 1d' "\n" 
				`	xor rax,rax 
				"\tadd QWORD [S8_N]," 0d' "\n" 
				`	C_CALL_SF calloc_sf
				"\tmov QWORD [rax]," 0d' "\n"
				//
			∎ { l e }   
		§ @.mk_s8_lp { s l i e } 
			∐ i'=l' . 
				∎ { s l e } 
			∐. . 
				_lds { s i } ⊢ { s i b } 
				^ i,b ⊢ i,b,eb 
					"\tmov BYTE [rax+8+" 0d' "]," 1d' "\n" 
					// 
				$ asm.of_s8◂eb ⊢ eb 
				asm.cct { e eb } ⊢ e 
				_inc i ⊢ i 
				mk_s8_lp { s l i e } ⊢| 
		§ mk_s8 s 
			_s8_len s ⊢ { s l } 
			mlc_s8 l ⊢ { l e0 } 
			$ asm.of_s8◂e0 ⊢ e0 
			mk_s8_lp { s l %[ 0r ] e0 } ⊢ { s l e0 } 
			∎ { s e0 }
		§ @.mk_s8_64_lp { s l i e } 
			∐ i'=l' . 
				∎ { s l e } 
			∐. . 
				_lds64 { s i } ⊢ { s i b } 
				^ i,b ⊢ i,_,eb 
					"\tmov rbx," 1d' "\n"
					"\tmov QWORD [rdi],rbx\n" 
					`	add rdi,8 
					// 
				$ asm.of_s8◂eb ⊢ eb 
				asm.cct { e eb } ⊢ e 
				_add { i %[ 8r ] } ⊢ { i _ }
				mk_s8_64_lp { s l i e } ⊢| 
		§ @.mk_s8_64_m { s l i e } 
			∐ i'=l' . 
				∎ { s l e } 
			∐. . 
				_lds { s i } ⊢ { s i b } 
				^ i,b ⊢ i,_,eb 
					"\tmov BYTE [rdi]," 1d' "\n" 
					`	add rdi,1 
					// 
				$ asm.of_s8◂eb ⊢ eb 
				asm.cct { e eb } ⊢ e 
				_inc i ⊢ i
				mk_s8_64_m { s l i e } ⊢| 
		§ mk_s8_64 s 
			_s8_len s ⊢ { s l } 
			mlc_s8 l ⊢ { l e0 } 
			$ l ⊢ l,l0 
			_shr { l %[ 3r ] } ⊢ { l _ } 
			_shl { l %[ 3r ] } ⊢ { l _ }
			asm.add_s8 { asm.of_s8◂e0 %[ "\tlea rdi,[rax+8]\n" ] } ⊢ e0
			mk_s8_64_lp { s l %[ 0r ] e0 } ⊢ { s l e0 } 
			mk_s8_64_m { s l0 l e0 } ⊢ { s _ e0 }
			∎ { s e0 }
		§ @.mk_db_lp { s i l r } 
			∐ i'=l' . 
				^ r ⊢ r,e 
					0d' // 
				∎ { s r rp8.of_s8◂e } 
			∐. . 
				_lds { s i } ⊢ { s i b } 
				^ b ⊢ b,eb 
					0d' "," // 
				_inc i ⊢ i 
				mk_db_lp { s i l r } ⊢ { s r e1 } 
				rp8.cct { rp8.of_s8◂eb e1 } ⊢ e 
				∎ { s r e } 			
		§ mk_db # { s r }  
			_s8_len s ⊢ { s l } 
			mk_db_lp { s %[ 0r ] l r } ⊢ { s r e } 
			rp8.to_s8 e ⊢ se  
			∎ { s r se }
		§ data_s8 # { eds lb s }
			$ %[ 0r ] ⊢ r 
			mk_db { s r } ⊢ { s r se } 
			^ lb,se ⊢ lb,se,ss 
				"LB_" 0d' ": db " 1' ",0,0,0,0,0,0,0,0\n" // 
			asm.add_s8 { eds ss } ⊢ eds 
			∎ { eds lb s } 
		
			§ mov { i0 i1 } 
				∐ i0'=i1' . 
					$ %[ "" ] ⊢ sr 
					∎ { i0 i1 sr }
				∐. . 
					^ i0,i1 ⊢ i0,i1,sr 
						"\tMOV_RBX GLX(" 1d' "),GLX(" 0d' ")\n" //
					∎ { i0 i1 sr }
			§ mov_e # { r0 r1 e } 
				mov { r0 r1 } ⊢ { r0 r1 s } 
				asm.add_s8 { e s } ⊢ e 
				∎ { r0 r1 e } 
			
			§ r64_to_rax { evv a0 }
				ast.r64_of_rt { evv a0 } ⊢ { evv x } 
				$ x ⊢ 
				∐ ast.im_of◂x . 
					^ x ⊢ x,sc0 
						"\tmov rax," 0d' "\n" //
					∎ { evv sc0 }
				∐. ast.hp_of◂r0 . 
					^ r0 ⊢ r0,sc0 
						"\tmov rax,GLX(" 0d' ")\n" //
					∎ { evv sc0 }	
			§ r64_to_hp { evv glv_n a0 }
				ast.r64_of_rt { evv a0 } ⊢ { evv x } 
				$ x ⊢ 
				∐ ast.im_of◂x . 
					inc_x glv_n ⊢ { r glv_n } 
					^ x,r ⊢ x,r,sc0 
						"\tmov GLX(" 1d' ")," 0d' "\n" //
					∎ { evv glv_n r asm.of_s8◂sc0 }
				∐. ast.hp_of◂r . 
					∎ { evv glv_n r asm.e◂{} }	
			§ s8_to_hp { evv glv_n a0 } 
				ast.s8_of_rt { evv a0 } ⊢ { evv s } 
				$ s ⊢ 
				∐ ast.im_of◂s . 
					mk_s8_64 s ⊢ { _ e } 
					inc_x glv_n ⊢ { r glv_n } 
					^ r ⊢ r,sc0 
						"\tmov GLX(" 0d' "),rax\n" // 
					asm.add_s8 { e sc0 } ⊢ e 
					∎ { evv glv_n r e }
				∐. ast.hp_of◂r . 
					∎ { evv glv_n r asm.e◂{} }	
		§ sx # i 
					^ i ⊢ _,s 
						"SX(" 0d' ")" // 
					∎ s 
		§ glx # i 
					^ i ⊢ _,s 
						"GLX(" 0d' ")" // 
					∎ s 
		§ r8 # i 
					∎ %[ "r8" ]

		§§ mov 
			§ idx_mem # { r0 m e0 } 
				^ r0,m ⊢ r0,m,sc0 
					"\tMOV_RAX GLX(" 0d' ")," 1' "\n" // 
				asm.add_s8 { e0 sc0 } ⊢ e0 
				∎ { r0 m e0 }	
			§ mem_idx # { m r1 e0 } 
				^ r1,m ⊢ r1,m,sc0 
					"\tMOV_RAX " 1' ",GLX(" 0d' ")\n" // 
				asm.add_s8 { e0 sc0 } ⊢ e0 
				∎ { m r1 e0 }
			§ idx_lea_idx_x { r0 r1 x e0 }
				^ r0,r1,x ⊢ r0,r1,x,sc0 
					"\tmov rdi,GLX(" 1d' ")\n" 
					"\tMOV_RDI GLX(" 0d' "), QWORD [rdi+" 2d' "]\n" // 
					asm.add_s8 { e0 sc0 } ⊢ e0 
					∎ { r0 r1 x e0 }
			§ lea_rax { r x e } 
				^ r,x ⊢ r,x,sc0
					"\tmov rbx,GLX(" 0d' ")\n" 
					"\tmov QWORD [rbx+" 1d' "],rax\n" 
					// 
				asm.add_s8 { e sc0 } ⊢ e
				∎ { r x e } 
			§ idx_S◂◂S { r0 e } 
				^ r0 ⊢ r0,sc0 
					"\tmov GLX(" 0d' ")," S "\n" // 
				asm.add_s8 { e sc0 } ⊢ e
				∎ { r0 e }
			§ idx_rax = idx_S◂◂"rax" 
			§ S_idx◂◂S { r0 e } 
				^ r0 ⊢ r0,sc0 
					"\tmov " S ",GLX(" 0d' ")\n" // 
				asm.add_s8 { e sc0 } ⊢ e
				∎ { r0 e }
			§ rax_idx = S_idx◂◂"rax" 
			§ rdi_idx = S_idx◂◂"rdi" 
			§ rax_im # { x e } 
				^ x ⊢ x,s
					"\tmov rax," 0d' "\n" // 
				asm.add_s8 { e s } ⊢ e 
				∎ { x e }
		
			§ idx_unt # { r e } 
				^ r ⊢ r,sc0 
					"\tmov GLX(" 0d' "),unt\n" // 
				asm.add_s8 { e sc0 } ⊢ e 
				∎ { r e }
			∎∎ 	
		§§ cmp 
			§ idx_idx # { r0 r1 e }
				^ r0,r1 ⊢ r0,r1,sc 
					"\tmov rdi,GLX(" 1d' ")\n" 
					"\tcmp GLX(" 0d' "),rdi\n" //
				asm.add_s8 { e sc } ⊢ e
				∎ { r0 r1 e }
			§ idx_im # { r0 x e }
				^ r0,x ⊢ r0,x,sc 
					"\tcmp GLX(" 0d' ")," 1d' "\n" //
				asm.add_s8 { e sc } ⊢ e
				∎ { r0 x e }   
			∎∎
		§§ lod_sgm 
				§ 
					@.atm { { e0 glv_n } a0 }
						$ a0 ⊢ 
						∐ ast.hp◂{ r0 h0 } . 
							inc_x glv_n ⊢ { i glv_n }
							^ r0,i ⊢ _,i,sc0 
								"\tMOV_RDI GLX(" 1d' "),SX(" 0d' ")\n" // 
							asm.add_s8 { e0 sc0 } ⊢ e0 
							∎ { { e0 glv_n } ast.hp◂{ i h0 } }
						∐ ast.rt_usr◂{ a p } . 
							ptn { { e0 glv_n } p } ⊢ { { e0 glv_n } p } 
							∎ { { e0 glv_n } ast.rt_usr◂{ a p } }
						∐ ast.stt_adt◂{ ia na p0 } . 
							ptn { { e0 glv_n } p0 } ⊢ { { e0 glv_n } p0 } 
							∎ { { e0 glv_n } ast.stt_adt◂{ ia na p0 } }
						∐ ast.dyn_adt◂{ { ax al } ri rd } .
							inc_x glv_n ⊢ { i glv_n }
							^ ri,i ⊢ _,i,sc0 
								"\tMOV_RDI GLX(" 1d' "),SX(" 0d' ")\n" // 
							asm.add_s8 { e0 sc0 } ⊢ e0 
							inc_x glv_n ⊢ { d glv_n }
							^ rd,d ⊢ _,d,sc0 
								"\tMOV_RDI GLX(" 1d' "),SX(" 0d' ")\n" // 
							asm.add_s8 { e0 sc0 } ⊢ e0 
							∎ { { e0 glv_n } ast.dyn_adt◂{ { ax al } i d } }
						∐ ast.btm◂{} . 
							∎ { { e0 glv_n } ast.btm◂{} }
						∐. ast.hp_im◂v .
							∎ { { e0 glv_n } ast.hp_im◂v }
					@.ptn = RP.map_l◂◂atm
				§ 
					@.atm_1 { { e0 glv_n r } a0 }
						$ a0 ⊢ 
						∐ ast.hp◂{ _ h0 } . 
							$ r ⊢ r,r0 
							∎ { { e0 glv_n r } ast.hp◂{ r0 h0 } }
						∐ ast.rt_usr◂{ a p0 } . 
							ptn_1 { { e0 glv_n r } p0 } ⊢ { { e0 glv_n r } p0 } 
							∎ { { e0 glv_n r } ast.rt_usr◂{ a p0 } }
						∐ ast.stt_adt◂{ ia na p0 } . 
							ptn_1 { { e0 glv_n r } p0 } ⊢ { { e0 glv_n r } p0 } 
							∎ { { e0 glv_n r } ast.stt_adt◂{ ia na p0 } }
						∐ ast.dyn_adt◂_ .
							∎|
						∐ ast.btm◂{} . 
							∎ { { e0 glv_n r } ast.btm◂{} }
						∐. ast.hp_im◂v .
							∎ { { e0 glv_n r } ast.hp_im◂v }
					@.ptn_1 = RP.map_l◂◂atm_1
				∎∎
			
	§§ idx 
		§ ini {} 
			ini_tv_n %[ 64r ] ⊢ { _ v } 
			∎ v 
		§ get = get_tv
		§ 
			@.crt { irv d ip dl }
			$ d ⊢ 
			∐ ast.re_reg◂i . 
				ast.IRV.set { irv { i ip } } ⊢ { irv { i o } } 
				nnt o ⊢ {} 
				∎ { irv dl }
			∐ ast.re_agl◂{ _ p } . 
				∐ ip ⊢ RP.atm◂ast.stt_adt◂{ i n ip }; n'=1r .
					crt_ptn { irv p ip dl } ⊢| 
				∐. . 
					_emt %[ "crt_idx 0" ] ⊢ _ 
					∎| 
			∐. ast.re_v◂_ . 
				∎|
      @.crt_btm # { irv d dl } 
        crt { irv d RP.atm◂ast.btm◂{} dl } ⊢|
      @.crt_btm_lst { irv dl dll } 
			∐ dl ⊢ _cns◂{ d dl } .
				crt_btm_ptn { irv d dll } ⊢ { irv dll } 
				crt_btm_lst { irv dl dll } ⊢|
			∐. dl ⊢ _nil◂{} .
				∎ { irv dll }
			@.crt_btm_ptn { irv d dl } 
        $ d ⊢ 
        ∐ RP.atm◂a . 
          crt_btm { irv a dl } ⊢| 
        ∐. RP.rcd◂l . 
          crt_btm_lst { irv l dl } ⊢| 

      @.crt_lst { irv dl ipl dll } 
			∐ dl ⊢ _cns◂{ d dl }; ipl ⊢ _cns◂{ ip ipl } . 
				crt { irv d ip dll } ⊢ { irv dll } 
				crt_lst { irv dl ipl dll } ⊢|
			∐ dl ⊢ _nil◂{}; ipl ⊢ _nil◂{} . 
				∎ { irv dll }
			∐. . 
				$ %[ "idx:crt_lst 0" ] ⊢ ee 
				_emt ee ⊢ ee 
				∎|   
			@.crt_ptn { irv rp ip dl }
				∐ rp ⊢ RP.rcd◂r . 
					∐ ip ⊢ RP.rcd◂ir . 
						crt_ptn_lst { irv r ir dl } ⊢| 
					∐ ip ⊢ RP.atm◂ast.btm◂{} . 
            crt_btm_lst { irv r dl } ⊢|
          ∐. . 
						$ %[ "crt_idx_ptn 2" ] ⊢ se 
						_emt se ⊢ se  
						∎| 
				∐ rp ⊢ RP.atm◂a .  
					crt { irv a ip dl } ⊢| 
				∐. .
					$ %[ "crt_idx_ptn 0" ] ⊢ se 
					_emt se ⊢ se 
					∎| 
			@.crt_ptn_lst { irv r ir dl } 
				∐ r ⊢ _cns◂{ p r }; ir ⊢ _cns◂{ ip ir } . 
					crt_ptn { irv p ip dl } ⊢ { irv dl }  
					crt_ptn_lst { irv r ir dl } ⊢|
				∐ r ⊢ _nil◂{}; ir ⊢ _nil◂{} . 
					∎ { irv dl } 
				∐. . 
					$ %[ "crt_idx_ptn_lst 0" ] ⊢ se 
					_emt se ⊢ se 
					∎| 
		§
			@.asc_ply { av { xp sp } } 
				∐ xp ⊢ RP.rcd◂l0; sp ⊢ RP.rcd◂l1 . 
					asc_ply_lst { av { l0 l1 } } ⊢|
				∐ xp ⊢ RP.atm◂i0 .  
					set_tv { av i0 sp } ⊢ { av i0 } 
					∎ av 
				∐. . 
					_emt %[ "asc_ply 0" ] ⊢ _ 
					∎| 
			@.asc_ply_lst { av { l0 l1 } }
				∐ l0 ⊢ _cns◂{ xp l0 }; l1 ⊢ _cns◂{ sp l1 } . 
					asc_ply { av { xp sp } } ⊢ av
					asc_ply_lst { av { l0 l1 } } ⊢| 
				∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
					∎ av
				∐. . 
					∎| 
		§ 
			@.subst_ply = RP.map_l_atm◂◂subst_ply_atm
			@.subst_ply_atm { { evv av } a }
				$ a ⊢ 
				∐ ast.re_reg◂i . 
					lod_tv { av i } ⊢ { av i p } 
					∎ { { evv av } p } 
				∐ ast.re_agl◂{ e sp } . 
					subst_ply { { evv av } sp } ⊢ { { evv av } p } 
					app_ctr { evv ast.k_name◂e p } ⊢ { evv p } 
					∎ { { evv av } p } 
				∐. ast.re_v◂c . 
					∎ { { evv av } RP.atm◂ast.hp_im◂c }
			@.app_ctr { evv k p } 
				∐ k ⊢ ast.k_ctr◂{ ia na _ } . 
					∎ { evv RP.atm◂ast.stt_adt◂{ ia na p } } 
				∐ k ⊢ ast.k_name◂i . 
					EVV.lod_evv { evv i } ⊢ { evv i c } 
					app_ctr { evv c p } ⊢| 
				∐ k ⊢ ast.k_ply◂{ xp yp } . 
					mk_arr { %[ 64r ] _none◂{} } ⊢ { _ _ av } 
					asc_ply { av { xp p } } ⊢ av
					subst_ply { { evv av } yp } ⊢ { { evv av } p } 
					∎ { evv p }
				∐. . 
					_emt %[ "evl_ctr 0" ] ⊢ _ 
					∎|
		§ 
			@.tpl { irv i ip }
				ast.IRV.set { irv { i ip } } ⊢ { irv { _ o } } 
				nnt o ⊢ {} 
				∎ irv
			@.tpl_btm # { irv d } 
        tpl { irv d RP.atm◂ast.btm◂{} } ⊢|
      @.tpl_btm_lst { irv dl } 
			∐ dl ⊢ _cns◂{ d dl } .
				tpl_btm_ptn { irv d } ⊢ irv 
				tpl_btm_lst { irv dl } ⊢|
			∐. dl ⊢ _nil◂{} .
				∎ irv
			@.tpl_btm_ptn { irv d } 
        $ d ⊢ 
        ∐ RP.atm◂a . 
          tpl_btm { irv a } ⊢| 
        ∐. RP.rcd◂l . 
          tpl_btm_lst { irv l } ⊢| 

      @.tpl_lst { irv dl ipl } 
			∐ dl ⊢ _cns◂{ d dl }; ipl ⊢ _cns◂{ ip ipl } . 
				tpl { irv d ip } ⊢ irv 
				tpl_lst { irv dl ipl } ⊢|
			∐ dl ⊢ _nil◂{}; ipl ⊢ _nil◂{} . 
				∎ irv
			∐. . 
				$ %[ "idx:crt_lst 0" ] ⊢ ee 
				_emt ee ⊢ ee 
				∎|   
			@.tpl_ptn { irv rp ip }
				∐ rp ⊢ RP.rcd◂r . 
					∐ ip ⊢ RP.rcd◂ir . 
						tpl_ptn_lst { irv r ir } ⊢| 
					∐ ip ⊢ RP.atm◂ast.btm◂{} . 
            tpl_btm_lst { irv r } ⊢|
          ∐. . 
						$ %[ "crt_idx_ptn 2" ] ⊢ se 
						_emt se ⊢ se  
						∎| 
				∐ rp ⊢ RP.atm◂a .  
					tpl { irv a ip } ⊢| 
				∐. .
					$ %[ "crt_idx_ptn 0" ] ⊢ se 
					_emt se ⊢ se 
					∎| 
			@.tpl_ptn_lst { irv r ir } 
				∐ r ⊢ _cns◂{ p r }; ir ⊢ _cns◂{ ip ir } . 
					tpl_ptn { irv p ip } ⊢ irv  
					tpl_ptn_lst { irv r ir } ⊢|
				∐ r ⊢ _nil◂{}; ir ⊢ _nil◂{} . 
					∎ irv
				∐. . 
					$ %[ "crt_idx_ptn_lst 0" ] ⊢ se 
					_emt se ⊢ se 
					∎|
		§ @.csm { { evv irv } s } 
			$ s ⊢ 
			∐ ast.re_agl◂{ e sp } . 
				csm_ptn { { evv irv } sp } ⊢ { { evv irv } p } 
				app_ctr { evv ast.k_name◂e p } ⊢ { evv p } 
				∎ { { evv irv } p } 
			∐ ast.re_v◂c . 
				∎ { { evv irv } RP.atm◂ast.hp_im◂c }
			∐. ast.re_reg◂r . 
				ast.IRV.get { irv r } ⊢ { irv { r o } } 
				∐ o ⊢ _some◂ip . 
					∎ { { evv irv } ip }  
				∐. . 
					_emt r ⊢ _ 
					_emt %[ "csm:re_reg" ] ⊢ _
					∎|
			@.csm_ptn = RP.map_l_atm◂◂csm
		§ csm_lst = lst.map_l◂◂csm
		§ csm_ptn_lst = lst.map_l◂◂csm_ptn
		§ @.csm_tpl { irv r } 
			ast.IRV.get { irv r } ⊢ { irv { r o } } 
			smt o ⊢ ip 
			∎ { irv ip } 
		§ csm_tpl_ptn = RP.map_l_atm◂◂csm_tpl
		∎∎
		§ 
			@.subst_atm = ast.map_l_rt_reg_atm◂◂subst
			@.subst_ptn = RP.map_l◂◂subst_atm 
		§ subst_ptn_lst = lst.map_l◂◂subst_ptn 
			§§ mov_ptn2 
				§ 
					@.alc_atm { { e0 glv_n } a0 }
						$ a0 ⊢ 
						∐ ast.hp◂{ r0 h0 } . 
							inc_x glv_n ⊢ { i glv_n }
							mov_e { r0 i e0 } ⊢ { r0 i e0 } 
							∎ { { e0 glv_n } ast.hp◂{ i h0 } }
						∐ ast.rt_usr◂{ a p0 } . 
							alc_ptn { { e0 glv_n } p0 } ⊢ { { e0 glv_n } p0 } 
							∎ { { e0 glv_n } ast.rt_usr◂{ a p0 } }
						∐ ast.stt_adt◂{ ia na p0 } . 
							alc_ptn { { e0 glv_n } p0 } ⊢ { { e0 glv_n } p0 } 
							∎ { { e0 glv_n } ast.stt_adt◂{ ia na p0 } }
						∐ ast.dyn_adt◂{ { ax al } ri rd } . 
							inc_x glv_n ⊢ { i glv_n }
							mov_e { ri i e0 } ⊢ { ri i e0 } 
							inc_x glv_n ⊢ { d glv_n }
							mov_e { rd d e0 } ⊢ { rd d e0 } 
							∎ { { e0 glv_n } ast.dyn_adt◂{ { ax al } i d } }
						∐ ast.btm◂{} . 
							∎ { { e0 glv_n } ast.btm◂{} }
						∐. ast.hp_im◂v .
							∎ { { e0 glv_n } ast.hp_im◂v }
					@.alc_ptn = RP.map_l◂◂alc_atm
				§  	
					@.im_to_rax { e0 { evv tav tv eds } glv_n c0 }
						$ c0 ⊢ 
						∐ ast.k_name◂i . 
							EVV.lod_evv { evv i } ⊢ { evv _ c0 } 
							im_to_rax { e0 { evv tav tv eds } glv_n c0 } ⊢|
						∐ ast.k_s8◂s0 . 
							mk_s8_64 s0 ⊢ { _ es } 
							asm.cct { e0 es } ⊢ e0 
							∎ { e0 { evv tav tv eds } glv_n }
						∐ ast.k_r64◂x0 . 
							mov.rax_im { x0 e0 } ⊢ { _ e0 }
							∎ { e0 { evv tav tv eds } glv_n }  
						∐ ast.k_op_gnr◂_ . 
							∎| 
						∐ ast.k_op◂_ . 
							∎| 
						∐ ast.k_app◂_ . 
							∎| 
						∐ ast.k_var◂{ i v } .
							_emt i ⊢ _ 
							∎|  
						∐ ast.k_op_axm◂_ .
							∎|
						∐ ast.k_pf◂_ .
							∎|
						∐ ast.k_arr◂_ . 
							∎|
						∐ ast.k_agl◂_ .
							∎| 
						∐ ast.k_ctr◂_ . 
							∎| 
						∐. ast.k_ply◂_ . 
							∎| 
					
					@.im_to_atm { e0 { evv tav tv eds } glv_n c0 a1 }
						$ a1 ⊢ 
						∐ ast.hp◂{ r1 _ } . 
							im_to_rax { e0 { evv tav tv eds } glv_n c0 } ⊢ { e0 { evv tav tv eds } glv_n }
							^ r1 ⊢ _,sc0 
								"\tmov GLX(" 0d' "),rax\n" // 
							asm.add_s8 { e0 sc0 } ⊢ e0 
							∎ { e0 { evv tav tv eds } glv_n }
						∐ ast.btm◂{} . 
							∎| 
						∐ ast.hp_im◂ _ . 
							∎|
						∐ ast.stt_adt◂{ ia1 na1 pa1 } . 
							ast.agl_of_cst { evv c0 } ⊢ { evv { ia0 na0 _ c0 } }
							∐ ia0'=ia1' . 
								RP.atm_a pa1 ⊢ pa1 
								RP.atm_a c0 ⊢ c0 
								im_to_atm { e0 { evv tav tv eds } glv_n c0 pa1 } ⊢|  
							∐. . 
								∎|
						∐ ast.rt_usr◂_ . 
							∎| 
						∐. ast.dyn_adt◂{ { ax al } ri rd } .
							ast.agl_of_cst { evv c0 } ⊢ { evv { ia0 na0 _ c0 } }
							RP.atm_a c0 ⊢ c0 
							dta_n { tav ax } ⊢ { tav ax { _ vl1 kl1 } } 
							$ ia0 ⊢ ia0,ia00
							lst.prj { kl1 ia00 } ⊢ k1 
							T.iug_axm_i { tv vl1 k1 al } ⊢ { tv k1 }  
							^ ri,ia0 ⊢ _,_,sc0 
								"\tmov GLX(" 0d' ")," 1d' "\n" //
							asm.add_s8 { e0 sc0 } ⊢ e0 
							$ k1 ⊢ y0 
							alc_type_k.f_i { tav tv %[ 0r ] y0 } ⊢ { tav tv c_n pa1 }							
							∐ c_n'=0r .
								^ rd ⊢ _,s0 
									"\tmov GLX(" 0d' "),unt\n" //
								asm.add_s8 { e0 s0 } ⊢ e0 
								∎ { e0 { evv tav tv eds } glv_n }									
							∐ c_n'=1r . 
								∎| 
							∐. . 
								∎| 
						
					@.im_to_sgm_atm { e0 { evv tav tv eds } glv_n c0 a1 }
						$ a1 ⊢ 
						∐ ast.hp◂{ r1 _ } . 
							im_to_rax { e0 { evv tav tv eds } glv_n c0 } ⊢ { e0 { evv tav tv eds } glv_n }
							^ r1 ⊢ _,sc0 
								"\tmov DX(" 0d' "),rax\n" // 
							asm.add_s8 { e0 sc0 } ⊢ e0 
							∎ { e0 { evv tav tv eds } glv_n }
						∐ ast.hp_im◂ _ . 
							∎|
						∐ ast.btm◂{} . 
							∎| 
						∐ ast.rt_usr◂_ . 
							∎| 
						∐ ast.stt_adt◂{ ia1 na1 pa1 } . 
							ast.agl_of_cst { evv c0 } ⊢ { evv { ia0 na0 _ c0 } }
							∐ ia0'=ia1' . 
								RP.atm_a pa1 ⊢ pa1 
								RP.atm_a c0 ⊢ c0 
								im_to_sgm_atm { e0 { evv tav tv eds } glv_n c0 pa1 } ⊢|  
							∐. . 
								∎|
						∐. ast.dyn_adt◂{ { ax al } ri rd } .
							ast.agl_of_cst { evv c0 } ⊢ { evv { ia0 na0 _ c0 } }
							RP.atm_a c0 ⊢ c0 
							dta_n { tav ax } ⊢ { tav ax { _ vl1 kl1 } } 
							$ ia0 ⊢ ia0,ia00
							lst.prj { kl1 ia00 } ⊢ k1 
							T.iug_axm_i { tv vl1 k1 al } ⊢ { tv k1 }  
							^ ri,ia0 ⊢ _,_,sc0 
								"\tmov DX(" 0d' ")," 1d' "\n" //
							asm.add_s8 { e0 sc0 } ⊢ e0 
							$ k1 ⊢ y0
							$ y0 ⊢ y0,y0_0 
							alc_type_k.f_i { tav tv %[ 0r ] y0 } ⊢ { tav tv c_n pa1 }							
							∐ c_n'=0r .
								^ rd ⊢ _,s0 
									"\tmov DX(" 0d' "),unt\n" //
								asm.add_s8 { e0 s0 } ⊢ e0 
								∎ { e0 { evv tav tv eds } glv_n }									
							∐ c_n'=1r . 
								^ rd ⊢ _,ec1 
									`	push DST_REG 
									"\tlea DST_REG,DX(" 0d' ")\n" 
									//
								asm.add_s8 { e0 ec1 } ⊢ e0 
								RP.atm_a pa1 ⊢ a1 
								im_to_sgm_atm { e0 { evv tav tv eds } glv_n c0 a1 } ⊢ { e0 { evv tav tv eds } glv_n }
								asm.add_s8 { e0 %[ "\tpop DST_REG\n" ] } ⊢ e0 
								∎ { e0 { evv tav tv eds } glv_n }
							∐. . 
								alc_rcd◂◂"rax" { c_n e0 } ⊢ { _ e0 } 
                ^ rd ⊢ _,ec1 
									"\tmov DX(" 0d' "),rax\n" 
									`	push DST_REG 
									`	lea DST_REG,[rax+8]
									//
								asm.add_s8 { e0 ec1 } ⊢ e0 
								RP.atm_a pa1 ⊢ a1 
								im_to_sgm_atm { e0 { evv tav tv eds } glv_n c0 a1 } ⊢ { e0 { evv tav tv eds } glv_n }
								asm.add_s8 { e0 %[ "\tpop DST_REG\n" ] } ⊢ e0 
								∎ { e0 { evv tav tv eds } glv_n }
					@.ptn { e0 { evv tav tv eds } glv_n p0 p1 } 
						∐ p0 ⊢ RP.rcd◂l0; p1 ⊢ RP.rcd◂l1 . 
							ptn_lst { e0 { evv tav tv eds } glv_n l0 l1 } ⊢| 								
						∐ p0 ⊢ RP.atm◂a0; p1 ⊢ RP.atm◂a1 .
							∐ a0 ⊢ ast.hp_im◂c0 . 
								im_to_atm { e0 { evv tav tv eds } glv_n c0 a1 } ⊢|  								
							∐ a0 ⊢ ast.btm◂{} . 
								asm.add_s8 { e0 %[ "\tRT_ERR 0xffff_f137\n" ] } ⊢ e0 
								∎ { e0 { evv tav tv eds } glv_n }
							∐ a0 ⊢ ast.hp◂{ r0 h0 }; a1 ⊢ ast.hp◂{ r1 h1 } . 
								mov_e { r0 r1 e0 } ⊢ { _ _ e0 } 
								∎ { e0 { evv tav tv eds } glv_n }
							∐ a0 ⊢ ast.rt_usr◂{ a0 pa0 }; a1 ⊢ ast.rt_usr◂{ a1 pa1 }; a0'=a1' .
								ptn { e0 { evv tav tv eds } glv_n pa0 pa1 } ⊢| 			 								
							∐ a0 ⊢ ast.stt_adt◂{ ia0 na0 pa0 }; a1 ⊢ ast.stt_adt◂{ ia1 na1 pa1 }; ia0'=ia1' .
								ptn { e0 { evv tav tv eds } glv_n pa0 pa1 } ⊢| 			 								
							∐ a0 ⊢ ast.stt_adt◂{ ia0 na0 pa0 }; a1 ⊢ ast.dyn_adt◂{ { ax al } ri rd } .
								dta_n { tav ax } ⊢ { tav ax { _ vl1 kl1 } } 
								$ ia0 ⊢ ia0,ia00
								lst.prj { kl1 ia00 } ⊢ k1 
								T.iug_axm_i { tv vl1 k1 al } ⊢ { tv k1 }  
								^ ri,ia0 ⊢ _,_,sc0 
									"\tmov GLX(" 0d' ")," 1d' "\n" //
								asm.add_s8 { e0 sc0 } ⊢ e0 
								$ k1 ⊢ y0 
									$ y0 ⊢ y0,y0_0 
									alc_type_k.f_i { tav tv %[ 0r ] y0 } ⊢ { tav tv c_n pa1 }							
									∐ c_n'=0r .
										^ rd ⊢ _,s0 
											"\tmov GLX(" 0d' "),unt\n" //
										asm.add_s8 { e0 s0 } ⊢ e0 
										∎ { e0 { evv tav tv eds } glv_n }									
									∐ c_n'=1r . 
										^ rd ⊢ _,ec1 
											`	push DST_REG 
											"\tlea DST_REG,GLX(" 0d' ")\n" 
											//
										asm.add_s8 { e0 ec1 } ⊢ e0 
										to_sgm_ptn { e0 { evv tav tv eds } glv_n pa0 pa1 } ⊢ { e0 { evv tav tv eds } glv_n }
										asm.add_s8 { e0 %[ "\tpop DST_REG\n" ] } ⊢ e0 
										∎ { e0 { evv tav tv eds } glv_n }
									∐. . 
    								alc_rcd◂◂"rax" { c_n e0 } ⊢ { _ e0 } 
										^ rd ⊢ _,ec1 
											"\tmov GLX(" 0d' "),rax\n" 
											`	push DST_REG 
											`	lea DST_REG,[rax+8]
											//
										asm.add_s8 { e0 ec1 } ⊢ e0 
										to_sgm_ptn { e0 { evv tav tv eds } glv_n pa0 pa1 } ⊢ { e0 { evv tav tv eds } glv_n }
										asm.add_s8 { e0 %[ "\tpop DST_REG\n" ] } ⊢ e0 
										∎ { e0 { evv tav tv eds } glv_n }
							∐ a0 ⊢ ast.dyn_adt◂{ _ ri0 rd0 }; a1 ⊢ ast.dyn_adt◂{ _ ri1 rd1 } .
								mov_e { ri0 ri1 e0 } ⊢ { _ _ e0 } 
								mov_e { rd0 rd1 e0 } ⊢ { _ _ e0 } 
								∎ { e0 { evv tav tv eds } glv_n }
							∐. .
								_emt %[ "mov_ptn2.ptn E0" ] ⊢ _ 
								∎|
						∐. . 
							asm.add_s8 { e0 %[ "\tRT_ERR 0xffff_c137\n" ] } ⊢ e0 
							∎ { e0 { evv tav tv eds } glv_n }
					@.to_sgm_ptn { e0 { evv tav tv eds } glv_n p0 p1 } 
						∐ p0 ⊢ RP.rcd◂l0; p1 ⊢ RP.rcd◂l1 . 
							to_sgm_ptn_lst { e0 { evv tav tv eds } glv_n l0 l1 } ⊢| 								
						∐ p0 ⊢ RP.atm◂a0; p1 ⊢ RP.atm◂a1 .
							∐ a0 ⊢ ast.hp_im◂c0 . 
								im_to_sgm_atm { e0 { evv tav tv eds } glv_n c0 a1 } ⊢|  								
							∐ a0 ⊢ ast.btm◂{} . 
								asm.add_s8 { e0 %[ "\tRT_ERR 0xffff_f137\n" ] } ⊢ e0 
								∎ { e0 { evv tav tv eds } glv_n }
							∐ a0 ⊢ ast.hp◂{ r0 h0 }; a1 ⊢ ast.hp◂{ r1 h1 } . 
								^ r0,r1 ⊢ _,_,sc0 
									"\tMOV_RDI DX(" 1d' "),GLX(" 0d' ")\n" // 
								asm.add_s8 { e0 sc0 } ⊢ e0 
								∎ { e0 { evv tav tv eds } glv_n }
							∐ a0 ⊢ ast.rt_usr◂{ a0 pa0 }; a1 ⊢ ast.rt_usr◂{ a1 pa1 }; a0'=a1' .
								to_sgm_ptn { e0 { evv tav tv eds } glv_n pa0 pa1 } ⊢| 			 								
							∐ a0 ⊢ ast.stt_adt◂{ ia0 na0 pa0 }; a1 ⊢ ast.stt_adt◂{ ia1 na1 pa1 }; ia0'=ia1' .
								to_sgm_ptn { e0 { evv tav tv eds } glv_n pa0 pa1 } ⊢| 			 								
							∐ a0 ⊢ ast.stt_adt◂{ ia na pa }; a1 ⊢ ast.dyn_adt◂{ { ax al } ri rd } .
								dta_n { tav ax } ⊢ { tav ax { _ vl1 kl1 } } 
								$ ia ⊢ ia0,ia00
								lst.prj { kl1 ia00 } ⊢ k1 
								T.iug_axm_i { tv vl1 k1 al } ⊢ { tv k1 }  
								^ ri,ia0 ⊢ _,_,sc0 
									"\tmov DX(" 0d' ")," 1d' "\n" //
								asm.add_s8 { e0 sc0 } ⊢ e0 
								$ k1 ⊢ y0 
									alc_type_k.f_i { tav tv %[ 0r ] y0 } ⊢ { tav tv c_n pa1 }							
									∐ c_n'=0r .
										^ rd ⊢ _,s0 
											"\tmov DX(" 0d' "),unt\n" //
										asm.add_s8 { e0 s0 } ⊢ e0 
										∎ { e0 { evv tav tv eds } glv_n }									
									∐ c_n'=1r .
										^ rd ⊢ _,ec1 
											`	push DST_REG 
											"\tlea DST_REG,DX(" 0d' ")\n"
											//
										asm.add_s8 { e0 ec1 } ⊢ e0 
										to_sgm_ptn { e0 { evv tav tv eds } glv_n pa pa1 } ⊢ { e0 { evv tav tv eds } glv_n }
										asm.add_s8 { e0 %[ "\tpop DST_REG\n" ] } ⊢ e0 
										∎ { e0 { evv tav tv eds } glv_n }
									∐. . 
    								alc_rcd◂◂"rax" { c_n e0 } ⊢ { _ e0 } 
										^ rd ⊢ _,ec1 
											"\tmov DX(" 0d' "),rax\n" 
											`	push DST_REG 
											`	lea DST_REG,[rax+8]
											//
										asm.add_s8 { e0 ec1 } ⊢ e0 
										to_sgm_ptn { e0 { evv tav tv eds } glv_n pa pa1 } ⊢ { e0 { evv tav tv eds } glv_n }
										asm.add_s8 { e0 %[ "\tpop DST_REG\n" ] } ⊢ e0 
										∎ { e0 { evv tav tv eds } glv_n }
							∐ a0 ⊢ ast.dyn_adt◂{ _ ri0 rd0 }; a1 ⊢ ast.dyn_adt◂{ _ ri1 rd1 } .
								^ ri0,ri1,rd0,rd1 ⊢ _,_,_,_,sc0 
									"\tMOV_RDI DX(" 1d' "),GLX(" 0d' ")\n" 
									"\tMOV_RDI DX(" 3d' "),GLX(" 2d' ")\n" // 
								asm.add_s8 { e0 sc0 } ⊢ e0 
								∎ { e0 { evv tav tv eds } glv_n }
							∐. .
								_emt %[ "mov_ptn2.ptn E0" ] ⊢ _ 
								∎|
						∐. . 
							_emt %[ "mov_ptn2.ptn E1" ] ⊢ _ 
							∎|
					@.to_sgm_ptn_lst { e0 { evv tav tv eds } glv_n l0 l1 }
						∐ l0 ⊢ _cns◂{ p0 l0 }; l1 ⊢ _cns◂{ p1 l1 } . 
							to_sgm_ptn { e0 { evv tav tv eds } glv_n p0 p1 } ⊢ { e0 { evv tav tv eds } glv_n }
							to_sgm_ptn_lst { e0 { evv tav tv eds } glv_n l0 l1 } ⊢|			
						∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
							∎ { e0 { evv tav tv eds } glv_n } 
						∐. . 
							$ %[ "to_sgm_ptn_lst 0" ] ⊢ se 
							_emt se ⊢ se 
							∎| 
					@.ptn_lst { e0 { evv tav tv eds } glv_n l0 l1 }
						∐ l0 ⊢ _cns◂{ p0 l0 }; l1 ⊢ _cns◂{ p1 l1 } . 
							ptn { e0 { evv tav tv eds } glv_n p0 p1 } ⊢ { e0 { evv tav tv eds } glv_n }
							ptn_lst { e0 { evv tav tv eds } glv_n l0 l1 } ⊢|			
						∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
							∎ { e0 { evv tav tv eds } glv_n } 
						∐. . 
							$ %[ "lp1_lst 0" ] ⊢ se 
							_emt se ⊢ se 
							∎| 							
				∎∎
			
			§ shft { n i } 
				∐ REG_N=<i'. 
					_add { i n } ⊢ { i n } 
					∎ { n i } 
				∐. . 
					∎ { n i }
			
			§ 
				@.shft_atm = ast.map_l_rt_reg_atm◂◂shft 
				@.shft_ptn = RP.map_l◂◂shft_atm 
			§ shft_ptn_lst = lst.map_l◂◂shft_ptn 
			
			§§ pop_regs 
				§ exh_i # { { i e } j }
					mov { i j } ⊢ { i j s } 
					asm.add_s8 { e s } ⊢ e 
					_inc i ⊢ i 
					∎ { i e }
				§ exh # { n l } 
					lst.fld_l◂◂exh_i { { n asm.e◂{} } l } ⊢| 
				∎∎
		
			§ @.pnt_env_i # { { evv e0 } { i p } }  
				ast.pnt.rt { evv p } ⊢ { evv sp } 
				^ i,sp ⊢ _,_,sr 
						"%" 0d' "~" 1' // 
				rp8.add_s8 { e0 sr } ⊢ e0 
				∎ { evv e0 }
			§ pnt_env # { evv irv } 
				rp8.add_s8 { rp8.e◂{} %[ ";; " ] } ⊢ e0 
				ast.IRV.itr◂◂pnt_env_i { irv { evv e0 } } ⊢ { irv { evv e0 } } 
				rp8.add_s8 { %e0 %[ "\n" ] } ⊢ e0 
				rp8.to_s8 e0 ⊢ sr  
				∎ { evv irv sr } 
			§§ adp 
				§ @.f_ll { tv l0 ll } 
					$ ll ⊢ 
					∐ _cns◂{ { l1 lb } ll } . 
						\\eqv_lst { tv l0 l1 } ⊢ { tv l0 l1 b } 
						T.ciu_lst { tv l1 l0 } ⊢ { tv l1 l0 b }
            ∐ b ⊢ bl.t◂{} . 
							$ lb ⊢ lb,lb0 
							∎ { tv l0 ⟦ { l1 lb } < ll ⟧ ‹ lb0 › }
						∐. . 
							f_ll { tv l0 ll } ⊢ { tv l0 ll o0 } 
							∎ { tv l0 ⟦ { l1 lb } < ll ⟧ o0 }
					∐. _nil◂{} . 
						∎ { tv l0 ⟦⟧ ‹› }					
				§ adt_call { ahl fl tv lb_n e0 { ax0 l0 } }
					hsh_tbl.r64.get { ahl ax0 } ⊢ { ahl { ax0 ll } } 
					$ ll ⊢ 
					∐ _some◂ll . 
						f_ll { tv l0 ll } ⊢ { tv l0 ll o }
						$ o ⊢ 
						∐ _some◂lb0 . 
							call_lb { lb0 e0 } ⊢ { _ e0 }
							hsh_tbl.r64.set { ahl { ax0 ll } } ⊢ { ahl { ax0 _ } } 
							∎ { ahl fl tv lb_n e0 }
						∐. _none◂{} . 
								inc_x lb_n ⊢ { lb0 lb_n } 
							call_lb { lb0 e0 } ⊢ { lb0 e0 }
							$ l0 ⊢ l0,l00 
							$ lb0 ⊢ lb0,lb00 
							hsh_tbl.r64.set { ahl { ax0 ⟦ { l00 lb00 } < ll ⟧ } } ⊢ { ahl { ax0 _ } } 
							∎ { ahl _cns◂{ { ax0 l0 lb0 } fl } tv lb_n e0 }
					∐. _none◂{} . 
						inc_x lb_n ⊢ { lb0 lb_n } 
						call_lb { lb0 e0 } ⊢ { lb0 e0 }
						$ l0 ⊢ l0,l00 
						$ lb0 ⊢ lb0,lb00 
						hsh_tbl.r64.set { ahl { ax0 ⟦ { l00 lb00 } ⟧ } } ⊢ { ahl { ax0 _ } } 
						∎ { ahl _cns◂{ { ax0 l0 lb0 } fl } tv lb_n e0 }
					
				§ 
					@.adt◂◂ADT_HP { ahl fl ax0 l0 tv tav evv lb_n glv_n { eds e0 } } 
						dta_n { tav ax0 } ⊢ { tav ax0 { n lx0 lx1 } } 
						T.iug_axm { tv lx0 lx1 l0 } ⊢ { tv lx1 } 
						$ lx1 ⊢ pl0 
						mk_jmp_tbl { lb_n n } ⊢ { lb_n sj lbl } 
						inc_x lb_n ⊢ { lb0 lb_n }
						inc_x lb_n ⊢ { lb1 lb_n }
						^ lb0,sj ⊢ lb0,sj,s0  
							"\tjmp QWORD [LB_" 0d' "+8*r10]\n"
							"LB_" 0d' ": dq " 1' "\n" //
						asm.add_s8 { e0 s0 } ⊢ e0 
						ADT_HP { ahl fl %[ 0r ] tv tav evv pl0 lbl lb1 lb_n glv_n { eds e0 } } ⊢ { ahl fl tv tav evv lb1 lb_n glv_n { eds e0 } }
						lb_etr { lb1 e0 } ⊢ { _ e0 } 
						ret e0 ⊢ e0  
						∎ { ahl fl tv tav evv lb_n glv_n { eds e0 } }
					@.adt_lp◂◂ADT { ahl fl tv tav evv lb_n glv_n { eds e0 } }
						∐ fl ⊢ _cns◂{ { ax0 tl0 lb0 } fl } . 
							$ tl0 ⊢ tl0,tl0_0 
							T.pnt_type_k_lst { tv tl0_0 } ⊢ { tv st0 } 
							^ lb0,st0 ⊢ lb0,_,se 
								"LB_" 0d' ": ;; " 1' "\n" // 
							asm.add_s8 { e0 se } ⊢ e0 
							ADT { ahl fl ax0 tl0 tv tav evv lb_n glv_n { eds e0 } } ⊢ { ahl fl tv tav evv lb_n glv_n { eds e0 } }
							adt_lp◂◂ADT { ahl fl tv tav evv lb_n glv_n { eds e0 } } ⊢| 
						∐. . 
							∎ { ahl tv tav evv lb_n glv_n { eds e0 } }
				∎∎
			§§ dlt 
				§ 
					@.ptn_T◂◂I { ahl fl tv tav evv lb_n glv_n is0 { eds e0 } } 
						$ is0 ⊢ 
						∐ RP.rcd◂l0 . 
							ptn_lst_T◂◂I { ahl fl tv tav evv lb_n glv_n l0 { eds e0 } } ⊢|
						∐. RP.atm◂k0 . 
							$ k0 ⊢ 
							∐ ast.hp◂{ r h } . 
								∐ h ⊢ ast.hp.r64◂{} . 
									∎ { ahl fl tv tav evv lb_n glv_n { eds e0 } } 								
								∐. . 
									I r ⊢ sr
									^ sr ⊢ _,s0 
										"\tmov r8," 0' "\n"
										//		
									asm.add_s8 { e0 s0 } ⊢ e0 
									hp { ahl fl tv tav evv lb_n glv_n h { eds e0 } } ⊢| 								
							∐ ast.hp_im◂_ . 
								∎ { ahl fl tv tav evv lb_n glv_n { eds e0 } }
							∐ ast.btm◂{} . 
								asm.add_s8 { e0 %[ "\tRT_ERR 0xffff_0037\n" ] } ⊢ e0 
								∎ { ahl fl tv tav evv lb_n glv_n { eds e0 } }
							∐ ast.rt_usr◂_ . 
								asm.add_s8 { e0 %[ "\tRT_ERR 0xffff_f038\n" ] } ⊢ e0 
								∎ { ahl fl tv tav evv lb_n glv_n { eds e0 } }
							∐ ast.dyn_adt◂{ { ax al } ri rd } . 
								I ri ⊢ sri 
								I rd ⊢ srd 
								^ sri,srd ⊢ _,_,s0 
									"\tmov r10," 0' "\n"
									"\tmov r8," 1' "\n"
									//		
								asm.add_s8 { e0 s0 } ⊢ e0
								inv ahl ⊢ { L_dlt L_emt L_rpc } 
								adp.adt_call { L_dlt fl tv lb_n e0 { ax al } } ⊢ { L_dlt fl tv lb_n e0 }
								$ iso◂{ L_dlt L_emt L_rpc } ⊢ ahl
								∎ { ahl fl tv tav evv lb_n glv_n { eds e0 } } 							 
							∐. ast.stt_adt◂{ ia0 na0 pa0 } .
								ptn_T◂◂I { ahl fl tv tav evv lb_n glv_n pa0 { eds e0 } } ⊢| 
					@.ptn_lst_T◂◂I { ahl fl tv tav evv lb_n glv_n l0 { eds e0 } } 
						$ l0 ⊢ 
						∐ _cns◂{ p0 l0 } . 
							ptn_T◂◂I { ahl fl tv tav evv lb_n glv_n p0 { eds e0 } } ⊢ { ahl fl tv tav evv lb_n glv_n { eds e0 } }
							ptn_lst_T◂◂I { ahl fl tv tav evv lb_n glv_n l0 { eds e0 } } ⊢|
						∐. _nil◂{} . 
							∎ { ahl fl tv tav evv lb_n glv_n { eds e0 } } 					
				@.hp { ahl fl tv tav evv lb_n glv_n h { eds e0 } } 
						$ h ⊢ 
						∐ ast.hp.r64◂{} . 
							∎ { ahl fl tv tav evv lb_n glv_n { eds e0 } }
						∐ ast.hp.opq◂_ . 	
							asm.add_s8 { e0 %[ "\tFREE_S8 r8\n" ] } ⊢ e0 
							∎ { ahl fl tv tav evv lb_n glv_n { eds e0 } }
						∐ ast.hp.id◂{ x y0 } . 
							∐ x'=ast.hp.id.Clr . 
								∎ { ahl fl tv tav evv lb_n glv_n { eds e0 } }
							∐ x'=ast.hp.id.pt . 
							  alc_type_k.f_i { tav tv %[ 0r ] y0 } ⊢ { tav tv c_n pa0 }
                inc_x lb_n ⊢ { lb1 lb_n }
                inc_x lb_n ⊢ { lb3 lb_n } 
								_add { c_n %[ 3r ] } ⊢ { c_n _ } 
								^ lb1,lb3 ⊢ lb1,lb3,sc0 
									`	sub QWORD [r8+16],1
									"\tjnz LB_" 0d' "\n"
									`	bt QWORD [r8+8],63 
									"\tjc LB_" 1d' "\n" 
									`	push SRC_REG 
									"\tlea SRC_REG,[r8+24]\n"
									//
								asm.add_s8 { e0 sc0 } ⊢ e0
								sgm_ptn { ahl fl tv tav evv lb_n glv_n pa0 { eds e0 } } ⊢ { ahl fl  tv tav evv lb_n glv_n { eds e0 } } 
								^ _ ⊢ s1 	 
									`	mov r8,SRC_REG 
									`	sub r8,24 
									`	pop SRC_REG 
                  //
                asm.add_s8 { e0 s1 } ⊢ e0 
                lb_etr { lb3 e0 } ⊢ { _ e0 } 
                free_rcd◂◂"r8" { c_n e0 } ⊢ { _ e0 }
								lb_etr { lb1 e0 } ⊢ { _ e0 } 
								∎ { ahl fl tv tav evv lb_n glv_n { eds e0 } } 
              
              ∐. . 
								∎| 
						∐. ast.hp.arr◂{ y0 _ } . 
							inc_x lb_n ⊢ { lb0 lb_n } 
							inc_x lb_n ⊢ { lb1 lb_n } 
							alc_type_k.f_i { tav tv %[ 0r ] y0 } ⊢ { tav tv c_n pa0 }
							^ lb0,lb1 ⊢ lb0,lb1,s1 
								`	GET_LEN rsi,r8
								`	mov rax,0 
								`	push SRC_REG 
								"\tlea SRC_REG,[r8+8]\n"
								`	push r8 
								"LB_" 0d' ":\n"
								`	cmp rsi,0
								"\tjz LB_" 1d' "\n"
								`	push rsi 
								//
							asm.add_s8 { e0 s1 } ⊢ e0
							sgm_ptn { ahl fl tv tav evv lb_n glv_n pa0 { eds e0 } } ⊢ { ahl fl  tv tav evv lb_n glv_n { eds e0 } } 
							^ lb0,lb1,c_n ⊢ lb0,lb1,c_n,s1 	 
								`	pop rsi 
								`	sub rsi,1 
								"\tlea SRC_REG,[SRC_REG+8*" 2d' "]\n"
								"\tjmp LB_" 0d' "\n" 
								"LB_" 1d' ":\n" 
								`	pop rdi
								`	pop SRC_REG 
								`	C_CALL_SF free 
								//	
							asm.add_s8 { e0 s1 } ⊢ e0
							∎ { ahl fl tv tav evv lb_n glv_n { eds e0 } }
				@.sgm_ptn = ptn_T◂◂sx 
				@.ptn = ptn_T◂◂glx 
				
					§ @.hp_adt { ahl fl tv tav evv lb_n glv_n h { eds e0 } } 
						alc_type_k.f_o { tav tv %[ 0r ] h } ⊢ { tav tv c_n pa0 }
						$ pa0 ⊢ 
						∐ _some◂pa0 .
							∐ c_n'=0r . 
								∎ { ahl fl tv tav evv lb_n glv_n { eds e0 } }
							∐ c_n'=1r . 
								ptn_T◂◂r8 { ahl fl tv tav evv lb_n glv_n pa0 { eds e0 } } ⊢| 
							∐. . 
								^ _ ⊢ s1 
									`	push SRC_REG 
									"\tlea SRC_REG,[r8+8]\n"
									`	push r8 
									//
								asm.add_s8 { e0 s1 } ⊢ e0
								sgm_ptn { ahl fl tv tav evv lb_n glv_n pa0 { eds e0 } } ⊢ { ahl fl  tv tav evv lb_n glv_n { eds e0 } } 
								^ c_n ⊢ c_n,s0 
									`	pop r8 
									"\tFREE_RCD " 0d' ",r8\n"  
									`	pop SRC_REG 
									// 
								asm.add_s8 { e0 s0 } ⊢ e0 
								∎ { ahl fl tv tav evv lb_n glv_n { eds e0 } }
						∐. _none◂{} . 
							asm.add_s8 { e0 %[ "\tRT_ERR 0xffff_1017\n" ] } ⊢ e0
							∎ { ahl fl tv tav evv lb_n glv_n { eds e0 } } 	
				§ @.adt_hp { ahl fl j0 tv tav evv lr lbl lb1 lb_n glv_n { eds e0 } } 
						∐ lbl ⊢ p_cns◂{ lbi lbl };lr ⊢ _cns◂{ h lr } . 
							lb_etr { lbi e0 } ⊢ { lbi e0 } 
							hp_adt { ahl fl tv tav evv lb_n glv_n h { eds e0 } } ⊢ { ahl fl tv tav evv lb_n glv_n { eds e0 } } 
							_inc j0 ⊢ j0 
							jmp_lb { lb1 e0 } ⊢ { lb1 e0 }
							adt_hp { ahl fl j0 tv tav evv lr lbl lb1 lb_n glv_n { eds e0 } } ⊢| 
						∐ lbl ⊢ p_end◂lbi; lr ⊢ _cns◂{ h lr } .
							$ lr ⊢ _ 
							lb_etr { lbi e0 } ⊢ { lbi e0 } 
							hp_adt { ahl fl tv tav evv lb_n glv_n h { eds e0 } } ⊢ { ahl fl tv tav evv lb_n glv_n { eds e0 } } 
							jmp_lb { lb1 e0 } ⊢ { lb1 e0 }
							∎ { ahl fl tv tav evv lb1 lb_n glv_n { eds e0 } }
						∐. . 
							_emt %[ "emt adt_hp x3" ] ⊢ _ 
							∎|
				§ adt = adp.adt◂◂adt_hp
				§ adt_lp = adp.adt_lp◂◂adt 
				§ @.f { gfl fl evv tv tav lb_n glv_n dl { eds e0 } } 
					$ dl ⊢ 
					∐ _cns◂{ p dl } . 
						ptn { gfl fl tv tav evv lb_n glv_n p { eds e0 } } ⊢ { gfl fl tv tav evv lb_n glv_n { eds e0 } }
						f { gfl fl evv tv tav lb_n glv_n dl { eds e0 } } ⊢| 
					∐. _nil◂{} . 
						∎ { gfl fl evv tv tav lb_n glv_n { eds e0 } } 
				§ f # { gfl evv tv tav lb_n glv_n dl { eg0 eds e0 } }
					$ asm.e◂{} ⊢ e1 
					f { gfl ⟦⟧ evv tv tav lb_n glv_n dl { eds e1 } } ⊢ { gfl fl evv tv tav lb_n glv_n { eds e1 } }
					adt_lp { gfl fl tv tav evv lb_n glv_n { eds eg0 } } ⊢ { gfl tv tav evv lb_n glv_n { eds eg0 } }
					asm.cct { e0 e1 } ⊢ e0 
					∎ { gfl evv tv tav lb_n glv_n { eg0 eds e0 } }
				§ env # { gfl evv irv tv tav lb_n glv_n { eg0 eds e0 } }
					ast.IRV.ptns_of_env irv ⊢ { irv dl } 
					f { gfl evv tv tav lb_n glv_n dl { eg0 eds e0 } } ⊢ { gfl evv tv tav lb_n glv_n { eg0 eds e0 } } 
					∎ { gfl evv irv tv tav lb_n glv_n { eg0 eds e0 } }
				∎∎
			§ printf { s lb_n }
				$ %[ 0r ] ⊢ rs  
				mk_db { s rs } ⊢ { s rs dbs }	
				$ lb_n ⊢ lb_n,lb0 
				_inc lb_n ⊢ lb_n 
				$ lb_n ⊢ lb_n,lb1 
				_inc lb_n ⊢ lb_n 
				^ lb0,lb1,dbs ⊢ lb0,lb1,dbs,s0
					"\tjmp LB_" 1d' "\n" 
					"LB_" 0d' ": db " 2' "\n"   
					"LB_" 1d' ":\n" 
					"\tmov rdi,LB_" 0d' "\n" 
					`	call emt_stg
					//
				∎ { s lb_n s0 }
			§ printf { eds ec0 s lb_n }
				inc_x lb_n ⊢ { lb0 lb_n }
				data_s8 { eds lb0 s } ⊢ { eds lb0 s }
				^ lb0 ⊢ lb0,sc0 
					"\tmov rdi,LB_" 0d' "\n" 
					`	call emt_stg 
					//
				asm.add_s8 { ec0 sc0 } ⊢ ec0 
				∎ { eds ec0 s lb_n }
			§§ cmp_s8
				§ 
					@.f # { lb0 s }  
						_s8_len s ⊢ { s ls } 
						$ %[ 0r ] ⊢ i 
						$ asm.e◂{} ⊢ e0
						lp { lb0 s ls i e0 } ⊢ { lb0 s e0 }
						∎ { lb0 s e0 } 
					@.lp { lb0 s ls i e0 } 
						∐ ls'=i' . 
							∎ { lb0 s e0 } 
						∐. . 
							_lds { s i } ⊢ { s i c } 
							^ i,c,lb0 ⊢ i,c,lb0,s0 
								"\tcmp BYTE [rdi+" 0d' "]," 1d' "\n" 
								"\tjnz LB_" 2d' "\n" 
								// 
							_inc i ⊢ i 
							asm.add_s8 { e0 s0 } ⊢ e0 
							lp { lb0 s ls i e0 } ⊢|
				∎∎ 
			
			§§ emt 
				§
					@.emt_stg { s lb_n { eds e } } 
						_s8_len s ⊢ { s l } 
						inc_x lb_n ⊢ { lb0 lb_n }
						data_s8 { eds lb0 s } ⊢ { eds lb0 s }
						^ lb0,l ⊢ lb0,l,sc0 
							"\tEMT_CST LB_" 0d' "," 1d' "\n"  
							//
						asm.add_s8 { e sc0 } ⊢ e 
						∎ { s lb_n { eds e } }
				§ @.ptn_T◂◂I { ahl fl tv tav evv lb_n glv_n is0 { eds e0 } } 
						$ is0 ⊢ 
						∐ RP.rcd◂l0 . 
							asm.add_s8 { e0 %[ "\tEMT_CST fmt_rcd_l,4\n" ] } ⊢ e0
							ptn_lst_T◂◂I { ahl fl  tv tav evv lb_n glv_n l0 { eds e0 } } ⊢ { ahl fl  tv tav evv lb_n glv_n { eds e0 } }
							asm.add_s8 { e0 %[ "\tEMT_CST fmt_rcd_r,4\n" ] } ⊢ e0
							∎	{ ahl fl tv tav evv lb_n glv_n { eds e0 } }
						∐. RP.atm◂k0 . 
							$ k0 ⊢ 
							∐ ast.hp◂{ r h } . 
								I r ⊢ sr 
								^ sr ⊢ _,s0 
									"\tmov rdi," 0' "\n"
									push_c_regs 
									`	mov r8,rdi 
									//		
								asm.add_s8 { e0 s0 } ⊢ e0 
								hp { ahl fl  tv tav evv lb_n glv_n h { eds e0 } } ⊢ { ahl fl  tv tav evv lb_n glv_n { eds e0 } } 
								asm.add_s8 { e0 %[ pop_c_regs ] } ⊢ e0 
								∎ { ahl fl  tv tav evv lb_n glv_n { eds e0 } } 								
							∐ ast.hp_im◂c . 
								∐ c ⊢ ast.k_r64◂x . 
									^ x ⊢ x,sx 
										0d' "r" //
									emt_stg { sx lb_n { eds e0 } } ⊢ { sx lb_n { eds e0 } } 
									∎ { ahl fl tv tav evv lb_n glv_n { eds e0 } }
								∐ c ⊢ ast.k_s8◂s . 
									$ %[ 0r ] ⊢ x0 
									$ s ⊢ ss 
									^ ss ⊢ ss,s0 
										"\"" 0' "\"" // 
									emt_stg { s0 lb_n { eds e0 } } ⊢ {s0 lb_n { eds e0 } } 
									∎ { ahl fl tv tav evv lb_n glv_n { eds e0 } }
								∐ c ⊢ ast.k_name◂e . 
									^ e ⊢ e,sx 
										"#[ _ ]" //
									emt_stg { sx lb_n { eds e0 } } ⊢ { sx lb_n { eds e0 } } 
									∎ { ahl fl  tv tav evv lb_n glv_n { eds e0 } }
								∐. . 
									$ %[ "emt x0 " ] ⊢ ee 
									_emt ee ⊢ ee 
									∎|
							∐ ast.btm◂{} . 
								asm.add_s8 { e0 %[ "\tRT_ERR 0xffff_0047\n" ] } ⊢ e0 
								∎ { ahl fl tv tav evv lb_n glv_n { eds e0 } }
							∐ ast.rt_usr◂_ . 
								∎| 
							∐ ast.dyn_adt◂{ { ax al } ri rd } . 
								I ri ⊢ sri 
								I rd ⊢ srd 
								^ sri,srd ⊢ _,_,s0 
									push_c_regs
									"\tmov r10," 0' "\n"
									"\tmov r8," 1' "\n"
									//		
								asm.add_s8 { e0 s0 } ⊢ e0
								inv ahl ⊢ { L_dlt L_emt L_rpc } 
								adp.adt_call { L_emt fl tv lb_n e0 { ax al } } ⊢ { L_emt fl tv lb_n e0 }
								$ iso◂{ L_dlt L_emt L_rpc } ⊢ ahl
								asm.add_s8 { e0 %[ pop_c_regs ] } ⊢ e0 
								∎ { ahl fl tv tav evv lb_n glv_n { eds e0 } } 							  
							∐. ast.stt_adt◂{ ia0 na0 pa0 } .
								^ ia0 ⊢ ia0,sx 
										"'" 0d' "◂" //
								emt_stg { sx lb_n { eds e0 } } ⊢ { sx lb_n { eds e0 } }
								ptn_T◂◂I { ahl fl  tv tav evv lb_n glv_n pa0 { eds e0 } } ⊢| 
					
					@.ptn_lst_T◂◂I { ahl fl  tv tav evv lb_n glv_n l0 { eds e0 } } 
						$ l0 ⊢ 
						∐ _cns◂{ p0 l0 } . 
							ptn_T◂◂I { ahl fl  tv tav evv lb_n glv_n p0 { eds e0 } } ⊢ { ahl fl  tv tav evv lb_n glv_n { eds e0 } } 
							asm.add_s8 { e0 %[ "\tEMT_CST fmt_spc,4\n" ] } ⊢ e0
							ptn_lst_T◂◂I { ahl fl  tv tav evv lb_n glv_n l0 { eds e0 } } ⊢|
						∐. _nil◂{} . 
							∎ { ahl fl  tv tav evv lb_n glv_n { eds e0 } } 
					@.ptn = ptn_T◂◂glx 
					@.sgm_ptn = ptn_T◂◂sx

					@.hp { ahl fl tv tav evv lb_n glv_n h { eds e0 } } 
						$ h ⊢ 
						∐ ast.hp.r64◂{} . 		 
							asm.add_s8 { e0 %[ "\tmov rdi,r8\n\tcall emt_r64\n" ] } ⊢ e0 
							∎ { ahl fl tv tav evv lb_n glv_n { eds e0 } }
						∐  ast.hp.opq◂_ . 		
							asm.add_s8 { e0 %[ "\tmov rdi,r8\n\tcall emt_s8\n" ] } ⊢ e0 
							∎ { ahl fl tv tav evv lb_n glv_n { eds e0 } }
						∐ ast.hp.id◂{ x y0 } . 
							∐ x'=ast.hp.id.Clr . 
								
								emt_stg { %[ "{= .. }" ] lb_n { eds e0 } } ⊢ { _ lb_n { eds e0 } }
								∎ { ahl fl  tv tav evv lb_n glv_n { eds e0 } } 					
							∐ x'=ast.hp.id.pt . 
								emt_stg { %[ "[=]" ] lb_n { eds e0 } } ⊢ { _ lb_n { eds e0 } }
								∎ { ahl fl tv tav evv lb_n glv_n { eds e0 } }								 								
							∐. . 
								∎|
						∐. ast.hp.arr◂{ y0 _ } . 
							alc_type_k.f_i { tav tv %[ 0r ] y0 } ⊢ { tav tv c_n pa0 }
							inc_x lb_n ⊢ { lb0 lb_n } 
							inc_x lb_n ⊢ { lb1 lb_n } 
							^ lb0,lb1,c_n ⊢ lb0,lb1,c_n,s1 
								`	EMT_CST fmt_arr_l,8
								`	mov rsi,0x0000_ffff_ffff_ffff 
								`	and rsi,QWORD [r8]
								`	mov rax,0 
								`	push SRC_REG 
								`	lea SRC_REG,[r8+8]
								`	push r8 
								"LB_" 0d' ":\n"
								`	cmp rsi,rax 
								"\tjz LB_" 1d' "\n"
								`	push rsi 
								`	push rax 
								//
							asm.add_s8 { e0 s1 } ⊢ e0
							sgm_ptn { ahl fl tv tav evv lb_n glv_n pa0 { eds e0 } } ⊢ { ahl fl  tv tav evv lb_n glv_n { eds e0 } } 
							^ lb0,lb1,c_n ⊢ lb0,lb1,c_n,s1 	 
								"\tlea SRC_REG,[SRC_REG+8*" 2d' "]\n" 
								`	EMT_CST fmt_spc,4
								`	pop rax 
								`	pop rsi 
								`	add rax,1 
								"\tjmp LB_" 0d' "\n" 
								"LB_" 1d' ":\n" 
								`	pop r8 
								`	pop SRC_REG
								`	EMT_CST fmt_arr_r,4
								//	
							asm.add_s8 { e0 s1 } ⊢ e0
							∎ { ahl fl  tv tav evv lb_n glv_n { eds e0 } } 
					
				§	
					
					@.hp_adt { ahl fl tv tav evv lb_n glv_n h { eds e0 } } 
						alc_type_k.f_o { tav tv %[ 0r ] h } ⊢ { tav tv c_n pa0 }
						∐ pa0 ⊢ _some◂pa0 . 
							∐ c_n'=0r . 
								ptn_T◂◂r8 { ahl fl tv tav evv lb_n glv_n pa0 { eds e0 } } ⊢|
							∐ c_n'=1r . 
								ptn_T◂◂r8 { ahl fl tv tav evv lb_n glv_n pa0 { eds e0 } } ⊢|
							∐. . 
								^ _ ⊢ s1 
									`	push SRC_REG 
									`	lea SRC_REG,[r8+8]
									`	push r8 
									//
								asm.add_s8 { e0 s1 } ⊢ e0
								sgm_ptn { %ahl %fl %tv %tav %evv %lb_n %glv_n %pa0 { %eds e0 } } ⊢ { ahl fl  tv tav evv lb_n glv_n { eds e0 } } 
								^ _ ⊢ s1 	 
									`	pop r8 
									`	pop SRC_REG
									//	
								asm.add_s8 { e0 s1 } ⊢ e0
								∎ { ahl fl tv tav evv lb_n glv_n { eds e0 } }
						∐. .
							asm.add_s8 { e0 %[ "\tRT_ERR 0xffff_0027\n" ] } ⊢ e0
							∎ { ahl fl tv tav evv lb_n glv_n { eds e0 } } 
				§
					@.adt = adp.adt◂◂adt_hp
					@.adt_hp { ahl fl j0  tv tav evv lr lbl lb1 lb_n glv_n { eds e0 } } 
						∐ lr ⊢ _cns◂{ h lr } .
							$ lbl ⊢ 
							∐ p_cns◂{ lbi lbl } . 
								^ lbi ⊢ lbi,s0 
									"LB_" 0d' ":\n" // 
								asm.add_s8 { e0 s0 } ⊢ e0 
								^ j0 ⊢ j0,sx 
											"'" 0d' "◂" //
								_inc j0 ⊢ j0 
								emt_stg { sx lb_n { eds e0 } } ⊢ { sx lb_n { eds e0 } }
								hp_adt { ahl fl  tv tav evv lb_n glv_n h { eds e0 } } ⊢ { ahl fl  tv tav evv lb_n glv_n { eds e0 } } 
								jmp_lb { lb1 e0 } ⊢ { lb1 e0 } 
								adt_hp { ahl fl j0  tv tav evv lr lbl lb1 lb_n glv_n { eds e0 } } ⊢| 
							∐. p_end◂lbi .
								$ lr ⊢ _ 
								lb_etr { lbi e0 } ⊢ { _ e0 } 
								^ j0 ⊢ j0,sx 
											"'" 0d' "◂" //
								_inc j0 ⊢ j0 
								emt_stg { sx lb_n { eds e0 } } ⊢ { sx lb_n { eds e0 } }
								hp_adt { ahl fl tv tav evv lb_n glv_n h { eds e0 } } ⊢ { ahl fl  tv tav evv lb_n glv_n { eds e0 } } 
								jmp_lb { lb1 e0 } ⊢ { lb1 e0 } 
								∎ { ahl fl tv tav evv lb1 lb_n glv_n { eds e0 } }
						∐. . 
							_emt %[ "emt adt_hp x3" ] ⊢ _
							∎|
				§	adt_lp = adp.adt_lp◂◂adt
				∎∎
			§§ rpc
				§ 
					@.sgm_ptn_lst { ahl fl tv  tav evv lb_n glv_n l0 { eds e0 } }   					
						$ l0 ⊢
						∐ _cns◂{ p0 l0 } . 
							sgm_ptn { ahl fl tv tav evv lb_n glv_n p0 { eds e0 } } ⊢ { ahl fl tv tav evv lb_n glv_n { eds e0 } }
							sgm_ptn_lst { ahl fl tv tav evv lb_n glv_n l0 { eds e0 } } ⊢| 
						∐. _nil◂{} . 
							∎ { ahl fl tv tav evv lb_n glv_n { eds e0 } }
					@.sgm_ptn { ahl fl tv tav evv lb_n glv_n is { eds e0 } }
						$ is ⊢ 
						∐ RP.atm◂k . 
							$ k ⊢ 
							∐ ast.hp◂{ r0 h } . 
								^ r0 ⊢ r0,s0 
									"\tmov r8,SX(" 0d' ")\n" //
								asm.add_s8 { e0 s0 } ⊢ e0 
								hp { ahl fl tv tav evv lb_n glv_n h { eds e0 } } ⊢ { ahl fl tv tav evv lb_n glv_n { eds e0 } }
								^ r0 ⊢ _,s0 
									"\tmov DX(" 0d' "),rax\n" // 
								asm.add_s8 { e0 s0 } ⊢ e0
								∎ { ahl fl tv tav evv lb_n glv_n { eds e0 } } 
							∐ ast.hp_im◂v0 .
								∎ { ahl fl tv  tav evv lb_n glv_n { eds e0 } } 
							∐ ast.btm◂{} . 
								asm.add_s8 { e0 %[ "\tRT_ERR 0xffff_0037\n" ] } ⊢ e0 
								∎ { ahl fl tv tav evv lb_n glv_n { eds e0 } }
							∐ ast.rt_usr◂_ . 
								∎| 
							∐ ast.dyn_adt◂{ { ax al } ri rd } . 	
								^ ri,rd ⊢ _,rd,s0 
									"\tmov r10,SX(" 0d' ")\n"
									"\tmov r8,SX(" 1d' ")\n"
									"\tmov DX(" 0d' "),r10\n" 
									//		
								asm.add_s8 { e0 s0 } ⊢ e0
								inv ahl ⊢ { L_dlt L_emt L_rpc } 
								adp.adt_call { L_rpc fl tv lb_n e0 { ax al } } ⊢ { L_rpc fl tv lb_n e0 }
								$ iso◂{ L_dlt L_emt L_rpc } ⊢ ahl
								^ rd ⊢ _,s0 
									"\tmov DX(" 0d' "),rax\n"
									//
								asm.add_s8 { e0 s0 } ⊢ e0 
								∎ { ahl fl tv tav evv lb_n glv_n { eds e0 } } 							  
							∐. ast.stt_adt◂{ ia na pa0 } . 
								sgm_ptn { ahl fl tv  tav evv lb_n glv_n pa0 { eds e0 } } ⊢| 
						∐. RP.rcd◂l0 . 
							sgm_ptn_lst { ahl fl tv tav evv lb_n glv_n l0 { eds e0 } } ⊢|
					@.ptn_1 { { ahl fl tv tav evv lb_n glv_n { eds e0 } } is }
						$ is ⊢ 
						∐ RP.atm◂k . 
							$ k ⊢ 
							∐ ast.hp◂{ _ h } . 
								hp { ahl fl tv tav evv lb_n glv_n h { eds e0 } } ⊢|
							∐ ast.hp_im◂v0 .
								∎ { ahl fl tv  tav evv lb_n glv_n { eds e0 } } 
							∐ ast.btm◂{} . 
								asm.add_s8 { e0 %[ "\tRT_ERR 0xffff_0037\n" ] } ⊢ e0 
								∎ { ahl fl tv tav evv lb_n glv_n { eds e0 } }
							∐ ast.rt_usr◂_ . 
								∎| 
							∐ ast.dyn_adt◂{ { ax al } ri rd } . 	
								∎| 
							∐. ast.stt_adt◂{ ia na pa0 } . 
								ptn_1 { { ahl fl tv tav evv lb_n glv_n { eds e0 } } pa0 } ⊢| 
						∐. RP.rcd◂l0 . 
							lst.fld_l◂◂ptn_1 { { ahl fl tv tav evv lb_n glv_n { eds e0 } } l0 } ⊢|
					@.hp_adt { ahl fl tv tav evv lb_n glv_n h { eds e0 } }
						alc_type_k.f_o { tav tv %[ 0r ] h } ⊢ { tav tv c_n pa0 }
						∐ pa0 ⊢ _some◂pa0 .
							∐ c_n'=0r . 
								asm.add_s8 { e0 %[ "\tmov rax,unt\n" ] } ⊢ e0 
								∎ { ahl fl tv tav evv lb_n glv_n { eds e0 } } 						
							∐ c_n'=1r . 
								ptn_1 { { ahl fl tv tav evv lb_n glv_n { eds e0 } } pa0 }  ⊢| 
							∐. . 
								alc_rcd◂◂"rax" { c_n e0 } ⊢ { _ e0 } 
								^ _ ⊢ sc0 
									`	push DST_REG
									`	push SRC_REG
									`	lea DST_REG,[rax+8]
									`	lea SRC_REG,[r8+8]
									`	push r8 
									`	push rax 
									//
								asm.add_s8 { e0 sc0 } ⊢ e0
								sgm_ptn { ahl fl tv tav evv lb_n glv_n pa0 { eds e0 } } ⊢ { ahl fl  tv tav evv lb_n glv_n { eds e0 } } 
								$ %[ "\tpop rax\n\tpop r8\n\tpop SRC_REG\n\tpop DST_REG\n" ] ⊢ s0 
								asm.add_s8 { e0 s0 } ⊢ e0
								∎ { ahl fl tv tav evv lb_n glv_n { eds e0 } } 						
						∐. .
							\\]   					
							asm.add_s8 { e0 %[ "\tRT_ERR 0xffff_2017\n" ] } ⊢ e0
							∎ { ahl fl tv tav evv lb_n glv_n { eds e0 } } 			
					@.hp { ahl fl tv tav evv lb_n glv_n h { eds e0 } }
						$ h ⊢ 
						∐ ast.hp.r64◂{} . 
							asm.add_s8 { e0 %[ "\tmov rax,r8\n" ] } ⊢ e0 
							∎ { ahl fl tv tav evv lb_n glv_n { eds e0 } }
						∐ ast.hp.opq◂d . 
							∐ d'=ast.hp.arr.std . 
								asm.add_s8 { e0 %[ "\tmov rdi,r8\n\tCALL_SF rpc_s8\n" ] } ⊢ e0 
								∎ { ahl fl tv tav evv lb_n glv_n { eds e0 } }
							∐. . 
								∎|
						∐ ast.hp.id◂{ x y0 } . 
							∐ x'=ast.hp.id.Clr . 
								_emt %[ "_Clr◂_ <: ~_Rpc" ] ⊢ _ 
								∎| 
							∐ x'=ast.hp.id.pt . 
								^ _ ⊢ sc0 
									`	add QWORD [r8+16],1 
									`	mov rax,r8 
									// 
								asm.add_s8 { e0 sc0 } ⊢ e0 
								∎ { ahl fl tv tav evv lb_n glv_n { eds e0 } }
							∐. . 
								∎| 
						∐. ast.hp.arr◂{ y0 d } .
							∐ d'=ast.hp.arr.std . 
								alc_type_k.f_i { tav tv %[ 0r ] y0 } ⊢ { tav tv c_n pa0 }
								inc_x lb_n ⊢ { lb0 lb_n } 
								inc_x lb_n ⊢ { lb1 lb_n } 
								^ lb0,lb1,c_n ⊢ lb0,lb1,c_n,sc0 
									`	mov r9,0x0000_ffff_ffff_ffff 
									`	and r9,QWORD [r8] 
									`	mov rdi,r9 
									"\tmov rsi," 2d' "\n" 
	                ` imul rdi,rsi 
									`	lea rdi,[8+8*rdi] 
									`	mov rsi,1 
									`	xor rax,rax
									`	C_CALL_SF calloc_sf
									`	mov QWORD [rax],r9
									`	push DST_REG
									`	push SRC_REG
									`	lea DST_REG,[rax+8]
									`	lea SRC_REG,[r8+8]
									`	push r8 
									`	push rax 
									"LB_" 0d' ":\n" 
									`	cmp r9,0 
									"\tjz LB_" 1d' "\n" 
									`	push r9
									//
								asm.add_s8 { e0 sc0 } ⊢ e0
								sgm_ptn { ahl fl tv tav evv lb_n glv_n pa0 { eds e0 } } ⊢ { ahl fl  tv tav evv lb_n glv_n { eds e0 } } 
								^ c_n ⊢ _,s0
									`	pop r9  
									`	sub r9,1
									"\tlea SRC_REG,[SRC_REG+8*" 0d' "]\n"
									"\tlea DST_REG,[DST_REG+8*" 0d' "]\n"
									//  
								asm.add_s8 { e0 s0 } ⊢ e0
								jmp_lb { lb0 e0 } ⊢ { _ e0 } 
								lb_etr { lb1 e0 } ⊢ { _ e0 } 
								$ %[ "\tpop rax\n\tpop r8\n\tpop SRC_REG\n\tpop DST_REG\n" ] ⊢ s0 
								asm.add_s8 { e0 s0 } ⊢ e0
								∎ { ahl fl tv tav evv lb_n glv_n { eds e0 } }
							∐. . 
								∎|
					@.ptn_lst { ahl fl tv  tav evv lb_n glv_n l0 { eds e0 } }   					
						$ l0 ⊢
						∐ _cns◂{ p0 l0 } . 
							ptn { ahl fl tv tav evv lb_n glv_n p0 { eds e0 } } ⊢ { ahl fl tv tav evv lb_n glv_n p1 { eds e0 } }
							ptn_lst { ahl fl tv tav evv lb_n glv_n l0 { eds e0 } } ⊢ { ahl fl tv tav evv lb_n glv_n l1 { eds e0 } } 
							∎ { ahl fl tv tav evv lb_n glv_n ⟦ p1 < l1 ⟧ { eds e0 } }
						∐. _nil◂{} . 
							∎ { ahl fl tv  tav evv lb_n glv_n ⟦⟧ { eds e0 } }
					@.ptn { ahl fl tv tav evv lb_n glv_n is { eds e0 } }
						$ is ⊢ 
						∐ RP.atm◂k . 
							$ k ⊢ 
							∐ ast.hp◂{ r0 h } . 
								inc_x glv_n ⊢ { rm0 glv_n }  
								^ r0 ⊢ r0,s0 
									"\tmov r8,GLX(" 0d' ")\n" 
									// 
								asm.add_s8 { e0 s0 } ⊢ e0 
								$ h ⊢ h,h0
								hp { ahl fl tv tav evv lb_n glv_n h { eds e0 } } ⊢ { ahl fl tv tav evv lb_n glv_n { eds e0 } }
								^ rm0 ⊢ rm0,s0 
									"\tmov GLX(" 0d' "),rax\n" // 
								asm.add_s8 { e0 s0 } ⊢ e0
								∎ { ahl fl tv tav evv lb_n glv_n RP.atm◂ast.hp◂{ rm0 h0 } { eds e0 } } 
							∐ ast.hp_im◂v0 .
								∎ { ahl fl tv  tav evv lb_n glv_n RP.atm◂ast.hp_im◂v0 { eds e0 } } 
							∐ ast.btm◂{} . 
								asm.add_s8 { e0 %[ "\tRT_ERR 0xffff_0037\n" ] } ⊢ e0 
								∎ { ahl fl tv tav evv lb_n glv_n RP.atm◂ast.btm◂{} { eds e0 } }
							∐ ast.rt_usr◂_ . 
								∎| 
							∐ ast.dyn_adt◂{ { ax al } ri rd } . 
								inc_x glv_n ⊢ { ri_1 glv_n } 
								inc_x glv_n ⊢ { rd_1 glv_n } 
								^ ri,rd,ri_1 ⊢ _,_,ri_1,s0 
									"\tmov r10,GLX(" 0d' ")\n"
									"\tmov r8,GLX(" 1d' ")\n"
									"\tmov GLX(" 2d' "),r10\n" //		
								asm.add_s8 { e0 s0 } ⊢ e0
								$ { ax al } ⊢ AX0,AX1 
								inv ahl ⊢ { L_dlt L_emt L_rpc } 
								adp.adt_call { L_rpc fl tv lb_n e0 AX0 } ⊢ { L_rpc fl tv lb_n e0 }
								$ iso◂{ L_dlt L_emt L_rpc } ⊢ ahl
								^ rd_1 ⊢ rd_1,s0 
									"\tmov GLX(" 0d' "),rax\n"  
									// 
								asm.add_s8 { e0 s0 } ⊢ e0 
								∎ { ahl fl tv tav evv lb_n glv_n RP.atm◂ast.dyn_adt◂{ AX1 ri_1 rd_1 } { eds e0 } } 							  
							∐. ast.stt_adt◂{ ia na pa0 } . 
								ptn { ahl fl tv  tav evv lb_n glv_n pa0 { eds e0 } } ⊢ { ahl fl tv  tav evv lb_n glv_n id0 { eds e0 } }
								∎ { ahl fl  tv tav evv lb_n glv_n RP.atm◂ast.stt_adt◂{ ia na id0 } { eds e0 } }
						∐. RP.rcd◂l0 . 
							ptn_lst { ahl fl tv  tav evv lb_n glv_n l0 { eds e0 } } ⊢ { ahl fl tv  tav evv lb_n glv_n l1 { eds e0 } }
							∎ { ahl fl  tv tav evv lb_n glv_n RP.rcd◂l1 { eds e0 } }						   					
				§	
					@.adt = adp.adt◂◂adt_hp 
					@.adt_hp { ahl fl j0 tv tav evv lr lbl lb1 lb_n glv_n { eds e0 } } 
						∐ lr ⊢ _cns◂{ h lr } . 
							$ lbl ⊢ 
							∐ p_cns◂{ lbi lbl } . 
								lb_etr { lbi e0 } ⊢ { lbi e0 } 
								hp_adt { ahl fl tv tav evv lb_n glv_n h { eds e0 } } ⊢ { ahl fl tv tav evv lb_n glv_n { eds e0 } } 						
								jmp_lb { lb1 e0 } ⊢ { lb1 e0 } 
								_inc j0 ⊢ j0 
								adt_hp { ahl fl j0 tv tav evv lr lbl lb1 lb_n glv_n { eds e0 } } ⊢| 
							∐. p_end◂lbi .
								lb_etr { lbi e0 } ⊢ { lbi e0 } 
								hp_adt { ahl fl tv tav evv lb_n glv_n h { eds e0 } } ⊢ { ahl fl tv tav evv lb_n glv_n { eds e0 } } 						
								jmp_lb { lb1 e0 } ⊢ { lb1 e0 } 
								∎ { ahl fl tv  tav evv lb1 lb_n glv_n { eds e0 } }
						∐. . 
							∎|
					@.adt_lp = adp.adt_lp◂◂adt 
					
				∎∎ 
			§§ arr 
				§ l1 { evv a0 e0 }
					ast.r64_of_rt { evv a0 } ⊢ { evv x } 
					$ x ⊢ 
					∐ ast.im_of◂x0 .
						^ x0 ⊢ _,s0
							"\tmov rdi," 0d' "\n" //
						asm.add_s8 { e0 s0 } ⊢ e0
						∎ { evv e0 }
					∐. ast.hp_of◂r1 . 
						^ r1 ⊢ r1,s0
							"\tmov rdi,GLX(" 0d' ")\n" //
						asm.add_s8 { e0 s0 } ⊢ e0
						∎ { evv e0 }
			§ mlc_arr { d c_n e }	 
				∐ d'=ast.hp.arr.std . 
					^ c_n ⊢ c_n,s 
						`	push rdi 
						"\tmov rsi," 0d' "\n" 
      		  ` imul rdi,rsi 
						`	lea rsi,[8+8*rdi]
						`	mov rdi,1 
						` C_CALL_SF calloc_sf
						`	pop rdi 
						`	mov QWORD [rax],rdi
						//
					asm.add_s8 { e s } ⊢ e 
					∎ { d c_n e }
				∐ d'=ast.hp.arr.x . 
					^ c_n ⊢ c_n,s 
						`	push rdi 
						`	bsr rsi,rdi 
						`	add rsi,1 
						`	push rsi 
						`	xor rdi,rdi
						`	bts rdi,rsi 
						"\tmov rsi," 0d' "\n" 
      		  ` imul rdi,rsi 
						`	lea rsi,[8+8*rdi]
						`	mov rdi,1 
						` C_CALL_SF calloc_sf
						`	pop rsi 
						`	pop rdi 
						`	mov QWORD [rax],rdi 
						`	mov BYTE [rax+7],sil
						//
					asm.add_s8 { e s } ⊢ e 
					∎ { d c_n e }
				∐. . 
					∎| 
			§ stt_mk_arr { d gfl is evv tav tv ys glv_n lb_n }
					$ asm.e◂{} ⊢ e0 
					$ asm.e◂{} ⊢ eg0 
					$ asm.e◂{} ⊢ eds 
					∐ is ⊢ RP.rcd◂l0; l0 ⊢ _cns◂{ a0 l0 }; l0 ⊢ _cns◂{ a1 l0 }; l0 ⊢ _nil◂{} . 
				    \\eml %[ "mb:a:0" ] ⊢ _ 
						newvar_l { tv %[ 0r ] } ⊢ { tv lv v2 } 
						$ v2 ⊢ v2,ya0
						T.iug { tv lv RP.cns2◂{ TX.r64◂{} v2 } ys } ⊢ { tv _ _ _ }
						$ ya0 ⊢ ya0,ya0_0 
						alc_type_k.f_i { tav tv %[ 0r ] ya0_0 } ⊢ { tav tv c_n pa0 } 
						inc_x glv_n ⊢ { rm0 glv_n } 
						inc_x glv_n ⊢ { rm2 glv_n } 
						$ rm0 ⊢ rm0,rm00 
						$ a0 ⊢ a0,a00 
						$ a1 ⊢ a1,a1_0 
						$ RP.cns3◂{ a00 a1_0 stt_v.arr_reg◂{ rm00 ya0 } } ⊢ pd1 
						l1 { evv a0 e0 } ⊢ { evv e0 }
			    \\eml %[ "mb:a:0" ] ⊢ _ 
						inc_x lb_n ⊢ { lb2 lb_n } 
						inc_x lb_n ⊢ { lb3 lb_n }
						inc_x lb_n ⊢ { lb_e lb_n } 
						inc_x lb_n ⊢ { lb4 lb_n } 
						inc_x lb_n ⊢ { lb5 lb_n } 
						inc_x lb_n ⊢ { lb_m1 lb_n } 
						inc_x lb_n ⊢ { lb_m2 lb_n }
						inc_x lb_n ⊢ { lb_m3 lb_n }  
			 		   eml %[ 6666r ] ⊢ _ 
						mlc_arr { d c_n e0 } ⊢ { d c_n e0 }
						^ rm0,rm2,lb2,lb3,lb_e,lb4,lb5,lb_m1,lb_m2,lb_m3 ⊢ _,_,_,lb3,_,_,_,_,_,_,s0 
							"\tmov GLX(" 0d' "),rax\n" 
							`	push DST_REG
							`	lea DST_REG,[rax+8] 
							`	mov rax,rdi 
							`	and rax,3
              ` mov rsi,~3  
							`	and rdi,rsi
							"\tmov GLX(" 1d' "),rdi\n"  
							"\tjmp QWORD [LB_" 5d' "+8*rax]\n" 
							"LB_" 5d' ": dq LB_" 2d' ",LB_" 7d' ",LB_" 8d' ",LB_" 9d' "\n"  
							"LB_" 9d' ":\n" 
							"\tcall LB_" 4d' "\n" 
							"LB_" 8d' ":\n" 
							"\tcall LB_" 4d' "\n" 
							"LB_" 7d' ":\n" 
							"\tcall LB_" 4d' "\n" 
							"\tmov rdi,GLX(" 1d' ")\n" 							
							"LB_" 2d' ":\n" 
							`	cmp rdi,0 
							"\tjz LB_" 3d' "\n" 
							"\tmov GLX(" 1d' "),rdi\n"  
							"\tcall LB_" 4d' "\n" 
							"\tcall LB_" 4d' "\n" 
							"\tcall LB_" 4d' "\n" 
							"\tcall LB_" 4d' "\n" 
							"\tmov rdi,GLX(" 1d' ")\n" 
							`	sub rdi,4
							"\tjmp LB_" 2d' "\n"
							"LB_" 4d' ":\n"  
							//
			    \\eml %[ "mb:a:0" ] ⊢ _ 
						asm.add_s8 { e0 s0 } ⊢ e0 
						rpc.ptn { gfl ⟦⟧ tv tav evv lb_n glv_n a1 { eds e0 } } ⊢ { gfl fl tv tav evv lb_n glv_n p1 { eds e0 } }					
						rpc.adt_lp { gfl fl tv tav evv lb_n glv_n { eds eg0 } } ⊢ { gfl tv tav evv lb_n glv_n { eds eg0 } }
						mov_ptn2.to_sgm_ptn { e0 { evv tav tv eds } glv_n p1 pa0 } ⊢ { e0 { evv tav tv eds } glv_n }
						^ lb3,c_n ⊢ _,_,sc2	
							"\tlea DST_REG,[DST_REG+8*" 1d' "]\n"
							`	ret 
							"LB_" 0d' ":\n"
							`	pop DST_REG
							//	
						asm.add_s8 { e0 sc2 } ⊢ e0				
			    \\eml %[ "mb:a:0" ] ⊢ _ 
						∎ { gfl evv tav tv glv_n lb_n { eds eg0 e0 } pd1 }
					∐. . 
						$ %[ "mk_arr 0" ] ⊢ ee 
							_emt ee ⊢ ee 
							∎| 
			
				∎∎ 
			§§ lc_code 
				¶ rf t',f',k'
					∐ rf_t : t'
					∐ rf_f : f' 
					∐ rf_k : k'  
				§§ rep_movsb
					§ 
						@.f { ip0 glv_n lb_n evv e0 } 
							∐ ip0 ⊢ RP.rcd◂l0; l0 ⊢ _cns◂{ a0 l0 }; l0 ⊢ _cns◂{ a1 l0 }; l0 ⊢ _cns◂{ a2 l0 }; l0 ⊢ _cns◂{ a3 l0 }; l0 ⊢ _cns◂{ a4 l0 };l0 ⊢ _nil◂{} . 
								ast.r64_of_rt { evv a0 } ⊢ { evv c0 } 
								ast.s8_of_rt { evv a1 } ⊢ { evv s0 } 
								ast.r64_of_rt { evv a2 } ⊢ { evv o0 } 
								ast.s8_of_rt { evv a3 } ⊢ { evv s1 } 
								ast.r64_of_rt { evv a4 } ⊢ { evv o1 } 
									f_c0 { c0 e0 } ⊢ { e0 c0 }
								f_s0 { s0 lb_n e0 } ⊢ { lb_n e0 s0 }
								f_o0 { o0 e0 } ⊢ { e0 o0 }
								f_s1 { s1 glv_n lb_n e0 } ⊢ { glv_n lb_n e0 s1 } 
								f_o1 { o1 e0 } ⊢ { e0 o1 }
								$ RP.cns5◂{ c0 s0 o0 s1 o1 } ⊢ p1 
								^ _ ⊢ sc0 
									`	mov rsi,QWORD [REP_MOVSB_VCT]
									`	push rcx 
									`	mov rcx,rax 
									`	cld 
									`	rep movsb
									`	pop rcx 
									// 
								asm.add_s8 { e0 sc0 } ⊢ e0
								∎ { glv_n lb_n evv e0 p1 }
							∐. . 
								∎| 
						@.f_c0 { c0 e0 } 
							$ c0 ⊢ 
							∐ ast.im_of◂c0 . 
								mov.rax_im { c0 e0 } ⊢ { c0 e0 } 
								∎ { e0 stt_v.r64_im◂c0 }
							∐. ast.hp_of◂r0 . 
								mov.rax_idx { r0 e0 } ⊢ { r0 e0 }
								∎ { e0 stt_v.r64_reg◂r0 }
						@.f_s0 { s0 lb_n e0 } 
							$ s0 ⊢ 
							∐ ast.im_of◂s0 . 
								_s8_len s0 ⊢ { s0 ls0 } 
								inc_x lb_n ⊢ { lb0 lb_n } 
								inc_x lb_n ⊢ { lb1 lb_n }  
								$ %[ 0r ] ⊢ x0 
								mk_db { s0 x0 } ⊢ { s0 x0 ss0 }
								^ lb0,lb1,ss0,ls0 ⊢ _,_,_,_,sc0 
									"\tjmp LB_" 0d' "\n"
									"\tLB_ " 1d' ": db " 2' "\n" 
									"LB_" 0d' ":\n" 
									"\tmov rsi,LB_" 1d' "\n" 
									"\tmov rdi," 3d' "\n"
									"\tsub rdi,rax\n" // 
								asm.add_s8 { e0 sc0 } ⊢ e0
								∎ { lb_n e0 stt_v.s8_im◂s0 }
							∐. ast.hp_of◂r0 . 
								^ r0 ⊢ r0,sc0 
									"\tmov rsi,GLX(" 0d' ")\n" 
									"\tmov rdi,0x0000_ffff_ffff_ffff\n"
									"\tand rdi,QWORD [rsi]\n"
									"\tsub rdi,rax\n" 
									"\tadd rsi,8\n" // 
								asm.add_s8 { e0 sc0 } ⊢ e0
								∎ { lb_n e0 stt_v.s8_reg◂r0 }  
						@.f_o0 { o0 e0 } 
							$ o0 ⊢ 
							∐ ast.im_of◂o0 . 
								^ o0 ⊢ o0,sc0 
									"\tcmp rdi," 0d' "\n" 
									"\tjl err_bc\n"
									"\tadd rsi," 0d' "\n" 
									`	mov QWORD [REP_MOVSB_VCT],rsi 
									// 
								asm.add_s8 { e0 sc0 } ⊢ e0
								∎ { e0 stt_v.r64_im◂o0 } 
							∐. ast.hp_of◂r0 . 
								^ r0 ⊢ r0,sc0 
									"\tcmp rdi,GLX(" 0d' ")\n" 
									"\tjl err_bc\n"
									"\tadd rsi,GLX(" 0d' ")\n"
									`	mov QWORD [REP_MOVSB_VCT],rsi 
									// 
								asm.add_s8 { e0 sc0 } ⊢ e0
								∎ { e0 stt_v.r64_reg◂r0 } 
						@.f_s1 { s1 glv_n lb_n e0 } 
							$ s1 ⊢ 
							∐ ast.im_of◂s1 . 
								_s8_len s1 ⊢ { s1 ls1 } 
								^ _ ⊢ sc0 
									"\tmov QWORD [REP_MOVSB_VCT+8],rax\n" // 
								asm.add_s8 { e0 sc0 } ⊢ e0 
								mk_s8_64 s1 ⊢ { s1 es1 }
								asm.cct { e0 es1 } ⊢ e0 
								inc_x glv_n ⊢ { rm0 glv_n } 
								^ rm0,ls1 ⊢ rm0,_,sc0 
									"\tmov GLX(" 0d' "),rax\n" 
									`	lea rsi,[rax+8]
									`	mov rax,QWORD [REP_MOVSB_VCT+8]
									"\tmov rdi," 1d' "\n"
									`	sub rdi,rax
									// 
								asm.add_s8 { e0 sc0 } ⊢ e0 
								∎ { glv_n lb_n e0 stt_v.s8_reg◂rm0 }
							∐. ast.hp_of◂r0 . 
								^ r0 ⊢ r0,s0 
									"\tmov rsi,GLX(" 0d' ")\n" 
									"\tmov rdi,0x0000_ffff_ffff_ffff\n"
									"\tand rdi,QWORD [rsi]\n"
									`	add rsi,8 
									`	sub rdi,rax 
									// 
								asm.add_s8 { e0 s0 } ⊢ e0
								$ stt_v.s8_reg◂r0 ⊢ p1 
								∎ { glv_n lb_n e0 p1 }  
						@.f_o1 { o1 e0 } 
							$ o1 ⊢ 
							∐ ast.im_of◂o1 . 
								^ o1 ⊢ o1,sc0 
									"\tcmp rdi," 0d' "\n" 
									"\tjl err_bc\n"
									"\tadd rsi," 0d' "\n"
									`	mov rdi,rsi
									// 
								asm.add_s8 { e0 sc0 } ⊢ e0
								∎ { e0 stt_v.r64_im◂o1 } 
							∐. ast.hp_of◂r0 . 
								^ r0 ⊢ r0,sc0 
									"\tcmp rdi,GLX(" 0d' ")\n" 
									"\tjl err_bc\n"
									"\tadd rsi,GLX(" 0d' ")\n" 
									`	mov rdi,rsi 
									// 
								asm.add_s8 { e0 sc0 } ⊢ e0
								∎ { e0 stt_v.r64_reg◂r0 } 
					∎∎
					§§ sts 
						§ 
						@.f { ip0 glv_n evv e0 } 
							∐ ip0 ⊢ RP.rcd◂l0; l0 ⊢ _cns◂{ a0 l0 }; l0 ⊢ _cns◂{ a1 l0 }; l0 ⊢ _cns◂{ a2 l0 }; l0 ⊢ _nil◂{} . 
								ast.s8_of_rt { evv a0 } ⊢ { evv s0 } 
								ast.r64_of_rt { evv a1 } ⊢ { evv o0 } 
								ast.r64_of_rt { evv a2 } ⊢ { evv c0 } 
								f_s0 { glv_n s0 e0 } ⊢ { glv_n e0 s0 } 
								f_o0 { o0 e0 } ⊢ { e0 o0 }
								f_c0 { c0 e0 } ⊢ { e0 c0 }
								∎ { glv_n evv e0 RP.cns3◂{ s0 o0 c0 } }
							∐. . 
								∎| 
						@.f_s0 { glv_n s0 e0 } 
							$ s0 ⊢ 
							∐ ast.im_of◂s0 . 
								_s8_len s0 ⊢ { s0 ls0 }  
								mk_s8_64 s0 ⊢ { s0 es0 }
								asm.cct { e0 es0 } ⊢ e0 
								inc_x glv_n ⊢ { rm0 glv_n } 
								^ rm0,ls0 ⊢ rm0,_,sc0 
									"\tmov GLX(" 0d' "),rax\n" 
									"\tmov rdi," 1d' "\n" // 
								asm.add_s8 { e0 sc0 } ⊢ e0 
								∎ { glv_n e0 stt_v.s8_reg◂rm0 }
							∐. ast.hp_of◂r0 . 
								^ r0 ⊢ r0,s0 
									"\tmov rax,GLX(" 0d' ")\n" 
									"\tmov rdi,0x0000_ffff_ffff_ffff\n"
									"\tand rdi,QWORD [rax]\n" // 
								asm.add_s8 { e0 s0 } ⊢ e0
								∎ { glv_n e0 stt_v.s8_reg◂r0 }  
						@.f_o0 { o0 e0 } 
							$ o0 ⊢ 
							∐ ast.im_of◂o0 . 
								^ o0 ⊢ o0,sc0 
									"\tcmp rdi," 0d' "\n" 
									"\tjle err_bc\n"
									"\tmov rsi," 0d' "\n" 
									// 
								asm.add_s8 { e0 sc0 } ⊢ e0
								∎ { e0 stt_v.r64_im◂o0 } 
							∐. ast.hp_of◂r0 . 
								^ r0 ⊢ r0,sc0 
									"\tcmp rdi,GLX(" 0d' ")\n" 
									"\tjle err_bc\n"
									"\tmov rsi,GLX(" 0d' ")\n"
									// 
								asm.add_s8 { e0 sc0 } ⊢ e0
								∎ { e0 stt_v.r64_reg◂r0 } 
						@.f_c0 { c0 e0 } 
							$ c0 ⊢ 
							∐ ast.im_of◂c0 . 
								^ c0 ⊢ c0,sc0 
									"\tmov BYTE [rax+8+rsi]," 0d' "\n" 
									// 
								asm.add_s8 { e0 sc0 } ⊢ e0
								∎ { e0 stt_v.r64_im◂c0 } 
							∐. ast.hp_of◂r0 . 
								^ r0 ⊢ r0,sc0 
									"\tmov rdi,GLX(" 0d' ")\n" 
									"\tmov BYTE [rax+8+rsi],dil\n" // 
								asm.add_s8 { e0 sc0 } ⊢ e0
								∎ { e0 stt_v.r64_reg◂r0 }   
					∎∎
				§§ exp_s8 
					§ @.lp0_c { i sl } 
						$ sl ⊢ 
						∐ _cns◂{ ip sl } .
							$ ip ⊢ ip,ip0
							_inc i ⊢ i 
							lp0_c { i sl } ⊢ { i ar } 
							_dec i ⊢ i 
							set_tv { ar i ip } ⊢ { ar i } 
							∎ { i ar } 
						∐. _nil◂{} .  
							ini_tv_n i ⊢| 
							
					§ 
						@.ip2 { evv l e0 } 
							$ l ⊢ 
							∐ _cns◂{ p1 l } . 
								∐ p1 ⊢ ast.exp_s8_cst◂s1 . 
									ast.s8_of_k { evv s1 } ⊢ { evv s1 } 
									rp8.add_s8 { e0 s1 } ⊢ e0 
									ip2 { evv l e0 } ⊢| 
								∐. . 
									rp8.to_s8 e0 ⊢ s0
									ip0 { evv l } ⊢ { evv l } 
									∎ { evv ⟦ ast.exp_s8_cst◂ast.k_s8◂s0 p1 < l ⟧ } 
							∐. _nil◂{} . 
								rp8.to_s8 e0 ⊢ s0
								∎ { evv ⟦ ast.exp_s8_cst◂ast.k_s8◂s0 ⟧ }
						@.ip0 { evv l }  
							$ l ⊢ 
							∐ _cns◂{ p0 l } . 
								∐ p0 ⊢ ast.exp_s8_cst◂s0 . 
									ast.s8_of_k { evv s0 } ⊢ { evv s0 } 
									ip2 { evv l rp8.of_s8◂s0 } ⊢| 
								∐. . 
									ip0 { evv l } ⊢ { evv l } 
									∎ { evv ⟦ p0 < l ⟧ }
							∐. _nil◂{} . 
								∎ { evv ⟦⟧ } 
					§ 
						@.s8 { v_n evv { eds e0 } ld lb_n  ar s0 rr pl }
							_s8_len s0 ⊢ { s0 l0 } 
							_add { ld l0 } ⊢ { ld l0 } 
							lp1 { v_n evv { eds e0 } ld lb_n  ar rr pl } ⊢ { v_n evv { eds e0 } ld lb_n  ar }
							_sub { ld l0 } ⊢ { ld l0 }
							inc_x lb_n ⊢ { lb0 lb_n }  
							data_s8 { eds lb0 s0 } ⊢ { eds lb0 s0 }
							^ lb0,l0 ⊢ lb0,l0,sr 
								"\tlea rsi,[LB_" 0d' "+" 1d' "-1]\n" 
								"\tmov rcx," 1d' "\n" 
								`	rep movsb
								//
							asm.add_s8 { e0 sr } ⊢ e0 
							∎ { v_n evv { eds e0 } ld lb_n  ar }
						@.d # { v_n evv { eds e0 } ld lb_n  ar x0 rr pl }
							^ x0 ⊢ x0,s0 
								0d' // 
							s8 { v_n evv { eds e0 } ld lb_n  ar s0 rr pl } ⊢| 
						@.s8_for { v_n evv { eds e0 } ld lb_n  ar x0 s0 rr pl }
							_s8_len s0 ⊢ { s0 l0 } 
							$ l0 ⊢ l0,l00 
							_imul { l00 x0 } ⊢ { l00 x0 }
							_add { ld l00 } ⊢ { ld l00 } 
							lp1 { v_n evv { eds e0 } ld lb_n  ar rr pl } ⊢ { v_n evv { eds e0 } ld lb_n  ar }
							_sub { ld l00 } ⊢ { ld l00 }
							inc_x lb_n ⊢ { lb1 lb_n }  
							data_s8 { eds lb1 s0 } ⊢ { eds lb1 s0 } 
							inc_x lb_n ⊢ { lb2 lb_n }
							inc_x lb_n ⊢ { lb3 lb_n }
							^ lb1,l0,x0,lb2,lb3 ⊢ lb1,l0,x0,lb2,lb3,sr 
								"\tmov rax," 2d' "\n" 
								"LB_" 3d' ":\n"
								`	cmp rax,0
								"\tjz LB_" 4d' "\n" 
								`	sub rax,1
								"\tlea rsi,[LB_" 0d' "+" 1d' "-1]\n" 
								"\tmov rcx," 1d' "\n" 
								`	rep movsb 
								"\tjmp LB_" 3d' "\n" 
								"LB_" 4d' ":\n"
								//
							asm.add_s8 { e0 sr } ⊢ e0 
							∎ { v_n evv { eds e0 } ld lb_n  ar } 
					@.lp1 { v_n evv { eds e0 } ld lb_n  ar rr pl }
						$ pl ⊢ 
						∐ _cns◂{ ps pl } . 
							$ ps ⊢ 
							∐ ast.exp_s8_cst◂c0 . 
								ast.s8_of_k { evv c0 } ⊢ { evv s0 } 
								s8 { v_n evv { eds e0 } ld lb_n  ar s0 rr pl } ⊢|									
							∐ ast.exp_s8_idx◂{ f0 j0 } . 
								lod_tv { ar j0 } ⊢ { ar j0 p0 }
								$ f0 ⊢ 
								∐ ast.fmt_s◂{} . 
									ast.s8_of_rt { evv p0 } ⊢ { evv s0 } 
									$ s0 ⊢ 
									∐ ast.im_of◂s0 . 
										s8 { v_n evv { eds e0 } ld lb_n  ar s0 rr pl } ⊢|									
									∐. ast.hp_of◂r0 . 
										^ r0,v_n ⊢ r0,v_n,s1 
												"\tmov rsi,GLX(" 0d' ")\n" 
												`	mov rax,0x0000_ffff_ffff_ffff 
												`	and rax,QWORD [rsi] 
												`	add rdi,rax 
												\\"\tmov QWORD [EXP_S8_VCT+" 1d' "],rax\n" 
												`	push rax 
												// 
											asm.add_s8 { e0 s1 } ⊢ e0
											incq v_n ⊢ v_n 
											lp1 { v_n evv { eds e0 } ld lb_n  ar rr pl } ⊢ { v_n evv { eds e0 } ld lb_n  ar }
											decq v_n ⊢ v_n 
											^ r0,v_n ⊢ _,v_n,sr 
												"\tmov rsi,GLX(" 0d' ")\n"  
												`	pop rcx 
												\\"\tmov rcx,QWORD [EXP_S8_VCT+" 1d' "]\n" 
												`	lea rsi,[rsi+7+rcx]
												`	rep movsb
												//
											asm.add_s8 { e0 sr } ⊢ e0 
											∎ { v_n evv { eds e0 } ld lb_n  ar } 					
								∐ ast.fmt_d◂{} .
									ast.r64_of_rt { evv p0 } ⊢ { evv x0 } 
									$ x0 ⊢ 
									∐ ast.im_of◂x0 . 
										d { v_n evv { eds e0 } ld lb_n  ar x0 rr pl } ⊢|									
									∐. ast.hp_of◂r0 . 
										^ r0,v_n ⊢ r0,v_n,s1 
											"\tmov rax,GLX(" 0d' ")\n" 
											\\"\tlea rdi,[EXP_S8_VCT+" 1d' "]\n" 
											`	mov rsi,rdi  
											`	sub rsp,128 
											`	mov rdi,rsp 
											`	push rsi 
											`	mov rdx,rax 
											`	mov rsi,fmt_d
											` xor rax,rax
											`	C_CALL_SF sprintf
											`	pop rdi
											`	add rdi,rax 
											`	push rax 
											\\"\tmov QWORD [EXP_S8_VCT+128+" 1d' "],rax\n" 
											// 
										asm.add_s8 { e0 s1 } ⊢ e0
										$ %[ 136r ] ⊢ w0 
										_add { v_n w0 } ⊢ { v_n w0 }
										lp1 { v_n evv { eds e0 } ld lb_n  ar rr pl } ⊢ { v_n evv { eds e0 } ld lb_n  ar }
										_sub { v_n w0 } ⊢ { v_n w0 }
										^ v_n ⊢ v_n,sr 
											`	pop rcx 
											\\"\tmov rcx,QWORD [EXP_S8_VCT+128+" 0d' "]\n" 
											\\"\tlea rsi, [EXP_S8_VCT+" 0d' "+rcx-1]\n" 
											`	lea rsi,[rsp+rcx-1] 
											`	rep movsb
											`	add rsp,128
											//
										asm.add_s8 { e0 sr } ⊢ e0 
										∎ { v_n evv { eds e0 } ld lb_n  ar } 	 
								∐ ast.fmt_x◂{} .
									ast.r64_of_rt { evv p0 } ⊢ { evv x0 } 
									$ x0 ⊢ 
									∐ ast.im_of◂x0 . 
										d { v_n evv { eds e0 } ld lb_n  ar x0 rr pl } ⊢|									
									∐. ast.hp_of◂r0 . 
										^ r0,v_n ⊢ r0,v_n,s1 
											"\tmov rax,GLX(" 0d' ")\n" 
											`	mov rsi,rdi 
											`	sub rsp,128 
											`	mov rdi,rsp 
											`	push rsi 
											\\"\tlea rdi,[EXP_S8_VCT+" 1d' "]\n" 
											"\tmov rdx,rax\n" 
											`	mov rsi,fmt_d
											` xor rax,rax
											`	C_CALL_SF sprintf
											`	pop rdi
											`	add rdi,rax 
											\\"\tmov QWORD [EXP_S8_VCT+128+" 1d' "],rax\n" 
											`	push rax 
											// 
										asm.add_s8 { e0 s1 } ⊢ e0
										$ %[ 136r ] ⊢ w0 
										_add { v_n w0 } ⊢ { v_n w0 }
										lp1 { v_n evv { eds e0 } ld lb_n  ar rr pl } ⊢ { v_n evv { eds e0 } ld lb_n  ar }
										_sub { v_n w0 } ⊢ { v_n w0 }
										^ v_n ⊢ v_n,sr 
											`	pop rcx 
											`	lea rsi,[rsp+rcx-1] 
											\\"\tmov rcx,QWORD [EXP_S8_VCT+128+" 0d' "]\n" 
											\\"\tlea rsi, [EXP_S8_VCT+" 0d' "+rcx-1]\n" 
											`	rep movsb
											`	add rsp,128
											//
										asm.add_s8 { e0 sr } ⊢ e0 
										∎ { v_n evv { eds e0 } ld lb_n  ar } 	
								∐. ast.fmt_p◂{} .
									∎| 
							∐. ast.exp_s8_for◂{ j0 s0 } . 
								ast.s8_of_k { evv s0 } ⊢ { evv s0 } 
								\[
								mk_esc_s8 s0 ⊢ { s0 ss0 } 
								^ j0,ss0 ⊢ j0,_,sc0 
									"; " 0d' "'*\"" 1' "\"\n" // 
								asm.add_s8 { e0 sc0 } ⊢ e0 
								\]
								lod_tv { ar j0 } ⊢ { ar j0 p0 }
								ast.r64_of_rt { evv p0 } ⊢ { evv x0 } 
								$ x0 ⊢ 
								∐ ast.im_of◂x0 . 
									s8_for { v_n evv { eds e0 } ld lb_n  ar x0 s0 rr pl } ⊢|									
								∐. ast.hp_of◂r0 . 
									_s8_len s0 ⊢ { s0 l0 } 
									^ r0,l0,v_n ⊢ r0,l0,v_n,s1 
										"\tmov rsi,GLX(" 0d' ")\n" 
										\\"\tmov QWORD [EXP_S8_VCT+" 2d' "],rsi\n" 
									  `	push rsi 
										"\tmov rax," 1d' "\n" 
                    ` imul rsi,rax 
										`	add rdi,rsi 
										// 
									asm.add_s8 { e0 s1 } ⊢ e0
									incq v_n ⊢ v_n 
									lp1 { v_n evv { eds e0 } ld lb_n  ar rr pl } ⊢ { v_n evv { eds e0 } ld lb_n  ar }
									decq v_n ⊢ v_n 
									inc_x lb_n ⊢ { lb1 lb_n }  
									data_s8 { eds lb1 s0 } ⊢ { eds lb1 s0 } 
									inc_x lb_n ⊢ { lb2 lb_n }
									inc_x lb_n ⊢ { lb3 lb_n }
									^ lb1,l0,lb2,lb3,v_n ⊢ _,_,_,_,v_n,sr 
										\\"\tmov rax,QWORD [EXP_S8_VCT+" 4d' "]\n" 
										`	pop rax 
										"LB_" 2d' ":\n"
										`	cmp rax,0
										"\tjz LB_" 3d' "\n"
										`	sub rax,1
										"\tlea rsi,[LB_" 0d' "+" 1d' "-1]\n" 
										"\tmov rcx," 1d' "\n" 
										`	rep movsb 
										"\tjmp LB_" 2d' "\n" 
										"LB_" 3d' ":\n" 
										//
									asm.add_s8 { e0 sr } ⊢ e0 
									∎ { v_n evv { eds e0 } ld lb_n  ar } 	 
						∐. _nil◂{} . 
							$ rr ⊢ 
							∐ in0◂rr . 
								^ ld,rr ⊢ ld,_,s1 
									"\tadd rdi," 0d' "\n" 
									`	push rdi 
									`	call mlc_s8 
									`	pop rdi
									"\tmov GLX(" 1d' "),rax\n" 
									`	lea rdi,[rax+7+rdi]
									`	std 
									`	mov QWORD [tmp],rcx 
									//
								asm.add_s8 { e0 s1 } ⊢ e0 
								∎ { v_n evv { eds e0 } ld lb_n  ar }
							∐. in1◂{ rm rx } . 
								^ ld,rm,rx ⊢ ld,_,_,sc0 
									"\tadd rdi," 0d' "\n" 
									"\tmov rax,GLX(" 1d' ")\n" 
									"\tmov rsi,GLX(" 2d' ")\n"  
									`	mov rbx,0x0000_ffff_ffff_ffff
									`	and rbx,QWORD [rax] 
									`	sub rbx,rdi 
									`	jl err_bc
									`	sub rbx,rsi 
									`	jl err_bc 
									`	add rsi,rdi  
									"\tmov GLX(" 2d' "),rsi\n" 
									`	lea rdi,[rax+7+rsi] 
									`	std 
									`	mov QWORD [tmp],rcx 
									//
									asm.add_s8 { e0 sc0 } ⊢ e0 
									∎ { v_n evv { eds e0 } ld lb_n  ar }
					∎∎ 
				§§ op2 
					§ op_dmy # { x y } 
						∎| 
					§ @.f◂◂OP { fb op { evv tav } glv_n lb_n a is }
						$ asm.e◂{} ⊢ e0 
						∐ is ⊢ RP.rcd◂l; l ⊢ _cns◂{ a0 l }; l ⊢ _cns◂{ a1 l }; l ⊢ _nil◂{} . 
							ast.r64_of_rt { evv a0 } ⊢ { evv x0 } 
							ast.r64_of_rt { evv a1 } ⊢ { evv x1 } 
							$ x0 ⊢ 
							∐ ast.hp_of◂r0 .
								$ x1 ⊢ 
								∐ ast.hp_of◂r1 . 
									^ r0,r1,op ⊢ r0,r1,op,ec1 
										"\tmov rdi,GLX(" 1d' ")\n" 
										"\t" 2' " GLX(" 0d' "),rdi\n" //
									asm.add_s8 { e0 ec1 } ⊢ e0 
									$ RP.cns2◂{ stt_v.r64_reg◂r0 stt_v.r64_reg◂r1 } ⊢ is 
									∎ { { evv tav } glv_n lb_n a is e0 }
								∐. ast.im_of◂x1 .
									^ r0,x1,op ⊢ r0,x1,_,ec1 
										"\tmov rdi," 1d' "\n" 
										"\t" 2' " GLX(" 0d' "),rdi\n" 
										//
									$ RP.cns2◂{ stt_v.r64_reg◂r0 stt_v.r64_im◂x1 } ⊢ is
									asm.add_s8 { e0 ec1 } ⊢ e0 
									∎ { { evv tav } glv_n lb_n a is e0 }
							∐. ast.im_of◂x0 . 
								$ x1 ⊢ 
								∐ ast.hp_of◂r1 . 
									inc_x glv_n ⊢ { rm0 glv_n } 
									^ rm0,r1,x0,op ⊢ rm0,r1,x0,op,ec1 
										"\tmov rdi," 2d' "\n" 
										"\t" 3' " rdi,GLX(" 1d' ")\n" 
										"\tmov GLX(" 0d' "),rdi\n"  
										//
									asm.add_s8 { e0 ec1 } ⊢ e0 
									$ RP.cns2◂{ stt_v.r64_reg◂rm0 stt_v.r64_reg◂r1 } ⊢ is 
									∎ { { evv tav } glv_n lb_n a is e0 }
								∐. ast.im_of◂x1 . 
									∐ fb ⊢ bl.t◂{} . 
										OP { x0 x1 } ⊢ { x0 x1 } 
										$ RP.cns2◂{ stt_v.r64_im◂x0 stt_v.r64_im◂x1 } ⊢ is 						
										∎ { { evv tav } glv_n lb_n a is e0 }
									∐. . 
										inc_x glv_n ⊢ { rm0 glv_n } 
										inc_x glv_n ⊢ { rm1 glv_n } 
										^ rm0,rm1,x0,x1,op ⊢ rm0,rm1,_,_,_,sc0 
											"\tmov rdi," 2d' "\n" 
											"\tmov rsi," 3d' "\n" 
											"\t" 4' " rdi,rsi\n" 
											"\tmov GLX(" 0d' "),rdi\n" 
											"\tmov GLX(" 1d' "),rsi\n" //
											asm.add_s8 { e0 sc0 } ⊢ e0 
										$ RP.cns2◂{ stt_v.r64_reg◂rm0 stt_v.r64_reg◂rm1 } ⊢ is 
										∎ { { evv tav } glv_n lb_n a is e0 }	
						∐. . 
							$ %[ "lc_code.f _imul 3" ] ⊢ se 
							_emt se ⊢ se 
							∎|
					∎∎
				§ op_shr◂◂{ OP OP_N } { evv tav glv_n lb_n a is ec0 } 
					∐ is ⊢ RP.rcd◂l; l ⊢ _cns◂{ p0 l }; l ⊢ _cns◂{ p1 l }; l ⊢ _nil◂{} . 
						ast.r64_of_rt { evv p0 } ⊢ { evv x0 } 
						ast.r64_of_rt { evv p1 } ⊢ { evv x1 } 
						$ x0 ⊢ 
						∐ ast.hp_of◂r0 . 
							$ x1 ⊢ 
							∐ ast.hp_of◂r1 . 
								^ r0,r1 ⊢ r0,r1,sc0 
									"\tmov rdi,GLX(" 0d' ")\n" 
									"\tmov rax,GLX(" 1d' ")\n" 
									`	push rcx 
									`	mov rcx,rax
									"\t" OP_N " rdi,cl\n"  
									`	pop rcx 
									"\tmov GLX(" 0d' "),rdi\n" // 
								asm.add_s8 { ec0 sc0 } ⊢ ec0 
								$ RP.cns2◂{ stt_v.r64_reg◂r0 stt_v.r64_reg◂r1 } ⊢ is1  
								∎ { evv tav glv_n lb_n a is1 ec0 }	
						
						∐. ast.im_of◂x1 . 
								^ r0,x1 ⊢ r0,x1,sc0 
									"\t" OP_N " GLX(" 0d' ")," 1d' "\n" // 
								asm.add_s8 { ec0 sc0 } ⊢ ec0 
								$ RP.cns2◂{ stt_v.r64_reg◂r0 stt_v.r64_im◂x1 } ⊢ is1  
								∎ { evv tav glv_n lb_n a is1 ec0 }	
						∐. ast.im_of◂x0 . 
							$ x1 ⊢ 
							∐ ast.hp_of◂r1 . 
								inc_x glv_n ⊢ { rm0 glv_n } 
								^ x0,rm0,r1 ⊢ x0,rm0,r1,sc0 
									"\tmov rdi," 0d' "\n" 
									"\tmov rax,GLX(" 2d' ")\n" 
									`	push rcx 
									`	mov rcx,rax
									"\t" OP_N " rdi,cl\n"  
									`	pop rcx 
									"\tmov GLX(" 1d' "),rdi\n" // 
								asm.add_s8 { ec0 sc0 } ⊢ ec0
								$ RP.cns2◂{ stt_v.r64_reg◂rm0 stt_v.r64_reg◂r1 } ⊢ is1  
								∎ { evv tav glv_n lb_n a is1 ec0 }	
							∐. ast.im_of◂x1 . 
								OP { x0 x1 } ⊢ { x0 x1 } 
								$ RP.cns2◂{ stt_v.r64_im◂x0 stt_v.r64_im◂x1 } ⊢ is1  
								∎ { evv tav glv_n lb_n a is1 ec0 }	
						∐. . 
							_emt %[ "op_axm shr 0" ] ⊢ _ 
							∎|
				§ op1◂◂{ OP OP_N } { evv   is ec0 }  
					ast.r64_of_rt { evv is } ⊢ { evv x0 } 
					$ x0 ⊢ 
					∐ ast.hp_of◂r . 
						^ r ⊢ r,ec1 
							"\t" OP_N " GLX(" 0d' "),1\n" 
							//
						asm.add_s8 { ec0 ec1 } ⊢ ec0
						$ stt_v.r64_reg◂r ⊢ is 
						∎ { evv   is ec0 }
					∐. ast.im_of◂x . 
						OP x ⊢ x 
						∎ { evv   stt_v.r64_im◂x ec0 }
				§ imul { evv glv_n is ec0 } 
					∐ is ⊢ RP.rcd◂l; l ⊢ _cns◂{ a0 l }; l ⊢ _cns◂{ a1 l }; l ⊢ _nil◂{} . 
						ast.r64_of_rt { evv a0 } ⊢ { evv x0 } 
						ast.r64_of_rt { evv a1 } ⊢ { evv x1 } 
						$ x0 ⊢ 
						∐ ast.hp_of◂r0 . 
							$ x1 ⊢ 
							∐ ast.hp_of◂r1 . 
								^ r0,r1 ⊢ r0,r1,ec1 
									"\tmov rdi,GLX(" 0d' ")\n" 
									"\tmov rsi,GLX(" 1d' ")\n" 
									` imul rdi,rsi 
									"\tmov GLX(" 0d' "),rdi\n"
									//
								asm.add_s8 { ec0 ec1 } ⊢ ec0 
								$ RP.cns2◂{ stt_v.r64_reg◂r0 stt_v.r64_reg◂r1 } ⊢ is 
								∎ { evv glv_n is ec0 } 
							∐. ast.im_of◂x1 .
								^ r0,x1 ⊢ r0,x1,ec1 
									"\tmov rdi,GLX(" 0d' ")\n" 
									"\tmov rsi," 1d' "\n"
									` imul rdi,rsi 
									"\tmov GLX(" 0d' "),rdi\n" 
									//
								asm.add_s8 { ec0 ec1 } ⊢ ec0 
								$ RP.cns2◂{ stt_v.r64_reg◂r0 stt_v.r64_im◂x1 } ⊢ is
								∎ { evv glv_n is ec0 } 
						∐. ast.im_of◂x0 . 
							$ x1 ⊢ 
							∐ ast.hp_of◂r1 .  
								inc_x glv_n ⊢ { rm0 glv_n } 
								^ rm0,r1,x0 ⊢ rm0,r1,x0,ec1 
									"\tmov rdi," 2d' "\n" 
									"\tmov rsi,GLX(" 1d' ")\n" 
									` imul rdi,rsi 
									"\tmov GLX(" 0d' "),rdi\n"  
									//
								asm.add_s8 { ec0 ec1 } ⊢ ec0 
								$ RP.cns2◂{ stt_v.r64_reg◂rm0 stt_v.r64_reg◂r1 } ⊢ is 
								∎ { evv glv_n is ec0 } 
							∐. ast.im_of◂x1 . 
								_imul { x0 x1 } ⊢ { x0 x1 } 
								$ RP.cns2◂{ stt_v.r64_im◂x0 stt_v.r64_im◂x1 } ⊢ is 
								∎ { evv glv_n is ec0 } 
					∐. . 
						$ %[ "lc_code.f _imul 3" ] ⊢ se 
						_emt se ⊢ se 
						∎|
				§ s8_to_rdi_rsi { eds ec0 lb_n s0 } 
					$ s0 ⊢ 
					∐ ast.im_of◂s0 . 
						inc_x lb_n ⊢ { lb0 lb_n } 
						_s8_len s0 ⊢ { s0 l0 }
						data_s8 { eds lb0 s0 } ⊢ { eds lb0 s0 }
						^ l0,lb0 ⊢ _,_,sc0 
							"\tmov rdi," 0d' "\n" 
							"\tlea rsi,[LB_" 1d' "]\n" // 
						asm.add_s8 { ec0 sc0 } ⊢ ec0 
						∎ { eds ec0 lb_n }
					∐. ast.hp_of◂r0 . 
						^ r0 ⊢ _,sc0 
							"\tmov rsi,GLX(" 0d' ")\n" 
							`	mov rdi,0x0000_ffff_ffff_ffff 
							` mov rax,QWORD [rsi] 
              `	and rdi,rax
							`	add rsi,8
							//
						asm.add_s8 { ec0 sc0 } ⊢ ec0 
						∎ { eds ec0 lb_n }
				§ scf { s lb_n ec0 } 
					inc_x lb_n ⊢ { lb0 lb_n } 
					inc_x lb_n ⊢ { lb1 lb_n } 
					^ lb0,lb1,s ⊢ _,_,_,sc0 
						`	cmp rax,rdi
						"\tjge LB_" 0d' "\n"
						` lea rdi,[rsi+rax] 
						`	push rax 
						"\tCALL_SF " 2' "\n" 
						`	pop rbx 
						`	cmp rax,0 
						"\tjz LB_" 0d' "\n" 
						`	lea rax,[rbx+rsi]
						"\tmov rsi,rdi\n"
						`	mov r10,0
						"\tjmp LB_" 1d' "\n"			
						"LB_" 0d' ":\n" 
						`	mov rsi,unt
						`	mov r10,1 
						"LB_" 1d' ":\n" //		
					asm.add_s8 { ec0 sc0 } ⊢ ec0 
					∎ { lb_n ec0 }
				§ grm_axm { evv lb_n ax axl ec0 } 
					∐ ax'=EX.byt . 
						inc_x lb_n ⊢ { lb0 lb_n } 
						inc_x lb_n ⊢ { lb1 lb_n } 
						^ lb0,lb1 ⊢ _,_,sc0 
							`	cmp rax,rdi
							"\tjge LB_" 0d' "\n" 
							`	movzx rsi,BYTE [rsi+rax]
							`	add rax,1 
							`	mov r10,0 
							"\tjmp LB_" 1d' "\n" 
							"LB_" 0d' ":\n" 
							"\tmov rsi,unt\n"
							"\tmov r10,1\n"  
							"LB_" 1d' ":\n" 
							//
						asm.add_s8 { ec0 sc0 } ⊢ ec0 
						∎ { evv lb_n ec0 TX.r64◂{} }
					∐ ax'=EX.psc; axl ⊢ _cns◂{ sx axl }; axl ⊢ _nil◂{}; sx ⊢ RP.atm◂sx . 
						ast.s8_of_k { evv sx } ⊢ { evv s } 
						_s8_len s ⊢ { s ls } 
						inc_x lb_n ⊢ { lb0 lb_n } 
						inc_x lb_n ⊢ { lb1 lb_n } 
						^ ls,lb0 ⊢ ls,lb0,sc1 
							"\tlea rdi,[rdi-" 0d' "]\n"
							"\tcmp rax,rdi\n"
							"\tjg LB_" 1d' "\n"
							"\tlea rdi,[rsi+rax]\n" 
							// 
							asm.add_s8 { ec0 sc1 } ⊢ ec0
							cmp_s8.f { lb0 s } ⊢ { lb0 s e1 }
							asm.cct { ec0 e1 } ⊢ ec0 
							^ ls,lb0,lb1 ⊢ ls,_,_,sc0 
								"\tadd rax," 0d' "\n" 
								"\tmov rsi,unt\n"
								`	mov r10,0
								"\tjmp LB_" 2d' "\n" 
								"LB_" 1d' ":\n" 
								"\tmov rsi,unt\n" 
								"\tmov r10,1\n"
								"LB_" 2d' ":\n" 
								//
							asm.add_s8 { ec0 sc0 } ⊢ ec0 
							∎ { evv lb_n ec0 RP.unt◂{} } 
					∐ ax'=EX.scf_d . 
						scf { %[ "scf_d" ] lb_n ec0 } ⊢ { lb_n ec0 }
						∎ { evv lb_n ec0 TX.r64◂{} } 
					∐ ax'=EX.scf_x . 
						scf { %[ "scf_x" ] lb_n ec0 } ⊢ { lb_n ec0 }
						∎ { evv lb_n ec0 TX.r64◂{} } 
					∐ ax'=EX.synt . 
						inc_x lb_n ⊢ { lb0 lb_n } 
						inc_x lb_n ⊢ { lb1 lb_n } 
						inc_x lb_n ⊢ { lb2 lb_n } 
						^ lb0,lb1,lb2 ⊢ _,_,_,sc0 
							"\tjmp LB_" 1d' "\n" 
							"LB_" 0d' ":\n" 
							`	add rax,1 
							"LB_" 1d' ":\n" 
							`	cmp rax,rdi
							"\tjge LB_" 2d' "\n" 
							"\tJZ_SPC BYTE [rsi+rax], LB_" 0d' "\n"  
							"LB_" 2d' ":\n" 
							`	mov rsi,unt
							`	mov r10,0
							//
						asm.add_s8 { ec0 sc0 } ⊢ ec0 
						∎ { evv lb_n ec0 RP.unt◂{} }
					∐ ax'=EX.line . 
						inc_x lb_n ⊢ { lb0 lb_n } 
						inc_x lb_n ⊢ { lb1 lb_n } 
						inc_x lb_n ⊢ { lb2 lb_n } 
						^ lb0,lb1,lb2 ⊢ _,_,_,sc0 
							"\tjmp LB_" 1d' "\n" 
							"LB_" 0d' ":\n" 
							`	add rax,1 
							"LB_" 1d' ":\n" 
							`	cmp rax,rdi
							"\tjge LB_" 2d' "\n" 
							"\tJZ_LINE_SPC BYTE [rsi+rax], LB_" 0d' "\n"  
							"LB_" 2d' ":\n" 
							`	mov rsi,unt
							`	mov r10,0
							//
						asm.add_s8 { ec0 sc0 } ⊢ ec0 
						∎ { evv lb_n ec0 RP.unt◂{} }
					∐. . 
						_emt %[ "grm_axm 0" ] ⊢ _ 
						_emt ax ⊢ _ 
						\\_emt axl ⊢ _ 
						lst.pnt_l◂◂{ ast.pnt.ct_ptn " " } { evv axl } ⊢ { evv ee }
						_emt ee ⊢ _ 
						∎| 
			¶ 
				@.rt_id = _r64 
				@.rt_atm r',e' 	
					∐ hp : { r' ast.hp.t }
					∐ hp_im : ast.cst◂e'  
					∐ btm : {} 
					∐ adt_v : adt_v
					∐ rt_usr : { rt_id rt◂r'◂e' } 
				@.adt_v = _r64 
				@.rt r',e' = RP.t◂(rt_atm◂r'◂e')
				@.adt r',e' 
					∐ stt : { _r64 _r64 rt◂r'◂e' } 
					∐ dyn : { { _r64 _lst◂type.t_p } r' r' }
			§§ MIRV = ast.IRV
			§§ RIRV 
				§ ini {} 
					bst.ini {} ⊢ rirv 
					∎ { %[ 0r ] rirv } 
				§ rpc = _rpc 
				§ push { p { rirv_n rirv } }
					inc_x rirv_n ⊢ { i rirv_n } 
					bst.set { rirv { i p } } ⊢ { rirv { i o } }  
					nnt o ⊢ {} 
					∎ { i { rirv_n rirv } }	
				§ asc { { rirv_n rirv } v } 
					bst.asc { rirv v } ⊢ { rirv { v o } }
					∎ { { rirv_n rirv } { v o } }	
				§ set = bst.set 
				§ get { { rirv_n rirv } i } 
					bst.get { rirv i } ⊢ { rirv { i v } } 
					∎ { { rirv_n rirv } { i v } }
				∎∎
			§ 
				@.mtc_rt_of { RV p } 
					$ p ⊢ 
					∐ RP.rcd◂l .
						lst.map_l◂◂mtc_rt_of { RV l } ⊢ { RV l } 
						∎ { RV RP.rcd◂l }
					∐. RP.atm◂a .
						$ a ⊢ 
						∐ ast.stt_adt◂{ ia na pa } . 
							mtc_rt_of { RV pa } ⊢ { RV pa } 

							RIRV.push { stt◂{ ia na pa } RV } ⊢ { i RV } 
							∎ { RV RP.atm◂adt_v◂i }
						∐ ast.dyn_adt◂da . 
							RIRV.push { dyn◂da RV } ⊢ { i RV } 
							∎ { RV RP.atm◂adt_v◂i }
						∐ ast.btm◂{} .
							∎ { RV RP.atm◂btm◂{} }
						∐ ast.rt_usr◂{ i p } . 
							mtc_rt_of { RV p } ⊢ { RV p }
							∎ { RV RP.atm◂rt_usr◂{ i p } } 							
						∐ ast.hp_im◂c . 
							∎ { RV RP.atm◂hp_im◂c }
						∐. ast.hp◂h . 
							∎ { RV RP.atm◂hp◂h }
			§ 
				@.rt_of { RV p }
					$ p ⊢ 
					∐ RP.rcd◂l .
						lst.map_l◂◂rt_of { RV l } ⊢ { RV l } 
						∎ { RV RP.rcd◂l }
					∐. RP.atm◂a .
						$ a ⊢ 
						∐ adt_v◂v . 
							RIRV.asc { RV v } ⊢ { RV { v o } } 
							smt_err◂◂"rt_of:0" o ⊢ d 
							$ d ⊢ 
							∐ stt◂{ ia na pa } . 
								rt_of { RV pa } ⊢ { RV pa } 
								∎ { RV RP.atm◂ast.stt_adt◂{ ia na pa } }
							∐. dyn◂da . 
								∎ { RV RP.atm◂ast.dyn_adt◂da }
						∐ rt_usr◂{ i p } . 
							rt_of { RV p } ⊢ { RV p }
							∎ { RV RP.atm◂ast.rt_usr◂{ i p } } 
						∐ btm◂{} .
							∎ { RV RP.atm◂ast.btm◂{} }
						∐ hp_im◂c . 
							∎ { RV RP.atm◂ast.hp_im◂c }
						∐. hp◂h . 
							∎ { RV RP.atm◂ast.hp◂h }
			§ mirv_of_i # { { mirv RV } { r p } } 
				mtc_rt_of { RV p } ⊢ { RV p } 
				MIRV.set { mirv { r p } } ⊢ { mirv { r o } } 
				nnt o ⊢ {} 
				∎ { mirv RV } 
			§ mirv_of = MIRV.fld◂◂mirv_of_i 
			§ irv_of_i # { { irv RV } { r p } } 
				rt_of { RV p } ⊢ { RV p } 
				ast.IRV.set { irv { r p } } ⊢ { irv { r o } } 
				nnt o ⊢ {} 
				∎ { irv RV } 
			§ irv_of = ast.IRV.fld◂◂irv_of_i
			
			§§ test
				¶ t 
					∐ e : {}
					∐ ne : {} 
					∐ ge : {}
					∐ le : {} 
					∐ g : {} 
					∐ l : {}   
				§ 
						@.cmp { lb_n evv mirv MV lb_t lb_f v0 v1 ec0 }
							$ v0 ⊢ 
							∐ ast.test_var◂i0 . 
								$ v1 ⊢ 
								∐ ast.test_cst◂c1 . 
									cmp_var_cst { bl.t◂{} i0 c1 lb_n evv mirv MV lb_t lb_f ec0 } ⊢| 
								∐. ast.test_var◂i1 . 
									MIRV.asc { mirv i0 } ⊢ { mirv { i0 p0 } } 
									MIRV.asc { mirv i1 } ⊢ { mirv { i1 p1 } }
									smt_err◂◂"test.cmp:0" p0 ⊢ p0 
									smt_err◂◂"test.cmp:1" p1 ⊢ p1 
									rt_of { MV p0 } ⊢ { MV p0 } 
									rt_of { MV p1 } ⊢ { MV p1 } 
									ast.r64_of_rt { evv p0 } ⊢ { evv x0 } 
									ast.r64_of_rt { evv p1 } ⊢ { evv x1 } 
									$ { x0 x1 } ⊢
									∐ { ast.hp_of◂r0 ast.hp_of◂r1 } .
										cmp.idx_idx { r0 r1 ec0 } ⊢ { _ _ ec0 } 
										jg_lb { lb_f ec0 } ⊢ { lb_f ec0 }
										jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 } 
										∎ { lb_n evv mirv MV lb_t lb_f ec0 }
									∐ { ast.hp_of◂r0 ast.im_of◂x1 } .
										cmp.idx_im { r0 x1 ec0 } ⊢ { _ _ ec0 } 
										jg_lb { lb_f ec0 } ⊢ { lb_f ec0 }
										jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 } 
										∎	{ lb_n evv mirv MV lb_t lb_f ec0 }
									∐ { ast.im_of◂x0 ast.hp_of◂r1 } . 
										cmp.idx_im { r1 x0 ec0 } ⊢ { _ _ ec0 } 
										jl_lb { lb_f ec0 } ⊢ { lb_f ec0 }
										jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 } 	
										∎ { lb_n evv mirv MV lb_t lb_f ec0 }									
									∐. { ast.im_of◂x0 ast.im_of◂x1 } . 
										∐ x0'=<x1' . 
											jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 } 
											∎ { lb_n evv mirv MV lb_t lb_f ec0 }
										∐. . 
											jmp_lb { lb_f ec0 } ⊢ { lb_f ec0 }
											∎ { lb_n evv mirv MV lb_t lb_f ec0 } 
							∐. ast.test_cst◂c0 . 
								$ v1 ⊢ 
								∐ ast.test_var◂i1 . 
									cmp_var_cst { bl.f◂{} i1 c0 lb_n evv mirv MV lb_t lb_f ec0 } ⊢| 
								∐. ast.test_cst◂c1 . 
									∎|
					@.cmp_var_r64 { bf p0 x1 lb_n evv mirv MV lb_t lb_f ec0 }
						ast.r64_of_rt { evv p0 } ⊢ { evv x0 } 
						$ x0 ⊢ 
						∐ ast.hp_of◂r0 . 
							cmp.idx_im { r0 x1 ec0 } ⊢ { r0 x1 ec0 }
							$ bf ⊢ 
							∐ bl.t◂{} . 
								jg_lb { lb_f ec0 } ⊢ { lb_f ec0 } 
								jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 }	
								∎ { lb_n evv mirv MV lb_t lb_f ec0 }
							∐. bl.f◂{} . 
								jl_lb { lb_f ec0 } ⊢ { lb_f ec0 } 
								jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 }
								∎ { lb_n evv mirv MV lb_t lb_f ec0 }
						∐. ast.im_of◂x0 . 
							setge { x1 x0 } ⊢ { x1 x0 bc } 
							∐ bf ⊢ bl.t◂{}; bc'=1r . 
								jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 }
								∎ { lb_n evv mirv MV lb_t lb_f ec0 }
							∐ bf ⊢ bl.f◂{}; bc'=0r . 
								jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 }
								∎ { lb_n evv mirv MV lb_t lb_f ec0 }
							∐. . 
								jmp_lb { lb_f ec0 } ⊢ { lb_f ec0 }
								∎ { lb_n evv mirv MV lb_t lb_f ec0 }
					@.cmp_var_cst { bf i0 c1 lb_n evv mirv MV lb_t lb_f ec0 }
						∐ c1 ⊢ ast.k_name◂i1 .
							EVV.lod_evv { evv i1 } ⊢ { evv i1 c1 } 
							cmp_var_cst { bf i0 c1 lb_n evv mirv MV lb_t lb_f ec0 } ⊢|
						∐. . 
							MIRV.asc { mirv i0 } ⊢ { mirv { i0 p0 } }
							smt_err◂◂"cmp_var_cst:0" p0 ⊢ p0 
							rt_of { MV p0 } ⊢ { MV p0 } 
							∐ c1 ⊢ ast.k_r64◂x1 . 
								cmp_var_r64 { bf p0 x1 lb_n evv mirv MV lb_t lb_f ec0 } ⊢| 
							∐ c1 ⊢ ast.k_s8◂s1 . 
								$ %[ "ret_f D682" ] ⊢ ee0 
								_emt ee0 ⊢ _ 
								∎| 
							∐. . 
								$ %[ "ret_f D983" ] ⊢ ee0 
								_emt ee0 ⊢ _ 
									∎|
				§ 
					@.eq { be lb_n evv mirv MV lb_t lb_f v0 v1 ec0 }
						$ v0 ⊢ 
						∐ ast.test_var◂i0 . 
							$ v1 ⊢ 
							∐ ast.test_cst◂c1 . 
								eq_var_cst { be i0 c1 lb_n evv mirv MV lb_t lb_f ec0 } ⊢|
							∐. ast.test_var◂i1 . 
								MIRV.asc { mirv i0 } ⊢ { mirv { i0 p0 } } 
								MIRV.asc { mirv i1 } ⊢ { mirv { i1 p1 } }
								smt_err◂◂"eq:1" p0 ⊢ p0 
								smt_err◂◂"eq:2" p1 ⊢ p1 
								rt_of { MV p0 } ⊢ { MV p0 } 
								rt_of { MV p1 } ⊢ { MV p1 } 
								∐ p0 ⊢ RP.atm◂a0; a0 ⊢ ast.hp◂{ r0 h0 } .
									∐ p1 ⊢ RP.atm◂a1; a1 ⊢ ast.hp◂{ r1 h1 } .
										∐ h0 ⊢ ast.hp.r64◂{} . 
											cmp.idx_idx { r0 r1 ec0 } ⊢ { _ _ ec0 } 
											jz_bl_lb { be lb_f ec0 } ⊢ { lb_f ec0 }		
											jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 } 
											∎ { lb_n evv mirv MV lb_t lb_f ec0 }
										∐ h0 ⊢ ast.hp.opq◂_ . 
											^ r0,r1 ⊢ _,_,e0 
												"\tmov rdi,GLX(" 1d' ")\n"
												"\tmov rsi,GLX(" 0d' ")\n" 
												`	call eq_s8_q  
												"\tcmp rax,1\n" // 
											asm.add_s8 { ec0 e0 } ⊢ ec0 
											jz_bl_lb { be lb_f ec0 } ⊢ { lb_f ec0 }		
											jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 }
											∎ { lb_n evv mirv MV lb_t lb_f ec0 }
										∐ h0 ⊢ ast.hp.id◂_ . 
											cmp.idx_idx { r0 r1 ec0 } ⊢ { _ _ ec0 } 
											jz_bl_lb { be lb_f ec0 } ⊢ { lb_f ec0 }		
											jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 } 
											∎ { lb_n evv mirv MV lb_t lb_f ec0 }												 
										∐. . 
											$ %[ "ret_f D683" ] ⊢ ee0 
											_emt ee0 ⊢ _ 
											∎| 
									∐ p1 ⊢ RP.atm◂a1; a1 ⊢ ast.hp_im◂iv; iv ⊢ ast.k_r64◂x1 .
										cmp.idx_im { r0 x1 ec0 } ⊢ { _ _ ec0 } 
										jz_bl_lb { be lb_f ec0 } ⊢ { lb_f ec0 }		
										jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 } 
										∎ { lb_n evv mirv MV lb_t lb_f ec0 }
									∐. . 
										$ %[ "ret_f D674" ] ⊢ ee0 
										_emt ee0 ⊢ _ 
										∎|												
								∐ p0 ⊢ RP.atm◂a0; a0 ⊢ ast.hp_im◂iv; iv ⊢ ast.k_r64◂x0 . 
									∐ p1 ⊢ RP.atm◂a1; a1 ⊢ ast.hp◂{ r1 h1 } .
										cmp.idx_im { r1 x0 ec0 } ⊢ { _ _ ec0 } 
										jz_bl_lb { be lb_f ec0 } ⊢ { lb_f ec0 }		
										jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 } 
										∎ { lb_n evv mirv MV lb_t lb_f ec0 }
									∐ p1 ⊢ RP.atm◂a1; a1 ⊢ ast.hp_im◂iv; iv ⊢ ast.k_r64◂x1 .
										∐ x0'=x1' . 
											jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 }
											∎ { lb_n evv mirv MV lb_t lb_f ec0 } 
										∐. . 
											jmp_lb { lb_f ec0 } ⊢ { lb_f ec0 }
											∎ { lb_n evv mirv MV lb_t lb_f ec0 } 
									∐. . 
										$ %[ "ret_f D675" ] ⊢ ee0 
										_emt ee0 ⊢ _ 
										∎| 	
								∐. . 
									$ %[ "ret_f D676" ] ⊢ ee0 
									_emt ee0 ⊢ _ 
									∎| 	
						∐. ast.test_cst◂c0 . 
							$ v1 ⊢ 
							∐ ast.test_var◂i1 . 
								eq_var_cst { be i1 c0 lb_n evv mirv MV lb_t lb_f ec0 } ⊢|
							∐. ast.test_cst◂c1 . 
								∎|	
					@.eq_var_cst { be i0 c1 lb_n evv mirv MV lb_t lb_f ec0 }
						∐ c1 ⊢ ast.k_name◂i1 . 
							EVV.lod_evv { evv i1 } ⊢ { evv _ c1 }
							eq_var_cst { be i0 c1 lb_n evv mirv MV lb_t lb_f ec0 } ⊢|						 
						∐. . 
							MIRV.asc { mirv i0 } ⊢ { mirv { i0 p0 } } 
							smt_err◂◂"eq:0" p0 ⊢ p0 
							rt_of { MV p0 } ⊢ { MV p0 } 
							∐ c1 ⊢ ast.k_r64◂x1 . 
								ast.r64_of_rt { evv p0 } ⊢ { evv x0 } 
								$ x0 ⊢ 
								∐ ast.hp_of◂r0 .
									cmp.idx_im { r0 x1 ec0 } ⊢ { _ _ ec0 } 
									jz_bl_lb { be lb_f ec0 } ⊢ { lb_f ec0 }		
									jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 } 
									∎ { lb_n evv mirv MV lb_t lb_f ec0 }
								∐. ast.im_of◂x0 . 
									∐ x0'=x1' . 
										$ { x0 x1 } ⊢ _ 
										jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 } 
										∎ { lb_n evv mirv MV lb_t lb_f ec0 }
									∐. . 
										$ { x0 x1 } ⊢ _ 
										jmp_lb { lb_f ec0 } ⊢ { lb_f ec0 } 
										∎ { lb_n evv mirv MV lb_t lb_f ec0 }
							∐ c1 ⊢ ast.k_s8◂s1 . 
								$ %[ "ret_f D679" ] ⊢ ee0 
								_emt ee0 ⊢ _ 
								∎|
							∐. .
								$ %[ "ret_f D780" ] ⊢ ee0 
								_emt ee0 ⊢ _ 
								∎|
					
					∎∎
				§ suw { lb_w rsp } 
					$ rsp ⊢ rsp,x 
					_inc x ⊢ x 
					_shl { x %[ 3r ] } ⊢ { x _ } 
					^ lb_w,x ⊢ lb_w,_,s 
						"EXH_" 0d' ":\n" 
						"\tadd rsp," 1d' "\n" 
						"\tpop rax\n" 
						"\tjmp rax\n" // 
					$ asm.of_s8◂s ⊢ e 
					∎ { lb_w rsp e }
				§ exh { ox lb_w nb l } 
					$ ox ⊢ 
					∐ _some◂lb_x . 
						^ lb_w ⊢ _,sc0 
							"EXH_" 0d' ":\n" // 
						$ asm.of_s8◂sc0 ⊢ e  
						pop_regs.exh { nb l } ⊢ { _ e1 }
						asm.cct { e e1 } ⊢ e 
						^ lb_x ⊢ _,s 
							"\tjmp LB_" 0d' "\n" // 
						asm.add_s8 { e s } ⊢ e 
						∎ e
					∐. _none◂{} . 
						_imul { nb %[ 8r ] } ⊢ { nb _ } 
						suw { lb_w nb } ⊢ { _ _ e } 
						∎ e 
				
				§ @.push_gl { l c } 
					$ l ⊢ 
					∐ _cns◂{ i l } .
						_inc c ⊢ c 
						push_gl { l c } ⊢ { c l e } 
						_dec c ⊢ c 
						^ i,c ⊢ i,c,s 
							"\tMOV_RDI QWORD [rsp+8*" 1d' "],GLX(" 0d' ")\n" // 
						asm.add_s8 { e s } ⊢ e 
						∎ { c ⟦ i < l ⟧ e }
					∐. _nil◂{} . 
						^ c ⊢ c,s 
							"\tlea rsp,[rsp-8*" 0d' "]\n" // 
						$ asm.of_s8◂s ⊢ e 
						∎ { c ⟦⟧ e }
					
				§ @.pop_gl { e l } 
					$ l ⊢ 
					∐ _cns◂{ j l } . 
						^ j ⊢ _,s 
							"\tpop GLX(" 0d' ")\n" // 
						asm.add_s8 { e s } ⊢ e 
						pop_gl { e l } ⊢| 
					∐. _nil◂{} . 
						∎ e 
				§ min_rfv { b0 b1 }
					$ b0 ⊢ 
					∐ _some◂l0 . 
						$ b1 ⊢ 
						∐ _some◂l1 . 
							min { l0 l1 } ⊢ { _ _ l2 }
							∎ _some◂l2 
						∐. _none◂{} . 
							∎ ‹ l0 › 
					∐. _none◂{} . 
						∎ b1  
				§ gnr_rfv { rfv o rfb rfb_g } 
					$ rfb_g ⊢ 
					∐ _some◂l . 
						∐ l'=o' . 
							hsh_tbl.r64.set { rfv { o rf_t◂l } } ⊢ { rfv { o _ } } 
							∎ { bl.t◂{} rfv o rfb %[ ";; rfb=t\n" ] }
						∐. . 
							$ l ⊢ l,l1 
							min_rfv { rfb ‹ l1 › } ⊢ rfb 
							hsh_tbl.r64.set { rfv { o rf_t◂l } } ⊢ { rfv { o _ } } 
							∎ { bl.t◂{} rfv o rfb %[ ";; rfb=t\n" ] }
					∐. _none◂{} . 
						hsh_tbl.r64.set { rfv { o rf_f◂{} } } ⊢ { rfv { o _ } } 
						∎ { bl.f◂{} rfv o rfb %[ ";; rfb=f\n" ] }					
				§ @.chk_rec { rfv o }
					hsh_tbl.r64.asc { rfv o } ⊢ { rfv { o k } }
					smt k ⊢ k 
					$ k ⊢ 
					∐ rf_k◂{} . 
						∎ { rfv ‹ o › bl.t◂{} }
					∐ rf_t◂o1 . 
						∐ o'=o1' . 
							∎ { rfv ‹› bl.f◂{} } 
						∐. . 
							chk_rec { rfv o1 } ⊢| 
					∐. rf_f◂{} . 
						∎ { rfv ‹› bl.f◂{} }
				§ dlt_wl_i # { irv wr }
					ast.IRV.get { irv wr } ⊢ { irv { wr o } }
					smt_err◂◂"dlt_wl:0" o ⊢ _ 
					∎ irv
				§ dlt_wl = lst.fld_l◂◂dlt_wl_i
			
			§ nx_m = ast.nx_m 
			§ nx_e = ast.nx_e 
			§ p = ast.p
			
			§ 
				@.csm { { evv mirv RV } s } 
					$ s ⊢ 
					∐ ast.re_v◂c . 
						∎ { { evv mirv RV } RP.atm◂hp_im◂c }
					∐ ast.re_agl◂{ e sp } . 
						csm_ptn { { evv mirv RV } sp } ⊢ { { evv mirv RV } ip } 
						EVV.lod_evv { evv e } ⊢ { evv e k1 } 
						ast.ctr_of_k { evv k1 } ⊢ { evv { ia1 na1 vi } }	
						RIRV.push { stt◂{ ia1 na1 ip } RV } ⊢ { r RV } 
						∎ { { evv mirv RV } RP.atm◂adt_v◂r }
					∐. ast.re_reg◂r . 
						MIRV.asc { mirv r } ⊢ { mirv { r o } } 
						smt_err◂◂"csm:re_reg" o ⊢ ip 
						∎ { { evv mirv RV } ip } 
				@.csm_ptn = RP.map_l_atm◂◂csm	
			§ 
				@.csm_tpl { mirv r } 
					MIRV.asc { mirv r } ⊢ { mirv { r o } } 
					smt_err◂◂"csm:re_reg" o ⊢ ip 
					∎ { mirv ip } 
				@.csm_tpl_ptn = RP.map_l_atm◂◂csm_tpl	
			§ alc_hp { RV tv tav glv_n e0 r h } 
				alc_type_k.f_o { tav tv %[ 0r ] h } ⊢ { tav tv c_n pa0 }				
				∐ pa0 ⊢ _some◂pa0 .
				  ∐ c_n'=0r . 
				  	mtc_rt_of { RV pa0 } ⊢ { RV pa1 } 					
				  	∎ { RV tv tav glv_n e0 ‹ pa1 › }  
			  	∐ c_n'=1r . 
			  		lod_sgm.ptn_1 { { e0 glv_n r } pa0 } ⊢ { { e0 glv_n _ } pa1 } 
			  		mtc_rt_of { RV pa1 } ⊢ { RV pi } 					
			  		∎ { RV tv tav glv_n e0 ‹ pi › }  
			  	∐. . 
			  		^ r ⊢ _,sc0
			  			`	push SRC_REG 
			  			"\tmov SRC_REG,GLX(" 0d' ")\n" 
			  			`	add SRC_REG,8
			  			//
			  		asm.add_s8 { e0 sc0 } ⊢ e0
			  		lod_sgm.ptn { { e0 glv_n } pa0 } ⊢ { { e0 glv_n } pa1 } 
			  		^ c_n ⊢ _,sc0 
			  			`	sub SRC_REG,8 
			  			`	mov rdi,SRC_REG  
			  			"\tFREE_RCD " 0d' ",rdi\n"
			  			`	pop SRC_REG 
			  			//
			  		asm.add_s8 { e0 sc0 } ⊢ e0 
			  		mtc_rt_of { RV pa1 } ⊢ { RV pi } 					
			  		∎ { RV tv tav glv_n e0 ‹ pi › }  
		  	∐. . 
		  		∎ { RV tv tav glv_n e0 ‹› }  
			§ stt_alc_hp { tv tav glv_n e0 r h } 
				alc_type_k.f_o { tav tv %[ 0r ] h } ⊢ { tav tv c_n pa0 }				
				∐ pa0 ⊢ _some◂pa0 .
				  ∐ c_n'=0r . 
				  	∎ { tv tav glv_n e0 ‹ pa0 › }  
			  	∐ c_n'=1r . 
			  		lod_sgm.ptn_1 { { e0 glv_n r } pa0 } ⊢ { { e0 glv_n _ } pa1 } 
			  		∎ { tv tav glv_n e0 ‹ pa1 › }  
			  	∐. . 
			  		^ r ⊢ _,sc0
			  			`	push SRC_REG 
			  			"\tmov SRC_REG,GLX(" 0d' ")\n" 
			  			`	add SRC_REG,8
			  			//
			  		asm.add_s8 { e0 sc0 } ⊢ e0
			  		lod_sgm.ptn { { e0 glv_n } pa0 } ⊢ { { e0 glv_n } pa1 } 
			  		^ c_n ⊢ _,sc0 
			  			`	sub SRC_REG,8 
			  			`	mov rdi,SRC_REG  
			  			"\tFREE_RCD " 0d' ",rdi\n"
			  			`	pop SRC_REG 
			  			//
			  		asm.add_s8 { e0 sc0 } ⊢ e0 
			  		∎ { tv tav glv_n e0 ‹ pa1 › }  
		  	∐. . 
		  		∎ { tv tav glv_n e0 ‹› }
			
			§ stt_jmp_axm { ec0 evv tav tv eds glv_n p1 fc }
				$ fc ⊢ 
				∐ { _ f_call◂_ } . 
					∎ { ec0 evv tav tv eds glv_n p1 } 
				∐. { lbi f_jmp◂pr } . 
					$ pr ⊢ pr,pr0 
					mov_ptn2.ptn { ec0 { evv tav tv eds } glv_n p1 pr0 } ⊢ { ec0 { evv tav tv eds } glv_n } 
					ret ec0 ⊢ ec0 
					∎ { ec0 evv tav tv eds glv_n pr } 
			§ stt_lds { evv glv_n lb_n ec0 eds is }
						∐ is ⊢ RP.rcd◂l; l ⊢ _cns◂{ p0 l }; l ⊢ _cns◂{ p1 l }; l ⊢ _nil◂{} .  
							ast.s8_of_rt { evv p0 } ⊢ { evv s } 
							ast.r64_of_rt { evv p1 } ⊢ { evv x } 
							$ s ⊢ 
							∐ ast.hp_of◂r0 .
								inc_x glv_n ⊢ { m0 glv_n } 
								$ x ⊢ 
								∐ ast.hp_of◂r1 .
									^ r0,r1,m0 ⊢ r0,r1,m0,sc0 
										"\tmov rdi,GLX(" 0d' ")\n" 
										"\tmov rsi,GLX(" 1d' ")\n" 
										"\tmov rax,0x0000_ffff_ffff_ffff\n" 
										"\tand rax,QWORD [rdi]\n" 
										"\tcmp rsi,rax\n" 
										"\tjge err_bc\n" 
										\\`	BC ge,rax 
										"\tmovzx rax,BYTE [rdi+8+rsi]\n" 
											"\tmov GLX(" 2d' "),rax\n" //
									asm.add_s8 { ec0 sc0 } ⊢ ec0 
									$ RP.cns3◂{ stt_v.s8_reg◂r0 stt_v.r64_reg◂r1 stt_v.r64_reg◂m0 } ⊢ iy  
									∎ { evv glv_n lb_n ec0 eds iy } 
								∐. ast.im_of◂x .  
									^ r0,x,m0 ⊢ r0,x,m0,sc0 
										"\tmov rdi,GLX(" 0d' ")\n" 
										"\tmov rax,0x0000_ffff_ffff_ffff\n" 
										"\tand rax,QWORD [rdi]\n" 
										"\tcmp rax," 1d' "\n" 
										\\"\tjle err_bc\n" 
										`	BC le,rax 
										"\tmovzx rax,BYTE [rdi+8+" 1d' "]\n" 
										"\tmov GLX(" 2d' "),rax\n" //
									asm.add_s8 { ec0 sc0 } ⊢ ec0 
									$ RP.cns3◂{ stt_v.s8_reg◂r0 stt_v.r64_im◂x stt_v.r64_reg◂m0 } ⊢ iy  
									∎ { evv glv_n lb_n ec0 eds iy } 
							∐. ast.im_of◂s . 
								$ x ⊢ 
								∐ ast.hp_of◂r1 . 
									inc_x glv_n ⊢ { m0 glv_n } 
									_s8_len s ⊢ { s ls } 
									inc_x lb_n ⊢ { lb0 lb_n } 
									data_s8 { eds lb0 s } ⊢ { eds lb0 s } 
									^ ls,lb0,r1,m0 ⊢ _,_,r1,m0,sc0 
										"\tmov rsi,GLX(" 2d' ")\n" 
										"\tcmp rsi," 0d' "\n" 
										\\"\tjge err_bc\n" 
										`	BC ge,rax
										"\tmovzx rax,BYTE [LB_" 1d' "+rsi]\n" 
										"\tmov GLX(" 3d' "),rax\n" //
									asm.add_s8 { ec0 sc0 } ⊢ ec0 
									$ RP.cns3◂{ stt_v.s8_im◂ s stt_v.r64_reg◂r1 stt_v.r64_reg◂m0 } ⊢ iy  
									∎ { evv glv_n lb_n ec0 eds iy } 
								∐. ast.im_of◂x . 
									_lds { s x } ⊢ { s x c } 
									$ RP.cns3◂{ stt_v.s8_im◂s stt_v.r64_im◂x stt_v.r64_im◂c } ⊢ iy  
									∎ { evv glv_n lb_n ec0 eds iy } 
							∐. . 
								$ %[ "op_axm lds 0" ] ⊢ ee0 
								_emt ee0 ⊢ _ 
								∎| 
					§ stt_lds64 { evv glv_n lb_n ec0 eds is }
						∐ is ⊢ RP.rcd◂l; l ⊢ _cns◂{ p0 l }; l ⊢ _cns◂{ p1 l }; l ⊢ _nil◂{} .  
							ast.s8_of_rt { evv p0 } ⊢ { evv s } 
							ast.r64_of_rt { evv p1 } ⊢ { evv x } 
							$ s ⊢ 
							∐ ast.hp_of◂r0 .
								inc_x glv_n ⊢ { m0 glv_n } 
								$ x ⊢ 
								∐ ast.hp_of◂r1 .
									^ r0,r1,m0 ⊢ r0,r1,m0,sc0 
										"\tmov rdi,GLX(" 0d' ")\n" 
										"\tmov rsi,GLX(" 1d' ")\n" 
										"\tmov rax,0x0000_ffff_ffff_ffff\n" 
										"\tand rax,QWORD [rdi]\n" 
										`	sub rax,7 
										"\tcmp rsi,rax\n" 
										\\"\tjge err_bc\n" 
										`	BC ge,rax
										"\tmov rax,QWORD [rdi+8+rsi]\n" 
										"\tmov GLX(" 2d' "),rax\n" //
									asm.add_s8 { ec0 sc0 } ⊢ ec0 
									$ RP.cns3◂{ stt_v.s8_reg◂r0 stt_v.r64_reg◂r1 stt_v.r64_reg◂m0 } ⊢ iy  
									∎ { evv glv_n lb_n ec0 eds iy }
								∐. ast.im_of◂x .  
									^ r0,x,m0 ⊢ r0,x,m0,sc0 
										"\tmov rdi,GLX(" 0d' ")\n" 
										"\tmov rax,0x0000_ffff_ffff_ffff\n" 
										"\tand rax,QWORD [rdi]\n" 
										`	sub rax,7
										"\tcmp rax," 1d' "\n" 
										"\tjle err_bc\n" 
										"\tmov rax,QWORD [rdi+8+" 1d' "]\n" 
										"\tmov GLX(" 2d' "),rax\n" //
									asm.add_s8 { ec0 sc0 } ⊢ ec0 
									$ RP.cns3◂{ stt_v.s8_reg◂r0 stt_v.r64_im◂x stt_v.r64_reg◂m0 } ⊢ iy  
									∎ { evv glv_n lb_n ec0 eds iy }
							∐. ast.im_of◂s . 
								inc_x glv_n ⊢ { m0 glv_n } 
								$ x ⊢ 
								∐ ast.hp_of◂r1 . 
									_s8_len s ⊢ { s ls } 
									inc_x lb_n ⊢ { lb0 lb_n } 
									data_s8 { eds lb0 s } ⊢ { eds lb0 s } 
									_sub { ls %[ 7r ] } ⊢ { ls _ } 
									^ ls,lb0,r1,m0 ⊢ _,_,r1,m0,sc0 
										"\tmov rsi,GLX(" 2d' ")\n" 
										"\tcmp rsi," 0d' "\n" 
										"\tjge err_bc\n" 
										"\tmov rax,QWORD [LB_" 1d' "+rsi]\n" 
										"\tmov GLX(" 3d' "),rax\n" //
										asm.add_s8 { ec0 sc0 } ⊢ ec0 
										$ RP.cns3◂{ stt_v.s8_im◂s stt_v.r64_reg◂r1 stt_v.r64_reg◂m0 } ⊢ iy  
										∎ { evv glv_n lb_n ec0 eds iy }
									∐. ast.im_of◂x . 
										_s8_len s ⊢ { s ls } 
										inc_x lb_n ⊢ { lb0 lb_n } 
										data_s8 { eds lb0 s } ⊢ { eds lb0 s } 
										_sub { ls %[ 7r ] } ⊢ { ls _ } 
										^ ls,lb0,x,m0 ⊢ _,_,x,m0,sc0 
											"\tmov rsi," 2d' "\n" 
											"\tcmp rsi," 0d' "\n" 
											"\tjge err_bc\n" 
											"\tmov rax,QWORD [LB_" 1d' "+rsi]\n" 
											"\tmov GLX(" 3d' "),rax\n" //
										asm.add_s8 { ec0 sc0 } ⊢ ec0 
										$ RP.cns3◂{ stt_v.s8_im◂s stt_v.r64_im◂x stt_v.r64_reg◂m0 } ⊢ iy  
										∎ { evv glv_n lb_n ec0 eds iy }
							∐. . 
								$ %[ "op_axm lds 0" ] ⊢ ee0 
								_emt ee0 ⊢ _ 
								∎| 
					§ stt_s8_len { evv glv_n ec0 is } 
						ast.s8_of_rt { evv is } ⊢ { evv s0 } 
						$ s0 ⊢ 
						∐ ast.im_of◂s0 . 
							_s8_len s0 ⊢ { s0 l0 } 
							$ RP.cns2◂{ stt_v.s8_im◂s0 stt_v.r64_im◂l0 } ⊢ iy 
							∎ { evv glv_n ec0 iy } 
						∐. ast.hp_of◂r0 . 
							inc_x glv_n ⊢ { rm0 glv_n } 
							^ r0,rm0 ⊢ r0,rm0,sc0 
								"\tmov rdi,GLX(" 0d' ")\n" 
								`	mov rsi,0x0000_ffff_ffff_ffff
								`	and rsi,QWORD [rdi] 
								"\tmov GLX(" 1d' "),rsi\n" // 
							asm.add_s8 { ec0 sc0 } ⊢ ec0 
							$ RP.cns2◂{ stt_v.s8_reg◂r0 stt_v.r64_reg◂rm0 } ⊢ iy 
							∎ { evv glv_n ec0 iy } 
					§ stt_s8_hsh { evv glv_n ec0 is } 
						ast.s8_of_rt { evv is } ⊢ { evv s0 } 
						$ s0 ⊢ 
						∐ ast.im_of◂s0 . 
							_s8_hsh s0 ⊢ { s0 h } 
							$ RP.cns2◂{ stt_v.s8_im◂s0 stt_v.r64_im◂h } ⊢ iy 
							∎ { evv glv_n ec0 iy } 							
						∐. ast.hp_of◂r0 . 
							inc_x glv_n ⊢ { rm0 glv_n } 
							^ r0,rm0 ⊢ r0,rm0,sc0 
								"\tmov rdi,GLX(" 0d' ")\n" 
								`	call mm32 
								"\tmov GLX(" 1d' "),rax\n" // 
							asm.add_s8 { ec0 sc0 } ⊢ ec0 
							$ RP.cns2◂{ stt_v.s8_reg◂r0 stt_v.r64_reg◂rm0 } ⊢ iy 
							∎ { evv glv_n ec0 iy } 
					§ stt_emt_s8_to { evv glv_n lb_n ec0 eds is }
            ∐ is ⊢ RP.rcd◂_cns◂{ a0 _cns◂{ a1 _nil◂{} } } . 
							$ a0 ⊢ a0,a00 
							$ a1 ⊢ a1,a10 
							ast.s8_of_rt { evv a00 } ⊢ { evv fn }
							ast.s8_of_rt { evv a10 } ⊢ { evv sb0 }
							s8_to_rdi_rsi { eds ec0 lb_n fn } ⊢ { eds ec0 lb_n }
							asm.add_s8 { ec0 %[ "\tpush rsi\n" ] } ⊢ ec0  
							s8_to_rdi_rsi { eds ec0 lb_n sb0 } ⊢ { eds ec0 lb_n } 
							^ _ ⊢ sc0 
								`	mov rdx,rdi 
								`	pop rdi 
								`	C_CALL_SF emt_s8_to 
								// 
							asm.add_s8 { ec0 sc0 } ⊢ ec0 
							$ RP.cns2◂{ a0 a1 } ⊢ iy 
							∎ { evv glv_n lb_n ec0 eds iy }
							
							∐. . 
								$ %[ "emt_s8_to 0" ] ⊢ ee0 
								_emt ee0 ⊢ _ 
								∎| 
					§ stt_cd { evv glv_n lb_n ec0 eds is }
						ast.s8_of_rt { evv is } ⊢ { evv s0 } 
						$ s0 ⊢ 
						∐ ast.im_of◂s0 . 
							inc_x lb_n ⊢ { lb0 lb_n }
							data_s8 { eds lb0 s0 } ⊢ { eds lb0 s0 }
							^ lb0 ⊢ lb0,sc0 
								"\tmov rdi,LB_" 0d' "\n" 
								`	C_CALL_SF system 
								//	
							asm.add_s8 { ec0 sc0 } ⊢ ec0 
							$ stt_v.s8_im◂s0 ⊢ iy 
							∎ { evv glv_n lb_n ec0 eds iy }								 
						∐. ast.hp_of◂r0 . 
							mov.rdi_idx { r0 ec0 } ⊢ { r0 ec0 }
							^ _ ⊢ sc0 
								`	add rdi,8 
								`	C_CALL_SF system 
								//	
							asm.add_s8 { ec0 sc0 } ⊢ ec0 
							$ stt_v.s8_reg◂r0 ⊢ iy 
							∎ { evv glv_n lb_n ec0 eds iy }
					\[
					§ stt_exc_q { evv tav tv glv_n lb_n ec0 eds c_n pa0 y2_00 is }
						∐ is ⊢ RP.rcd◂l0; l0 ⊢ _cns◂{ a0 l0 }; l0 ⊢ _cns◂{ a1 l0 }; l0 ⊢ _cns◂{ a2 l0 }; l0 ⊢ _nil◂{} .
							ast.arr_of_rt { evv a0 } ⊢ { evv { r0 _ _ } } 
							$ r0 ⊢ r0,r0_0 
							$ stt_v.arr_reg◂{ r0_0 y2_00 } ⊢ a0
							$ a1 ⊢ a1,a1_0 
							r64_to_rax { evv a1_0 } ⊢ { evv sc0 } 
							asm.add_s8 { ec0 sc0 } ⊢ ec0 
							^ r0,c_n ⊢ r0,c_n,sc0 
								"\tmov rdi,GLX(" 0d' ")\n" 
								`	mov rsi,0x0000_ffff_ffff_ffff 
								`	and rsi,QWORD [rdi]
								`	cmp rax,rsi 
								`	jge err_exc_q
								"\t imul rax," 1d' "\n" 
								`	lea rdi,[rdi+8+8*rax]
								`	mov DST_REG,rdi 
								`	mov SRC_REG,rdi
								//
							asm.add_s8 { ec0 sc0 } ⊢ ec0 
							$ pa0 ⊢ pa0,pa0_0 
							lod_sgm.ptn { { ec0 glv_n } pa0_0 } ⊢ { { ec0 glv_n } pa1 } 
							mov_ptn2.to_sgm_ptn { ec0 { evv tav tv eds } glv_n a2 pa0 } ⊢ { ec0 { evv tav tv eds } glv_n } 
							$ RP.cns3◂{ a0 a1 pa1 } ⊢ iy
							∎ { evv tav tv glv_n lb_n ec0 eds iy }
						∐. .
							_emt %[ "exc_q D1" ] ⊢ _ 
							∎|
				\]
				§ stt_lod_q { gfl evv tav tv glv_n lb_n ec0 eds eg0 is }
					∐ is ⊢ RP.rcd◂_cns◂{ RP.atm◂aa0 _cns◂{ a1 _nil◂{} } } .
						$ a1 ⊢ a1,a1_0
						r64_to_rax { evv a1_0 } ⊢ { evv sc0 } 
						asm.add_s8 { ec0 sc0 } ⊢ ec0 
						$ aa0 ⊢ aa0,aa00 
						$ RP.atm◂aa0 ⊢ a0
						∐ aa00 ⊢ ast.hp◂{ r0 h0 }; h0 ⊢ ast.hp.arr◂{ ya0 _ } . 
							$ ya0 ⊢ ya0,ya0_0,ya2
							alc_type_k.f_i { tav tv %[ 0r ] ya0 } ⊢ { tav tv c_n pa0 }
							^ r0,c_n ⊢ r0,c_n,sc0 
								"\tmov rdi,GLX(" 0d' ")\n"
								`	mov rsi,0x0000_ffff_ffff_ffff 
								` mov rbx,QWORD [rdi] 
                `	and rsi,rbx
								`	cmp rax,rsi 
								`	jge err_lod_q 
								`	BC ge,rsi
								"\tmov rbx," 1d' "\n" 
                ` imul rax,rbx
								`	lea rdi,[rdi+8+8*rax]
								"\tmov SRC_REG,rdi\n"
								//
							asm.add_s8 { ec0 sc0 } ⊢ ec0 
							lod_sgm.ptn { { ec0 glv_n } pa0 } ⊢ { { ec0 glv_n } pa1 } 
							rpc.ptn { gfl ⟦⟧ tv tav evv lb_n glv_n pa1 { eds ec0 } } ⊢ { gfl fl tv tav evv lb_n glv_n pa2 { eds ec0 } }					
							rpc.adt_lp { gfl fl tv tav evv lb_n glv_n { eds eg0 } } ⊢ { gfl tv tav evv lb_n glv_n { eds eg0 } }
							$ RP.cns3◂{ a0 a1 pa2 } ⊢ iy 
							∎ { gfl evv tav tv glv_n lb_n ec0 eds eg0 iy }
						∐. . 
							$ %[ "lod_q 0" ] ⊢ ee0 
							_emt ee0 ⊢ _ 
							∎| 
					∐. . 
						$ %[ "lod_q 1" ] ⊢ ee0 
						_emt ee0 ⊢ _ 
						∎|
				§ stt_arr_len { evv glv_n ec0 is }
					∐ is ⊢ RP.atm◂a0; a0 ⊢ ast.hp◂{ r0 h0 }; h0 ⊢ ast.hp.arr◂{ ha da } .
						inc_x glv_n ⊢ { rm0 glv_n } 
						^ r0,rm0 ⊢ r0,rm0,sc0 
							"\tmov rdi,GLX(" 0d' ")\n" 
							`	mov rsi,0x0000_ffff_ffff_ffff 
							` mov rax,QWORD [rdi] 
              `	and rsi,rax
							"\tmov GLX(" 1d' "),rsi\n" // 
						asm.add_s8 { ec0 sc0 } ⊢ ec0 
						$ RP.cns2◂{ RP.atm◂ast.hp◂{ r0 ast.hp.arr◂{ ha da } } stt_v.r64_reg◂rm0 } ⊢ iy 
						∎ { evv glv_n ec0 iy }
					∐. . 
						$ %[ "arr_len 0" ] ⊢ se 
						_emt se ⊢ se 
						∎|	 
				§ stt_in_fn { evv lb_n ec0 eds rm0 s0 }
					$ s0 ⊢ 
					∐ ast.hp_of◂r0 . 
						^ r0,rm0 ⊢ r0,rm0,sc0 
							"\tmov rdi,GLX(" 0d' ")\n" 
							`	add rdi,8
							`	CALL_SF in_fn
							"\tmov GLX(" 1d' "),rax\n" 
							// 
						asm.add_s8 { ec0 sc0 } ⊢ ec0
						$ RP.cns2◂{ stt_v.s8_reg◂r0 stt_v.s8_reg◂rm0 } ⊢ iy 
						∎ { evv lb_n ec0 eds iy }
					∐. ast.im_of◂s0 . 
						inc_x lb_n ⊢ { lb0 lb_n } 
						data_s8 { eds lb0 s0 } ⊢ { eds lb0 s0 }
						^ lb0,rm0 ⊢ lb0,rm0,sr 
							"\tmov rdi,LB_" 0d' "\n" 
							`	CALL_SF in_fn 
							"\tmov GLX(" 1d' "),rax\n" 
						//
						asm.add_s8 { ec0 sr } ⊢ ec0 
						$ RP.cns2◂{ stt_v.s8_im◂s0 stt_v.s8_reg◂rm0 } ⊢ iy 
						∎ { evv lb_n ec0 eds iy }
					§ stt_mlc_s8 { evv glv_n ec0 x } 
						$ x ⊢ 
						∐ ast.im_of◂l0 . 
							∐ l0'=<256r .
								_mlc_s8 l0 ⊢ { l0 s1 }   
								$ RP.cns2◂{ stt_v.r64_im◂l0 stt_v.s8_im◂s1 } ⊢ iy
								∎ { evv glv_n ec0 iy } 
							∐. . 
								inc_x glv_n ⊢ { rm0 glv_n } 
								^ l0,rm0 ⊢ l0,rm0,sc0 
									"\tmov rdi," 0d' "\n" 
									`	call mlc_s8
									"\tmov GLX(" 1d' "),rax\n" // 
								asm.add_s8 { ec0 sc0 } ⊢ ec0 
								$ RP.cns2◂{ stt_v.r64_im◂l0 stt_v.s8_reg◂rm0 } ⊢ iy 							
								∎ { evv glv_n ec0 iy } 
						∐. ast.hp_of◂r0 . 
							inc_x glv_n ⊢ { rm0 glv_n } 
							^ r0,rm0 ⊢ r0,rm0,sc0 
								"\tmov rdi,GLX(" 0d' ")\n" 
								`	call mlc_s8
								"\tmov GLX(" 1d' "),rax\n" // 
							asm.add_s8 { ec0 sc0 } ⊢ ec0 
							$ RP.cns2◂{ stt_v.r64_reg◂r0 stt_v.s8_reg◂rm0 } ⊢ iy 
							∎ { evv glv_n ec0 iy } 								
					\\[
					§ stt_oom { tav tv yd f_c } 
						$ f_c ⊢ 
						∐ { lbi f_call◂vl0 } . 
							alc_type_k.f_i { tav tv %[ 0r ] yd } ⊢ { tav tv _ pa0 }	
							$ pa0 ⊢ pa0,pr 
							∎ { tav tv { lbi f_call◂{ pa0 vl0 } } pr } 
						∐. { lbi f_jmp◂pr } . 
							$ pr ⊢ pr,pr0 
							∎ { tav tv { lbi f_jmp◂pr } pr0 }			
					§ stt_moo f_c 	
						$ f_c ⊢ 
						∐ { lbi f_call◂{ pr vl } } . 
							∎ pr 
						∐. { lbi f_jmp◂pr } . 
							∎ pr
					§ stt_og og 
						$ og ⊢ 
						∐ _some◂{ g k } . 
							∎ { ‹ g › ‹ k › } 
						∐. _none◂{} . 
							∎ { ‹› ‹› } 
					§ stt_og_r { og ok } 
						∐ og ⊢ _some◂g; ok ⊢ _some◂k . 
							∎ ‹ { g k } › 
						∐ og ⊢ _none◂{}; ok ⊢ _none◂{} . 
							∎ ‹› 
						∐. . 
							∎| 
					§ mov_ptn { lb0 lb1 glv_n E p0 p1 e }
						∐ lb0'=lb1' . 
							mov_ptn2.alc_ptn { { e glv_n } p0 } ⊢ { { e glv_n } p0 } 
							mov_ptn2.ptn { e E glv_n p0 p1 } ⊢ { e E glv_n }
							∎ { lb0 lb1 glv_n E e }
						∐. . 
							mov_ptn2.ptn { e E glv_n p0 p1 } ⊢ { e E glv_n }
							∎ { lb0 lb1 glv_n E e }
				¶ 
					@.mn e',m' 
						∐ nm_e : e' 
						∐ nm_m : p0◂e'◂m'
					@.p0 e',m' = _pt◂(p◂e'◂m') 
					@.p ◂ e',m' 
						∐ p : { m' _opn◂(p0◂e'◂m') _opn◂(mn◂e'◂m') _opn◂(mn◂e'◂m') }  
				¶ 
					@.m r',d'
						∐ stt_a : { _r64 _r64 mp◂r'◂d' }
						\\∐ dyn_a : { d' r' mp◂r'◂d' }
						∐ r : r' 
					@.mp r',d' = RP.t◂(m◂r'◂d')
				¶ mt 
					∐ mt_e : {} 
					∐ mt_ne : {} 
					∐ mt_le : {}
				¶ mop m' 
					∐ mop : m' 
					∐ mt : { mt m' }
			§§ RV = ast.RV 
			§ 
				@.rt_of_m { { RV evv } m } 
					$ m ⊢ 
					∐ stt_a◂{ i n mp } . 
						rt_of_mp { { RV evv } mp } ⊢ { { RV evv } p } 
						∎ { { RV evv } RP.atm◂ast.stt_adt◂{ i n p } }
					∐. r◂i . 
						RV.get { RV i } ⊢ { RV { _ p } } 
						smt p ⊢ p 
						∎ { { RV evv } p }

				@.rt_of_mp = RP.map_l_atm◂◂rt_of_m 	
			§ 
				@.rt_of_m_T◂◂GET { RV m } 
					$ m ⊢ 
					∐ stt_a◂{ i n mp } . 
						rt_of_mp_T◂◂GET { RV mp } ⊢ { RV p } 
						∎ { RV RP.atm◂ast.stt_adt◂{ i n p } }
					∐. r◂i . 
						GET { RV i } ⊢ { RV _ p } 
						\\smt p ⊢ p 
						∎ { RV p }
				@.rt_of_mp_T◂◂GET x 
					RP.map_l_atm◂◂(rt_of_m_T◂◂GET) x ⊢|
			
				
			¶ K l',a'
				∐ K_l : l' 
				∐ K_a : a'
			§ 
				@.subst_ply = RP.map_l_atm◂◂subst_ply_atm
				@.subst_ply_atm { { evv av } a }
					$ a ⊢ 
					∐ ast.re_reg◂i . 
						lod_tv { av i } ⊢ { av i p } 
						∎ { { evv av } p } 
					∐ ast.re_agl◂{ e sp } . 
						subst_ply { { evv av } sp } ⊢ { { evv av } p } 
						app_ctr { evv ast.k_name◂e p } ⊢ { evv p } 
						∎ { { evv av } p } 
					∐. ast.re_v◂c . 
						∎|
				@.app_ctr { evv k p } 
					∐ k ⊢ ast.k_ctr◂{ ia na _ } . 
						∎ { evv RP.atm◂stt_a◂{ ia na p } } 
					∐ k ⊢ ast.k_name◂i . 
						EVV.lod_evv { evv i } ⊢ { evv _ c } 
						app_ctr { evv c p } ⊢| 
					∐ k ⊢ ast.k_ply◂{ xp yp } . 
						mk_arr { %[ 64r ] _none◂{} } ⊢ { _ _ av } 
						idx.asc_ply { av { xp p } } ⊢ av
						subst_ply { { evv av } yp } ⊢ { { evv av } p } 
						∎ { evv p }
				∐. . 
					_emt %[ "evl_ctr 0" ] ⊢ _ 
					∎|
				
				§ 
					@.m_of_mtc { evv m } 
						$ m ⊢ 
						∐ ast.re_agl◂{ e mp } . 
							m_of_mp { evv mp } ⊢ { evv mp } 
							app_ctr { evv ast.k_name◂e mp } ⊢ { evv mp } 
							∎ { evv mp }
							\\∎| 
						∐ ast.re_reg◂i . 
							∎ { evv RP.atm◂r◂i }
						∐. ast.re_v◂_ . 
							∎|
					@.m_of_mp = RP.map_l_atm◂◂m_of_mtc
				§ @.ctr_of { evv mc } 
					∐ mc ⊢ RP.atm◂ast.k_ply◂{ x y } .	
						m_of_mp { evv y } ⊢ { evv y }
						∎ { evv { x y } } 
					∐ mc ⊢ RP.atm◂ast.k_ctr◂{ i n _ } . 
						∎ { evv { RP.atm◂%[ 0r ] RP.atm◂stt_a◂{ i n RP.atm◂r◂%[ 0r ] } } } 
					∐ mc ⊢ RP.atm◂ast.k_name◂v . 
						EVV.lod_evv { evv v } ⊢ { evv v c }
						ctr_of { evv RP.atm◂c } ⊢| 
						\\∎|
					∐. . 
						∎|
				§ mop_of { evv mo } 
					∐ mo ⊢ RP.atm◂ast.k_op_axm◂{ a _cns◂{ mc _nil◂{} } } . 
						∐ a'=EX.mop . 
							ctr_of { evv mc } ⊢ { evv mc }
							∎ { evv mop◂mc }
						∐ a'=EX.mt_e . 
							ctr_of { evv mc } ⊢ { evv mc }
							∎ { evv mt◂{ mt_e◂{} mc } }
						∐ a'=EX.mt_ne . 
							ctr_of { evv mc } ⊢ { evv mc }
							∎ { evv mt◂{ mt_ne◂{} mc } }
 						∐ a'=EX.mt_le . 
							ctr_of { evv mc } ⊢ { evv mc }
							∎ { evv mt◂{ mt_le◂{} mc } }
						∐. . 
							∎|
					∐. . 
						∎|
				§ @.mk_mtc { { VM evv tv rbp ys } m }
					∐ m ⊢ RP.atm◂ast.k_op_axm◂{ a la } . 
						∐ a'=EX.moo; la ⊢ _cns◂{ o _nil◂{} } . 
							∎ { VM evv tv ‹ nm_e◂{ ys o } › }
						∐ a'=EX.mcn . 
							∎ { VM evv tv ‹› }
						∐ a'=EX.mcp; la ⊢ _cns◂{ RP.rcd◂_cns◂{ mc _cns◂{ mt _cns◂{ mf _nil◂{} } } } _nil◂{} } . 
							_emt %[ "mk_mtc:D0" ] ⊢ _ 
							slv.ct_ptn { { %[ 1r ] evv tv } mc } ⊢ { { lv evv tv } mc yk }
							_emt %[ "mk_mtc:D1" ] ⊢ _ 
							T.inst { tv lv ys } ⊢ { tv lv ys }
							T.newvar_l { tv lv } ⊢ { tv lv yd } 
							_emt %[ "mk_mtc:D1:0" ] ⊢ _ 
							$ ys ⊢ ys,ys0
							$ yd ⊢ yd,yd0 
							T.unify.f { tv TX.t_mop◂{ ys0 yd0 } yk } ⊢ tv
							_emt %[ "mk_mtc:D1:1" ] ⊢ _ 
							_dec lv ⊢ lv 
							T.gen { tv lv yd } ⊢ { tv lv yd }
							T.gen { tv lv ys } ⊢ { tv lv ys }
							\\T.iug_ctr_s { tv lv ys yk } ⊢ { tv _ yd _ _ } 
							_emt %[ "mk_mtc:D2" ] ⊢ _ 
							_cln VM ⊢ { VM n0 } 
							$ n0 ⊢ n0,n1 
							\\$ yd ⊢ yd,yd0 
							mk_mtc { { VM evv tv ‹ n1 › yd } mt } ⊢ { VM evv tv p1 }
							$ rbp ⊢ rbp,rbp0 
							mk_mtc { { VM evv tv rbp0 ys } mf } ⊢ { VM evv tv pb } 
							mop_of { evv mc } ⊢ { evv mc } 
							_cls { VM n0 p◂{ mc rbp pb p1 } } ⊢ { VM n0 } 
							∎ { VM evv tv ‹ nm_m◂n0 › }							
						∐. . 	
							∎|
					∐. . 
						∎|
						
				§ 
					@.stt_etr { V rfv oa0 { og ok dp r_ng ibg } { o_n ys } { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } tav tv lcg { eg0 eds } } 
						$ oa0 ⊢ 
						∐ _some◂{ lb ig o_k gys p0 gyd p1 } . 
							$ rfv ⊢ { rfl rfb rfv } 
							$ ig ⊢ ig,ig0 
							chk_rec { rfv ig0 } ⊢ { rfv bf b }
							$ { lb ig o_k gys p0 gyd p1 } ⊢ IG 
							min_rfv { bf rfb } ⊢ rfb  
              ∎ { V b { rfl rfb rfv } IG { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } tav tv { eg0 eds } } 
						∐. _none◂{} . 
							\\$ ok ⊢ ok,ok0 
							\\$ og ⊢ og,og0 
							\\stt_og_r { og0 ok0 } ⊢ gk 
							\\ip.inl.gnr_inl { V evv gk lcg } ⊢ { V evv lcg } 
							$ ys ⊢ gys 
							$ ok ⊢ o_k 
							$ lcg ⊢ lc 							
							ast.RV.ini {} ⊢ rv_g
							slv.crt_tpl_ptn { { %[ 1r ] rv_g tv } dp } ⊢ { { lv_g rv_g tv } dp yd } 
							slv.r { V lv_g evv rv_g tv lc } ⊢ { V lv_g evv rv_g tv lc yrg } 
							T.inst.al { { tv lv_g ⟦⟧ } gys } ⊢ { { tv lv_g al } gys }
							T.inst.al { { tv lv_g al } yd } ⊢ { { tv lv_g al } yd }
							T.inst.al { { tv lv_g al } yrg } ⊢ { { tv lv_g _ } yrg }
							$ gys ⊢ gys,gys0 
							$ yd ⊢ yd,yd0 
							T.unify.f { tv gys0 yd0 } ⊢ tv
							_dec lv_g ⊢ lv_g 
							gen { tv lv_g yd } ⊢ { tv lv_g _ } 
							gen { tv lv_g yrg } ⊢ { tv lv_g yrg } 
							inc_x lb_n ⊢ { lbg lb_n } 
							$ gys ⊢ gys,gys0 
							alc_type_k.f_i { tav tv glv_n gys0 } ⊢ { tav tv glv_n p0 } 
							$ yrg ⊢ gyd,gyd0
							alc_type_k.f_i { tav tv %[ 0r ] gyd0 } ⊢ { tav tv d_n pr0 } 
							$ p0 ⊢ p0,p00 
							ast.pnt.rt { evv p00 } ⊢ { evv sp0 } 
							$ pr0 ⊢ pr0,pr00 
							ast.pnt.rt { evv pr00 } ⊢ { evv spr0 } 
							$ gys ⊢ gys,gys0 
							$ gyd ⊢ gyd,gyd0 

							$ TX.t_imp◂{ gys0 gyd0 } ⊢ yx
							T.pnt_type_k { tv yx } ⊢ { tv syx } 
							$ o_k ⊢ o_k,o_k0 
							opn.pnt◂◂ast.pnt.ct_ptn { evv o_k0 } ⊢ { evv so_k } 
							$ asm.e◂{} ⊢ ee0 
							^ lbg,o_n,sp0,spr0,syx,so_k ⊢ lbg,o_n,_,_,_,_,ec1 
								"LB_" 0d' ": ;; #" 1d' "◂◂(" 5' ") " 2' " ⊢ " 3' " : " 4' "\n" 
								"JMP_" 0d' ":\n" // 
							eml ec1 ⊢ ec1 
							asm.add_s8 { ee0 ec1 } ⊢ ee0 
							ast.IRV.ini {} ⊢ irv_g 
							$ p0 ⊢ p0,p0_f 
							idx.tpl_ptn { irv_g dp p0_f } ⊢ irv_g  
							$ rfv ⊢ { rfl rfb rfv } 
							inc_x ei_n ⊢ { o ei_n }
							hsh_tbl.r64.set { rfv { o rf_k◂{} } } ⊢ { rfv { o _ } }
							$ gyd ⊢ gyd,gyd0
							$ lbg ⊢ lbg,lbg0 
							$ o ⊢ o,o0 
							$ pr0 ⊢ pr0,pr00 
							$ { lbg o o_k gys p0 gyd0 pr00 } ⊢ R0,R1
							exc_q { mfv o_n ⟦⟧ } ⊢ { mfv o_n ol }
							exc_q { mfv o_n ⟦ R1 < ol ⟧ } ⊢ { mfv _ _ }
							$ { lbg0 pr0 gyd } ⊢ ft 
							_inc rfl ⊢ rfl 
							f { V { rfl ‹› rfv } { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } { rv_g irv_g } tav tv lc { eg0 eds ee0 asm.e◂{} } ft } ⊢ { V { rfl rfb_g rfv } { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } _ tav tv { eg0 eds ee0 ew0 } } 
							_dec rfl ⊢ rfl 
							gnr_rfv { rfv o0 rfb rfb_g } ⊢ { bf rfv o0 rfb sr0 }
							asm.cct { ee0 ew0 } ⊢ ee0 
							asm.cct { eg0 ee0 } ⊢ eg0 
							∎ { V bf { rfl rfb rfv } R0 { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } tav tv { eg0 eds } } 
					@.stt_jmp { V rfv ox f_c { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  irv tav tv { eg0 eds ec0 ew0 } { ys is o } } 
						ip.inl.evl_ct_ptn { { V evv } o } ⊢ { { V evv } k } 
						$ k ⊢ 
						∐ RP.rcd◂_ . 
							∎|  
						∐. RP.atm◂k . 
							∐ k ⊢ ast.k_ctr◂{ ia na _ } . 
								$ RP.atm◂ast.stt_adt◂{ ia na is } ⊢ iy 
								stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
								∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } iy } 
							∐ k ⊢ ast.k_ply◂{ p0 p1 } . 
								mk_arr { %[ 64r ] _none◂{} } ⊢ { _ _ av } 
								idx.asc_ply { av { p0 is } } ⊢ av
								idx.subst_ply { { evv av } p1 } ⊢ { { evv _ } iy } 
								stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
								∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } iy } 
							∐ k ⊢ ast.k_op◂{ og o_n dp r_ng ibg lcg _ } . 
								stt_og og ⊢ { og ok } 
								find_gf.e { tv evv mfv o_n ys ok } ⊢ { tv evv mfv o_n ys ok oa0 }
                stt_etr { V rfv oa0 { og ok dp r_ng ibg } { o_n ys } { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } tav tv lcg { eg0 eds } } ⊢ { V bf rfv { lb ig o_k y1 p0 gyd p1 } { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } tav tv { eg0 eds } } 
								$ gyd ⊢ yr 
								$ f_c ⊢ 
								∐ { lb_i f_jmp◂_ } . 
									mov_ptn { lb lb_i glv_n { evv tav tv eds } is p0 ec0 } ⊢ { lb lb_i glv_n { evv tav tv eds } ec0 } 
									^ lb ⊢ lb,sc0 
										"\tjmp JMP_" 0d' "\n" // 
									asm.add_s8 { ec0 sc0 } ⊢ ec0 
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  irv tav tv { eg0 eds ec0 ew0 } p1 } 
								∐. { lb_i f_call◂vl0 } . 
									$ asm.e◂{} ⊢ er 
									inc_x lb_n ⊢ { lb_w lb_n } 
									∐ bf ⊢ bl.t◂{} . 
										ast.IRV.mk_lst_env { irv vl0 } ⊢ { irv vl } 
										push_gl { vl %[ 0r ] } ⊢ { _ l ep }
										asm.cct { er ep } ⊢ er  
										^ lb_w ⊢ lb_w,s0 
											"\tpush EXH_" 0d' "\n" // 
										asm.add_s8 { er s0 } ⊢ er 
										$ l ⊢ l,l0 
										exh { ox lb_w %[ 0r ] l0 } ⊢ ew1
										asm.cct { ew0 ew1 } ⊢ ew0 
										mov_ptn { lb lb_i glv_n { evv tav tv eds } is p0 er } ⊢ { lb lb_i glv_n { evv tav tv eds } er } 
										call_lb { lb er } ⊢ { _ er } 
										asm.cct { ec0 er } ⊢ ec0 
										asm.add_s8 { ec0 %[ "\tadd rsp,8\n" ] } ⊢ ec0 
										mov_ptn2.alc_ptn { { ec0 glv_n } p1 } ⊢ { { ec0 glv_n } p1 } 
										pop_gl { ec0 l } ⊢ ec0 
										∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  irv tav tv { eg0 eds ec0 ew0 } p1 } 
									∐. . 
										^ lb_w ⊢ lb_w,s0 
											"\tpush EXH_" 0d' "\n" // 
										asm.add_s8 { er s0 } ⊢ er 
										exh { ox lb_w %[ 0r ] ⟦⟧ } ⊢ ew1
										asm.cct { ew0 ew1 } ⊢ ew0 
										mov_ptn2.ptn { er { evv tav tv eds } glv_n is p0 } ⊢ { er { evv tav tv eds } glv_n }
										call_lb { lb er } ⊢ { _ er } 
										asm.cct { ec0 er } ⊢ ec0 
										asm.add_s8 { ec0 %[ "\tadd rsp,8\n" ] } ⊢ ec0 
										mov_ptn2.alc_ptn { { ec0 glv_n } p1 } ⊢ { { ec0 glv_n } p1 } 
										∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  irv tav tv { eg0 eds ec0 ew0 } p1 } 
							∐ k ⊢ ast.k_app◂{ k0 k1 } . 
								_emt %[ "stt_call app 1" ] ⊢ _
								∎|  
							∐ k ⊢ ast.k_op_axm◂{ a la } . 
								=+ a' 
								\\ mk_arr 
								∐ 
									arr.stt_mk_arr { %[ ast.hp.arr.std ] gfl is evv tav tv ys glv_n lb_n  } ⊢ { gfl evv tav tv glv_n lb_n  { eds1 eg1 e0 } iy }
									asm.cct { eds eds1 } ⊢ eds 
									asm.cct { ec0 e0 } ⊢ ec0  
									asm.cct { eg0 eg1 } ⊢ eg0 
									stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
									∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  irv tav tv { eg0 eds ec0 ew0 } iy } 									 
								\\ exc_q 
								∐ 
								
									∎| 
								\\ set_q 
								∐
									∎| 
								\\ get_q 
								∐ 
									∎| 
								\\lod_q 
								∐ 
									stt_lod_q { gfl evv tav tv glv_n lb_n ec0 eds eg0 is } ⊢ { gfl evv tav tv glv_n lb_n ec0 eds eg0 iy }
									stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  irv tav tv { eg0 eds ec0 ew0 } iy } 										
								\\ args 
								∐ 
									∎|
								\\ mlc_s8 
								∐ 
									ast.r64_of_rt { evv is } ⊢ { evv x } 
									stt_mlc_s8 { evv glv_n ec0 x } ⊢ { evv glv_n ec0 iy } 
									stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  irv tav tv { eg0 eds ec0 ew0 } iy }  
								\\ s8_len 
								∐ 
									stt_s8_len { evv glv_n ec0 is } ⊢ { evv glv_n ec0 iy } 
									stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  irv tav tv { eg0 eds ec0 ew0 } iy } 																		
								\\ emt 
								∐ 
									T.pnt_type_k { tv ys } ⊢ { tv syd } 
									^ syd ⊢ _,syd 
										" : " 0' "\n" //
									$ asm.e◂{} ⊢ e0 
									$ is ⊢ is,is0  
									asm.add_s8 { e0 %[ "\tpush QWORD [SIG_ETR]\n\tmov QWORD [SIG_ETR],emt_bof_hdl\n\tEMT_CST fmt_emt,64\n" ] } ⊢ e0 
									emt.ptn { gfl _nil◂{} tv tav evv lb_n glv_n is0 { eds e0 } } ⊢ { gfl fl tv tav evv lb_n glv_n { eds e0 } }
									asm.add_s8 { e0 %[ "\tEMT_CST fmt_nl,4\n" ] } ⊢ e0 
									emt.adt_lp { gfl fl tv tav evv lb_n glv_n { eds eg0 } } ⊢ { gfl tv tav evv lb_n glv_n { eds eg0 } }
									emt.emt_stg { syd lb_n { eds e0 } } ⊢ { _ lb_n { eds e0 } }
									asm.add_s8 { e0 %[ "\tEMT_FLSH\n\tpop QWORD [SIG_ETR]\n" ] } ⊢ e0 
									asm.cct { ec0 e0 } ⊢ ec0 
									$ is ⊢ iy 
									stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  irv tav tv { eg0 eds ec0 ew0 } iy } 
								\\ inc 
								∐ 
									op1◂◂{ _inc "add" } { evv  is ec0 } ⊢ { evv  iy ec0 }
									stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  irv tav tv { eg0 eds ec0 ew0 } iy } 
								\\ dec 
								∐ 
									op1◂◂{ _dec "sub" } { evv  is ec0 } ⊢ { evv  iy ec0 }
									stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  irv tav tv { eg0 eds ec0 ew0 } iy } 
								\\ add 
								∐ 
									op2.f◂◂_add { bl.t◂{} %[ "add" ] { evv tav } glv_n lb_n a is } ⊢ { { evv tav } glv_n lb_n a iy ec1 }
									asm.cct { ec0 ec1 } ⊢ ec0 
									stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  irv tav tv { eg0 eds ec0 ew0 } iy } 
								\\ sub 
								∐ 
									op2.f◂◂_sub { bl.t◂{} %[ "sub" ] { evv tav } glv_n lb_n a is } ⊢ { { evv tav } glv_n lb_n a iy ec1 }
									asm.cct { ec0 ec1 } ⊢ ec0 
									stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  irv tav tv { eg0 eds ec0 ew0 } iy } 
								\\ imul 
								∐ 
									imul { evv glv_n is ec0 } ⊢ { evv glv_n iy ec0 }
									stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  irv tav tv { eg0 eds ec0 ew0 } iy } 			
								\\ sts 
								∐ 
									$ asm.e◂{} ⊢ e0 
									sts.f { is glv_n evv e0 } ⊢ { glv_n evv e0 iy }
									asm.cct { ec0 e0 } ⊢ ec0 
									stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  irv tav tv { eg0 eds ec0 ew0 } iy } 
								\\ lds 
								∐ 
									stt_lds { evv glv_n lb_n ec0 eds is } ⊢ { evv glv_n lb_n ec0 eds iy } 
									stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  irv tav tv { eg0 eds ec0 ew0 } iy } 
								\\ setget 
								∐
									∎|
								\\ rep_movsb 
								∐ 
									$ asm.e◂{} ⊢ e0 
									rep_movsb.f { is glv_n lb_n evv e0 } ⊢ { glv_n lb_n evv e0 iy }
									asm.cct { ec0 e0 } ⊢ ec0  
									stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
									∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  irv tav tv { eg0 eds ec0 ew0 } iy } 
								\\ nil 
								∐ 
									∎| 
								\\ cns 
								∐ 
									∎| 
								\\ some 
								∐ 
									∎| 
								\\ none 
								∐ 
									∎| 
								\\ in_fn 
								∐ 
									$ asm.e◂{} ⊢ e0 
									inc_x glv_n ⊢ { rm0 glv_n } 
									ast.s8_of_rt { evv is } ⊢ { evv s0 } 
									stt_in_fn { evv lb_n ec0 eds rm0 s0 } ⊢ { evv lb_n ec0 eds iy }
									stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  irv tav tv { eg0 eds ec0 ew0 } iy } 																
								\\ emt_s8_to 
								∐ 
									stt_emt_s8_to { evv glv_n lb_n ec0 eds is } ⊢ { evv glv_n lb_n ec0 eds iy }
									stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  irv tav tv { eg0 eds ec0 ew0 } iy } 
								\\ cd 
								∐ 
									stt_cd { evv glv_n lb_n ec0 eds is } ⊢ { evv glv_n lb_n ec0 eds iy }
									stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  irv tav tv { eg0 eds ec0 ew0 } iy } 									
								\\ byt 
								∐ 
									∎| 
								\\ mk_clr 
								∐ 
									∎| 
								\\ alp 
								∐ 
									∎|
								\\ frp 
								∐ 
									∎| 
								\\ mkp 
								∐ 
									∎| 
								\\ dlp 
								∐ 
									∎| 
								\\ arr_len 
								∐ 
									stt_arr_len { evv glv_n ec0 is } ⊢ { evv glv_n ec0 iy }
									stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  irv tav tv { eg0 eds ec0 ew0 } iy } 															
								\\ arr_of_lst 
								∐ 
									∎| 
								\\ scf_d 
								∐ 
									∎| 
								\\ scf_x 
								∐ 
									∎| 
								\\ dlt0 
								∐ 
									∎| 
								\\ info 
								∐ 
									asm.add_s8 { ec0 %[ "\tcall info\n" ] } ⊢ ec0 
									$ is ⊢ iy
									stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  irv tav tv { eg0 eds ec0 ew0 } iy } 									 
								\\ rpc 
								∐ 
									$ is ⊢ is,is0 
									rpc.ptn { gfl _nil◂{} tv tav evv lb_n glv_n is0 { eds ec0 } } ⊢ { gfl fl tv tav evv lb_n glv_n id { eds ec0 } } 
									rpc.adt_lp { gfl fl tv tav evv lb_n glv_n { eds eg0 } } ⊢ { gfl tv tav evv lb_n glv_n { eds eg0 } }							 
									$ RP.cns2◂{ is id } ⊢ iy
									stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  irv tav tv { eg0 eds ec0 ew0 } iy } 									 
								\\ getchar 
								∐ 
									inc_x glv_n ⊢ { rm0 glv_n } 
									^ rm0 ⊢ rm0,sc0 
										`	mov rdi,fmt_getchar 
										`	call emt_stg 
										`	xor rax,rax 
										`	C_CALL_SF getchar 
										"\tmov GLX(" 0d' "),rax\n" // 
									asm.add_s8 { ec0 sc0 } ⊢ ec0 
									$ stt_v.r64_reg◂rm0 ⊢ iy 
									stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  irv tav tv { eg0 eds ec0 ew0 } iy } 									 
								\\ shl 
								∐ 
									op_shr◂◂{ _shl "shl" } { evv tav glv_n lb_n a is ec0 }  ⊢ { evv tav glv_n lb_n a iy ec0 }
									stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  irv tav tv { eg0 eds ec0 ew0 } iy } 									 
								\\ shr 
								∐ 
									op_shr◂◂{ _shr "shr" } { evv tav glv_n lb_n a is ec0 }  ⊢ { evv tav glv_n lb_n a iy ec0 }
									stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
									∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  irv tav tv { eg0 eds ec0 ew0 } iy }  
								\\ app 
								∐ 
									∎| 
								\\ and 
								∐ 
									op2.f◂◂_and { bl.f◂{} %[ "and" ] { evv tav } glv_n lb_n a is } ⊢ { { evv tav } glv_n lb_n a iy ec1 }
									asm.cct { ec0 ec1 } ⊢ ec0 
									stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  irv tav tv { eg0 eds ec0 ew0 } iy } 
								\\ or 
								∐ 
									op2.f◂◂op2.op_dmy { bl.f◂{} %[ "or" ] { evv tav } glv_n lb_n a is } ⊢ { { evv tav } glv_n lb_n a iy ec1 }
									asm.cct { ec0 ec1 } ⊢ ec0 
									stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  irv tav tv { eg0 eds ec0 ew0 } iy } 								
								\\ prs 
								∐ 
									∐ la ⊢ _cns◂{ k1 la }; la ⊢ _nil◂{} . 
										∐ k1 ⊢ RP.atm◂k1; k1 ⊢ ast.k_op_axm◂{ ax1 axl1 } . 
											∐ ax1'=EX.grm; axl1 ⊢ _cns◂{ k1 axl1 }; axl1 ⊢ _nil◂{} .
												stt_jmp { V rfv ox f_c { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } { ys is k1 } } ⊢| 									 
											∐. . 
												∐ is ⊢ RP.rcd◂l0; l0 ⊢ _cns◂{ p0 l0 }; l0 ⊢ _cns◂{ p1 l0 }; l0 ⊢ _nil◂{} . 
													inc_x glv_n ⊢ { rm0 glv_n } 
													inc_x glv_n ⊢ { rm1 glv_n } 
													inc_x glv_n ⊢ { rm2 glv_n } 
													$ p0 ⊢ p0,p0_0
													ast.s8_of_rt { evv p0 } ⊢ { evv s0 } 
													s8_to_rdi_rsi { eds ec0 lb_n s0 } ⊢ { eds ec0 lb_n }
													r64_to_rax { evv p1 } ⊢ { evv sc0 } 
													asm.add_s8 { ec0 sc0 } ⊢ ec0 
													grm_axm { evv lb_n ax1 axl1 ec0 } ⊢ { evv lb_n ec0 yt } 	
													^ rm0,rm1,rm2 ⊢ rm0,rm1,rm2,sc0 
														"\tmov GLX(" 0d' "),rax\n" 
														"\tmov GLX(" 1d' "),rsi\n"
														"\tmov GLX(" 2d' "),r10\n" // 
													asm.add_s8 { ec0 sc0 } ⊢ ec0
													$ RP.cns3◂{ p0_0 stt_v.r64_reg◂rm0 RP.atm◂ast.dyn_adt◂{ { %[ TX.id.opn ] ⟦ yt ⟧ } rm2 rm1 } } ⊢ iy
													stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
													∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  irv tav tv { eg0 eds ec0 ew0 } iy } 														
												∐. . 
													∎|			
										∐. . 
											_emt %[ "stt_call app 2" ] ⊢ _ 
											∎| 
									∐. . 
										∎|
								\\ opn_exn 
								∐ 
									∎| 
								\\ id 
								∐ 
									stt_jmp_axm { ec0 evv tav tv eds glv_n is f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  irv tav tv { eg0 eds ec0 ew0 } iy } 
								\\ c_call 
								∐
									_emt %[ "EX.c_call:0" ] ⊢ _ 
									∎| 
								\\ xor 
								∐ 
									op2.f◂◂op2.op_dmy { bl.f◂{} %[ "xor" ] { evv tav } glv_n lb_n a is } ⊢ { { evv tav } glv_n lb_n a iy ec1 }
									asm.cct { ec0 ec1 } ⊢ ec0 
									stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  irv tav tv { eg0 eds ec0 ew0 } iy } 
								\\ lds64 
								∐ 
									stt_lds64 { evv glv_n lb_n ec0 eds is } ⊢ { evv glv_n lb_n ec0 eds iy } 
									stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  irv tav tv { eg0 eds ec0 ew0 } iy } 									
								\\ s8_hsh 
								∐ 
									stt_s8_hsh { evv glv_n ec0 is } ⊢ { evv glv_n ec0 iy } 
									stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  irv tav tv { eg0 eds ec0 ew0 } iy } 									 
								\\ dlt 
								∐ 
									dlt.ptn { gfl _nil◂{} tv tav evv lb_n glv_n is { eds ec0 } } ⊢ { gfl fl tv tav evv lb_n glv_n { eds ec0 } }
									dlt.adt_lp { gfl fl tv tav evv lb_n glv_n { eds eg0 } } ⊢ { gfl tv tav evv lb_n glv_n { eds eg0 } }
									stt_jmp_axm { ec0 evv tav tv eds glv_n RP.unt◂{} f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  irv tav tv { eg0 eds ec0 ew0 } iy } 
								∐ 
									∎| 
								∐ 
									∎| 
								∐ 
									∎| 
								∐ 
									∎|
								∐ 
									∎| 
								∐ 
									∎| 
								∐ 
									∎| 
								∐ 
									∎| 
								\\ tj 
								∐ 
									∐ la ⊢ _cns◂{ k1 la }; la ⊢ _nil◂{} . 
										∐ k1 ⊢ RP.rcd◂l1; l1 ⊢ _cns◂{ kv l1 }; l1 ⊢ _cns◂{ ke l1 }; l1 ⊢ _nil◂{}; kv ⊢ RP.atm◂ast.k_arr◂kv . 
											∎| 
										∐. . 
											∎|
									∐. . 
										∎|
								\\ ala 
								∐ 
									
										∎|
								\\ cli 
								∐ 
									inc_x glv_n ⊢ { p0 glv_n } 
									^ p0 ⊢ p0,sc0 
										`	mov rdi,QWORD [CLR_N]
										`	add QWORD [CLR_N],1 
										"\tmov GLX(" 0d' "),rdi\n" 
										// 
									asm.add_s8 { ec0 sc0 } ⊢ ec0 
									newvar_q { tv %[ 1r ] } ⊢ { tv _ v } 
									$ stt_v.Clr_reg◂{ p0 v } ⊢ iy
									stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
									∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } iy } 																
								\\ clp 
								∐ 
									∐ is ⊢ RP.rcd◂_cns◂{ RP.atm◂ast.hp◂{ r0 ast.hp.id◂{ _ _ } } _cns◂{ pk _nil◂{} } } . 
										inst { tv %[ 1r ] ys } ⊢ { tv lv ys }
										newvar_l { tv lv } ⊢ { tv lv v0 } 
										$ v0 ⊢ v0,v0_0,v0_1 
										T.unify.f { tv RP.cns2◂{ TX.Clr◂v0_0 v0_1 } ys } ⊢ tv 
										_dec lv ⊢ lv 
										gen { tv lv v0 } ⊢ { tv lv yk } 
										$ yk ⊢ yk,yk0 
										alc_type_k.f_i { tav tv %[ 0r ] yk0 } ⊢ { tav tv c_n pa0 }
										inc_x glv_n ⊢ { i0 glv_n } 
										_add { c_n %[ 3r ] } ⊢ { c_n _ } 
    								alc_rcd◂◂"rax" { c_n ec0 } ⊢ { _ ec0 } 
										^ r0,i0 ⊢ r0,i0,sc0 
											"\tmov GLX(" 1d' "),rax\n" 
											"\tmov rdi,GLX(" 0d' ")\n"
											`	mov QWORD [rax+8],rdi 
											`	mov QWORD [rax+16],1 
											`	lea DST_REG,[rax+24]
											//
										asm.add_s8 { ec0 sc0 } ⊢ ec0 
										mov_ptn2.to_sgm_ptn { ec0 { evv tav tv eds } glv_n pk pa0 } ⊢ { ec0 { evv tav tv eds } glv_n } 
										$ yk ⊢ yk,yk0 
										$ RP.cns2◂{ stt_v.Clr_reg◂{ r0 yk } stt_v.pt_reg◂{ i0 yk0 } } ⊢ iy 
										stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
										∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } iy } 																												
									∐. . 
										∎| 
								\\ cla 
								∐ 
								
										∎|
								\\ cln 
								∐ 
									∐ is ⊢ RP.atm◂ast.hp◂{ r0 _ } . 
										inst { tv %[ 1r ] ys } ⊢ { tv lv ys }
										newvar_l { tv lv } ⊢ { tv lv v0 } 
										$ v0 ⊢ v0,v0_0 
										T.unify.f { tv TX.Clr◂v0_0 ys } ⊢ tv 
										_dec lv ⊢ lv 
										gen { tv lv v0 } ⊢ { tv lv yk } 
										$ yk ⊢ yk,yk0 
										alc_type_k.f_i { tav tv %[ 0r ] yk0 } ⊢ { tav tv c_n pa0 }
										inc_x glv_n ⊢ { i0 glv_n } 
										_add { c_n %[ 3r ] } ⊢ { c_n _ } 
  									alc_rcd◂◂"rax" { c_n ec0 } ⊢ { _ ec0 } 
	  								^ r0,i0 ⊢ r0,i0,sc0 
											"\tmov GLX(" 1d' "),rax\n" 
											"\tmov rdi,GLX(" 0d' ")\n"
											`	mov rsi,rdi 
											`	bts rsi,63 
											`	mov QWORD [rax+8],rsi 
											`	mov QWORD [rax+16],1 
											//
										asm.add_s8 { ec0 sc0 } ⊢ ec0 
										$ yk ⊢ yk,yk0 
										$ RP.cns2◂{ stt_v.Clr_reg◂{ r0 yk } stt_v.pt_reg◂{ i0 yk0 } } ⊢ iy 
										stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
										∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } iy } 																										
									∐. . 
										∎| 
								\\ cls 
								∐ 
									∐ is ⊢ RP.rcd◂_cns◂{ RP.atm◂ast.hp◂{ r0 _ } _cns◂{ RP.atm◂ast.hp◂{ i0 _ } _cns◂{ pk _nil◂{} } } } . 
										inst { tv %[ 1r ] ys } ⊢ { tv lv ys }
										newvar_l { tv lv } ⊢ { tv lv v0 }  
										$ v0 ⊢ v0,v0_0,v0_1,v0_2 
										T.unify.f { tv RP.cns3◂{ TX.Clr◂v0_0 TX.pt◂v0_1 v0_2 } ys } ⊢ tv 
										_dec lv ⊢ lv 
										gen { tv lv v0 } ⊢ { tv lv yk } 
										$ yk ⊢ yk,yk0 
										alc_type_k.f_i { tav tv %[ 0r ] yk0 } ⊢ { tav tv c_n pa0 }
										_add { c_n %[ 2r ] } ⊢ { c_n _ } 
										^ c_n,r0,i0 ⊢ _,r0,i0,sc0 
											"\tmov rdi,GLX(" 1d' ")\n"
											"\tmov rax,GLX(" 2d' ")\n" 
											`	mov rsi,QWORD [rax+8]
											`	bt rsi,63 
											`	jnc err_exc_q 
											`	mov rbx,0x0fff_ffff_ffff_ffff
											`	and rsi,rbx
											`	cmp rdi,rsi 
											`	jnz err_exc_q 
											`	mov QWORD [rax+8],rsi 
											`	lea DST_REG,[rax+24]
											//
										asm.add_s8 { ec0 sc0 } ⊢ ec0 
										mov_ptn2.to_sgm_ptn { ec0 { evv tav tv eds } glv_n pk pa0 } ⊢ { ec0 { evv tav tv eds } glv_n } 
										$ yk ⊢ yk,yk0 
										$ RP.cns2◂{ stt_v.Clr_reg◂{ r0 yk } stt_v.pt_reg◂{ i0 yk0 } } ⊢ iy 
										stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
										∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } iy } 																										
									∐. . 
										∎|
								\\ cmp_s8 
								∐ 
									\\[
									∐ is ⊢ RP.rcd◂_cns◂{ s0 _cns◂{ s1 _nil◂{} } } . 
										$ s0 ⊢ s0,s0_0 
										$ s1 ⊢ s1,s1_0 
										ast.s8_of_rt { evv s0 } ⊢ { evv s0 }
										ast.s8_of_rt { evv s1 } ⊢ { evv s1 } 
										s8_to_rdi_rsi { eds ec0 lb_n s0 } ⊢ { eds ec0 lb_n } 
										asm.add_s8 { ec0 %[ "\tpush rdi\n\tpush rsi\n" ] } ⊢ ec0
										s8_to_rdi_rsi { eds ec0 lb_n s1 } ⊢ { eds ec0 lb_n } 
										asm.add_s8 { ec0 %[ "\tmov rdx,rdi\n\tpop rdi\n\tpop rax\n\tcall cmp_stg\n" ] } ⊢ ec0
										inc_x glv_n ⊢ { rr glv_n } 
										^ rr ⊢ rr,sc0 
											"\tmov GLX(" 0d' "),rax\n" // 
										asm.add_s8 { ec0 sc0 } ⊢ ec0 
										$ RP.cns3◂{ s0_0 s1_0 stt_v.r64_reg◂rr } ⊢ iy 
										stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
										∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } iy } 																										
									∐. . 
									\\]
										∎|
								\\ cld 
								∐ 
									\[
									∐ is ⊢ RP.rcd◂_cns◂{ RP.atm◂ast.hp◂{ r0 _ } _cns◂{ RP.atm◂ast.hp◂{ i0 _ } _nil◂{} } } . 
										$ yr ⊢ yr,yr0 
										inst { tv %[ 1r ] yr0 } ⊢ { tv lv yr0 }
										newvar_l { tv lv } ⊢ { tv lv v0 } 
										newvar_l { tv lv } ⊢ { tv lv v1 } 
										$ v0 ⊢ v0,v0_0
										$ v1 ⊢ v1 
										T.unify.f { tv TX.Clr◂v0_0 yr0 } ⊢ tv 
										_dec lv ⊢ lv 
										gen { tv lv v0 } ⊢ { tv lv yk } 
										gen { tv lv v1 } ⊢ { tv lv _ } 
										$ yk ⊢ yk,yk0 
										alc_type_k.f_i { tav tv %[ 0r ] yk0 } ⊢ { tav tv c_n pa0 }
										_add { c_n %[ 2r ] } ⊢ { c_n _ } 
										^ c_n,r0,i0 ⊢ _,r0,i0,sc0 
											"\tmov rdi,GLX(" 1d' ")\n"
											"\tmov rax,GLX(" 2d' ")\n" 
											`	mov rsi,QWORD [rax+8]
											\\`	bt rsi,63 
											\\`	jc err_exc_q 
											\\`	mov rbx,0x0fff_ffff_ffff_ffff
											\\`	and rsi,rbx
											`	cmp QWORD [rdi+8],rsi 
											`	jnz err_exc_q 
											`	bts QWORD [rax+8],63 
											\\`	mov QWORD [rax+8],rsi 
											`	mov rsi,QWORD [rdi+24]
											`	mov QWORD [rax],rsi 
											`	mov QWORD [rdi+24],rax 
											`	add QWORD [rdi+16],1 
											`	add QWORD [rax+16],1 
											`	lea DST_REG,[rax+24]
											//
										asm.add_s8 { ec0 sc0 } ⊢ ec0 
										mov_ptn2.to_sgm_ptn { ec0 { evv tav tv eds } glv_n pk pa0 } ⊢ { ec0 { evv tav tv eds } glv_n } 
										$ yk ⊢ yk,yk0 
										$ RP.cns2◂{ stt_v.Clr_reg◂{ r0 yk } stt_v.pt_reg◂{ i0 yk0 } } ⊢ iy 
										∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } iy } 																										 
								\]
									∎| 
								\\ pf 
								∐ 
									$ is ⊢ is,id 
									∐ la ⊢ _cns◂{ k0 la }; la ⊢ _nil◂{}; k0 ⊢ RP.atm◂a0; a0 ⊢ ast.k_pf◂lf; is ⊢ RP.rcd◂sl . 
										exp_s8.ip0 { evv lf } ⊢ { evv pl } 
										inc_x glv_n ⊢ { rr glv_n } 
										$ rr ⊢ rr,rr0 
										$ RP.cns2◂{ id stt_v.s8_reg◂rr0 } ⊢ iy 
										exp_s8.lp0_c { %[ 0r ] sl } ⊢ { _ ar }
										asm.add_s8 { ec0 %[ "\tmov rdi,0\n" ] } ⊢ ec0 
										exp_s8.lp1 { %[ 0r ] evv { eds ec0 } %[ 0r ] lb_n ar in0◂rr pl } ⊢ { v_n evv { eds ec0 } ld lb_n ar }
										asm.add_s8 { ec0 %[ "\tmov rcx,QWORD [tmp]\n" ] } ⊢ ec0 
										stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
										∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } iy } 																										
									∐. . 
										∎| 
								\\ pf_x
								∐ 
									∐ la ⊢ _cns◂{ k0 la }; la ⊢ _nil◂{}; k0 ⊢ RP.atm◂a0; a0 ⊢ ast.k_pf◂lf; is ⊢ RP.rcd◂_cns◂{ m0 _cns◂{ x0 _cns◂{ RP.rcd◂sl _nil◂{} } } } . 
										exp_s8.ip0 { evv lf } ⊢ { evv pl } 
										s8_to_hp { evv glv_n m0 } ⊢ { evv glv_n rm0 ec1 } 
										asm.cct { ec0 ec1 } ⊢ ec0 
										r64_to_hp { evv glv_n x0 } ⊢ { evv glv_n rx0 ec1 }
										asm.cct { ec0 ec1 } ⊢ ec0

										$ sl ⊢ sl,sl0 
										exp_s8.lp0_c { %[ 0r ] sl0 } ⊢ { _ ar }
										asm.add_s8 { ec0 %[ "\tmov rdi,0\n" ] } ⊢ ec0 
										$ rm0 ⊢ rm0,rm00 
										$ rx0 ⊢ rx0,rx00 
										$ RP.cns3◂{ stt_v.s8_reg◂rm0 stt_v.r64_reg◂rx0 RP.rcd◂sl } ⊢ iy 
										exp_s8.lp1 { %[ 0r ] evv { eds ec0 } %[ 0r ] lb_n ar in1◂{ rm00 rx00 } pl } ⊢ { v_n evv { eds ec0 } ld lb_n ar }
										asm.add_s8 { ec0 %[ "\tmov rcx,QWORD [tmp]\n" ] } ⊢ ec0 
										stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
										∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } iy } 																										
									∐. . 
										∎|  
								\\ clc_i 
								∐ 	
									inst { tv %[ 1r ] ys } ⊢ { tv lv ys }
									newvar_l { tv lv } ⊢ { tv lv v0 } 
									$ v0 ⊢ v0,v0_0,v0_1  
									T.unify.f { tv RP.cns2◂{ TX.Clr_lc◂v0_0 v0_1 } ys } ⊢ tv 
									_dec lv ⊢ lv 
									gen { tv lv v0 } ⊢ { tv lv yk } 
									∐ is ⊢ RP.rcd◂_cns◂{ RP.rcd◂_cns◂{ pn0 _cns◂{ cl0 _nil◂{} } } _cns◂{ pk _nil◂{} } }; pn0 ⊢ RP.atm◂ast.hp◂{ rp0 ast.hp.id◂{ px0  _ } }; px0'=ast.hp.id.pt; cl0 ⊢ RP.atm◂ast.hp◂{ rc0 _ }  .
										$ px0 ⊢ _ 
										$ yk ⊢ yp0,yp1 
										alc_type_k.f_i { tav tv %[ 0r ] yp0 } ⊢ { tav tv c_n pa0 }
										^ rc0,rp0 ⊢ rc0,rp0,sc0 
											"\tmov rax,GLX(" 1d' ")\n" 
											`	btr QWORD [rax+8],63 
											`	lea DST_REG,[rax+24]
											//
										asm.add_s8 { ec0 sc0 } ⊢ ec0 
										mov_ptn2.to_sgm_ptn { ec0 { evv tav tv eds } glv_n pk pa0 } ⊢ { ec0 { evv tav tv eds } glv_n } 
										$ yp1 ⊢ yk,yk0 
										$ RP.cns2◂{ stt_v.Clr_reg◂{ rc0 yk } stt_v.pt_reg◂{ rp0 yk0 } } ⊢ iy 
										stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
										∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } iy } 																										
									∐. . 
										∎|
								\\ clc_o 
								∐ 
									inst { tv %[ 1r ] ys } ⊢ { tv lv ys }
									newvar_l { tv lv } ⊢ { tv lv v0 } 
									$ v0 ⊢ v0,v0_0,v0_1  
									T.unify.f { tv RP.cns2◂{ TX.Clr◂v0_0 TX.pt◂v0_1 } ys } ⊢ tv 
									_dec lv ⊢ lv 
									gen { tv lv v0 } ⊢ { tv lv yk } 
									∐ is ⊢ RP.rcd◂_cns◂{ cl0 _cns◂{ RP.atm◂ast.hp◂{ rp0 _ } _nil◂{} } }; cl0 ⊢ RP.atm◂ast.hp◂{ rc0 _ }  .
										^ rc0,rp0 ⊢ rc0,rp0,sc0 
											"\tmov rax,GLX(" 1d' ")\n" 
											`	mov rsi,QWORD [rax+8]
											"\tcmp GLX(" 0d' "),rsi \n"
											`	jnz err_exc_q 
											`	bts rsi,63 
											`	mov QWORD [rax+8],rsi 
											`	lea SRC_REG,[rax+24]
											//
										asm.add_s8 { ec0 sc0 } ⊢ ec0 
										$ yk ⊢ yk0,yk1 
										alc_type_k.f_i { tav tv %[ 0r ] yk0 } ⊢ { tav tv c_n pa0 }
										lod_sgm.ptn { { ec0 glv_n } pa0 } ⊢ { { ec0 glv_n } pa1 } 
										$ yk1 ⊢ yk,yk0 
										$ RP.cns2◂{ RP.cns2◂{ stt_v.pt_reg◂{ rp0 yk0 } stt_v.Clr_reg◂{ rc0 yk } } pa1 } ⊢ iy 
										stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
										∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } iy } 																										
									∐. . 
										∎|  
								\\ clc_d 
								∐ 
									inst { tv %[ 1r ] ys } ⊢ { tv lv ys }
									newvar_l { tv lv } ⊢ { tv lv v0 } 
									$ v0 ⊢ v0,v0_0 
									T.unify.f { tv TX.Clr_lc◂v0_0 ys } ⊢ tv 
									_dec lv ⊢ lv 
									gen { tv lv v0 } ⊢ { tv lv yk } 
									$ yk ⊢ yk,yk0 
									alc_type_k.f_i { tav tv %[ 0r ] yk0 } ⊢ { tav tv c_n pa0 }
									∐ is ⊢ RP.rcd◂_cns◂{ RP.atm◂ast.hp◂{ rp0 _ } _cns◂{ c0 _nil◂{} } } .
										inc_x lb_n ⊢ { lb0 lb_n } 
										_add { c_n %[ 3r ] } ⊢ { c_n _ } 
										^ rp0,c_n,lb0 ⊢ _,_,_,sc0 
											"\tmov rax,GLX(" 0d' ")\n" 
											`	sub QWORD [rax+16],1
											"\tjnz LB_" 2d' "\n"
											"\tFREE_RCD " 1d' ",rax\n"  
											"LB_" 2d' ":\n" 
											//
										asm.add_s8 { ec0 sc0 } ⊢ ec0 
										$ c0 ⊢ iy 
										stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
										∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } iy } 																										
									∐. . 
										∎|  
								\\ seq 
								∐ 
									∐ la ⊢ _cns◂{ k1 _nil◂{} }; k1 ⊢ RP.rcd◂_cns◂{ f0 _cns◂{ f1 _nil◂{} } } .
										slv.ct_ptn { { %[ 1r ] evv tv } f0 } ⊢ { { lv evv tv } f0 yk }
										T.iug_imp_d { tv lv ys yk } ⊢ { tv _ ys yd _ } 
										$ ox ⊢ ox,ox0 
										$ f_c ⊢ 
										∐ { lbi f_call◂vl0 } .
											$ lbi ⊢ lbi,lbi0 
											$ vl0 ⊢ vl0,vl00 
											stt_jmp { V rfv ox0 { lbi0 f_call◂vl00 } { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } { ys is f0 } } ⊢ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } iy }  									 			
											stt_jmp { V rfv ox { lbi f_call◂vl0 } { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } { yd iy f1 } } ⊢| 
										∐. { lbi f_jmp◂pr } .
											$ lbi ⊢ lbi,lbi0 
											stt_jmp { V rfv ox0 { lbi0 f_call◂⟦⟧ } { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } { ys is f0 } } ⊢ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } iy }  									 			
											stt_jmp { V rfv ox { lbi f_jmp◂pr } { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } { yd iy f1 } } ⊢| 
									∐. . 
										∎|
								\\ alc_i 
								∐ 	
									inst { tv %[ 1r ] ys } ⊢ { tv lv ys }
									newvar_l { tv lv } ⊢ { tv lv v0 } 
									newvar_l { tv lv } ⊢ { tv lv v1 } 
									$ v0 ⊢ v0,v0_0,v0_1
									T.unify.f { tv RP.cns2◂{ TX.arr_lc_q◂{ v0_0 v1 } v0_1 } ys } ⊢ tv 
									_dec lv ⊢ lv 
									gen { tv lv v0 } ⊢ { tv lv yk } 
									∐ is ⊢ RP.rcd◂_cns◂{ RP.atm◂ast.rt_usr◂{ _ RP.rcd◂_cns◂{ pn0 _cns◂{ cl0 _nil◂{} } } } _cns◂{ pk _nil◂{} } }; pn0 ⊢ RP.atm◂ast.hp◂{ rp0 _ }; cl0 ⊢ RP.atm◂ast.hp◂{ rc0 dc0 }  .
										$ yk ⊢ yp0,yp1 
										alc_type_k.f_i { tav tv %[ 0r ] yp0 } ⊢ { tav tv c_n pa0 }
										^ rc0,rp0,c_n ⊢ rc0,rp0,_,sc0 
											"\tmov rdi,GLX(" 0d' ")\n" 											
											"\tmov rax,GLX(" 1d' ")\n"
											"\tmov rsi," 2d' "\n" 
                      ` imul rax,rsi 
											`	lea DST_REG,[rdi+8+8*rax]
											//
										asm.add_s8 { ec0 sc0 } ⊢ ec0 
										mov_ptn2.to_sgm_ptn { ec0 { evv tav tv eds } glv_n pk pa0 } ⊢ { ec0 { evv tav tv eds } glv_n } 
										\\$ yp1 ⊢ yk,yk0 
										$ RP.cns2◂{ RP.atm◂ast.hp◂{ rc0 dc0 } stt_v.r64_reg◂rp0 } ⊢ iy 
										stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
										∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } iy } 																										
									\[
										∎|
										\]
									∐. . 
										∎|
								\\ alc_o 
								∐ 
									inst { tv %[ 1r ] ys } ⊢ { tv lv ys }
									newvar_l { tv lv } ⊢ { tv lv v0 } 
									$ v0 ⊢ v0,v0_0  
									newvar_l { tv lv } ⊢ { tv lv v1 } 
									T.unify.f { tv RP.cns2◂{ TX.arr_q◂{ v0_0 v1 } TX.r64◂{} } ys } ⊢ tv 
									_dec lv ⊢ lv 
									gen { tv lv v0 } ⊢ { tv lv yk } 
									∐ is ⊢ RP.rcd◂_cns◂{ RP.atm◂ast.hp◂{ rc0 rd0 } _cns◂{ pr0 _nil◂{} } } .
										r64_to_hp { evv glv_n pr0 } ⊢ { evv glv_n rp0 ec1 } 
										asm.cct { ec0 ec1 } ⊢ ec0 
										$ yk ⊢ yk0,yk1 
										alc_type_k.f_i { tav tv %[ 0r ] yk0 } ⊢ { tav tv c_n pa0 }
										^ rc0,rp0,c_n ⊢ rc0,rp0,_,sc0 
											"\tmov rdi,GLX(" 0d' ")\n" 
											"\tmov rax,GLX(" 1d' ")\n"
											`	mov rsi,0x0000_ffff_ffff_ffff 
											` mov rdx,QWORD [rdi] 
                      `	and rsi,rdx 
											`	cmp rax,rsi 
											`	jge err_exc_q
											"\tmov rdx," 2d' "\n" 
                      ` imul rax,rdx 
											`	lea SRC_REG,[rdi+8+8*rax] 
											//
										asm.add_s8 { ec0 sc0 } ⊢ ec0 
										lod_sgm.ptn { { ec0 glv_n } pa0 } ⊢ { { ec0 glv_n } pa1 } 
										$ yk1 ⊢ yk,yk0 
										$ RP.cns2◂{ RP.atm◂ast.rt_usr◂{ %[ 0r ] RP.cns2◂{ stt_v.r64_reg◂rp0 RP.atm◂ast.hp◂{ rc0 rd0 } } } pa1 } ⊢ iy 
										stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
										∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } iy } 																										
									∐. . 
										∎|  
								\\ rsz 
                ∐ 
                  ∐ is ⊢ RP.rcd◂_cns◂{ s0 _cns◂{ r0 _nil◂{} } } .
                    s8_to_hp { evv glv_n s0 } ⊢ { evv glv_n rs e }
                    asm.cct { ec0 e } ⊢ ec0 
                    $ r0 ⊢ r0,r00 
                    r64_to_rax { evv r00 } ⊢ { evv sc0 }
                    asm.add_s8 { ec0 sc0 } ⊢ ec0
                    ^ rs ⊢ rs,sc0 
                      "\tmov rdi,GLX(" 0d' ")\n" 
                      ` push rax 
                      ` mov rsi,~7 
                      ` and rax,rsi
                      ` add rax,16
                      ` mov rsi,rax
                      ` C_CALL_SF realloc 
                      `	cmp rax,QWORD [NULL] 
											`	jz err_NULL 
											"\tmov GLX(" 0d' "),rax\n"
                      ` pop rdi  
                      ` mov QWORD [rax],rdi
                      ` mov rsi,rdi 
                      ` and rdi,7
                      ` mov rdi,QWORD [s8_m+8*rdi]
                      ` shr rsi,3 
                      ` and QWORD [rax+8+8*rsi],rdi
                      // 
                    asm.add_s8 { ec0 sc0 } ⊢ ec0
                    $ RP.cns2◂{ stt_v.s8_reg◂rs r0 } ⊢ iy  
                    stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
										∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } iy } 																										
                  ∐. . 
                    ∎| 
										
                \\ mk_arr_x 
								∐ 
									arr.stt_mk_arr { %[ ast.hp.arr.x ] gfl is evv tav tv ys glv_n lb_n  } ⊢ { gfl evv tav tv glv_n lb_n  { eds1 eg1 e0 } iy }
									asm.cct { eds eds1 } ⊢ eds 
									asm.cct { ec0 e0 } ⊢ ec0  
									asm.cct { eg0 eg1 } ⊢ eg0 
									stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
									∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  irv tav tv { eg0 eds ec0 ew0 } iy } 									 
								
								\\ push 
								∐ 
									inst { tv %[ 1r ] ys } ⊢ { tv lv ys }
									newvar_l { tv lv } ⊢ { tv lv v0 } 
									$ v0 ⊢ v0,v0_0,v0_1
									T.unify.f { tv RP.cns2◂{ v0_0 TX.arr_x◂v0_1 } ys } ⊢ tv 
									_dec lv ⊢ lv 
									gen { tv lv v0 } ⊢ { tv lv yk } 	
									∐ is ⊢ RP.rcd◂_cns◂{ pk _cns◂{ RP.atm◂ast.hp◂{ r0 ast.hp.arr◂d0 } _nil◂{} } } . 
										$ yk ⊢ yp0,yp1 
										alc_type_k.f_i { tav tv %[ 0r ] yp0 } ⊢ { tav tv c_n pa0 }
										inc_x lb_n ⊢ { lb0 lb_n } 
										^ r0,c_n,lb0 ⊢ r0,c_n,_,sc0 
											"\tmov rdi,GLX(" 0d' ")\n" 
											`	movzx rsi,BYTE [rdi+7]
											`	mov rax,0x0000_ffff_ffff_ffff 
											`	and rax,QWORD [rdi]
											`	add rax,1
											`	bt rax,rsi 
											"\tjnc LB_" 2d' "\n"
											`	push rax 
											`	add rsi,1 
											`	push rsi 
											`	xor rax,rax
											`	bts rax,rsi 
											"\tmov rsi," 1d' "\n" 
      		  					` imul rax,rsi 
											`	lea rsi,[8+8*rax]
											` C_CALL_SF realloc
											`	cmp rax,QWORD [NULL] 
											`	jz err_NULL 
											"\tmov GLX(" 0d' "),rax\n" 
											`	mov rdi,rax
											`	pop rsi 
											`	pop rax 
											"LB_" 2d' ":\n" 
											`	mov QWORD [rdi],rax 
											`	mov BYTE [rdi+7],sil
											"\tmov rsi," 1d' "\n" 
											`	sub rax,1
											` imul rax,rsi 
											`	lea DST_REG,[rdi+8+8*rax]
											//
										asm.add_s8 { ec0 sc0 } ⊢ ec0 
										mov_ptn2.to_sgm_ptn { ec0 { evv tav tv eds } glv_n pk pa0 } ⊢ { ec0 { evv tav tv eds } glv_n } 
										$ RP.atm◂ast.hp◂{ r0 ast.hp.arr◂d0 } ⊢ iy 
										stt_jmp_axm { ec0 evv tav tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv eds glv_n iy }
										∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } iy } 																										
									∐. . 
										∎|
								\\ pop 
								∐ 
									∎| 
									\\ id_par 
								∐ 
									∐ la ⊢ _cns◂{ f0 _nil◂{} }; is ⊢ RP.rcd◂_cns◂{ p0 _cns◂{ p1 _nil◂{} } } .
										inst { tv %[ 1r ] ys } ⊢ { tv lv ys }
										newvar_l { tv lv } ⊢ { tv lv v0 } 
										newvar_l { tv lv } ⊢ { tv lv v1 } 
										$ v0 ⊢ v0,v0_0 
										T.unify.f { tv RP.cns2◂{ v1 v0_0 } ys } ⊢ tv 
										_dec lv ⊢ lv 
										gen { tv lv v0 } ⊢ { tv lv ys } 
										$ f_c ⊢ 
										∐ { lbi f_call◂vl0 } . 
											$ p0 ⊢ p0,p00
											ast.mk_lst { vl0 p00 } ⊢ vl0 
											stt_jmp { V rfv ox { lbi f_call◂vl0 } { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } { ys p1 f0 } } ⊢ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } iy }
											$ RP.cns2◂{ p0 iy } ⊢ iy 
											∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } iy } 																										
										∐. { lbi f_jmp◂pr } . 
											$ lbi ⊢ lbi,lbi0 
											$ p0 ⊢ p0,p00 
											ast.mk_lst { ⟦⟧ p00 } ⊢ vl0 
											$ { lbi0 f_call◂vl0 } ⊢ f_c
											stt_jmp { V rfv ox f_c { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } { ys p1 f0 } } ⊢ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } iy }  									 												
											$ RP.cns2◂{ p0 iy } ⊢ iy 
											$ pr ⊢ pr,pr0 
											mov_ptn2.ptn { ec0 { evv tav tv eds } glv_n iy pr0 } ⊢ { ec0 { evv tav tv eds } glv_n } 
											ret ec0 ⊢ ec0 
											∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } pr } 																												
									∐. . 
										∎| 
								\\ ctr 
								∐ 
									∐ la ⊢ _cns◂{ o _nil◂{} } . 
										stt_jmp { V rfv ox f_c { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } { ys is o } } ⊢| 									 
									∐. . 
										∎|
								\\ oom 
								∐
									∐ la ⊢ _cns◂{ m _nil◂{} } .
										slv.ct_ptn { { %[ 1r ] evv tv } m } ⊢ { { lv evv tv } m yk }
										inst { tv lv ys } ⊢ { tv lv ys }
										newvar_l { tv lv } ⊢ { tv lv v0 } 
										$ v0 ⊢ v0,v0_0 
										$ ys ⊢ ys,ys0 
										T.unify.f { tv yk TX.t_mtc◂{ ys0 v0_0 } } ⊢ tv 
										_dec lv ⊢ lv 
										gen { tv lv v0 } ⊢ { tv lv yd } 
										gen { tv lv ys } ⊢ { tv _ ys }
										stt_oom { tav tv yd f_c } ⊢ { tav tv f_c pr } 
										_cli {} ⊢ VM  
										mk_mtc { { VM evv tv ‹› ys } m } ⊢ { VM evv tv m } 
										smt m ⊢ m 
										$ { rfv gfl cl mfv irv ei_n ev_n eg0 eds ew0 V } ⊢ FE
										inc_x lb_n ⊢ { LBR lb_n } 
										$ { glv_n lb_n tav LBR ec0 } ⊢ EE 
										stt_mtc { { VM m } ox f_c evv tv FE EE is } ⊢ { VM evv tv FE EE }
										$ EE ⊢ { glv_n lb_n tav LBR ec0 }
										lb_etr { LBR ec0 } ⊢ { _ ec0 } 
										$ FE ⊢ { rfv gfl cl mfv irv ei_n ev_n eg0 eds ew0 V }
										∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } pr } 					
										\[
										∎| 
									\]
									∐. . 
										∎|		
								\\ moo 
								∐ 
									∎| 
								\\ mcp 
								∐ 
									∎| 
								\\ mcn 
								∐ 
									∎|
								\\ mop 
								∐ 
									∎| 
								\\ mt_e 
								∐ 
									∎| 
								\\ mt_ne 
								∐ 
									∎| 
								\\ mt_le 
								∐ 
									∎| 
								\\ exn 
								∐ 
									∐ la ⊢ _cns◂{ RP.atm◂ast.k_r64◂ne _nil◂{} } . 
										$ is ⊢ _ 
										^ ne ⊢ _,se 
											"; ∎|\n" 
											"exn " 0d' ":\n" // 
										printf { eds ec0 se lb_n } ⊢ { eds ec0 se lb_n }
										^ _ ⊢ ec1 
										"\tadd rsp,8\n" 
											"\tpop rdi\n" 
											"\tjmp rdi\n" // 
										asm.add_s8 { ec0 ec1 } ⊢ ec0 
										$ RP.atm◂ast.btm◂{} ⊢ pr 
										∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } pr } 																																															
									∐. . 
										∎|
								\\ tj 
								∐ 
									∎| 
								\\ tjn 
								∐ 
									∎| 
								\\ tjc 
								∐ 
									∎|
								∐.  
									^ a ⊢ a,ee1 
										"; ##" 0d' ".. ⊢ ..\n"
										"\tcall ETR_" 0d' "\n" //
									_emt ee1 ⊢ ee1 
									∎| 											
							∐. . 
								ast.pnt.cst { evv k } ⊢ { evv sk } 
								^ sk ⊢ _,ec1 
									"; " "#" 0' ".." " ⊢|\n"  // 
								_emt ec1 ⊢ _ 
								∎|
					
					@.stt_mtc { { VM m } ox f_c evv tv FE EE is }
						$ m ⊢ 
						∐ nm_e◂{ ys o } .
							$ FE ⊢ { rfv gfl cl mfv irv ei_n ev_n eg0 eds ew0 V }
							$ EE ⊢ { glv_n lb_n tav LBR ec0 }
							$ f_c ⊢ 
							∐ { lbi f_call◂{ pr vl0 } } . 
								stt_jmp { V rfv ox { lbi f_call◂vl0 } { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } { ys is o } } ⊢ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } iy }  									  
								mov_ptn2.ptn { ec0 { evv tav tv eds } glv_n iy pr } ⊢ { ec0 { evv tav tv eds } glv_n } 													
								$ { rfv gfl cl mfv irv ei_n ev_n eg0 eds ew0 V } ⊢ FE
								jmp_lb { LBR ec0 } ⊢ { LBR ec0 } 
								$ { glv_n lb_n tav LBR ec0 } ⊢ EE
								∎ { VM evv tv FE EE }
							∐. { lbi f_jmp◂pr } . 
								stt_jmp { V rfv ox { lbi f_jmp◂pr } { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } { ys is o } } ⊢ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } _ }  									  
								$ { rfv gfl cl mfv irv ei_n ev_n eg0 eds ew0 V } ⊢ FE
								$ { glv_n lb_n tav LBR ec0 } ⊢ EE			
								∎ { VM evv tv FE EE }
						∐. nm_m◂m .		
							cla.l { VM m } ⊢ { VM _ p◂{ mo rbp pb p1 } }
							$ mo ⊢ 
							∐ mop◂{ ps pm } . 
								ast.RV.ini {} ⊢ AV 
								stt_mtc_lp { { is pm ps rbp pb p1 } ox f_c AV ⟦⟧ FE VM EE evv tv } ⊢| 				
							∐. mt◂{ t { x y } } . 
								$ is ⊢ is,is0 
								idx.ini {} ⊢ RV 
								idx.asc_ply { RV { x is0 } } ⊢ RV 
								rt_of_mp_T◂◂idx.get { RV y } ⊢ { _ is0 }  
								∐ is0 ⊢ RP.rcd◂_cns◂{ RP.rcd◂_cns◂{ v0 _cns◂{ v1 _nil◂{} } } _cns◂{ _ _nil◂{} } } . 
									$ EE ⊢ { glv_n lb_n tav LBR ec0 } 
									inc_x lb_n ⊢ { lb_f lb_n }			 
									stt_mtc_test { t evv lb_n lb_f v0 v1 ec0 } ⊢ { evv lb_n lb_f ec0 }
									$ ox ⊢  ox,ox0 
									$ f_c ⊢ f_c,f_c0
									$ is ⊢ is,is0 
									smt p1 ⊢ m 
									stt_mtc { { VM m } ox0 f_c0 evv tv FE { glv_n lb_n tav LBR ec0 } is0 } ⊢ { VM evv tv FE { glv_n lb_n tav LBR ec0 } }
									lb_etr { lb_f ec0 } ⊢ { lb_f ec0 } 
				 					stt_mtc_rb_brp { VM evv rbp pb is } ⊢ { VM evv m is } 
									stt_mtc { { VM m } ox f_c evv tv FE { glv_n lb_n tav LBR ec0 } is } ⊢| 									
								∐. . 
									∎|
				@.stt_test_hp { t r0 r1 h lb_f ec0 }
					$ t ⊢ 
					∐ mt_e◂{} . 
						∐ h ⊢ ast.hp.r64◂{} . 
							cmp.idx_idx { r0 r1 ec0 } ⊢ { _ _ ec0 }
							jnz_lb { lb_f ec0 } ⊢ { lb_f ec0 }
							∎ { lb_f ec0 }								 							
						∐ h ⊢ ast.hp.opq◂_ . 	
							^ r0,r1 ⊢ _,_,e0 
								"\tmov rdi,GLX(" 1d' ")\n"
								"\tmov rsi,GLX(" 0d' ")\n" 
								`	call eq_s8_q  
								"\tcmp rax,1\n" // 
							asm.add_s8 { ec0 e0 } ⊢ ec0 
							jnz_lb { lb_f ec0 } ⊢ { lb_f ec0 }								 							
							∎ { lb_f ec0 }								 							
						∐ h ⊢ ast.hp.id◂{ i _ }; i'=ast.hp.id.pt . 
							cmp.idx_idx { r0 r1 ec0 } ⊢ { _ _ ec0 }
							jnz_lb { lb_f ec0 } ⊢ { lb_f ec0 }
							∎ { lb_f ec0 }								 							
						∐ h ⊢ ast.hp.id◂{ i _ }; i'=ast.hp.id.Clr . 
							cmp.idx_idx { r0 r1 ec0 } ⊢ { _ _ ec0 }
							jnz_lb { lb_f ec0 } ⊢ { lb_f ec0 }
							∎ { lb_f ec0 }								 							
						∐. . 
							∎|
					∐ mt_ne◂{} . 
						∐ h ⊢ ast.hp.r64◂{} . 
							cmp.idx_idx { r0 r1 ec0 } ⊢ { _ _ ec0 }
							jz_lb { lb_f ec0 } ⊢ { lb_f ec0 }		
							∎ { lb_f ec0 }								 							
						∐ h ⊢ ast.hp.opq◂_ . 	
							^ r0,r1 ⊢ _,_,e0 
								"\tmov rdi,GLX(" 1d' ")\n"
								"\tmov rsi,GLX(" 0d' ")\n" 
								`	call eq_s8_q  
								"\tcmp rax,1\n" // 
							asm.add_s8 { ec0 e0 } ⊢ ec0 
							jz_lb { lb_f ec0 } ⊢ { lb_f ec0 }		
							∎ { lb_f ec0 }								 							
						∐ h ⊢ ast.hp.id◂{ i _ }; i'=ast.hp.id.pt .
							cmp.idx_idx { r0 r1 ec0 } ⊢ { _ _ ec0 }
							jz_lb { lb_f ec0 } ⊢ { lb_f ec0 } 
							∎ { lb_f ec0 }
						∐ h ⊢ ast.hp.id◂{ i _ }; i'=ast.hp.id.Clr .
							cmp.idx_idx { r0 r1 ec0 } ⊢ { _ _ ec0 }
							jz_lb { lb_f ec0 } ⊢ { lb_f ec0 } 
							∎ { lb_f ec0 }
						∐. . 
							∎|
					∐. mt_le◂{} . 
						∐ h ⊢ ast.hp.r64◂{} . 
							cmp.idx_idx { r0 r1 ec0 } ⊢ { _ _ ec0 }
							jg_lb { lb_f ec0 } ⊢ { lb_f ec0 }
							∎ { lb_f ec0 }
						∐. . 
							∎|
				@.stt_test_im { b evv t c r h lb_f ec0 }
					$ t ⊢ 
					∐ mt_e◂{} . 
						∐ h ⊢ ast.hp.r64◂{} . 
							ast.r64_of_k { evv c } ⊢ { evv x } 
							cmp.idx_im { r x ec0 } ⊢ { _ _ ec0 }
							jnz_lb { lb_f ec0 } ⊢ { lb_f ec0 }
							∎ { evv lb_f ec0 }								 							
						∐ h ⊢ ast.hp.opq◂_ . 	
							∎|					
						∐ h ⊢ ast.hp.id◂{ i _ }; i'=ast.hp.id.pt . 
							∎|						 							
						∐ h ⊢ ast.hp.id◂{ i _ }; i'=ast.hp.id.Clr . 
							∎|						 							
						∐. . 
							∎|
					∐ mt_ne◂{} . 
						∐ h ⊢ ast.hp.r64◂{} . 
							ast.r64_of_k { evv c } ⊢ { evv x } 
							cmp.idx_im { r x ec0 } ⊢ { _ _ ec0 }
							jz_lb { lb_f ec0 } ⊢ { lb_f ec0 }		
							∎ { evv lb_f ec0 }								 							
						∐. . 
							∎|
					∐. mt_le◂{} . 
						∐ h ⊢ ast.hp.r64◂{} . 
							ast.r64_of_k { evv c } ⊢ { evv x } 
							cmp.idx_im { r x ec0 } ⊢ { _ _ ec0 }
							∐ b ⊢ bl.t◂{} . 
								jg_lb { lb_f ec0 } ⊢ { lb_f ec0 }
								∎ { evv lb_f ec0 }
							∐. . 
								jle_lb { lb_f ec0 } ⊢ { lb_f ec0 }
								∎ { evv lb_f ec0 }
						∐. . 
							∎|
				@.stt_mtc_test { t evv lb_n lb_f v0 v1 e0 }
					∐ v0 ⊢ RP.rcd◂l0; v1 ⊢ RP.rcd◂l1 . 
						∎| 
					∐ v0 ⊢ RP.atm◂a0; v1 ⊢ RP.atm◂a1 . 
						$ a0 ⊢ 
						∐ ast.hp◂{ r0 h0 } . 
							∐ a1 ⊢ ast.hp◂{ r1 h1 } . 
								stt_test_hp { t r0 r1 h0 lb_f e0 } ⊢ { lb_f e0 }
								∎ { evv lb_n lb_f e0 }
							∐ a1 ⊢ ast.hp_im◂c1 . 
								stt_test_im { bl.t◂{} evv t c1 r0 h0 lb_f e0 } ⊢ { evv lb_f e0 } 
								∎ { evv lb_n lb_f e0 }
							∐. . 
								∎|
						∐ ast.hp_im◂c0 . 
							∐ a1 ⊢ ast.hp◂{ r1 h1 } . 
								stt_test_im { bl.f◂{} evv t c0 r1 h1 lb_f e0 } ⊢ { evv lb_f e0 } 
								∎ { evv lb_n lb_f e0 }
							∐ a1 ⊢ ast.hp_im◂c1 . 
								ast.eq_ct { evv c0 c1 } ⊢ { evv c0 c1 b } 
								∐ b ⊢ bl.f◂{} . 
									jmp_lb { lb_f e0 } ⊢ { lb_f e0 } 
									∎ { evv lb_n lb_f e0 }
								∐. . 
									∎ { evv lb_n lb_f e0 }
							∐. . 
								∎|
						∐ ast.btm◂{} . 
							∎|
						∐ ast.stt_adt◂_ . 
							∎|
						∐ ast.dyn_adt◂_ . 
							∎|
						∐. ast.rt_usr◂_ .
							∎|
					∐. . 
						∎|
				@.stt_mtc_lp_lst { { k l0 l1 ps rbp pb p1 } ox f_c AV K FE VM EE evv tv }
					∐ l0 ⊢ _cns◂{ isp l0 }; l1 ⊢ _cns◂{ mp l1 } .
						$ ⟦ K_l◂{ k l0 l1 } < K ⟧ ⊢ K
						stt_mtc_lp { { isp mp ps rbp pb p1 } ox f_c AV K FE VM EE evv tv } ⊢|
					∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
						lst.rev k ⊢ k 
						stt_mtc_K { { RP.rcd◂k ps rbp pb p1 } ox f_c AV K FE VM EE evv tv } ⊢|
					∐. . 
						∎| 
				@.stt_mtc_lp { { isp mp ps rbp pb p1 } ox f_c AV K FE VM EE evv tv }
					$ mp ⊢ 
					∐ RP.rcd◂l1 . 
						$ isp ⊢ 
						∐ RP.rcd◂l0 . 
							stt_mtc_lp_lst { { ⟦⟧ l0 l1 ps rbp pb p1 } ox f_c AV K FE VM EE evv tv } ⊢|
						∐. RP.atm◂a0 . 		
							∐ a0 ⊢ ast.btm◂{} . 
								$ EE ⊢ { glv_n lb_n tav LBR ec0 } 
								asm.add_s8 { ec0 %[ "\tRT_ERR 0xffff_2e17\n" ] } ⊢ ec0
								∎ { VM evv tv FE { glv_n lb_n tav LBR ec0 } }
							∐. . 
								_emt %[ "mov_ptn.ptn_to_r d9" ] ⊢ _ 
								∎| 
					∐. RP.atm◂a1 .
						$ a1 ⊢ 
						∐ r◂r1 . 
							ast.RV.set { AV { r1 isp } } ⊢ { AV { r1 o } }
							nnt o ⊢ {} 
							stt_mtc_K { { RP.atm◂r◂r1 ps rbp pb p1 } ox f_c AV K FE VM EE evv tv } ⊢|
						∐. stt_a◂{ ia1 na1 mpa1 } . 
							ast.agl_rt { evv isp } ⊢ { evv a } 
							$ a ⊢ 
							∐ ast.agl_s◂{ ia0 na0 pa0 } . 
								∐ ia0'=ia1' . 
									$ ⟦ K_a◂{ ia0 na0 } < K ⟧ ⊢ K
									stt_mtc_lp { { pa0 mpa1 ps rbp pb p1 } ox f_c AV K FE VM EE evv tv } ⊢|
								∐. . 
									stt_rb_K { RP.atm◂ast.stt_adt◂{ ia0 na0 pa0 } AV K evv } ⊢ { is _ evv } 
									stt_mtc_rb_brp { VM evv rbp pb is } ⊢ { VM evv m is } 
									stt_mtc { { VM m } ox f_c evv tv FE EE is } ⊢| 
							∐ ast.agl_d◂{ { lx0 lx1 } ri rd } .
								$ RP.atm◂stt_a◂{ ia1 na1 mpa1 } ⊢ mpa1 
								$ EE ⊢ { glv_n lb_n tav LBR ec0 } 
								dta_n { tav lx0 } ⊢ { tav lx0 { n vl1 kl1 } } 
								T.iug_axm { tv vl1 kl1 lx1 } ⊢ { tv lx1 } 
								$ lx1 ⊢ hl 
								$ n ⊢ n,n0 
								mk_jmp_tbl { lb_n n0 } ⊢ { lb_n sj lbl } 
								inc_x lb_n ⊢ { lb0 lb_n }
								^ lb0,sj,ri ⊢ lb0,_,_,sc0  
									"\tmov rdi,GLX(" 2d' ")\n" 
									"\tjmp QWORD [LB_" 0d' "+8*rdi]\n"
									"LB_" 0d' ": dq " 1' "\n" //
								asm.add_s8 { ec0 sc0 } ⊢ ec0  
								stt_obs_i { { rd mpa1 ps rbp pb p1 } { glv_n lb_n tav LBR } ec0 lbl hl %[ 0r ] n ox f_c AV K FE VM evv tv } ⊢|
							∐. ast.agl_b◂{} . 
								$ EE ⊢ { glv_n lb_n tav LBR ec0 } 
								asm.add_s8 { ec0 %[ "\tRT_ERR 0xfffe_2e17\n" ] } ⊢ ec0
								∎ { VM evv tv FE { glv_n lb_n tav LBR ec0 } }
							
				@.stt_mtc_K { { pi ps rbp pb p1 } ox f_c AV K FE VM EE evv tv } 
					$ K ⊢ 
					∐ _cns◂{ k K } .
						$ k ⊢ 
						∐ K_l◂{ k l0 l1 } . 
							$ ⟦ pi < k ⟧ ⊢ k 
							stt_mtc_lp_lst { { k l0 l1 ps rbp pb p1 } ox f_c AV K FE VM EE evv tv } ⊢| 
						∐. K_a◂{ ia na } . 
							stt_mtc_K { { RP.atm◂stt_a◂{ ia na pi } ps rbp pb p1 } ox f_c AV K FE VM EE evv tv } ⊢|
					∐. _nil◂{} .
						idx.csm_tpl_ptn { AV ps } ⊢ { _ is } 
						smt p1 ⊢ m 
						stt_mtc { { VM m } ox f_c evv tv FE EE is } ⊢| 
				@.stt_rb_K_l { { AV evv l0 } k } 
					$ k ⊢ 
					∐ _cns◂{ pi k } . 
						rt_of_mp { { AV evv } pi } ⊢ { { AV evv } pi } 
						stt_rb_K_l { { AV evv ⟦ pi < l0 ⟧ } k } ⊢| 
					∐. _nil◂{} . 
						∎ { AV evv l0 }
				@.stt_rb_K { pi AV K evv } 
					$ K ⊢ 
					∐ _cns◂{ k K } .
						$ k ⊢ 
						∐ K_l◂{ k l0 _ } . 
							stt_rb_K_l { { AV evv l0 } k } ⊢ { AV evv l0 } 
							stt_rb_K { RP.rcd◂l0 AV K evv } ⊢|
						∐. K_a◂{ ia na } . 
							stt_rb_K { RP.atm◂ast.stt_adt◂{ ia na pi } AV K evv } ⊢|
					∐. _nil◂{} .
						∎ { pi AV evv } 
				@.stt_mtc_rb_brp { V evv rbp brp is }
					$ brp ⊢ 
					∐ _some◂brp .
						∎ { V evv brp is } 
					∐. _none◂{} . 
						$ rbp ⊢ 
						∐ _some◂rbp .
							_clc_o { V rbp } ⊢ { V p◂{ mo rbp brp nxp } } 
							$ mo ⊢ 
							∐ mop◂{ x y } . 
								$ x ⊢ x,x0 
								$ y ⊢ y,y0 
								idx.ini {} ⊢ RV 
								idx.asc_ply { RV { x0 is } } ⊢ RV 
								rt_of_mp_T◂◂idx.get { RV y0 } ⊢ { _ is } 
								$ rbp ⊢ rbp,rbp0 
								$ brp ⊢ brp,brp0 
								_clc_i { V p◂{ mop◂{ x y } rbp brp nxp } } ⊢ { V _ }
								stt_mtc_rb_brp { V evv rbp0 brp0 is } ⊢| 
							∐. mt◂{ t { x y } } . 
								∎|
						∐. _none◂{} . 
							_emt %[ "STT_NON_EXH_ERR:" ] ⊢ _ 
							∎|
					@.stt_obs_i { { rd mpa1 ps rbp pb p1 } { glv_n lb_n tav LBR } e0 lbl hl i n ox f_c AV K FE VM evv tv }
						∐ lbl ⊢ p_cns◂{ lbi lbl }; hl ⊢ _cns◂{ h hl } .
							lb_etr { lbi e0 } ⊢ { _ e0 } 
							$ rd ⊢ rd,rd0 
							stt_alc_hp { tv tav glv_n e0 rd0 h } ⊢ { tv tav glv_n e0 pi } 
							$ pi ⊢ 
        		  ∐ _none◂{} . 
								_inc i ⊢ i 
								asm.add_s8 { e0 %[ "\tRT_ERR 0xbbff_2e17\n" ] } ⊢ e0
								stt_obs_i { { rd mpa1 ps rbp pb p1 } { glv_n lb_n tav LBR } e0 lbl hl i n ox f_c AV K FE VM evv tv } ⊢|
							∐. _some◂pi . 
								$ i ⊢ i,i0 
							  _inc i ⊢ i 
							  $ n ⊢ n,n0 
							  $ K ⊢ K,K0 
							  $ mpa1 ⊢ mpa1,mpa1_0
								$ ox ⊢  ox,ox0 
								$ f_c ⊢ f_c,f_c0
								$ ps ⊢ ps,ps0 
								$ rbp ⊢ rbp,rbp0 
								$ pb ⊢ pb,pb0 
								$ p1 ⊢ p1,p10 
								\\$ AV ⊢ AV,AV0 
								RV.rpc AV ⊢ { AV AV0 } 
								$ { glv_n lb_n tav LBR e0 } ⊢ EE 
								stt_mtc_lp { { RP.atm◂ast.stt_adt◂{ i0 n0 pi } mpa1_0 ps0 rbp0 pb0 p10 } ox0 f_c0 AV0 K0 FE VM EE evv tv } ⊢ { VM evv tv FE { glv_n lb_n tav LBR e0 } }
								stt_obs_i { { rd mpa1 ps rbp pb p1 } { glv_n lb_n tav LBR } e0 lbl hl i n ox f_c AV K FE VM evv tv } ⊢|
						∐ lbl ⊢ p_end◂lbi; hl ⊢ _cns◂{ h _ } .
							lb_etr { lbi e0 } ⊢ { _ e0 } 
							stt_alc_hp { tv tav glv_n e0 rd h } ⊢ { tv tav glv_n e0 pi } 
							$ pi ⊢ 
        		  ∐ _none◂{} . 
								_inc i ⊢ i 
								asm.add_s8 { e0 %[ "\tRT_ERR 0xbbfe_2e17\n" ] } ⊢ e0
								$ { glv_n lb_n tav LBR e0 } ⊢ EE 
								∎ { VM evv tv FE EE }
							∐. _some◂pi . 
								$ { glv_n lb_n tav LBR e0 } ⊢ EE 
							  stt_mtc_lp { { RP.atm◂ast.stt_adt◂{ i n pi } mpa1 ps rbp pb p1 } ox f_c AV K FE VM EE evv tv } ⊢|
						∐. . 
							_emt %[ "obs_i:0" ] ⊢ _ 
							∎|
					@.f # { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  { rv irv } tav tv lc { eg0 eds ec0 ew0 } ft } 
						ret_f { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  { rv irv } tav tv lc { eg0 eds ec0 ew0 } ft } ⊢|						
					@.ret_f { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  { rv irv } tav tv lc { eg0 eds ec0 ew0 } ft } 
						$ lc ⊢
						∐ ast.jmp◂{ o x } . 
							$ x ⊢ x,s0
							crt_type_k.src_ptn { { evv tv rv } s0 } ⊢ { { evv tv rv } ys } 
							T.inst_cl { tv ys cl } ⊢ { tv ys cl }
							idx.csm_ptn { { evv irv } x } ⊢ { { evv irv } is }
							slv.ct_ptn { { %[ 1r ] evv tv } o } ⊢ { { lv evv tv } o yk } 
							_dec lv ⊢ lv 
							gen { tv lv yk } ⊢ { tv lv yk }
							_inc lv ⊢ lv  
							$ ft ⊢ { lb_i pr yr }  
							$ yr ⊢ yr,yr0 
							T.iug_imp { tv lv ys yr0 yk } ⊢ { tv lv ys _ yk } 
							$ { lb_i f_jmp◂pr } ⊢ f_c 
							dlt.env { gfl evv irv tv tav lb_n glv_n { eg0 eds ec0 } } ⊢ { gfl evv irv tv tav lb_n glv_n { eg0 eds ec0 } } 
							stt_jmp { V rfv  ‹› f_c { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  irv tav tv { eg0 eds ec0 ew0 } { ys is o } } ⊢ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec0 ew0 } p1 }  
							∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } rv tav tv { eg0 eds ec0 ew0 } } 
						∐ ast.seq◂{ { o s d } lc } .
							$ s ⊢ s,s0
							crt_type_k.src_ptn { { evv tv rv } s0 } ⊢ { { evv tv rv } ys } 
							idx.csm_ptn { { evv irv } s } ⊢ { { evv irv } is }
							$ d ⊢ d,d0 
							crt_type_k.tpl_ptn { { evv tv rv } d0 } ⊢ { { evv tv rv } yd }
							T.inst_cl { tv ys cl } ⊢ { tv ys cl }
							T.inst_cl { tv yd cl } ⊢ { tv yd cl } 
							slv.ct_ptn { { %[ 1r ] evv tv } o } ⊢ { { lv evv tv } o yk }
							_dec lv ⊢ lv 
							gen { tv lv yk } ⊢ { tv lv yk }
							_inc lv ⊢ lv  
							T.iug_imp { tv lv ys yd yk } ⊢ { tv lv ys yd yk } 
							$ asm.e◂{} ⊢ ec1 
							$ ft ⊢ { lb_i pr yr }  
							$ lb_i ⊢ lb_i,lb_i0 
							$ { lb_i0 pr yr } ⊢ ft 
							$ { lb_i f_call◂⟦⟧ } ⊢ f_c 
							stt_jmp { V rfv _none◂{} f_c { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  irv tav tv { eg0 eds ec1 ew0 } { ys is o } } ⊢ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec1 ew0 } p1 }  
							asm.cct { ec0 ec1 } ⊢ ec0
							idx.tpl_ptn { irv d p1 } ⊢ irv
							ret_f { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } { rv irv } tav tv lc { eg0 eds ec0 ew0 } ft } ⊢|						
						∐ ast.mtc◂q0 .
							MIRV.ini {} ⊢ mirv 
							RIRV.ini {} ⊢ RV 
							mirv_of { { mirv RV } irv } ⊢ { mirv RV }    
							$ iso◂{ rfv gfl cl mfv ei_n ev_n rv eg0 eds ew0 } ⊢ FE
							mtc { { V q0 } mirv RV glv_n lb_n evv tav tv ec0 FE ft } ⊢|
						∐ ast.op_exh◂{ o s d lc lx } . 
							$ s ⊢ s,s0
							crt_type_k.src_ptn { { evv tv rv } s0 } ⊢ { { evv tv rv } ys } 
							idx.csm_ptn { { evv irv } s } ⊢ { { evv irv } is }
							$ d ⊢ d,d0 
							crt_type_k.tpl_ptn { { evv tv rv } d0 } ⊢ { { evv tv rv } yd }
							T.inst_cl { tv ys cl } ⊢ { tv ys cl }
							T.inst_cl { tv yd cl } ⊢ { tv yd cl } 
							$ %[ 1r ] ⊢ lv 
							slv.ct_ptn { { lv evv tv } o } ⊢ { { lv evv tv } o yk }
							_dec lv ⊢ lv 
							gen { tv lv yk } ⊢ { tv lv yk }
							_inc lv ⊢ lv  
							T.iug_imp { tv lv ys yd yk } ⊢ { tv lv ys yd yk } 
							$ asm.e◂{} ⊢ ec1 
							inc_x lb_n ⊢ { lb_x lb_n } 
							$ lb_x ⊢ lb_x,lb_x0 
							$ ft ⊢ { lb_i pr yr }  
							$ lb_i ⊢ lb_i,lb_i0 
							$ { lb_i0 pr yr } ⊢ ft 
							$ { lb_i f_call◂⟦⟧ } ⊢ f_c 
							stt_jmp { V rfv _some◂lb_x f_c { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec1 ew0 } { ys is o } } ⊢ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec1 ew0 } p1 }  
							asm.cct { ec0 ec1 } ⊢ ec0
							$ _nil◂{} ⊢ dl 
							ast.IRV.rpc irv ⊢ { irv irv0 } 
							idx.tpl_ptn { irv d p1 } ⊢ irv
							$ ft ⊢ ft,ft0 
							ret_f { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  { rv irv } tav tv lc { eg0 eds ec0 ew0 } ft0 } ⊢ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } rv tav tv { eg0 eds ec0 ew0 } }		
							lb_etr { lb_x0 ec0 } ⊢ { _ ec0 } 
							ret_f { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } { rv irv0 } tav tv lx { eg0 eds ec0 ew0 } ft } ⊢|
						∐. ast.tj◂{ x v r } . 
							ast.IRV.asc { irv x } ⊢ { irv { _ px } }
							smt_err◂◂"eq:1" px ⊢ px
							ast.r64_of_rt { evv px } ⊢ { evv x } 
							$ x ⊢ 
							∐ ast.im_of◂i . 
								∎| 
							∐. ast.hp_of◂rx . 
								tj { { rx v r %[ 0r ] asm.e◂{} asm.e◂{} } V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  { rv irv } tav tv { eg0 eds ec0 ew0 } ft }	⊢|	
				@.tj { { x v r i elt ec1 } V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } { rv irv } tav tv { eg0 eds ec0 ew0 } ft }
				 	$ v ⊢ 
					∐ _cns◂{ lc v } . 
						inc_x lb_n ⊢ { lbi lb_n } 
						lb_etr { lbi ec1 } ⊢ { lbi ec1 } 
						^ lbi ⊢ lbi,sl
							"LB_" 0d' "," //
						asm.add_s8 { elt sl } ⊢ elt
						ast.IRV.rpc irv ⊢ { irv irv0 } 
						$ ft ⊢ ft,ft0 
						ret_f { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  { rv irv0 } tav tv lc { eg0 eds ec1 ew0 } ft0 } ⊢ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } rv tav tv { eg0 eds ec1 ew0 } }		
				 		_inc i ⊢ i 
						tj { { x v r i elt ec1 } V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv }  { rv irv } tav tv { eg0 eds ec0 ew0 } ft }	⊢|	
					∐. _nil◂{} . 
						inc_x lb_n ⊢ { lb0 lb_n } 
						inc_x lb_n ⊢ { lb1 lb_n } 
						^ lb0,lb1,x,i ⊢ _,lb1,_,i,sc0  
							"\tmov rax,GLX(" 2d' ")\n" 
							"\tcmp rax," 3d' "\n" 
							"\tjge LB_" 1d' "\n" 
							"\tjmp QWORD [LB_" 0d' "+8*rax]\n"
							"LB_" 0d' ": dq " // 
						asm.add_s8 { asm.e◂{} sc0 } ⊢ el0 
						asm.cct { el0 elt } ⊢ el0 
						asm.add_s8 { el0 %[ "0\n" ] } ⊢ el0 
						asm.cct { el0 ec1 } ⊢ ec1 
						lb_etr { lb1 ec1 } ⊢ { _ ec1 } 
						asm.cct { ec0 ec1 } ⊢ ec0 
						ret_f { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } { rv irv } tav tv r { eg0 eds ec0 ew0 } ft } ⊢| 
						
			@.mtc_rb_brp { V rbp brp }
				$ brp ⊢ 
				∐ _some◂brp .
					∎ { V brp } 
				∐. _none◂{} . 
					$ rbp ⊢ 
					∐ _some◂rbp .
						_clc_o { V rbp } ⊢ { V ast.p◂{ nm rbp brp nxp } } 
						$ rbp ⊢ rbp,rbp0 
						$ brp ⊢ brp,brp0 
						_clc_i { V ast.p◂{ nm rbp brp nxp } } ⊢ { V _ }
						mtc_rb_brp { V rbp0 brp0 } ⊢| 
					∐. _none◂{} . 
						_emt %[ "NON_EXH_ERR:" ] ⊢ _ 
						∎|
			@.mk_irv_i # { { irv mirv RV } r } 
				MIRV.asc { mirv r } ⊢ { mirv { r o } } 
				smt_err◂◂"mk_irv_i:0" o ⊢ p 
				rt_of { RV p } ⊢ { RV p } 
				ast.IRV.set { irv { r p } } ⊢ { irv { r o } } 
				nnt o ⊢ {} 
				∎ { irv mirv RV } 
			@.mtc { { V q0 } mirv RV glv_n lb_n evv tav tv ec0 FE ft } 
				$ q0 ⊢ 
				∐ nx_e◂{ rl lc } .
					inv FE ⊢ { rfv gfl cl mfv ei_n ev_n rv eg0 eds ew0 }
					ast.IRV.ini {} ⊢ irv 
					lst.fld_l◂◂mk_irv_i { { irv mirv RV } rl } ⊢ { irv mirv _ }
					ret_f { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } { rv irv } tav tv lc { eg0 eds ec0 ew0 } ft } ⊢| 
				∐. nx_m◂q0 . 
					cla.l { V q0 } ⊢ { V q0 o }
					$ o ⊢ ast.p◂{ nm rbp brp nxp }
					$ nm ⊢ 
					∐ ast.mtc_id◂{ sp mp } . 
						csm_tpl_ptn { mirv sp } ⊢ { mirv isp } 
						$ iso◂{ rbp brp nxp } ⊢ ME 
						mtc_lp { isp mp mirv RV ⟦⟧ ec0 lb_n glv_n evv tav tv V ME FE ft } ⊢| 
					∐. ast.mtc_test◂{ tt v0 v1 } .  
						inc_x lb_n ⊢ { lb_t lb_n } 
						inc_x lb_n ⊢ { lb_f lb_n }			 
						mtc_test { tt lb_n evv mirv RV lb_t lb_f v0 v1 ec0 } ⊢ { lb_n evv mirv MV lb_t lb_f ec0 }
						RIRV.rpc MV ⊢ { R_T R_F }
						MIRV.rpc mirv ⊢ { mirv_t mirv_f }
						$ ft ⊢ ft,ft0 
						lb_etr { lb_t ec0 } ⊢ { lb_t ec0 } 
						mtc { { V nxp } mirv_t R_T glv_n lb_n evv tav tv ec0 FE ft0 } ⊢ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } rv tav tv { eg0 eds ec0 ew0 } } 													
						$ iso◂{ rfv gfl cl mfv ei_n ev_n rv eg0 eds ew0 } ⊢ FE
						lb_etr { lb_f ec0 } ⊢ { lb_f ec0 } 
				 		mtc_rb_brp { V rbp brp } ⊢ { V nxp } 
						mtc { { V nxp } mirv_f R_F glv_n lb_n evv tav tv ec0 FE ft } ⊢| 
			@.mtc_test { tt lb_n evv mirv RV lb_t lb_f v0 v1 ec0 }
				$ tt ⊢ 
				∐ ast.test_eq◂{} . 
					test.eq { bl.f◂{} lb_n evv mirv RV lb_t lb_f v0 v1 ec0 } ⊢| 
				∐ ast.test_neq◂{} . 
					test.eq { bl.t◂{} lb_n evv mirv RV lb_t lb_f v0 v1 ec0 } ⊢| 
				∐. ast.test_cmp◂{} . 
					test.cmp { lb_n evv mirv RV lb_t lb_f v0 v1 ec0 } ⊢| 
			@.obs_i { { tv tav lb_n glv_n mirv { rirv_n rirv } e0 } evv mpa1 vi i n rd lbl hl K V ME FE ft } 
				∐ lbl ⊢ p_cns◂{ lbi lbl }; hl ⊢ _cns◂{ h hl } .
					lb_etr { lbi e0 } ⊢ { _ e0 } 
					$ rd ⊢ rd,rd0 
					alc_hp { { rirv_n rirv } tv tav glv_n e0 rd0 h } ⊢ { { rirv_n rirv } tv tav glv_n e0 pi } 
					$ pi ⊢ 
          ∐ _none◂{} . 
						_inc i ⊢ i 
						asm.add_s8 { e0 %[ "\tRT_ERR 0xbbff_2e17\n" ] } ⊢ e0
						obs_i { { tv tav lb_n glv_n mirv { rirv_n rirv } e0 } evv mpa1 vi i n rd lbl hl K V ME FE ft } ⊢| 				
					∐. _some◂pi . 
						$ i ⊢ i,i0 
					  _inc i ⊢ i 
					  $ n ⊢ n,n0 
					  $ { rirv_n rirv } ⊢ { rirv_n rirv },{ rirv_n0 rirv0 } 
						RIRV.set { rirv0 { vi stt◂{ i0 n0 pi } } } ⊢ { rirv0 { vi _ } }  
					  $ K ⊢ K,K0 
					  $ ME ⊢ ME,ME0 
					  $ vi ⊢ vi,vi0 
					  $ mpa1 ⊢ mpa1,mpa1_0
					  MIRV.rpc mirv ⊢ { mirv mirv0 } 
					  $ ft ⊢ ft,ft0 
						mtc_lp { RP.atm◂adt_v◂vi0 mpa1_0 mirv0 { rirv_n0 rirv0 } K0 e0 lb_n glv_n evv tav tv V ME0 FE ft0 } ⊢ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } rv tav tv { eg0 eds e0 ew0 } } 													
					  $ iso◂{ rfv gfl cl mfv ei_n ev_n rv eg0 eds ew0 } ⊢ FE
					  obs_i { { tv tav lb_n glv_n mirv { rirv_n rirv } e0 } evv mpa1 vi i n rd lbl hl K V ME FE ft } ⊢| 
				∐ lbl ⊢ p_end◂lbi; hl ⊢ _cns◂{ h _ } .
					lb_etr { lbi e0 } ⊢ { _ e0 } 
					alc_hp { { rirv_n rirv } tv tav glv_n e0 rd h } ⊢ { { rirv_n rirv } tv tav glv_n e0 pi } 
					$ pi ⊢ 
          ∐ _none◂{} . 
						_inc i ⊢ i 
						asm.add_s8 { e0 %[ "\tRT_ERR 0xbbfe_2e17\n" ] } ⊢ e0
						$ FE ⊢ iso◂{ rfv gfl cl mfv ei_n ev_n rv eg0 eds ew0 }
						∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } rv tav tv { eg0 eds e0 ew0 } } 		
					∐. _some◂pi . 
						RIRV.set { rirv { vi stt◂{ i n pi } } } ⊢ { rirv { vi _ } }  
					  mtc_lp { RP.atm◂adt_v◂vi mpa1 mirv { rirv_n rirv } K e0 lb_n glv_n evv tav tv V ME FE ft } ⊢|
				∐. . 
					_emt %[ "obs_i:0" ] ⊢ _ 
					∎|
		@.mtc_lp_lst_K { l0 l1 K }
			∐ l0 ⊢ _cns◂{ p0 l0 }; l1 ⊢ _cns◂{ p1 l1 } .	
				mtc_lp_lst_K { l0 l1 ⟦ { p0 p1 } < K ⟧ } ⊢| 
			∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
				∎ K 
			∐. . 
				∎| 
		@.mtc_lp_K { mirv MV K e0 lb_n glv_n evv tav tv V ME FE ft }
			$ K ⊢ 
			∐ _cns◂{ { p0 p1 } K } .
				mtc_lp { p0 p1 mirv MV K e0 lb_n glv_n evv tav tv V ME FE ft } ⊢| 
			∐. _nil◂{} . 
				inv ME ⊢ { _ _ nxp } 
				mtc { { V nxp } mirv MV glv_n lb_n evv tav tv e0 FE ft } ⊢|  
		@.mtc_lp { isp mp mirv MV K e0 lb_n glv_n evv tav tv V ME FE ft } 
			$ mp ⊢ 
			∐ RP.rcd◂l1 . 
				$ isp ⊢ 
				∐ RP.rcd◂l0 . 
					mtc_lp_lst_K { l0 l1 K } ⊢ K 
					mtc_lp_K { mirv MV K e0 lb_n glv_n evv tav tv V ME FE ft } ⊢| 
				∐. RP.atm◂a0 . 		
					∐ a0 ⊢ btm◂{} . 
						asm.add_s8 { e0 %[ "\tRT_ERR 0xffff_2e17\n" ] } ⊢ e0
						$ FE ⊢ iso◂{ rfv gfl cl mfv ei_n ev_n rv eg0 eds ew0 }
						∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } rv tav tv { eg0 eds e0 ew0 } } 		
					∐. . 
						_emt %[ "mov_ptn.ptn_to_r d9" ] ⊢ _ 
						∎| 
			∐. RP.atm◂a1 .
				$ a1 ⊢ 
				∐ ast.re_v◂_ . 
					∎|
				∐ ast.re_reg◂r1 . 
					MIRV.set { mirv { r1 isp } } ⊢ { mirv _ } 
					mtc_lp_K { mirv MV K e0 lb_n glv_n evv tav tv V ME FE ft } ⊢| 
				∐. ast.re_agl◂{ ea1 mpa1 } . 
					$ isp ⊢ 
					∐ RP.atm◂a0 . 
						∐ a0 ⊢ hp_im◂c0 . 
							EVV.lod_evv { evv ea1 } ⊢ { evv ea1 k1 } 
							ast.ctr_of_k { evv k1 } ⊢ { evv { ia1 na1 vi } }
							ast.agl_of_cst { evv c0 } ⊢ { evv { ia0 na0 va0 ca0 } }
							ast.rt_of_ct { evv ca0 } ⊢ { evv pa0 } 
							mtc_rt_of { MV pa0 } ⊢ { MV pa0 } 
							∐ ia0'=ia1' . 
								mtc_lp { pa0 mpa1 mirv MV K e0 lb_n glv_n evv tav tv V ME FE ft } ⊢|
							∐. . 
								inv ME ⊢ { rbp brp _ } 
								mtc_rb_brp { V rbp brp } ⊢ { V brp } 
								mtc { { V brp } mirv MV glv_n lb_n evv tav tv e0 FE ft } ⊢|  
						∐ a0 ⊢ adt_v◂i .
							RIRV.asc { MV i } ⊢ { MV { i o } } 
							smt_err◂◂"mtc_lp:0" o ⊢ d 
							$ d ⊢ 
							∐ stt◂{ ia0 na0 pa0 } . 
								EVV.lod_evv { evv ea1 } ⊢ { evv ea1 k1 } 
								ast.ctr_of_k { evv k1 } ⊢ { evv { ia1 na1 vi } }
								∐ ia0'=ia1' . 
									mtc_lp { pa0 mpa1 mirv MV K e0 lb_n glv_n evv tav tv V ME FE ft } ⊢|
								∐. . 
									inv ME ⊢ { rbp brp _ } 
									mtc_rb_brp { V rbp brp } ⊢ { V brp } 
									mtc { { V brp } mirv MV glv_n lb_n evv tav tv e0 FE ft } ⊢|  
							∐. dyn◂{ { lx0 lx1 } ri rd } .
								dta_n { tav lx0 } ⊢ { tav lx0 { n vl1 kl1 } } 
								T.iug_axm { tv vl1 kl1 lx1 } ⊢ { tv lx1 } 
								$ lx1 ⊢ hl 
								$ n ⊢ n,n0 
								mk_jmp_tbl { lb_n n0 } ⊢ { lb_n sj lbl } 
								inc_x lb_n ⊢ { lb0 lb_n }
								^ lb0,sj,ri ⊢ lb0,_,_,sc0  
									"\tmov rdi,GLX(" 2d' ")\n" 
									"\tjmp QWORD [LB_" 0d' "+8*rdi]\n"
									"LB_" 0d' ": dq " 1' "\n" //
								asm.add_s8 { e0 sc0 } ⊢ e0  
								RIRV.get { MV i } ⊢ { MV { i _ } } 
								obs_i { { tv tav lb_n glv_n mirv MV e0 } evv RP.atm◂ast.re_agl◂{ ea1 mpa1 } i %[ 0r ] n rd lbl hl K V ME FE ft } ⊢| 
						∐ a0 ⊢ btm◂{} . 
							asm.add_s8 { e0 %[ "\tRT_ERR 0xfffe_2e17\n" ] } ⊢ e0
 							$ FE ⊢ iso◂{ rfv gfl cl mfv ei_n ev_n rv eg0 eds ew0 }
							∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } rv tav tv { eg0 eds e0 ew0 } } 							
						∐. .
							$ %[ "mov_ptn.ptn_to_r d6" ] ⊢ ee0 
							_emt ee0 ⊢ _ 
							∎|
					∐. RP.rcd◂l0 . 
						$ %[ "mov_ptn.ptn_to_r d7" ] ⊢ ee0 
						_emt ee0 ⊢ _ 
						∎| 
			∎∎			
			∎∎
		§ @.rcd_sig_lp { n N e } 
			∐ n'=N' . 
				∎ e 
			∐. . 
				^ n ⊢ n,s 
					"\tsig_alc_rcd_" 0d' ":\n" 
					"\tmov rbx," 0d' "\n" 
					"\tjmp sig_alc_rcd\n" // 
				asm.add_s8 { e s } ⊢ e 
				_inc n ⊢ n 
				rcd_sig_lp { n N e } ⊢| 
		
		§ RCD_N = 32r 
		§ emt_rtm { m0 a0 } 
			slv_file a0 ⊢ { V _ _ MV LCV tx_n iso◂{ ns_m ns_e ns_t } EC }
			inv MV ⊢ { mmv mev mtv mfv mv_n } 
			slv_ns_e { m0 { mmv mev } { ns_m ns_e } ⟦⟧ } ⊢ { { mmv mev } _ _ i_e }
			
			inv LCV ⊢ {   ev_n tv tav evv }
			inv EC ⊢ { _ dd ep0 }
			s8_of_s8_lst ep0 ⊢ sep0 
			_emt_s8_to { %[ "SGN_SH.txt" ] sep0 } ⊢ _

			^ _ ⊢ eds 
					`section .data
					`%include "DATA.s"

					`					
					//
			$ asm.of_s8◂eds ⊢ eds 
			$ asm.e◂{} ⊢ ec0 
			$ %[ 0r ] ⊢ lb_n 
			^ _ ⊢ sc1 
				`section .text
				\\0'
				`global _start
				`_start:
				`%include "START.s"
					//
			asm.add_s8 { ec0 sc1 } ⊢ ec0
			asm.add_s8 { ec0 %[ "\tjmp RTM_0\n" ] } ⊢ ec0 
				
			hsh_tbl.ini %[ 6r ] ⊢ gf0 
			hsh_tbl.ini %[ 6r ] ⊢ gf1 
			hsh_tbl.ini %[ 6r ] ⊢ gf2 
			$ iso◂{ gf0 gf1 gf2 } ⊢ gfl

			$ %[ 128r ] ⊢ glv_n 
			hsh_tbl.ini %[ 10r ] ⊢ rfv
			ast.IRV.ini {} ⊢ irv
			$ stt_v.arr_reg◂{ %[ 127r ] TX.s8◂{} } ⊢ ax0 
			$ i_e ⊢ i_e,i_e0 
			slv.cst { { %[ 1r ] evv tv } ast.k_name◂i_e0 } ⊢ { { lv evv tv } o yk }
			_dec lv ⊢ lv 
			$ %[ RCD_N ] ⊢ ssN 
			gen { tv lv yk } ⊢ { tv lv yk }
			_inc lv ⊢ lv  
			T.iug_imp { tv lv TX.arr◂TX.s8◂{} RP.unt◂{} yk } ⊢ { tv lv ys yd yk } 
								
			_emt %[ "emt_rtm D3" ] ⊢ _ 
			asm.add_s8 { asm.e◂{} %[ "RTM_0:\n" ] } ⊢ ec1 
			$ asm.e◂{} ⊢ ew0 
			gnr.lc_code.stt_jmp { V { %[ 0r ] ‹› rfv } ‹› { %[ 0xffffffffffffffffr ] f_call◂⟦⟧ } { gfl ⟦⟧ mfv } glv_n %[ 0r ] lb_n { ev_n evv } irv tav tv { asm.e◂{} eds ec1 ew0 } { TX.arr◂TX.s8◂{} ax0 RP.atm◂ast.k_name◂i_e } } ⊢ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n evv } irv tav tv { eg0 eds ec1 ew0 } _ }
			\\[
			asm.add_s8 { ec1 %[ "\tC_CALL exit\n" ] } ⊢ ec1			
			asm.cct { ec1 ew0 } ⊢ ec1  
			asm.cct { ec0 eg0 } ⊢ ec0 
			asm.cct { ec0 ec1 } ⊢ ec0 
			_emt %[ "emt_rtm D4" ] ⊢ _ 
			\\[

			^ ssN,glv_n ⊢ ssN,glv_n,eh 
				`%include "HD.s"  
				`;	v.0
				"%define RCD_N " 0d' "\n"
				"%define GLV_N " 1d' "\n" 
				`%define SS_NULL 0xffff_ffff_ffff_0000
				`%define EMT_BUF_MAX (KB<<1)				
				` 
				`section .bss
				`%include "BSS.s"
				
				`
				//
			$ asm.of_s8◂eh ⊢ eh 
			
			asm.cct { eh eds } ⊢ eds 
			asm.cct { eds ec0 } ⊢ ec0
			rcd_sig_lp { %[ 1r ] ssN ec0 } ⊢ ec0 
			^ _ ⊢ ec1 
				`
				`%include "TEXT.s"
				//
			asm.add_s8 { ec0 ec1 } ⊢ ec0 
			∎ { { ev_n tv } tav evv tx_n { dd ec0 lb_n } }		
			\\]
		\\∎| 
		∎∎
∎∎
§ @.cat_to { o l } 
	$ l ⊢ 
	∐ _cns◂{ i l } . 
		^ i,o ⊢ i,o,s 
			"cat " 0' "  >> " 1' "\n" // 
		_cd s ⊢ _ 
		cat_to { o l } ⊢| 
	∐. _nil◂{} . 
		∎ o 

§ @.L0 { a l i } 
	∐ l'=i' . 
		∎ { a l } 
	∐. . 
		_lod_q { a i } ⊢ { a i fn } 
		^ fn ⊢ _,xc0 
			"cat " 0' " >> SH.mdls\n" // 
		_cd xc0 ⊢ _ 
		_inc i ⊢ i 
		L0 { a l i } ⊢| 
§ E { fn0 m0 }
	_in_fn fn0 ⊢ { _ sf1 } 
	##_emt sf1 ⊢ sf1 
	_emt %[ "E D0" ] ⊢ _ 
	_prs◂◂OpADL.syntax.file { sf1 %[ 0r ] } ⊢ { _ r0 a0 } 
	\\OpADL.syntax.file.prs { sf1 %[ 0r ] } ⊢ { _ r0 a0 } 
	_emt r0 ⊢ _ 
	##_emt a0 ⊢ a0  
	$ a0 ⊢ 
	∐ _some◂a0 . 
		$ a0 ⊢ 
		∐ OpADL.syntax.prs_vld◂a0 . 
			_emt %[ "opxcc:prs_vld" ] ⊢ _ 
			OpADL.ns.emt_rtm { m0 a0 } ⊢ { { ev_n tv } tav evv tx_n { dd ec0 lb_n } }		
			_emt %[ "start_sh D2" ] ⊢ _ 
			OpADL.ns.asm.to_s8 ec0 ⊢ sec0
			_emt_s8_to { %[ "SH.mdls.s" ] sec0 } ⊢ _
			_emt %[ "start_sh D3" ] ⊢ _ 
			
			^ _ ⊢ sx0 
				`yasm -g dwarf2 -f elf64 SH.mdls.s -o out.o
    		`gcc -Wall stub.c out.o -nostartfiles -no-pie -pg -g -O0 -o out.exe 
				// 
			_cd sx0 ⊢ sx0  
			_emt %[ "start_sh D4" ] ⊢ _ 
			\\_info {} ⊢ {} 
			∎ {} 
		∐. OpADL.syntax.prs_err◂e0 .
			OpADL.syntax.pnt_prs_err e0 ⊢ es0 
			_emt es0 ⊢ _  
			∎|
	∐. _none◂{} . 
		∎| 
§§ args 
  § f e 
    ∎ e 
  § f a 
	  _arr_len a ⊢ { a l } 
    _lod_q { a %[ 1r ] }  ⊢ { a _ f0 }
    ∐ l'=<2r . 
      ∎ { f0 OpADL.ast.fst_n◂%[ "main" ] } 
    ∐. . 
      _lod_q { a %[ 2r ] }  ⊢ { a _ e0 }
      f %[ "-e" ] ⊢ ee 
      ∐ e0'=ee' .
        _lod_q { a %[ 3r ] }  ⊢ { _ _ m0 }
        _prs◂◂OpADL.syntax.name { m0 %[ 0r ] } ⊢ { _ _ m0 } 
        ∐ m0 ⊢ _some◂m0 . 
          ∎ { f0 m0 }
        ∐. . 
          ∎| 
      ∐. .  
        ∎| 

  ∎∎
§ main args
	_emt args ⊢ args
	\\_lod_q { args %[ 1r ] }  ⊢ { _ _ f0 }
  args.f args ⊢ { f0 m0 }
	_emt %[ "E 0" ] ⊢ _ 
	E { f0 m0 } ⊢ _  
	∎ {}	
§ c0◂{ a b } = { a b } 
\[
§ main0 = main
§ Main args 
  OpADL.ns.asm.main {} ⊢ {}
  main args ⊢| 
\]
§ Main0 a 
  _lod_q { a %[ 0r ] } ⊢ { a _ s0 } 
  _s8_len s0 ⊢ _ 
  $ %[ "foooo!!!jioohohio" ] ⊢ s
  \\_rsz { s %[ 7r ] } ⊢ { s _ } 
  \\_s8_len s ⊢ { s l } 
  \\_emt l ⊢ _ 
  \\_emt s ⊢ _ 
  OpADL.ns.asm.main {} ⊢ {}
  ∎ {}  
