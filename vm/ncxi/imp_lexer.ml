# 1 "imp_lexer.mll"
 
    open Imp_parser
    let cmt_n = ref 0
    exception Error of string


# 9 "imp_lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\141\255\142\255\118\000\090\000\091\000\152\255\085\000\
    \163\255\164\255\165\255\009\000\174\255\175\255\176\255\177\255\
    \179\255\184\255\185\255\205\255\041\000\041\000\208\255\078\000\
    \222\255\223\255\013\000\014\000\192\000\020\001\078\001\011\000\
    \000\000\103\000\162\001\181\001\250\255\050\000\111\000\169\000\
    \078\001\156\000\162\255\164\000\180\000\254\255\129\000\079\001\
    \253\255\173\000\174\000\252\255\166\000\190\000\122\000\149\255\
    \191\001\215\001\245\255\179\000\015\002\038\002\093\002\246\255\
    \148\255\066\000\244\255\247\255\213\255\054\000\056\000\057\000\
    \240\255\001\000\018\000\158\000\071\000\241\255\136\000\239\255\
    \238\255\073\000\219\255\076\000\060\000\021\000\044\000\069\000\
    \056\000\092\000\089\000\172\001\194\255\195\255\048\001\200\255\
    \134\000\238\001\236\255\156\255\202\255\186\001\226\255\153\255\
    \155\255\201\255\198\000\071\002\188\255\105\000\198\255\100\000\
    \196\255\170\255\119\000\229\255\193\255\225\255\187\255\120\000\
    \214\255\186\255\192\000\193\000\117\002\127\002\190\255\148\002\
    \158\002\189\255\182\255\183\255\180\255\181\255\166\255\167\255\
    \168\255\160\255\187\002\006\003\234\255\090\003\158\255\165\003\
    \240\003\098\000\081\001\228\255\183\000\145\000\126\000\186\000\
    \230\255\231\255\215\255\197\255\218\255\227\255\211\255\172\255\
    \171\255\161\255\157\255\226\000\253\255\229\000\193\001\245\001\
    \020\002\045\002\073\001\254\255\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\111\000\105\000\104\000\255\255\114\000\
    \255\255\255\255\255\255\082\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\049\000\048\000\255\255\043\000\
    \255\255\255\255\031\000\045\000\064\000\022\000\114\000\114\000\
    \114\000\110\000\110\000\110\000\255\255\018\000\077\000\063\000\
    \114\000\108\000\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\004\000\255\255\255\255\
    \255\255\008\000\255\255\006\000\255\255\255\255\007\000\255\255\
    \255\255\008\000\255\255\255\255\255\255\035\000\034\000\096\000\
    \255\255\012\000\255\255\013\000\255\255\255\255\255\255\255\255\
    \255\255\038\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\056\000\255\255\
    \046\000\051\000\255\255\255\255\255\255\052\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\086\000\255\255\255\255\255\255\255\255\039\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\020\000\020\000\255\255\022\000\255\255\023\000\
    \023\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255\
    \000\000\001\000\255\255\255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\255\255\255\255\255\255\000\000\255\255\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\255\255\000\000\255\255\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\049\000\
    \047\000\255\255\000\000\255\255\255\255\000\000\255\255\047\000\
    \000\000\049\000\050\000\000\000\255\255\255\255\255\255\000\000\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\000\000\
    \000\000\255\255\000\000\000\000\000\000\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\000\000\255\255\000\000\
    \000\000\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\255\255\000\000\
    \255\255\255\255\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\255\255\255\255\000\000\255\255\000\000\255\255\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\000\000\255\255\000\000\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\164\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\171\000\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\003\000\003\000\000\000\000\000\003\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \003\000\011\000\040\000\038\000\005\000\030\000\016\000\013\000\
    \015\000\014\000\009\000\010\000\006\000\008\000\041\000\007\000\
    \035\000\034\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\023\000\036\000\025\000\012\000\024\000\019\000\
    \004\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\021\000\037\000\022\000\020\000\028\000\
    \039\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\018\000\027\000\017\000\026\000\003\000\
    \003\000\004\000\005\000\003\000\162\000\161\000\160\000\159\000\
    \158\000\157\000\146\000\085\000\147\000\052\000\055\000\084\000\
    \083\000\087\000\050\000\091\000\089\000\088\000\003\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\064\000\090\000\047\000\066\000\043\000\044\000\073\000\
    \047\000\043\000\086\000\069\000\071\000\043\000\044\000\052\000\
    \053\000\043\000\082\000\048\000\081\000\080\000\072\000\048\000\
    \051\000\075\000\078\000\070\000\043\000\043\000\044\000\068\000\
    \079\000\043\000\032\000\074\000\043\000\081\000\052\000\052\000\
    \053\000\076\000\042\000\054\000\077\000\137\000\133\000\132\000\
    \145\000\135\000\131\000\130\000\043\000\134\000\123\000\121\000\
    \122\000\067\000\119\000\113\000\114\000\047\000\052\000\117\000\
    \136\000\106\000\031\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\118\000\116\000\047\000\
    \148\000\111\000\112\000\115\000\120\000\047\000\107\000\107\000\
    \107\000\107\000\107\000\107\000\107\000\107\000\107\000\107\000\
    \002\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \143\000\143\000\143\000\127\000\124\000\156\000\142\000\155\000\
    \154\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \143\000\143\000\143\000\140\000\153\000\152\000\165\000\149\000\
    \166\000\150\000\167\000\000\000\141\000\141\000\141\000\141\000\
    \141\000\141\000\141\000\141\000\141\000\141\000\151\000\000\000\
    \000\000\000\000\000\000\172\000\000\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\000\000\
    \045\000\045\000\000\000\141\000\000\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\138\000\
    \138\000\138\000\138\000\138\000\138\000\138\000\138\000\138\000\
    \138\000\138\000\138\000\138\000\138\000\138\000\138\000\138\000\
    \138\000\138\000\138\000\138\000\138\000\138\000\138\000\138\000\
    \138\000\255\255\046\000\046\000\110\000\255\255\255\255\138\000\
    \138\000\138\000\138\000\138\000\138\000\138\000\138\000\138\000\
    \138\000\138\000\138\000\138\000\138\000\138\000\138\000\138\000\
    \138\000\138\000\138\000\138\000\138\000\138\000\138\000\138\000\
    \138\000\055\000\166\000\169\000\000\000\146\000\000\000\000\000\
    \000\000\000\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\055\000\103\000\000\000\000\000\
    \000\000\166\000\255\255\000\000\104\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\000\000\000\000\000\000\000\000\000\000\167\000\168\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\054\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\102\000\109\000\145\000\065\000\167\000\105\000\000\000\
    \099\000\054\000\000\000\000\000\101\000\167\000\168\000\000\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\000\000\057\000\
    \000\000\000\000\000\000\000\000\098\000\056\000\000\000\000\000\
    \000\000\061\000\092\000\093\000\167\000\000\000\166\000\169\000\
    \000\000\058\000\094\000\095\000\097\000\000\000\000\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\255\255\100\000\000\000\096\000\166\000\255\255\255\255\
    \060\000\060\000\060\000\060\000\060\000\060\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\000\000\000\000\000\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\000\000\107\000\
    \107\000\107\000\107\000\107\000\107\000\107\000\107\000\107\000\
    \107\000\063\000\000\000\000\000\000\000\000\000\000\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\108\000\125\000\125\000\125\000\
    \125\000\125\000\125\000\125\000\125\000\125\000\125\000\125\000\
    \125\000\125\000\125\000\125\000\125\000\125\000\125\000\125\000\
    \125\000\000\000\000\000\000\000\000\000\000\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \000\000\000\000\000\000\000\000\126\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\139\000\139\000\139\000\139\000\139\000\
    \139\000\139\000\139\000\139\000\139\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\129\000\138\000\138\000\138\000\138\000\
    \138\000\138\000\138\000\138\000\138\000\138\000\138\000\138\000\
    \138\000\138\000\138\000\138\000\138\000\138\000\138\000\138\000\
    \138\000\138\000\138\000\138\000\138\000\138\000\000\000\000\000\
    \000\000\000\000\139\000\000\000\138\000\138\000\138\000\138\000\
    \138\000\138\000\138\000\138\000\138\000\138\000\138\000\138\000\
    \138\000\138\000\138\000\138\000\138\000\138\000\138\000\138\000\
    \138\000\138\000\138\000\138\000\138\000\138\000\139\000\139\000\
    \139\000\139\000\139\000\139\000\139\000\139\000\139\000\139\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\139\000\
    \139\000\139\000\139\000\139\000\139\000\139\000\139\000\139\000\
    \139\000\139\000\139\000\139\000\139\000\139\000\139\000\139\000\
    \139\000\139\000\139\000\139\000\139\000\139\000\139\000\139\000\
    \139\000\000\000\000\000\000\000\000\000\139\000\000\000\139\000\
    \139\000\139\000\139\000\139\000\139\000\139\000\139\000\139\000\
    \139\000\139\000\139\000\139\000\139\000\139\000\139\000\139\000\
    \139\000\139\000\139\000\139\000\139\000\139\000\139\000\139\000\
    \139\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\141\000\141\000\141\000\141\000\141\000\141\000\
    \141\000\141\000\141\000\141\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\141\000\141\000\141\000\141\000\141\000\
    \141\000\141\000\141\000\141\000\141\000\141\000\141\000\141\000\
    \141\000\141\000\141\000\141\000\141\000\141\000\141\000\141\000\
    \141\000\141\000\141\000\141\000\141\000\000\000\000\000\000\000\
    \000\000\141\000\000\000\141\000\141\000\141\000\141\000\141\000\
    \141\000\141\000\141\000\141\000\141\000\141\000\141\000\141\000\
    \141\000\141\000\141\000\141\000\141\000\141\000\141\000\141\000\
    \141\000\141\000\141\000\141\000\141\000\144\000\144\000\144\000\
    \144\000\144\000\144\000\144\000\144\000\144\000\144\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\143\000\143\000\
    \143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \000\000\000\000\000\000\000\000\144\000\000\000\143\000\143\000\
    \143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \144\000\144\000\144\000\144\000\144\000\144\000\144\000\144\000\
    \144\000\144\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\144\000\144\000\144\000\144\000\144\000\144\000\144\000\
    \144\000\144\000\144\000\144\000\144\000\144\000\144\000\144\000\
    \144\000\144\000\144\000\144\000\144\000\144\000\144\000\144\000\
    \144\000\144\000\144\000\000\000\000\000\000\000\000\000\144\000\
    \000\000\144\000\144\000\144\000\144\000\144\000\144\000\144\000\
    \144\000\144\000\144\000\144\000\144\000\144\000\144\000\144\000\
    \144\000\144\000\144\000\144\000\144\000\144\000\144\000\144\000\
    \144\000\144\000\144\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \003\000\004\000\005\000\003\000\007\000\011\000\020\000\021\000\
    \023\000\026\000\027\000\031\000\027\000\037\000\033\000\031\000\
    \031\000\031\000\038\000\031\000\031\000\031\000\003\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\054\000\031\000\046\000\065\000\041\000\041\000\032\000\
    \046\000\041\000\031\000\032\000\032\000\043\000\043\000\052\000\
    \052\000\043\000\069\000\039\000\070\000\071\000\032\000\049\000\
    \050\000\074\000\076\000\032\000\041\000\044\000\044\000\032\000\
    \078\000\044\000\000\000\073\000\043\000\081\000\052\000\053\000\
    \053\000\075\000\041\000\033\000\075\000\083\000\085\000\085\000\
    \027\000\084\000\086\000\086\000\044\000\084\000\087\000\087\000\
    \087\000\033\000\088\000\090\000\090\000\046\000\053\000\089\000\
    \084\000\096\000\000\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\088\000\089\000\046\000\
    \027\000\109\000\111\000\114\000\119\000\046\000\106\000\106\000\
    \106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
    \000\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\122\000\123\000\145\000\028\000\149\000\
    \150\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\029\000\151\000\151\000\163\000\148\000\
    \165\000\148\000\165\000\255\255\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\148\000\255\255\
    \255\255\255\255\255\255\170\000\255\255\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\255\255\
    \040\000\047\000\255\255\029\000\255\255\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\039\000\040\000\047\000\094\000\049\000\050\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\034\000\166\000\166\000\255\255\146\000\255\255\255\255\
    \255\255\255\255\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\035\000\101\000\255\255\255\255\
    \255\255\166\000\163\000\255\255\101\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\255\255\255\255\255\255\255\255\255\255\167\000\167\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\034\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\097\000\094\000\146\000\034\000\167\000\101\000\255\255\
    \097\000\035\000\255\255\255\255\097\000\168\000\168\000\255\255\
    \056\000\056\000\056\000\056\000\056\000\056\000\255\255\035\000\
    \255\255\255\255\255\255\255\255\091\000\035\000\255\255\255\255\
    \255\255\056\000\091\000\091\000\168\000\255\255\169\000\169\000\
    \255\255\057\000\091\000\091\000\091\000\255\255\255\255\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\170\000\097\000\255\255\091\000\169\000\040\000\047\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\061\000\
    \061\000\061\000\061\000\061\000\061\000\255\255\255\255\255\255\
    \060\000\060\000\060\000\060\000\060\000\060\000\255\255\107\000\
    \107\000\107\000\107\000\107\000\107\000\107\000\107\000\107\000\
    \107\000\060\000\255\255\255\255\255\255\255\255\255\255\061\000\
    \061\000\061\000\061\000\061\000\061\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\062\000\062\000\
    \062\000\062\000\062\000\062\000\107\000\124\000\124\000\124\000\
    \124\000\124\000\124\000\124\000\124\000\124\000\124\000\125\000\
    \125\000\125\000\125\000\125\000\125\000\125\000\125\000\125\000\
    \125\000\255\255\255\255\255\255\255\255\255\255\062\000\062\000\
    \062\000\062\000\062\000\062\000\127\000\127\000\127\000\127\000\
    \127\000\127\000\127\000\127\000\127\000\127\000\128\000\128\000\
    \128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \255\255\255\255\255\255\255\255\125\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\138\000\138\000\138\000\138\000\138\000\
    \138\000\138\000\138\000\138\000\138\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\128\000\138\000\138\000\138\000\138\000\
    \138\000\138\000\138\000\138\000\138\000\138\000\138\000\138\000\
    \138\000\138\000\138\000\138\000\138\000\138\000\138\000\138\000\
    \138\000\138\000\138\000\138\000\138\000\138\000\255\255\255\255\
    \255\255\255\255\138\000\255\255\138\000\138\000\138\000\138\000\
    \138\000\138\000\138\000\138\000\138\000\138\000\138\000\138\000\
    \138\000\138\000\138\000\138\000\138\000\138\000\138\000\138\000\
    \138\000\138\000\138\000\138\000\138\000\138\000\139\000\139\000\
    \139\000\139\000\139\000\139\000\139\000\139\000\139\000\139\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\139\000\
    \139\000\139\000\139\000\139\000\139\000\139\000\139\000\139\000\
    \139\000\139\000\139\000\139\000\139\000\139\000\139\000\139\000\
    \139\000\139\000\139\000\139\000\139\000\139\000\139\000\139\000\
    \139\000\255\255\255\255\255\255\255\255\139\000\255\255\139\000\
    \139\000\139\000\139\000\139\000\139\000\139\000\139\000\139\000\
    \139\000\139\000\139\000\139\000\139\000\139\000\139\000\139\000\
    \139\000\139\000\139\000\139\000\139\000\139\000\139\000\139\000\
    \139\000\141\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\141\000\141\000\141\000\141\000\141\000\141\000\
    \141\000\141\000\141\000\141\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\141\000\141\000\141\000\141\000\141\000\
    \141\000\141\000\141\000\141\000\141\000\141\000\141\000\141\000\
    \141\000\141\000\141\000\141\000\141\000\141\000\141\000\141\000\
    \141\000\141\000\141\000\141\000\141\000\255\255\255\255\255\255\
    \255\255\141\000\255\255\141\000\141\000\141\000\141\000\141\000\
    \141\000\141\000\141\000\141\000\141\000\141\000\141\000\141\000\
    \141\000\141\000\141\000\141\000\141\000\141\000\141\000\141\000\
    \141\000\141\000\141\000\141\000\141\000\143\000\143\000\143\000\
    \143\000\143\000\143\000\143\000\143\000\143\000\143\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\143\000\143\000\
    \143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \255\255\255\255\255\255\255\255\143\000\255\255\143\000\143\000\
    \143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \144\000\144\000\144\000\144\000\144\000\144\000\144\000\144\000\
    \144\000\144\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\144\000\144\000\144\000\144\000\144\000\144\000\144\000\
    \144\000\144\000\144\000\144\000\144\000\144\000\144\000\144\000\
    \144\000\144\000\144\000\144\000\144\000\144\000\144\000\144\000\
    \144\000\144\000\144\000\255\255\255\255\255\255\255\255\144\000\
    \255\255\144\000\144\000\144\000\144\000\144\000\144\000\144\000\
    \144\000\144\000\144\000\144\000\144\000\144\000\144\000\144\000\
    \144\000\144\000\144\000\144\000\144\000\144\000\144\000\144\000\
    \144\000\144\000\144\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 21 "imp_lexer.mll"
                      ( DOT_END )
# 421 "imp_lexer.ml"

  | 1 ->
let
# 22 "imp_lexer.mll"
                                                                 lxm
# 427 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) (lexbuf.Lexing.lex_curr_pos + -1) in
# 22 "imp_lexer.mll"
                                                                           ( STG(Scanf.unescaped lxm) )
# 431 "imp_lexer.ml"

  | 2 ->
let
# 23 "imp_lexer.mll"
                               lxm
# 437 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) lexbuf.Lexing.lex_curr_pos in
# 23 "imp_lexer.mll"
                                    ( LINE(lxm) )
# 441 "imp_lexer.ml"

  | 3 ->
# 24 "imp_lexer.mll"
                          ( Util.Log.add "start line comment\n"; token lexbuf )
# 446 "imp_lexer.ml"

  | 4 ->
# 25 "imp_lexer.mll"
                                  ( cmt_n := !cmt_n +1; blk_cmt lexbuf )
# 451 "imp_lexer.ml"

  | 5 ->
# 26 "imp_lexer.mll"
          ( SCL )
# 456 "imp_lexer.ml"

  | 6 ->
let
# 27 "imp_lexer.mll"
                      lxm
# 462 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 2) lexbuf.Lexing.lex_curr_pos in
# 27 "imp_lexer.mll"
                           ( R64(Int64.of_string lxm) )
# 466 "imp_lexer.ml"

  | 7 ->
let
# 28 "imp_lexer.mll"
                     lxm
# 472 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 3) lexbuf.Lexing.lex_curr_pos in
# 28 "imp_lexer.mll"
                          ( R64(Int64.of_string ("0x"^lxm)) )
# 476 "imp_lexer.ml"

  | 8 ->
let
# 29 "imp_lexer.mll"
                 lxm
# 482 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_curr_pos + -1) in
# 29 "imp_lexer.mll"
                          ( R64(Int64.of_string lxm) )
# 486 "imp_lexer.ml"

  | 9 ->
let
# 30 "imp_lexer.mll"
                    lxm
# 492 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 2) (lexbuf.Lexing.lex_curr_pos + -1) in
# 30 "imp_lexer.mll"
                             ( R64(Int64.of_string ("0x"^lxm)) )
# 496 "imp_lexer.ml"

  | 10 ->
# 31 "imp_lexer.mll"
            ( R2(false) )
# 501 "imp_lexer.ml"

  | 11 ->
# 32 "imp_lexer.mll"
            ( R2(true) )
# 506 "imp_lexer.ml"

  | 12 ->
# 33 "imp_lexer.mll"
            ( LCE )
# 511 "imp_lexer.ml"

  | 13 ->
# 34 "imp_lexer.mll"
              ( MDL )
# 516 "imp_lexer.ml"

  | 14 ->
# 35 "imp_lexer.mll"
              ( MDL_END )
# 521 "imp_lexer.ml"

  | 15 ->
# 36 "imp_lexer.mll"
           ( DTA )
# 526 "imp_lexer.ml"

  | 16 ->
# 37 "imp_lexer.mll"
                ( DTA_GRM )
# 531 "imp_lexer.ml"

  | 17 ->
# 38 "imp_lexer.mll"
             ( NOT_SPL )
# 536 "imp_lexer.ml"

  | 18 ->
# 39 "imp_lexer.mll"
            ( SLH )
# 541 "imp_lexer.ml"

  | 19 ->
# 40 "imp_lexer.mll"
            ( FOR_ALL )
# 546 "imp_lexer.ml"

  | 20 ->
let
# 41 "imp_lexer.mll"
                   lxm
# 552 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) lexbuf.Lexing.lex_curr_pos in
# 41 "imp_lexer.mll"
                        ( REG(lxm) )
# 556 "imp_lexer.ml"

  | 21 ->
let
# 43 "imp_lexer.mll"
               lxm
# 562 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_curr_pos + -1) in
# 43 "imp_lexer.mll"
                         ( VAL(lxm) )
# 566 "imp_lexer.ml"

  | 22 ->
let
# 44 "imp_lexer.mll"
              lxm
# 572 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 44 "imp_lexer.mll"
                  ( NAM(lxm) )
# 576 "imp_lexer.ml"

  | 23 ->
let
# 45 "imp_lexer.mll"
                    lxm
# 582 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 45 "imp_lexer.mll"
                        ( PRM(lxm) )
# 586 "imp_lexer.ml"

  | 24 ->
# 46 "imp_lexer.mll"
              ( OUT_IR )
# 591 "imp_lexer.ml"

  | 25 ->
# 47 "imp_lexer.mll"
              ( PRJ_IR  )
# 596 "imp_lexer.ml"

  | 26 ->
# 48 "imp_lexer.mll"
              ( CNS_IR  )
# 601 "imp_lexer.ml"

  | 27 ->
# 49 "imp_lexer.mll"
            ( INI_IR )
# 606 "imp_lexer.ml"

  | 28 ->
# 50 "imp_lexer.mll"
            ( MTC_IR )
# 611 "imp_lexer.ml"

  | 29 ->
# 51 "imp_lexer.mll"
             ( SYNT_COPRD )
# 616 "imp_lexer.ml"

  | 30 ->
# 52 "imp_lexer.mll"
            ( ISO )
# 621 "imp_lexer.ml"

  | 31 ->
# 53 "imp_lexer.mll"
          ( LET )
# 626 "imp_lexer.ml"

  | 32 ->
# 54 "imp_lexer.mll"
          ( OP )
# 631 "imp_lexer.ml"

  | 33 ->
# 55 "imp_lexer.mll"
          ( LB )
# 636 "imp_lexer.ml"

  | 34 ->
# 56 "imp_lexer.mll"
           ( ARR )
# 641 "imp_lexer.ml"

  | 35 ->
# 57 "imp_lexer.mll"
           ( ARR_REV )
# 646 "imp_lexer.ml"

  | 36 ->
# 58 "imp_lexer.mll"
             ( ARR_REV_IN )
# 651 "imp_lexer.ml"

  | 37 ->
let
# 59 "imp_lexer.mll"
                 lxm
# 657 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_curr_pos + -2) in
# 59 "imp_lexer.mll"
                           ( IN(String.length lxm) )
# 661 "imp_lexer.ml"

  | 38 ->
let
# 60 "imp_lexer.mll"
                      lxm
# 667 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 2) lexbuf.Lexing.lex_curr_pos in
# 60 "imp_lexer.mll"
                            ( OUT(String.length lxm) )
# 671 "imp_lexer.ml"

  | 39 ->
# 61 "imp_lexer.mll"
            ( SRC )
# 676 "imp_lexer.ml"

  | 40 ->
# 62 "imp_lexer.mll"
              ( SRC_OUT )
# 681 "imp_lexer.ml"

  | 41 ->
# 63 "imp_lexer.mll"
              ( SRC_IL )
# 686 "imp_lexer.ml"

  | 42 ->
# 64 "imp_lexer.mll"
           ( EXN )
# 691 "imp_lexer.ml"

  | 43 ->
# 65 "imp_lexer.mll"
          ( CLN )
# 696 "imp_lexer.ml"

  | 44 ->
# 66 "imp_lexer.mll"
           ( CLN2 )
# 701 "imp_lexer.ml"

  | 45 ->
# 67 "imp_lexer.mll"
          ( SPL )
# 706 "imp_lexer.ml"

  | 46 ->
# 68 "imp_lexer.mll"
             ( AGL )
# 711 "imp_lexer.ml"

  | 47 ->
# 69 "imp_lexer.mll"
          ( R_BLK )
# 716 "imp_lexer.ml"

  | 48 ->
# 70 "imp_lexer.mll"
          ( L_BLK )
# 721 "imp_lexer.ml"

  | 49 ->
# 71 "imp_lexer.mll"
          ( SEQ )
# 726 "imp_lexer.ml"

  | 50 ->
# 72 "imp_lexer.mll"
           ( MTC )
# 731 "imp_lexer.ml"

  | 51 ->
# 73 "imp_lexer.mll"
              ( COPRD )
# 736 "imp_lexer.ml"

  | 52 ->
# 74 "imp_lexer.mll"
             ( COPRD_END )
# 741 "imp_lexer.ml"

  | 53 ->
# 75 "imp_lexer.mll"
              ( COPRD_PTN )
# 746 "imp_lexer.ml"

  | 54 ->
# 76 "imp_lexer.mll"
               ( COPRD_PTN_END )
# 751 "imp_lexer.ml"

  | 55 ->
# 77 "imp_lexer.mll"
              ( PRD )
# 756 "imp_lexer.ml"

  | 56 ->
# 78 "imp_lexer.mll"
            ( EOP )
# 761 "imp_lexer.ml"

  | 57 ->
# 79 "imp_lexer.mll"
             ( EOP_EXN )
# 766 "imp_lexer.ml"

  | 58 ->
# 80 "imp_lexer.mll"
             ( EOP_OUT )
# 771 "imp_lexer.ml"

  | 59 ->
# 81 "imp_lexer.mll"
               ( MDL_EOP )
# 776 "imp_lexer.ml"

  | 60 ->
# 82 "imp_lexer.mll"
            ( COPRD_END )
# 781 "imp_lexer.ml"

  | 61 ->
# 83 "imp_lexer.mll"
            ( PRD_END )
# 786 "imp_lexer.ml"

  | 62 ->
# 84 "imp_lexer.mll"
            ( DEF )
# 791 "imp_lexer.ml"

  | 63 ->
# 85 "imp_lexer.mll"
          ( ACT )
# 796 "imp_lexer.ml"

  | 64 ->
# 87 "imp_lexer.mll"
          ( WC )
# 801 "imp_lexer.ml"

  | 65 ->
let
# 88 "imp_lexer.mll"
                        lxm
# 807 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 4) (lexbuf.Lexing.lex_curr_pos + -1) in
# 88 "imp_lexer.mll"
                                 ( INJ(int_of_string lxm) )
# 811 "imp_lexer.ml"

  | 66 ->
let
# 89 "imp_lexer.mll"
                        lxm
# 817 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 4) (lexbuf.Lexing.lex_curr_pos + -1) in
# 89 "imp_lexer.mll"
                                 ( CHO(int_of_string lxm) )
# 821 "imp_lexer.ml"

  | 67 ->
let
# 90 "imp_lexer.mll"
                        lxm
# 827 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 4) (lexbuf.Lexing.lex_curr_pos + -1) in
# 90 "imp_lexer.mll"
                                 ( AGL_OP(int_of_string lxm) )
# 831 "imp_lexer.ml"

  | 68 ->
# 91 "imp_lexer.mll"
            ( VCT )
# 836 "imp_lexer.ml"

  | 69 ->
# 92 "imp_lexer.mll"
            ( IMP )
# 841 "imp_lexer.ml"

  | 70 ->
# 93 "imp_lexer.mll"
          ( L_RCD )
# 846 "imp_lexer.ml"

  | 71 ->
# 94 "imp_lexer.mll"
          ( R_RCD )
# 851 "imp_lexer.ml"

  | 72 ->
# 95 "imp_lexer.mll"
            ( L_LST )
# 856 "imp_lexer.ml"

  | 73 ->
# 96 "imp_lexer.mll"
            ( R_LST )
# 861 "imp_lexer.ml"

  | 74 ->
# 97 "imp_lexer.mll"
            ( L_OPN )
# 866 "imp_lexer.ml"

  | 75 ->
# 98 "imp_lexer.mll"
            ( R_OPN )
# 871 "imp_lexer.ml"

  | 76 ->
# 99 "imp_lexer.mll"
          ( SGN )
# 876 "imp_lexer.ml"

  | 77 ->
# 100 "imp_lexer.mll"
          ( VCT_INI )
# 881 "imp_lexer.ml"

  | 78 ->
# 101 "imp_lexer.mll"
          ( L_PRN )
# 886 "imp_lexer.ml"

  | 79 ->
# 102 "imp_lexer.mll"
          ( R_PRN )
# 891 "imp_lexer.ml"

  | 80 ->
# 103 "imp_lexer.mll"
           ( DSH )
# 896 "imp_lexer.ml"

  | 81 ->
# 104 "imp_lexer.mll"
          ( EQ )
# 901 "imp_lexer.ml"

  | 82 ->
# 105 "imp_lexer.mll"
          ( EXP )
# 906 "imp_lexer.ml"

  | 83 ->
# 106 "imp_lexer.mll"
           ( S8_STT )
# 911 "imp_lexer.ml"

  | 84 ->
# 107 "imp_lexer.mll"
           ( S8_END )
# 916 "imp_lexer.ml"

  | 85 ->
# 108 "imp_lexer.mll"
            ( APP )
# 921 "imp_lexer.ml"

  | 86 ->
# 109 "imp_lexer.mll"
            ( PRJ )
# 926 "imp_lexer.ml"

  | 87 ->
# 110 "imp_lexer.mll"
            ( Z )
# 931 "imp_lexer.ml"

  | 88 ->
# 111 "imp_lexer.mll"
            ( N )
# 936 "imp_lexer.ml"

  | 89 ->
# 112 "imp_lexer.mll"
            ( TYP_STG )
# 941 "imp_lexer.ml"

  | 90 ->
# 113 "imp_lexer.mll"
          ( PLS )
# 946 "imp_lexer.ml"

  | 91 ->
# 114 "imp_lexer.mll"
          ( MLT )
# 951 "imp_lexer.ml"

  | 92 ->
# 115 "imp_lexer.mll"
          ( MNS )
# 956 "imp_lexer.ml"

  | 93 ->
# 116 "imp_lexer.mll"
           ( BYTE )
# 961 "imp_lexer.ml"

  | 94 ->
# 117 "imp_lexer.mll"
           ( CUT )
# 966 "imp_lexer.ml"

  | 95 ->
# 118 "imp_lexer.mll"
            ( GRM )
# 971 "imp_lexer.ml"

  | 96 ->
# 119 "imp_lexer.mll"
           ( NOT )
# 976 "imp_lexer.ml"

  | 97 ->
# 120 "imp_lexer.mll"
           ( S8_E )
# 981 "imp_lexer.ml"

  | 98 ->
# 121 "imp_lexer.mll"
           ( S8_P )
# 986 "imp_lexer.ml"

  | 99 ->
# 122 "imp_lexer.mll"
              ( ORD_LEX_COPRD )
# 991 "imp_lexer.ml"

  | 100 ->
# 123 "imp_lexer.mll"
              ( ORD_LEX_COPRD_END )
# 996 "imp_lexer.ml"

  | 101 ->
# 124 "imp_lexer.mll"
             ( ORD_LINE_COPRD )
# 1001 "imp_lexer.ml"

  | 102 ->
# 125 "imp_lexer.mll"
              ( ORD_LINE_COPRD_END )
# 1006 "imp_lexer.ml"

  | 103 ->
# 126 "imp_lexer.mll"
          ( CMM )
# 1011 "imp_lexer.ml"

  | 104 ->
let
# 127 "imp_lexer.mll"
                      lxm
# 1017 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) lexbuf.Lexing.lex_curr_pos in
# 127 "imp_lexer.mll"
                           ( ROT (String.length lxm) )
# 1021 "imp_lexer.ml"

  | 105 ->
let
# 128 "imp_lexer.mll"
                      lxm
# 1027 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) lexbuf.Lexing.lex_curr_pos in
# 128 "imp_lexer.mll"
                           ( SLF (String.length lxm) )
# 1031 "imp_lexer.ml"

  | 106 ->
let
# 129 "imp_lexer.mll"
                 lxm
# 1037 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_curr_pos + -1) in
# 129 "imp_lexer.mll"
                           ( IDX (int_of_string lxm) )
# 1041 "imp_lexer.ml"

  | 107 ->
let
# 130 "imp_lexer.mll"
                 lxm
# 1047 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_curr_pos + -2) in
# 130 "imp_lexer.mll"
                            ( IDX_FMT_D(int_of_string lxm) )
# 1051 "imp_lexer.ml"

  | 108 ->
# 131 "imp_lexer.mll"
          ( DOT )
# 1056 "imp_lexer.ml"

  | 109 ->
# 132 "imp_lexer.mll"
             ( AGL )
# 1061 "imp_lexer.ml"

  | 110 ->
let
# 133 "imp_lexer.mll"
                lxm
# 1067 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 133 "imp_lexer.mll"
                     ( INT (int_of_string lxm) )
# 1071 "imp_lexer.ml"

  | 111 ->
# 134 "imp_lexer.mll"
                    ( token lexbuf                         )
# 1076 "imp_lexer.ml"

  | 112 ->
# 135 "imp_lexer.mll"
            ( NL )
# 1081 "imp_lexer.ml"

  | 113 ->
# 136 "imp_lexer.mll"
                    ( EOF               )
# 1086 "imp_lexer.ml"

  | 114 ->
# 137 "imp_lexer.mll"
                    ( raise (Error (Printf.sprintf
                      "At offset %d: unexpected character.\n"
                      (Lexing.lexeme_start lexbuf))) )
# 1093 "imp_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and blk_cmt lexbuf =
   __ocaml_lex_blk_cmt_rec lexbuf 163
and __ocaml_lex_blk_cmt_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 141 "imp_lexer.mll"
                                ( cmt_n := !cmt_n-1; if !cmt_n=0 then token lexbuf else blk_cmt lexbuf )
# 1105 "imp_lexer.ml"

  | 1 ->
# 142 "imp_lexer.mll"
                                ( cmt_n := !cmt_n+1; blk_cmt lexbuf )
# 1110 "imp_lexer.ml"

  | 2 ->
# 143 "imp_lexer.mll"
      ( blk_cmt lexbuf )
# 1115 "imp_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_blk_cmt_rec lexbuf __ocaml_lex_state

and line_comment lexbuf =
   __ocaml_lex_line_comment_rec lexbuf 170
and __ocaml_lex_line_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 145 "imp_lexer.mll"
          ( Util.Log.add "end line comment\n"; token lexbuf )
# 1127 "imp_lexer.ml"

  | 1 ->
# 146 "imp_lexer.mll"
      ( line_comment lexbuf )
# 1132 "imp_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_line_comment_rec lexbuf __ocaml_lex_state

;;

