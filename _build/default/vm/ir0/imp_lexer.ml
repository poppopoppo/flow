# 1 "imp_lexer.mll"
 
    open Imp_parser
    exception Error of string

# 7 "imp_lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\161\255\162\255\005\000\167\255\088\000\089\000\090\000\
    \171\255\175\255\176\255\177\255\183\255\184\255\185\255\186\255\
    \187\255\188\255\189\255\194\255\195\255\200\255\083\000\202\255\
    \212\255\213\255\215\255\073\000\229\255\230\255\008\000\009\000\
    \192\000\018\000\241\255\000\000\109\000\075\000\137\000\115\000\
    \255\255\249\000\119\000\111\000\075\000\253\255\168\255\123\000\
    \164\000\011\001\060\000\023\001\078\001\127\000\249\255\250\255\
    \220\255\054\000\055\000\056\000\138\000\143\000\016\000\136\000\
    \247\255\139\000\245\255\001\000\056\000\036\000\243\255\242\255\
    \066\000\226\255\063\000\044\000\010\000\032\000\055\000\043\000\
    \079\000\102\000\021\001\204\255\205\255\206\255\207\255\192\000\
    \110\000\240\255\134\001\144\001\197\255\172\255\209\255\112\000\
    \208\255\182\255\082\000\235\255\203\255\232\255\196\255\085\000\
    \221\255\131\000\137\000\154\001\164\001\199\255\174\001\190\001\
    \198\255\192\255\193\255\190\255\191\255\178\255\179\255\180\255\
    \174\255\239\255\219\001\043\000\131\000\234\255\101\000\074\000\
    \120\000\236\255\237\255\222\255\225\255\233\255\218\255\201\255\
    \022\001\254\255\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\091\000\255\255\090\000\086\000\085\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\094\000\255\255\
    \255\255\255\255\255\255\036\000\255\255\255\255\024\000\038\000\
    \017\000\094\000\255\255\094\000\090\000\041\000\001\000\094\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\003\000\255\255\255\255\004\000\255\255\255\255\255\255\
    \255\255\028\000\027\000\082\000\011\000\007\000\255\255\255\255\
    \255\255\009\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \031\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\044\000\
    \039\000\255\255\255\255\255\255\255\255\255\255\255\255\045\000\
    \255\255\255\255\074\000\255\255\255\255\255\255\255\255\032\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\017\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\255\255\000\000\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\038\000\042\000\
    \000\000\255\255\042\000\043\000\255\255\000\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\255\255\255\255\255\255\000\000\000\000\
    \255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\000\000\000\000\000\000\255\255\
    \255\255\000\000\255\255\255\255\000\000\000\000\000\000\255\255\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\255\255\
    \000\000\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \137\000\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\003\000\003\000\000\000\000\000\003\000\003\000\003\000\
    \000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \003\000\012\000\039\000\017\000\007\000\003\000\018\000\014\000\
    \016\000\015\000\010\000\011\000\008\000\009\000\004\000\022\000\
    \036\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\027\000\038\000\029\000\013\000\028\000\024\000\
    \006\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\037\000\034\000\026\000\025\000\021\000\
    \023\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\020\000\031\000\019\000\030\000\046\000\
    \006\000\007\000\135\000\134\000\133\000\124\000\043\000\125\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\076\000\255\255\046\000\040\000\075\000\074\000\
    \078\000\040\000\082\000\080\000\079\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\061\000\
    \045\000\081\000\044\000\057\000\059\000\050\000\053\000\055\000\
    \054\000\077\000\073\000\072\000\071\000\067\000\060\000\065\000\
    \064\000\066\000\063\000\058\000\069\000\070\000\072\000\056\000\
    \120\000\118\000\035\000\116\000\115\000\117\000\114\000\113\000\
    \106\000\090\000\105\000\123\000\096\000\103\000\099\000\041\000\
    \119\000\104\000\101\000\041\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\110\000\048\000\
    \102\000\100\000\033\000\068\000\107\000\047\000\132\000\121\000\
    \097\000\098\000\093\000\126\000\131\000\051\000\095\000\127\000\
    \122\000\122\000\122\000\122\000\122\000\122\000\122\000\122\000\
    \122\000\122\000\130\000\129\000\128\000\000\000\000\000\124\000\
    \002\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\042\000\094\000\000\000\000\000\122\000\
    \138\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\123\000\000\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\062\000\000\000\000\000\000\000\042\000\000\000\000\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\042\000\
    \000\000\000\000\000\000\000\000\000\000\042\000\000\000\255\255\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\255\255\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\089\000\000\000\000\000\
    \000\000\000\000\000\000\083\000\084\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\085\000\086\000\087\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\088\000\091\000\091\000\
    \091\000\091\000\091\000\091\000\091\000\091\000\091\000\091\000\
    \091\000\091\000\091\000\091\000\091\000\091\000\091\000\091\000\
    \091\000\091\000\108\000\108\000\108\000\108\000\108\000\108\000\
    \108\000\108\000\108\000\108\000\108\000\108\000\108\000\108\000\
    \108\000\108\000\108\000\108\000\108\000\108\000\111\000\111\000\
    \111\000\111\000\111\000\111\000\111\000\111\000\111\000\111\000\
    \000\000\000\000\000\000\000\000\000\000\092\000\111\000\111\000\
    \111\000\111\000\111\000\111\000\111\000\111\000\111\000\111\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\109\000\121\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\122\000\122\000\122\000\122\000\122\000\
    \122\000\122\000\122\000\122\000\122\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\112\000\122\000\122\000\122\000\122\000\
    \122\000\122\000\122\000\122\000\122\000\122\000\122\000\122\000\
    \122\000\122\000\122\000\122\000\122\000\122\000\122\000\122\000\
    \122\000\122\000\122\000\122\000\122\000\122\000\000\000\000\000\
    \000\000\000\000\122\000\000\000\122\000\122\000\122\000\122\000\
    \122\000\122\000\122\000\122\000\122\000\122\000\122\000\122\000\
    \122\000\122\000\122\000\122\000\122\000\122\000\122\000\122\000\
    \122\000\122\000\122\000\122\000\122\000\122\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\000\000\003\000\003\000\
    \255\255\255\255\003\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\000\
    \006\000\007\000\022\000\027\000\030\000\031\000\037\000\031\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\033\000\038\000\036\000\039\000\033\000\033\000\
    \033\000\042\000\033\000\033\000\033\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\035\000\
    \044\000\033\000\043\000\035\000\035\000\047\000\050\000\053\000\
    \053\000\033\000\057\000\058\000\059\000\060\000\035\000\062\000\
    \063\000\065\000\061\000\035\000\068\000\069\000\072\000\035\000\
    \074\000\075\000\000\000\076\000\076\000\075\000\077\000\077\000\
    \078\000\088\000\078\000\031\000\095\000\079\000\098\000\039\000\
    \075\000\103\000\080\000\042\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\105\000\036\000\
    \079\000\080\000\000\000\067\000\106\000\036\000\123\000\032\000\
    \081\000\081\000\087\000\031\000\127\000\047\000\087\000\126\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\128\000\128\000\126\000\255\255\255\255\124\000\
    \000\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\041\000\087\000\255\255\255\255\032\000\
    \136\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\124\000\255\255\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\061\000\255\255\255\255\255\255\041\000\255\255\255\255\
    \051\000\051\000\051\000\051\000\051\000\051\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\041\000\
    \255\255\255\255\255\255\255\255\255\255\041\000\255\255\043\000\
    \255\255\255\255\255\255\039\000\255\255\255\255\255\255\042\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \255\255\038\000\255\255\255\255\255\255\255\255\255\255\052\000\
    \052\000\052\000\052\000\052\000\052\000\082\000\255\255\255\255\
    \255\255\255\255\255\255\082\000\082\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\082\000\082\000\082\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\052\000\
    \052\000\052\000\052\000\052\000\052\000\082\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \091\000\091\000\091\000\091\000\091\000\091\000\091\000\091\000\
    \091\000\091\000\107\000\107\000\107\000\107\000\107\000\107\000\
    \107\000\107\000\107\000\107\000\108\000\108\000\108\000\108\000\
    \108\000\108\000\108\000\108\000\108\000\108\000\110\000\110\000\
    \110\000\110\000\110\000\110\000\110\000\110\000\110\000\110\000\
    \255\255\255\255\255\255\255\255\255\255\091\000\111\000\111\000\
    \111\000\111\000\111\000\111\000\111\000\111\000\111\000\111\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\108\000\122\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\122\000\122\000\122\000\122\000\122\000\
    \122\000\122\000\122\000\122\000\122\000\255\255\136\000\255\255\
    \255\255\255\255\255\255\111\000\122\000\122\000\122\000\122\000\
    \122\000\122\000\122\000\122\000\122\000\122\000\122\000\122\000\
    \122\000\122\000\122\000\122\000\122\000\122\000\122\000\122\000\
    \122\000\122\000\122\000\122\000\122\000\122\000\255\255\255\255\
    \255\255\255\255\122\000\255\255\122\000\122\000\122\000\122\000\
    \122\000\122\000\122\000\122\000\122\000\122\000\122\000\122\000\
    \122\000\122\000\122\000\122\000\122\000\122\000\122\000\122\000\
    \122\000\122\000\122\000\122\000\122\000\122\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 20 "imp_lexer.mll"
                                                          lxm
# 274 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) (lexbuf.Lexing.lex_curr_pos + -1) in
# 20 "imp_lexer.mll"
                                                                    ( STG(Scanf.unescaped lxm) )
# 278 "imp_lexer.ml"

  | 1 ->
# 21 "imp_lexer.mll"
                    ( Util.pnt true "start line comment\n"; token lexbuf )
# 283 "imp_lexer.ml"

  | 2 ->
# 22 "imp_lexer.mll"
                          ( token lexbuf )
# 288 "imp_lexer.ml"

  | 3 ->
let
# 23 "imp_lexer.mll"
                      lxm
# 294 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 2) lexbuf.Lexing.lex_curr_pos in
# 23 "imp_lexer.mll"
                           ( R64(Int64.of_string lxm) )
# 298 "imp_lexer.ml"

  | 4 ->
let
# 24 "imp_lexer.mll"
                     lxm
# 304 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 3) lexbuf.Lexing.lex_curr_pos in
# 24 "imp_lexer.mll"
                          ( R64(Int64.of_string ("0x"^lxm)) )
# 308 "imp_lexer.ml"

  | 5 ->
# 25 "imp_lexer.mll"
              ( R2(false) )
# 313 "imp_lexer.ml"

  | 6 ->
# 26 "imp_lexer.mll"
              ( R2(true) )
# 318 "imp_lexer.ml"

  | 7 ->
# 27 "imp_lexer.mll"
            ( LCE )
# 323 "imp_lexer.ml"

  | 8 ->
# 28 "imp_lexer.mll"
             ( LCE_IR  )
# 328 "imp_lexer.ml"

  | 9 ->
# 29 "imp_lexer.mll"
              ( MDL )
# 333 "imp_lexer.ml"

  | 10 ->
# 30 "imp_lexer.mll"
              ( MDL_END )
# 338 "imp_lexer.ml"

  | 11 ->
# 31 "imp_lexer.mll"
           ( DTA )
# 343 "imp_lexer.ml"

  | 12 ->
# 32 "imp_lexer.mll"
               ( DTA_GRM )
# 348 "imp_lexer.ml"

  | 13 ->
# 33 "imp_lexer.mll"
             ( NOT_SPL )
# 353 "imp_lexer.ml"

  | 14 ->
# 34 "imp_lexer.mll"
            ( SLH )
# 358 "imp_lexer.ml"

  | 15 ->
# 35 "imp_lexer.mll"
            ( FOR_ALL )
# 363 "imp_lexer.ml"

  | 16 ->
let
# 36 "imp_lexer.mll"
               lxm
# 369 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_curr_pos + -1) in
# 36 "imp_lexer.mll"
                         ( VAL(lxm) )
# 373 "imp_lexer.ml"

  | 17 ->
let
# 37 "imp_lexer.mll"
              lxm
# 379 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 37 "imp_lexer.mll"
                  ( NAM(lxm) )
# 383 "imp_lexer.ml"

  | 18 ->
# 38 "imp_lexer.mll"
              ( OUT_IR )
# 388 "imp_lexer.ml"

  | 19 ->
# 39 "imp_lexer.mll"
              ( PRJ_IR  )
# 393 "imp_lexer.ml"

  | 20 ->
# 40 "imp_lexer.mll"
              ( CNS_IR  )
# 398 "imp_lexer.ml"

  | 21 ->
# 41 "imp_lexer.mll"
            ( INI_IR )
# 403 "imp_lexer.ml"

  | 22 ->
# 42 "imp_lexer.mll"
            ( MTC_IR )
# 408 "imp_lexer.ml"

  | 23 ->
# 43 "imp_lexer.mll"
            ( ISO )
# 413 "imp_lexer.ml"

  | 24 ->
# 44 "imp_lexer.mll"
          ( LET )
# 418 "imp_lexer.ml"

  | 25 ->
# 45 "imp_lexer.mll"
          ( OP )
# 423 "imp_lexer.ml"

  | 26 ->
# 46 "imp_lexer.mll"
          ( LB )
# 428 "imp_lexer.ml"

  | 27 ->
# 47 "imp_lexer.mll"
           ( ARR )
# 433 "imp_lexer.ml"

  | 28 ->
# 48 "imp_lexer.mll"
           ( ARR_REV )
# 438 "imp_lexer.ml"

  | 29 ->
# 49 "imp_lexer.mll"
             ( ARR_REV_IN )
# 443 "imp_lexer.ml"

  | 30 ->
let
# 50 "imp_lexer.mll"
                 lxm
# 449 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_curr_pos + -2) in
# 50 "imp_lexer.mll"
                           ( IN(String.length lxm) )
# 453 "imp_lexer.ml"

  | 31 ->
let
# 51 "imp_lexer.mll"
                      lxm
# 459 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 2) lexbuf.Lexing.lex_curr_pos in
# 51 "imp_lexer.mll"
                            ( OUT(String.length lxm) )
# 463 "imp_lexer.ml"

  | 32 ->
# 52 "imp_lexer.mll"
            ( SRC )
# 468 "imp_lexer.ml"

  | 33 ->
# 53 "imp_lexer.mll"
              ( SRC_OUT )
# 473 "imp_lexer.ml"

  | 34 ->
# 54 "imp_lexer.mll"
              ( SRC_IL )
# 478 "imp_lexer.ml"

  | 35 ->
# 55 "imp_lexer.mll"
           ( EXN )
# 483 "imp_lexer.ml"

  | 36 ->
# 56 "imp_lexer.mll"
          ( CLN )
# 488 "imp_lexer.ml"

  | 37 ->
# 57 "imp_lexer.mll"
           ( CLN2 )
# 493 "imp_lexer.ml"

  | 38 ->
# 58 "imp_lexer.mll"
          ( SPL )
# 498 "imp_lexer.ml"

  | 39 ->
# 59 "imp_lexer.mll"
             ( AGL )
# 503 "imp_lexer.ml"

  | 40 ->
# 60 "imp_lexer.mll"
          ( R_BLK )
# 508 "imp_lexer.ml"

  | 41 ->
# 61 "imp_lexer.mll"
          ( L_BLK )
# 513 "imp_lexer.ml"

  | 42 ->
# 62 "imp_lexer.mll"
          ( SEQ )
# 518 "imp_lexer.ml"

  | 43 ->
# 63 "imp_lexer.mll"
           ( MTC )
# 523 "imp_lexer.ml"

  | 44 ->
# 64 "imp_lexer.mll"
              ( COPRD )
# 528 "imp_lexer.ml"

  | 45 ->
# 65 "imp_lexer.mll"
             ( COPRD_END )
# 533 "imp_lexer.ml"

  | 46 ->
# 66 "imp_lexer.mll"
              ( COPRD_PTN )
# 538 "imp_lexer.ml"

  | 47 ->
# 67 "imp_lexer.mll"
               ( COPRD_PTN_END )
# 543 "imp_lexer.ml"

  | 48 ->
# 68 "imp_lexer.mll"
              ( PRD )
# 548 "imp_lexer.ml"

  | 49 ->
# 69 "imp_lexer.mll"
            ( EOP )
# 553 "imp_lexer.ml"

  | 50 ->
# 70 "imp_lexer.mll"
            ( COPRD_END )
# 558 "imp_lexer.ml"

  | 51 ->
# 71 "imp_lexer.mll"
            ( PRD_END )
# 563 "imp_lexer.ml"

  | 52 ->
# 72 "imp_lexer.mll"
            ( DEF )
# 568 "imp_lexer.ml"

  | 53 ->
# 73 "imp_lexer.mll"
          ( ACT )
# 573 "imp_lexer.ml"

  | 54 ->
# 74 "imp_lexer.mll"
            ( CST )
# 578 "imp_lexer.ml"

  | 55 ->
# 75 "imp_lexer.mll"
          ( WC )
# 583 "imp_lexer.ml"

  | 56 ->
let
# 76 "imp_lexer.mll"
                        lxm
# 589 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 4) (lexbuf.Lexing.lex_curr_pos + -1) in
# 76 "imp_lexer.mll"
                                 ( INJ(int_of_string lxm) )
# 593 "imp_lexer.ml"

  | 57 ->
let
# 77 "imp_lexer.mll"
                        lxm
# 599 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 4) (lexbuf.Lexing.lex_curr_pos + -1) in
# 77 "imp_lexer.mll"
                                 ( CHO(int_of_string lxm) )
# 603 "imp_lexer.ml"

  | 58 ->
let
# 78 "imp_lexer.mll"
                        lxm
# 609 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 4) (lexbuf.Lexing.lex_curr_pos + -1) in
# 78 "imp_lexer.mll"
                                 ( AGL_OP(int_of_string lxm) )
# 613 "imp_lexer.ml"

  | 59 ->
# 79 "imp_lexer.mll"
            ( VCT )
# 618 "imp_lexer.ml"

  | 60 ->
# 80 "imp_lexer.mll"
          ( L_RCD )
# 623 "imp_lexer.ml"

  | 61 ->
# 81 "imp_lexer.mll"
          ( R_RCD )
# 628 "imp_lexer.ml"

  | 62 ->
# 82 "imp_lexer.mll"
            ( L_LST )
# 633 "imp_lexer.ml"

  | 63 ->
# 83 "imp_lexer.mll"
            ( R_LST )
# 638 "imp_lexer.ml"

  | 64 ->
# 84 "imp_lexer.mll"
            ( L_OPN )
# 643 "imp_lexer.ml"

  | 65 ->
# 85 "imp_lexer.mll"
            ( R_OPN )
# 648 "imp_lexer.ml"

  | 66 ->
# 86 "imp_lexer.mll"
          ( SGN )
# 653 "imp_lexer.ml"

  | 67 ->
# 87 "imp_lexer.mll"
          ( VCT_INI )
# 658 "imp_lexer.ml"

  | 68 ->
# 88 "imp_lexer.mll"
          ( L_PRN )
# 663 "imp_lexer.ml"

  | 69 ->
# 89 "imp_lexer.mll"
          ( R_PRN )
# 668 "imp_lexer.ml"

  | 70 ->
# 90 "imp_lexer.mll"
           ( DSH )
# 673 "imp_lexer.ml"

  | 71 ->
# 91 "imp_lexer.mll"
          ( EQ )
# 678 "imp_lexer.ml"

  | 72 ->
# 92 "imp_lexer.mll"
          ( EXP )
# 683 "imp_lexer.ml"

  | 73 ->
# 93 "imp_lexer.mll"
            ( APP )
# 688 "imp_lexer.ml"

  | 74 ->
# 94 "imp_lexer.mll"
            ( PRJ )
# 693 "imp_lexer.ml"

  | 75 ->
# 95 "imp_lexer.mll"
            ( Z )
# 698 "imp_lexer.ml"

  | 76 ->
# 96 "imp_lexer.mll"
            ( N )
# 703 "imp_lexer.ml"

  | 77 ->
# 97 "imp_lexer.mll"
            ( TYP_STG )
# 708 "imp_lexer.ml"

  | 78 ->
# 98 "imp_lexer.mll"
          ( PLS )
# 713 "imp_lexer.ml"

  | 79 ->
# 99 "imp_lexer.mll"
          ( MLT )
# 718 "imp_lexer.ml"

  | 80 ->
# 100 "imp_lexer.mll"
          ( MNS )
# 723 "imp_lexer.ml"

  | 81 ->
# 101 "imp_lexer.mll"
            ( GRM )
# 728 "imp_lexer.ml"

  | 82 ->
# 102 "imp_lexer.mll"
           ( NOT )
# 733 "imp_lexer.ml"

  | 83 ->
# 103 "imp_lexer.mll"
              ( ORD_LEX_COPRD )
# 738 "imp_lexer.ml"

  | 84 ->
# 104 "imp_lexer.mll"
          ( CMM )
# 743 "imp_lexer.ml"

  | 85 ->
let
# 105 "imp_lexer.mll"
                      lxm
# 749 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) lexbuf.Lexing.lex_curr_pos in
# 105 "imp_lexer.mll"
                           ( ROT (String.length lxm) )
# 753 "imp_lexer.ml"

  | 86 ->
let
# 106 "imp_lexer.mll"
                      lxm
# 759 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) lexbuf.Lexing.lex_curr_pos in
# 106 "imp_lexer.mll"
                           ( SLF (String.length lxm) )
# 763 "imp_lexer.ml"

  | 87 ->
let
# 107 "imp_lexer.mll"
                 lxm
# 769 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_curr_pos + -1) in
# 107 "imp_lexer.mll"
                           ( IDX (int_of_string lxm) )
# 773 "imp_lexer.ml"

  | 88 ->
# 108 "imp_lexer.mll"
          ( DOT )
# 778 "imp_lexer.ml"

  | 89 ->
# 109 "imp_lexer.mll"
             ( AGL )
# 783 "imp_lexer.ml"

  | 90 ->
let
# 110 "imp_lexer.mll"
                lxm
# 789 "imp_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 110 "imp_lexer.mll"
                     ( INT (int_of_string lxm) )
# 793 "imp_lexer.ml"

  | 91 ->
# 111 "imp_lexer.mll"
                    ( token lexbuf                         )
# 798 "imp_lexer.ml"

  | 92 ->
# 112 "imp_lexer.mll"
            ( NL )
# 803 "imp_lexer.ml"

  | 93 ->
# 113 "imp_lexer.mll"
                    ( EOF               )
# 808 "imp_lexer.ml"

  | 94 ->
# 114 "imp_lexer.mll"
                    ( raise (Error (Printf.sprintf
                      "At offset %d: unexpected character.\n"
                      (Lexing.lexeme_start lexbuf))) )
# 815 "imp_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and line_comment lexbuf =
   __ocaml_lex_line_comment_rec lexbuf 136
and __ocaml_lex_line_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 118 "imp_lexer.mll"
          ( Util.pnt true "end line comment\n"; token lexbuf )
# 827 "imp_lexer.ml"

  | 1 ->
# 119 "imp_lexer.mll"
      ( line_comment lexbuf )
# 832 "imp_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_line_comment_rec lexbuf __ocaml_lex_state

;;

